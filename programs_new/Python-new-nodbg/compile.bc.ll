; ModuleID = './compile.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, {}*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { {}*, {}*, {}*, {}*, {}*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, {}*, {}*, {}*, {}*, {}*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, {}*, {}*, {}*, {}*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, {}*, {}*, {}*, {}*, {}*, {}*, {}*, {}*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, {}*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, {}*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, {}*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, {}*, i32, i8* }
%struct.PyMemberDef = type opaque
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct.PyASCIIObject = type { %struct._object, i64, i64, %struct.anon, i32* }
%struct.anon = type { i32 }
%struct.PyCompactUnicodeObject = type { %struct.PyASCIIObject, i64, i8*, i64 }
%struct.PyUnicodeObject = type { %struct.PyCompactUnicodeObject, %union.anon }
%union.anon = type { i8* }
%struct.PyCodeObject = type { %struct._object, i32, i32, i32, i32, i32, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i8*, %struct._object*, %struct._object*, i32, %struct._object*, i8*, %struct._object* }
%struct._mod = type { i32, %union.anon.0 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { %struct.asdl_seq* }
%struct.asdl_seq = type { i64, [1 x i8*] }
%struct.PyCompilerFlags = type { i32 }
%struct._arena = type opaque
%struct.compiler = type { %struct._object*, %struct.symtable*, %struct.PyFutureFeatures*, %struct.PyCompilerFlags*, i32, i32, i32, %struct.compiler_unit*, %struct._object*, %struct._arena* }
%struct.symtable = type { %struct._object*, %struct._symtable_entry*, %struct._symtable_entry*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, %struct.PyFutureFeatures*, i32, i32 }
%struct._symtable_entry = type { %struct._object, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, i8, i32, i32, i32, i32, i32, %struct.symtable* }
%struct.PyFutureFeatures = type { i32, i32 }
%struct.compiler_unit = type { %struct._symtable_entry*, %struct._object*, %struct._object*, i32, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i64, i64, %struct.basicblock_*, %struct.basicblock_*, i32, [20 x %struct.fblockinfo], i32, i32, i32, i32 }
%struct.basicblock_ = type { %struct.basicblock_*, i32, i32, %struct.instr*, %struct.basicblock_*, i8, i32, i32 }
%struct.instr = type { i8, i8, i32, %struct.basicblock_*, i32 }
%struct.fblockinfo = type { i32, %struct.basicblock_* }
%struct._stmt = type { i32, %union.anon.35, i32, i32 }
%union.anon.35 = type { %struct.anon.37 }
%struct.anon.37 = type { %struct._object*, %struct.asdl_seq*, %struct.asdl_seq*, %struct._expr*, %struct._expr*, %struct.asdl_seq*, %struct.asdl_seq* }
%struct._expr = type { i32, %union.anon.4, i32, i32 }
%union.anon.4 = type { %struct.anon.19 }
%struct.anon.19 = type { %struct._expr*, %struct.asdl_seq*, %struct.asdl_seq*, %struct._expr*, %struct._expr* }
%struct.anon.2 = type { %struct.asdl_seq* }
%struct.anon.3 = type { %struct._expr* }
%struct._node = type { i16, i8*, i32, i32, i32, %struct._node* }
%struct.anon.53 = type { %struct._expr* }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.anon.38 = type { %struct._expr* }
%struct.anon.39 = type { %struct.asdl_seq* }
%struct.anon.40 = type { %struct.asdl_seq*, %struct._expr* }
%struct.anon.46 = type { %struct._expr*, %struct._expr* }
%struct.anon.6 = type { %struct._expr*, i32, %struct._expr* }
%struct.anon.7 = type { i32, %struct._expr* }
%struct.anon.10 = type { %struct.asdl_seq*, %struct.asdl_seq* }
%struct.anon.11 = type { %struct.asdl_seq* }
%struct.anon.16 = type { %struct._expr* }
%struct.anon.17 = type { %struct._expr* }
%struct.anon.20 = type { %struct._object* }
%struct.anon.21 = type { %struct._object* }
%struct.anon.22 = type { %struct._object* }
%struct.anon.23 = type { %struct._object* }
%struct.anon.24 = type { %struct._expr*, %struct._object*, i32 }
%struct.anon.25 = type { %struct._expr*, %struct._slice*, i32 }
%struct._slice = type { i32, %union.anon.26 }
%union.anon.26 = type { %struct.anon.27 }
%struct.anon.27 = type { %struct._expr*, %struct._expr*, %struct._expr* }
%struct.anon.30 = type { %struct._expr*, i32 }
%struct.anon.31 = type { %struct._object*, i32 }
%struct.assembler = type { %struct._object*, i32, i32, %struct.basicblock_**, %struct._object*, i32, i32, i32 }
%struct.Py_complex = type { double, double }
%struct.PyFloatObject = type { %struct._object, double }
%struct._arguments = type { %struct.asdl_seq*, %struct._arg*, %struct.asdl_seq*, %struct.asdl_seq*, %struct._arg*, %struct.asdl_seq* }
%struct._arg = type { %struct._object*, %struct._expr*, i32, i32 }
%struct.anon.36 = type { %struct._object*, %struct._arguments*, %struct.asdl_seq*, %struct.asdl_seq*, %struct._expr* }
%struct.anon.41 = type { %struct._expr*, i32, %struct._expr* }
%struct.anon.42 = type { %struct._expr*, %struct._expr*, %struct.asdl_seq*, %struct.asdl_seq* }
%struct.anon.43 = type { %struct._expr*, %struct.asdl_seq*, %struct.asdl_seq* }
%struct.anon.44 = type { %struct._expr*, %struct.asdl_seq*, %struct.asdl_seq* }
%struct.anon.47 = type { %struct.asdl_seq*, %struct.asdl_seq*, %struct.asdl_seq*, %struct.asdl_seq* }
%struct.anon.48 = type { %struct._expr*, %struct._expr* }
%struct.anon.33 = type { %struct.asdl_seq*, i32 }
%struct._alias = type { %struct._object*, %struct._object* }
%struct.anon.49 = type { %struct.asdl_seq* }
%struct.anon.50 = type { %struct._object*, %struct.asdl_seq*, i32 }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct._withitem = type { %struct._expr*, %struct._expr* }
%struct.anon.45 = type { %struct.asdl_seq*, %struct.asdl_seq* }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct._keyword = type { %struct._object*, %struct._expr* }
%struct._excepthandler = type { i32, %union.anon.54, i32, i32 }
%union.anon.54 = type { %struct.anon.55 }
%struct.anon.55 = type { %struct._expr*, %struct._object*, %struct.asdl_seq* }
%struct.anon.5 = type { i32, %struct.asdl_seq* }
%struct.anon.8 = type { %struct._arguments*, %struct._expr* }
%struct.anon.9 = type { %struct._expr*, %struct._expr*, %struct._expr* }
%struct.anon.15 = type { %struct._expr*, %struct.asdl_seq* }
%struct.anon.12 = type { %struct._expr*, %struct.asdl_seq* }
%struct.anon.13 = type { %struct._expr*, %struct.asdl_seq* }
%struct.anon.14 = type { %struct._expr*, %struct._expr*, %struct.asdl_seq* }
%struct.anon.18 = type { %struct._expr*, %struct.asdl_int_seq*, %struct.asdl_seq* }
%struct.asdl_int_seq = type { i64, [1 x i32] }
%struct.anon.29 = type { %struct._expr* }
%struct.anon.28 = type { %struct.asdl_seq* }
%struct.anon.32 = type { %struct.asdl_seq*, i32 }
%struct._comprehension = type { %struct._expr*, %struct._expr*, %struct.asdl_seq* }

@Py_OptimizeFlag = global i32 0, align 4
@PyExc_OverflowError = external global %struct._object*, align 8
@.str = private unnamed_addr constant [43 x i8] c"private identifier too large to be mangled\00", align 1
@__doc__ = internal global %struct._object* null, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"__doc__\00", align 1
@PyExc_SystemError = external global %struct._object*, align 8
@.str.2 = private unnamed_addr constant [12 x i8] c"no symtable\00", align 1
@compiler_mod.module = internal global %struct._object* null, align 8
@.str.3 = private unnamed_addr constant [9 x i8] c"<module>\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"suite should not be possible\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"module kind %d should not be possible\00", align 1
@compiler_enter_scope.PyId___class__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0), %struct._object* null }, align 8
@.str.6 = private unnamed_addr constant [10 x i8] c"__class__\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"compile.c compiler unit\00", align 1
@compiler_set_qualname.dot = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i32 0, i32 0), %struct._object* null }, align 8
@.str.8 = private unnamed_addr constant [2 x i8] c".\00", align 1
@compiler_set_qualname.dot_locals = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), %struct._object* null }, align 8
@.str.9 = private unnamed_addr constant [10 x i8] c".<locals>\00", align 1
@.str.10 = private unnamed_addr constant [33 x i8] c"param invalid for deref variable\00", align 1
@.str.11 = private unnamed_addr constant [33 x i8] c"param invalid for local variable\00", align 1
@.str.12 = private unnamed_addr constant [34 x i8] c"param invalid for global variable\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"param invalid for name variable\00", align 1
@PyFloat_Type = external global %struct._typeobject, align 8
@_Py_NoneStruct = external global %struct._object, align 8
@PyComplex_Type = external global %struct._typeobject, align 8
@.str.14 = private unnamed_addr constant [22 x i8] c"compiler_exit_scope()\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"'return' outside function\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"'break' outside loop\00", align 1
@compiler_visit_annotations.return_str = internal global %struct._object* null, align 8
@.str.17 = private unnamed_addr constant [7 x i8] c"return\00", align 1
@PyExc_SyntaxError = external global %struct._object*, align 8
@.str.18 = private unnamed_addr constant [21 x i8] c"too many annotations\00", align 1
@stderr = external global %struct._IO_FILE*, align 8
@.str.19 = private unnamed_addr constant [42 x i8] c"lookup %s in %s %d %d\0Afreevars of %s: %s\0A\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"compiler_make_closure()\00", align 1
@.str.21 = private unnamed_addr constant [74 x i8] c"unknown scope for %.100s in %.100s(%s)\0Asymbols: %s\0Alocals: %s\0Aglobals: %s\00", align 1
@.str.22 = private unnamed_addr constant [9 x i8] c"__name__\00", align 1
@.str.23 = private unnamed_addr constant [11 x i8] c"__module__\00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"__qualname__\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"(OiiO)\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"(zO)\00", align 1
@.str.27 = private unnamed_addr constant [48 x i8] c"invalid node type (%d) for augmented assignment\00", align 1
@.str.28 = private unnamed_addr constant [44 x i8] c"inplace binary op %d should not be possible\00", align 1
@.str.29 = private unnamed_addr constant [34 x i8] c"too many statically nested blocks\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"__debug__\00", align 1
@_Py_TrueStruct = external global %struct._longobject, align 8
@_Py_FalseStruct = external global %struct._longobject, align 8
@.str.31 = private unnamed_addr constant [31 x i8] c"default 'except:' must be last\00", align 1
@compiler_assert.assertion_error = internal global %struct._object* null, align 8
@.str.32 = private unnamed_addr constant [15 x i8] c"AssertionError\00", align 1
@.str.33 = private unnamed_addr constant [54 x i8] c"assertion is always true, perhaps remove parentheses?\00", align 1
@PyExc_SyntaxWarning = external global %struct._object*, align 8
@compiler_from_import.empty_string = internal global %struct._object* null, align 8
@.str.34 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.35 = private unnamed_addr constant [11 x i8] c"__future__\00", align 1
@.str.36 = private unnamed_addr constant [64 x i8] c"from __future__ imports must occur at the beginning of the file\00", align 1
@compiler_continue.LOOP_ERROR_MSG = internal constant [32 x i8] c"'continue' not properly in loop\00", align 16
@compiler_continue.IN_FINALLY_ERROR_MSG = internal constant [49 x i8] c"'continue' not supported inside 'finally' clause\00", align 16
@.str.37 = private unnamed_addr constant [25 x i8] c"'yield' outside function\00", align 1
@_Py_EllipsisObject = external global %struct._object, align 8
@.str.38 = private unnamed_addr constant [38 x i8] c"param invalid in attribute expression\00", align 1
@.str.39 = private unnamed_addr constant [38 x i8] c"param invalid in subscript expression\00", align 1
@.str.40 = private unnamed_addr constant [53 x i8] c"starred assignment target must be in a list or tuple\00", align 1
@.str.41 = private unnamed_addr constant [53 x i8] c"can use starred expression only as assignment target\00", align 1
@.str.42 = private unnamed_addr constant [36 x i8] c"binary op %d should not be possible\00", align 1
@.str.43 = private unnamed_addr constant [35 x i8] c"unary op %d should not be possible\00", align 1
@compiler_lambda.name = internal global %struct._object* null, align 8
@.str.44 = private unnamed_addr constant [9 x i8] c"<lambda>\00", align 1
@compiler_genexp.name = internal global %struct._object* null, align 8
@.str.45 = private unnamed_addr constant [10 x i8] c"<genexpr>\00", align 1
@.str.46 = private unnamed_addr constant [30 x i8] c"unknown comprehension type %d\00", align 1
@compiler_listcomp.name = internal global %struct._object* null, align 8
@.str.47 = private unnamed_addr constant [11 x i8] c"<listcomp>\00", align 1
@compiler_setcomp.name = internal global %struct._object* null, align 8
@.str.48 = private unnamed_addr constant [10 x i8] c"<setcomp>\00", align 1
@compiler_dictcomp.name = internal global %struct._object* null, align 8
@.str.49 = private unnamed_addr constant [11 x i8] c"<dictcomp>\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"index\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"slice\00", align 1
@.str.52 = private unnamed_addr constant [15 x i8] c"extended slice\00", align 1
@.str.53 = private unnamed_addr constant [26 x i8] c"invalid subscript kind %d\00", align 1
@.str.54 = private unnamed_addr constant [39 x i8] c"extended slice invalid in nested slice\00", align 1
@.str.55 = private unnamed_addr constant [33 x i8] c"invalid %s kind %d in subscript\0A\00", align 1
@.str.56 = private unnamed_addr constant [50 x i8] c"too many expressions in star-unpacking assignment\00", align 1
@.str.57 = private unnamed_addr constant [38 x i8] c"two starred expressions in assignment\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"opcode = %d\0A\00", align 1
@.str.59 = private unnamed_addr constant [30 x i8] c"PyCompile_OpcodeStackEffect()\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @_Py_Mangle(%struct._object* %privateobj, %struct._object* %ident) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %privateobj.addr = alloca %struct._object*, align 8
  %ident.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %nlen = alloca i64, align 8
  %plen = alloca i64, align 8
  %ipriv = alloca i64, align 8
  %maxchar = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp660 = alloca %struct._object*, align 8
  store %struct._object* %privateobj, %struct._object** %privateobj.addr, align 8
  store %struct._object* %ident, %struct._object** %ident.addr, align 8
  %0 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags, align 8
  %and = and i64 %3, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %lor.lhs.false.2, label %if.then

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** %ident.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %5, i32 0, i32 3
  %6 = bitcast %struct.anon* %state to i32*
  %bf.load = load i32, i32* %6, align 4
  %bf.lshr = lshr i32 %bf.load, 2
  %bf.clear = and i32 %bf.lshr, 7
  %cmp3 = icmp eq i32 %bf.clear, 1
  br i1 %cmp3, label %cond.true, label %cond.false.19

cond.true:                                        ; preds = %lor.lhs.false.2
  %7 = load %struct._object*, %struct._object** %ident.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyASCIIObject*
  %state4 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %8, i32 0, i32 3
  %9 = bitcast %struct.anon* %state4 to i32*
  %bf.load5 = load i32, i32* %9, align 4
  %bf.lshr6 = lshr i32 %bf.load5, 5
  %bf.clear7 = and i32 %bf.lshr6, 1
  %tobool = icmp ne i32 %bf.clear7, 0
  br i1 %tobool, label %cond.true.8, label %cond.false.16

cond.true.8:                                      ; preds = %cond.true
  %10 = load %struct._object*, %struct._object** %ident.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyASCIIObject*
  %state9 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %11, i32 0, i32 3
  %12 = bitcast %struct.anon* %state9 to i32*
  %bf.load10 = load i32, i32* %12, align 4
  %bf.lshr11 = lshr i32 %bf.load10, 6
  %bf.clear12 = and i32 %bf.lshr11, 1
  %tobool13 = icmp ne i32 %bf.clear12, 0
  br i1 %tobool13, label %cond.true.14, label %cond.false

cond.true.14:                                     ; preds = %cond.true.8
  %13 = load %struct._object*, %struct._object** %ident.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyASCIIObject*
  %add.ptr = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %14, i64 1
  %15 = bitcast %struct.PyASCIIObject* %add.ptr to i8*
  br label %cond.end

cond.false:                                       ; preds = %cond.true.8
  %16 = load %struct._object*, %struct._object** %ident.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyCompactUnicodeObject*
  %add.ptr15 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %17, i64 1
  %18 = bitcast %struct.PyCompactUnicodeObject* %add.ptr15 to i8*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.14
  %cond = phi i8* [ %15, %cond.true.14 ], [ %18, %cond.false ]
  br label %cond.end.17

cond.false.16:                                    ; preds = %cond.true
  %19 = load %struct._object*, %struct._object** %ident.addr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyUnicodeObject*
  %data = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %20, i32 0, i32 1
  %any = bitcast %union.anon* %data to i8**
  %21 = load i8*, i8** %any, align 8
  br label %cond.end.17

cond.end.17:                                      ; preds = %cond.false.16, %cond.end
  %cond18 = phi i8* [ %cond, %cond.end ], [ %21, %cond.false.16 ]
  %arrayidx = getelementptr i8, i8* %cond18, i64 0
  %22 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %22 to i32
  br label %cond.end.77

cond.false.19:                                    ; preds = %lor.lhs.false.2
  %23 = load %struct._object*, %struct._object** %ident.addr, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyASCIIObject*
  %state20 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %24, i32 0, i32 3
  %25 = bitcast %struct.anon* %state20 to i32*
  %bf.load21 = load i32, i32* %25, align 4
  %bf.lshr22 = lshr i32 %bf.load21, 2
  %bf.clear23 = and i32 %bf.lshr22, 7
  %cmp24 = icmp eq i32 %bf.clear23, 2
  br i1 %cmp24, label %cond.true.26, label %cond.false.51

cond.true.26:                                     ; preds = %cond.false.19
  %26 = load %struct._object*, %struct._object** %ident.addr, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyASCIIObject*
  %state27 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %27, i32 0, i32 3
  %28 = bitcast %struct.anon* %state27 to i32*
  %bf.load28 = load i32, i32* %28, align 4
  %bf.lshr29 = lshr i32 %bf.load28, 5
  %bf.clear30 = and i32 %bf.lshr29, 1
  %tobool31 = icmp ne i32 %bf.clear30, 0
  br i1 %tobool31, label %cond.true.32, label %cond.false.44

cond.true.32:                                     ; preds = %cond.true.26
  %29 = load %struct._object*, %struct._object** %ident.addr, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyASCIIObject*
  %state33 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %30, i32 0, i32 3
  %31 = bitcast %struct.anon* %state33 to i32*
  %bf.load34 = load i32, i32* %31, align 4
  %bf.lshr35 = lshr i32 %bf.load34, 6
  %bf.clear36 = and i32 %bf.lshr35, 1
  %tobool37 = icmp ne i32 %bf.clear36, 0
  br i1 %tobool37, label %cond.true.38, label %cond.false.40

cond.true.38:                                     ; preds = %cond.true.32
  %32 = load %struct._object*, %struct._object** %ident.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyASCIIObject*
  %add.ptr39 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %33, i64 1
  %34 = bitcast %struct.PyASCIIObject* %add.ptr39 to i8*
  br label %cond.end.42

cond.false.40:                                    ; preds = %cond.true.32
  %35 = load %struct._object*, %struct._object** %ident.addr, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyCompactUnicodeObject*
  %add.ptr41 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %36, i64 1
  %37 = bitcast %struct.PyCompactUnicodeObject* %add.ptr41 to i8*
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.false.40, %cond.true.38
  %cond43 = phi i8* [ %34, %cond.true.38 ], [ %37, %cond.false.40 ]
  br label %cond.end.47

cond.false.44:                                    ; preds = %cond.true.26
  %38 = load %struct._object*, %struct._object** %ident.addr, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyUnicodeObject*
  %data45 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %39, i32 0, i32 1
  %any46 = bitcast %union.anon* %data45 to i8**
  %40 = load i8*, i8** %any46, align 8
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.44, %cond.end.42
  %cond48 = phi i8* [ %cond43, %cond.end.42 ], [ %40, %cond.false.44 ]
  %41 = bitcast i8* %cond48 to i16*
  %arrayidx49 = getelementptr i16, i16* %41, i64 0
  %42 = load i16, i16* %arrayidx49, align 2
  %conv50 = zext i16 %42 to i32
  br label %cond.end.75

cond.false.51:                                    ; preds = %cond.false.19
  %43 = load %struct._object*, %struct._object** %ident.addr, align 8
  %44 = bitcast %struct._object* %43 to %struct.PyASCIIObject*
  %state52 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %44, i32 0, i32 3
  %45 = bitcast %struct.anon* %state52 to i32*
  %bf.load53 = load i32, i32* %45, align 4
  %bf.lshr54 = lshr i32 %bf.load53, 5
  %bf.clear55 = and i32 %bf.lshr54, 1
  %tobool56 = icmp ne i32 %bf.clear55, 0
  br i1 %tobool56, label %cond.true.57, label %cond.false.69

cond.true.57:                                     ; preds = %cond.false.51
  %46 = load %struct._object*, %struct._object** %ident.addr, align 8
  %47 = bitcast %struct._object* %46 to %struct.PyASCIIObject*
  %state58 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %47, i32 0, i32 3
  %48 = bitcast %struct.anon* %state58 to i32*
  %bf.load59 = load i32, i32* %48, align 4
  %bf.lshr60 = lshr i32 %bf.load59, 6
  %bf.clear61 = and i32 %bf.lshr60, 1
  %tobool62 = icmp ne i32 %bf.clear61, 0
  br i1 %tobool62, label %cond.true.63, label %cond.false.65

cond.true.63:                                     ; preds = %cond.true.57
  %49 = load %struct._object*, %struct._object** %ident.addr, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyASCIIObject*
  %add.ptr64 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %50, i64 1
  %51 = bitcast %struct.PyASCIIObject* %add.ptr64 to i8*
  br label %cond.end.67

cond.false.65:                                    ; preds = %cond.true.57
  %52 = load %struct._object*, %struct._object** %ident.addr, align 8
  %53 = bitcast %struct._object* %52 to %struct.PyCompactUnicodeObject*
  %add.ptr66 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %53, i64 1
  %54 = bitcast %struct.PyCompactUnicodeObject* %add.ptr66 to i8*
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.false.65, %cond.true.63
  %cond68 = phi i8* [ %51, %cond.true.63 ], [ %54, %cond.false.65 ]
  br label %cond.end.72

cond.false.69:                                    ; preds = %cond.false.51
  %55 = load %struct._object*, %struct._object** %ident.addr, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyUnicodeObject*
  %data70 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %56, i32 0, i32 1
  %any71 = bitcast %union.anon* %data70 to i8**
  %57 = load i8*, i8** %any71, align 8
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.69, %cond.end.67
  %cond73 = phi i8* [ %cond68, %cond.end.67 ], [ %57, %cond.false.69 ]
  %58 = bitcast i8* %cond73 to i32*
  %arrayidx74 = getelementptr i32, i32* %58, i64 0
  %59 = load i32, i32* %arrayidx74, align 4
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.end.72, %cond.end.47
  %cond76 = phi i32 [ %conv50, %cond.end.47 ], [ %59, %cond.end.72 ]
  br label %cond.end.77

cond.end.77:                                      ; preds = %cond.end.75, %cond.end.17
  %cond78 = phi i32 [ %conv, %cond.end.17 ], [ %cond76, %cond.end.75 ]
  %cmp79 = icmp ne i32 %cond78, 95
  br i1 %cmp79, label %if.then, label %lor.lhs.false.81

lor.lhs.false.81:                                 ; preds = %cond.end.77
  %60 = load %struct._object*, %struct._object** %ident.addr, align 8
  %61 = bitcast %struct._object* %60 to %struct.PyASCIIObject*
  %state82 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %61, i32 0, i32 3
  %62 = bitcast %struct.anon* %state82 to i32*
  %bf.load83 = load i32, i32* %62, align 4
  %bf.lshr84 = lshr i32 %bf.load83, 2
  %bf.clear85 = and i32 %bf.lshr84, 7
  %cmp86 = icmp eq i32 %bf.clear85, 1
  br i1 %cmp86, label %cond.true.88, label %cond.false.113

cond.true.88:                                     ; preds = %lor.lhs.false.81
  %63 = load %struct._object*, %struct._object** %ident.addr, align 8
  %64 = bitcast %struct._object* %63 to %struct.PyASCIIObject*
  %state89 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %64, i32 0, i32 3
  %65 = bitcast %struct.anon* %state89 to i32*
  %bf.load90 = load i32, i32* %65, align 4
  %bf.lshr91 = lshr i32 %bf.load90, 5
  %bf.clear92 = and i32 %bf.lshr91, 1
  %tobool93 = icmp ne i32 %bf.clear92, 0
  br i1 %tobool93, label %cond.true.94, label %cond.false.106

cond.true.94:                                     ; preds = %cond.true.88
  %66 = load %struct._object*, %struct._object** %ident.addr, align 8
  %67 = bitcast %struct._object* %66 to %struct.PyASCIIObject*
  %state95 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %67, i32 0, i32 3
  %68 = bitcast %struct.anon* %state95 to i32*
  %bf.load96 = load i32, i32* %68, align 4
  %bf.lshr97 = lshr i32 %bf.load96, 6
  %bf.clear98 = and i32 %bf.lshr97, 1
  %tobool99 = icmp ne i32 %bf.clear98, 0
  br i1 %tobool99, label %cond.true.100, label %cond.false.102

cond.true.100:                                    ; preds = %cond.true.94
  %69 = load %struct._object*, %struct._object** %ident.addr, align 8
  %70 = bitcast %struct._object* %69 to %struct.PyASCIIObject*
  %add.ptr101 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %70, i64 1
  %71 = bitcast %struct.PyASCIIObject* %add.ptr101 to i8*
  br label %cond.end.104

cond.false.102:                                   ; preds = %cond.true.94
  %72 = load %struct._object*, %struct._object** %ident.addr, align 8
  %73 = bitcast %struct._object* %72 to %struct.PyCompactUnicodeObject*
  %add.ptr103 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %73, i64 1
  %74 = bitcast %struct.PyCompactUnicodeObject* %add.ptr103 to i8*
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.102, %cond.true.100
  %cond105 = phi i8* [ %71, %cond.true.100 ], [ %74, %cond.false.102 ]
  br label %cond.end.109

cond.false.106:                                   ; preds = %cond.true.88
  %75 = load %struct._object*, %struct._object** %ident.addr, align 8
  %76 = bitcast %struct._object* %75 to %struct.PyUnicodeObject*
  %data107 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %76, i32 0, i32 1
  %any108 = bitcast %union.anon* %data107 to i8**
  %77 = load i8*, i8** %any108, align 8
  br label %cond.end.109

cond.end.109:                                     ; preds = %cond.false.106, %cond.end.104
  %cond110 = phi i8* [ %cond105, %cond.end.104 ], [ %77, %cond.false.106 ]
  %arrayidx111 = getelementptr i8, i8* %cond110, i64 1
  %78 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %78 to i32
  br label %cond.end.171

cond.false.113:                                   ; preds = %lor.lhs.false.81
  %79 = load %struct._object*, %struct._object** %ident.addr, align 8
  %80 = bitcast %struct._object* %79 to %struct.PyASCIIObject*
  %state114 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %80, i32 0, i32 3
  %81 = bitcast %struct.anon* %state114 to i32*
  %bf.load115 = load i32, i32* %81, align 4
  %bf.lshr116 = lshr i32 %bf.load115, 2
  %bf.clear117 = and i32 %bf.lshr116, 7
  %cmp118 = icmp eq i32 %bf.clear117, 2
  br i1 %cmp118, label %cond.true.120, label %cond.false.145

cond.true.120:                                    ; preds = %cond.false.113
  %82 = load %struct._object*, %struct._object** %ident.addr, align 8
  %83 = bitcast %struct._object* %82 to %struct.PyASCIIObject*
  %state121 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %83, i32 0, i32 3
  %84 = bitcast %struct.anon* %state121 to i32*
  %bf.load122 = load i32, i32* %84, align 4
  %bf.lshr123 = lshr i32 %bf.load122, 5
  %bf.clear124 = and i32 %bf.lshr123, 1
  %tobool125 = icmp ne i32 %bf.clear124, 0
  br i1 %tobool125, label %cond.true.126, label %cond.false.138

cond.true.126:                                    ; preds = %cond.true.120
  %85 = load %struct._object*, %struct._object** %ident.addr, align 8
  %86 = bitcast %struct._object* %85 to %struct.PyASCIIObject*
  %state127 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %86, i32 0, i32 3
  %87 = bitcast %struct.anon* %state127 to i32*
  %bf.load128 = load i32, i32* %87, align 4
  %bf.lshr129 = lshr i32 %bf.load128, 6
  %bf.clear130 = and i32 %bf.lshr129, 1
  %tobool131 = icmp ne i32 %bf.clear130, 0
  br i1 %tobool131, label %cond.true.132, label %cond.false.134

cond.true.132:                                    ; preds = %cond.true.126
  %88 = load %struct._object*, %struct._object** %ident.addr, align 8
  %89 = bitcast %struct._object* %88 to %struct.PyASCIIObject*
  %add.ptr133 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %89, i64 1
  %90 = bitcast %struct.PyASCIIObject* %add.ptr133 to i8*
  br label %cond.end.136

cond.false.134:                                   ; preds = %cond.true.126
  %91 = load %struct._object*, %struct._object** %ident.addr, align 8
  %92 = bitcast %struct._object* %91 to %struct.PyCompactUnicodeObject*
  %add.ptr135 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %92, i64 1
  %93 = bitcast %struct.PyCompactUnicodeObject* %add.ptr135 to i8*
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.134, %cond.true.132
  %cond137 = phi i8* [ %90, %cond.true.132 ], [ %93, %cond.false.134 ]
  br label %cond.end.141

cond.false.138:                                   ; preds = %cond.true.120
  %94 = load %struct._object*, %struct._object** %ident.addr, align 8
  %95 = bitcast %struct._object* %94 to %struct.PyUnicodeObject*
  %data139 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %95, i32 0, i32 1
  %any140 = bitcast %union.anon* %data139 to i8**
  %96 = load i8*, i8** %any140, align 8
  br label %cond.end.141

cond.end.141:                                     ; preds = %cond.false.138, %cond.end.136
  %cond142 = phi i8* [ %cond137, %cond.end.136 ], [ %96, %cond.false.138 ]
  %97 = bitcast i8* %cond142 to i16*
  %arrayidx143 = getelementptr i16, i16* %97, i64 1
  %98 = load i16, i16* %arrayidx143, align 2
  %conv144 = zext i16 %98 to i32
  br label %cond.end.169

cond.false.145:                                   ; preds = %cond.false.113
  %99 = load %struct._object*, %struct._object** %ident.addr, align 8
  %100 = bitcast %struct._object* %99 to %struct.PyASCIIObject*
  %state146 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %100, i32 0, i32 3
  %101 = bitcast %struct.anon* %state146 to i32*
  %bf.load147 = load i32, i32* %101, align 4
  %bf.lshr148 = lshr i32 %bf.load147, 5
  %bf.clear149 = and i32 %bf.lshr148, 1
  %tobool150 = icmp ne i32 %bf.clear149, 0
  br i1 %tobool150, label %cond.true.151, label %cond.false.163

cond.true.151:                                    ; preds = %cond.false.145
  %102 = load %struct._object*, %struct._object** %ident.addr, align 8
  %103 = bitcast %struct._object* %102 to %struct.PyASCIIObject*
  %state152 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %103, i32 0, i32 3
  %104 = bitcast %struct.anon* %state152 to i32*
  %bf.load153 = load i32, i32* %104, align 4
  %bf.lshr154 = lshr i32 %bf.load153, 6
  %bf.clear155 = and i32 %bf.lshr154, 1
  %tobool156 = icmp ne i32 %bf.clear155, 0
  br i1 %tobool156, label %cond.true.157, label %cond.false.159

cond.true.157:                                    ; preds = %cond.true.151
  %105 = load %struct._object*, %struct._object** %ident.addr, align 8
  %106 = bitcast %struct._object* %105 to %struct.PyASCIIObject*
  %add.ptr158 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %106, i64 1
  %107 = bitcast %struct.PyASCIIObject* %add.ptr158 to i8*
  br label %cond.end.161

cond.false.159:                                   ; preds = %cond.true.151
  %108 = load %struct._object*, %struct._object** %ident.addr, align 8
  %109 = bitcast %struct._object* %108 to %struct.PyCompactUnicodeObject*
  %add.ptr160 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %109, i64 1
  %110 = bitcast %struct.PyCompactUnicodeObject* %add.ptr160 to i8*
  br label %cond.end.161

cond.end.161:                                     ; preds = %cond.false.159, %cond.true.157
  %cond162 = phi i8* [ %107, %cond.true.157 ], [ %110, %cond.false.159 ]
  br label %cond.end.166

cond.false.163:                                   ; preds = %cond.false.145
  %111 = load %struct._object*, %struct._object** %ident.addr, align 8
  %112 = bitcast %struct._object* %111 to %struct.PyUnicodeObject*
  %data164 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %112, i32 0, i32 1
  %any165 = bitcast %union.anon* %data164 to i8**
  %113 = load i8*, i8** %any165, align 8
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.false.163, %cond.end.161
  %cond167 = phi i8* [ %cond162, %cond.end.161 ], [ %113, %cond.false.163 ]
  %114 = bitcast i8* %cond167 to i32*
  %arrayidx168 = getelementptr i32, i32* %114, i64 1
  %115 = load i32, i32* %arrayidx168, align 4
  br label %cond.end.169

cond.end.169:                                     ; preds = %cond.end.166, %cond.end.141
  %cond170 = phi i32 [ %conv144, %cond.end.141 ], [ %115, %cond.end.166 ]
  br label %cond.end.171

cond.end.171:                                     ; preds = %cond.end.169, %cond.end.109
  %cond172 = phi i32 [ %conv112, %cond.end.109 ], [ %cond170, %cond.end.169 ]
  %cmp173 = icmp ne i32 %cond172, 95
  br i1 %cmp173, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.171, %cond.end.77, %lor.lhs.false, %entry
  %116 = load %struct._object*, %struct._object** %ident.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %116, i32 0, i32 0
  %117 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %117, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %118 = load %struct._object*, %struct._object** %ident.addr, align 8
  store %struct._object* %118, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %cond.end.171
  %119 = load %struct._object*, %struct._object** %ident.addr, align 8
  %120 = bitcast %struct._object* %119 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %120, i32 0, i32 1
  %121 = load i64, i64* %length, align 8
  store i64 %121, i64* %nlen, align 8
  %122 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %123 = bitcast %struct._object* %122 to %struct.PyASCIIObject*
  %length175 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %123, i32 0, i32 1
  %124 = load i64, i64* %length175, align 8
  store i64 %124, i64* %plen, align 8
  %125 = load %struct._object*, %struct._object** %ident.addr, align 8
  %126 = bitcast %struct._object* %125 to %struct.PyASCIIObject*
  %state176 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %126, i32 0, i32 3
  %127 = bitcast %struct.anon* %state176 to i32*
  %bf.load177 = load i32, i32* %127, align 4
  %bf.lshr178 = lshr i32 %bf.load177, 2
  %bf.clear179 = and i32 %bf.lshr178, 7
  %cmp180 = icmp eq i32 %bf.clear179, 1
  br i1 %cmp180, label %cond.true.182, label %cond.false.207

cond.true.182:                                    ; preds = %if.end
  %128 = load i64, i64* %nlen, align 8
  %sub = sub i64 %128, 1
  %129 = load %struct._object*, %struct._object** %ident.addr, align 8
  %130 = bitcast %struct._object* %129 to %struct.PyASCIIObject*
  %state183 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %130, i32 0, i32 3
  %131 = bitcast %struct.anon* %state183 to i32*
  %bf.load184 = load i32, i32* %131, align 4
  %bf.lshr185 = lshr i32 %bf.load184, 5
  %bf.clear186 = and i32 %bf.lshr185, 1
  %tobool187 = icmp ne i32 %bf.clear186, 0
  br i1 %tobool187, label %cond.true.188, label %cond.false.200

cond.true.188:                                    ; preds = %cond.true.182
  %132 = load %struct._object*, %struct._object** %ident.addr, align 8
  %133 = bitcast %struct._object* %132 to %struct.PyASCIIObject*
  %state189 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %133, i32 0, i32 3
  %134 = bitcast %struct.anon* %state189 to i32*
  %bf.load190 = load i32, i32* %134, align 4
  %bf.lshr191 = lshr i32 %bf.load190, 6
  %bf.clear192 = and i32 %bf.lshr191, 1
  %tobool193 = icmp ne i32 %bf.clear192, 0
  br i1 %tobool193, label %cond.true.194, label %cond.false.196

cond.true.194:                                    ; preds = %cond.true.188
  %135 = load %struct._object*, %struct._object** %ident.addr, align 8
  %136 = bitcast %struct._object* %135 to %struct.PyASCIIObject*
  %add.ptr195 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %136, i64 1
  %137 = bitcast %struct.PyASCIIObject* %add.ptr195 to i8*
  br label %cond.end.198

cond.false.196:                                   ; preds = %cond.true.188
  %138 = load %struct._object*, %struct._object** %ident.addr, align 8
  %139 = bitcast %struct._object* %138 to %struct.PyCompactUnicodeObject*
  %add.ptr197 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %139, i64 1
  %140 = bitcast %struct.PyCompactUnicodeObject* %add.ptr197 to i8*
  br label %cond.end.198

cond.end.198:                                     ; preds = %cond.false.196, %cond.true.194
  %cond199 = phi i8* [ %137, %cond.true.194 ], [ %140, %cond.false.196 ]
  br label %cond.end.203

cond.false.200:                                   ; preds = %cond.true.182
  %141 = load %struct._object*, %struct._object** %ident.addr, align 8
  %142 = bitcast %struct._object* %141 to %struct.PyUnicodeObject*
  %data201 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %142, i32 0, i32 1
  %any202 = bitcast %union.anon* %data201 to i8**
  %143 = load i8*, i8** %any202, align 8
  br label %cond.end.203

cond.end.203:                                     ; preds = %cond.false.200, %cond.end.198
  %cond204 = phi i8* [ %cond199, %cond.end.198 ], [ %143, %cond.false.200 ]
  %arrayidx205 = getelementptr i8, i8* %cond204, i64 %sub
  %144 = load i8, i8* %arrayidx205, align 1
  %conv206 = zext i8 %144 to i32
  br label %cond.end.267

cond.false.207:                                   ; preds = %if.end
  %145 = load %struct._object*, %struct._object** %ident.addr, align 8
  %146 = bitcast %struct._object* %145 to %struct.PyASCIIObject*
  %state208 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %146, i32 0, i32 3
  %147 = bitcast %struct.anon* %state208 to i32*
  %bf.load209 = load i32, i32* %147, align 4
  %bf.lshr210 = lshr i32 %bf.load209, 2
  %bf.clear211 = and i32 %bf.lshr210, 7
  %cmp212 = icmp eq i32 %bf.clear211, 2
  br i1 %cmp212, label %cond.true.214, label %cond.false.240

cond.true.214:                                    ; preds = %cond.false.207
  %148 = load i64, i64* %nlen, align 8
  %sub215 = sub i64 %148, 1
  %149 = load %struct._object*, %struct._object** %ident.addr, align 8
  %150 = bitcast %struct._object* %149 to %struct.PyASCIIObject*
  %state216 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %150, i32 0, i32 3
  %151 = bitcast %struct.anon* %state216 to i32*
  %bf.load217 = load i32, i32* %151, align 4
  %bf.lshr218 = lshr i32 %bf.load217, 5
  %bf.clear219 = and i32 %bf.lshr218, 1
  %tobool220 = icmp ne i32 %bf.clear219, 0
  br i1 %tobool220, label %cond.true.221, label %cond.false.233

cond.true.221:                                    ; preds = %cond.true.214
  %152 = load %struct._object*, %struct._object** %ident.addr, align 8
  %153 = bitcast %struct._object* %152 to %struct.PyASCIIObject*
  %state222 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %153, i32 0, i32 3
  %154 = bitcast %struct.anon* %state222 to i32*
  %bf.load223 = load i32, i32* %154, align 4
  %bf.lshr224 = lshr i32 %bf.load223, 6
  %bf.clear225 = and i32 %bf.lshr224, 1
  %tobool226 = icmp ne i32 %bf.clear225, 0
  br i1 %tobool226, label %cond.true.227, label %cond.false.229

cond.true.227:                                    ; preds = %cond.true.221
  %155 = load %struct._object*, %struct._object** %ident.addr, align 8
  %156 = bitcast %struct._object* %155 to %struct.PyASCIIObject*
  %add.ptr228 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %156, i64 1
  %157 = bitcast %struct.PyASCIIObject* %add.ptr228 to i8*
  br label %cond.end.231

cond.false.229:                                   ; preds = %cond.true.221
  %158 = load %struct._object*, %struct._object** %ident.addr, align 8
  %159 = bitcast %struct._object* %158 to %struct.PyCompactUnicodeObject*
  %add.ptr230 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %159, i64 1
  %160 = bitcast %struct.PyCompactUnicodeObject* %add.ptr230 to i8*
  br label %cond.end.231

cond.end.231:                                     ; preds = %cond.false.229, %cond.true.227
  %cond232 = phi i8* [ %157, %cond.true.227 ], [ %160, %cond.false.229 ]
  br label %cond.end.236

cond.false.233:                                   ; preds = %cond.true.214
  %161 = load %struct._object*, %struct._object** %ident.addr, align 8
  %162 = bitcast %struct._object* %161 to %struct.PyUnicodeObject*
  %data234 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %162, i32 0, i32 1
  %any235 = bitcast %union.anon* %data234 to i8**
  %163 = load i8*, i8** %any235, align 8
  br label %cond.end.236

cond.end.236:                                     ; preds = %cond.false.233, %cond.end.231
  %cond237 = phi i8* [ %cond232, %cond.end.231 ], [ %163, %cond.false.233 ]
  %164 = bitcast i8* %cond237 to i16*
  %arrayidx238 = getelementptr i16, i16* %164, i64 %sub215
  %165 = load i16, i16* %arrayidx238, align 2
  %conv239 = zext i16 %165 to i32
  br label %cond.end.265

cond.false.240:                                   ; preds = %cond.false.207
  %166 = load i64, i64* %nlen, align 8
  %sub241 = sub i64 %166, 1
  %167 = load %struct._object*, %struct._object** %ident.addr, align 8
  %168 = bitcast %struct._object* %167 to %struct.PyASCIIObject*
  %state242 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %168, i32 0, i32 3
  %169 = bitcast %struct.anon* %state242 to i32*
  %bf.load243 = load i32, i32* %169, align 4
  %bf.lshr244 = lshr i32 %bf.load243, 5
  %bf.clear245 = and i32 %bf.lshr244, 1
  %tobool246 = icmp ne i32 %bf.clear245, 0
  br i1 %tobool246, label %cond.true.247, label %cond.false.259

cond.true.247:                                    ; preds = %cond.false.240
  %170 = load %struct._object*, %struct._object** %ident.addr, align 8
  %171 = bitcast %struct._object* %170 to %struct.PyASCIIObject*
  %state248 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %171, i32 0, i32 3
  %172 = bitcast %struct.anon* %state248 to i32*
  %bf.load249 = load i32, i32* %172, align 4
  %bf.lshr250 = lshr i32 %bf.load249, 6
  %bf.clear251 = and i32 %bf.lshr250, 1
  %tobool252 = icmp ne i32 %bf.clear251, 0
  br i1 %tobool252, label %cond.true.253, label %cond.false.255

cond.true.253:                                    ; preds = %cond.true.247
  %173 = load %struct._object*, %struct._object** %ident.addr, align 8
  %174 = bitcast %struct._object* %173 to %struct.PyASCIIObject*
  %add.ptr254 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %174, i64 1
  %175 = bitcast %struct.PyASCIIObject* %add.ptr254 to i8*
  br label %cond.end.257

cond.false.255:                                   ; preds = %cond.true.247
  %176 = load %struct._object*, %struct._object** %ident.addr, align 8
  %177 = bitcast %struct._object* %176 to %struct.PyCompactUnicodeObject*
  %add.ptr256 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %177, i64 1
  %178 = bitcast %struct.PyCompactUnicodeObject* %add.ptr256 to i8*
  br label %cond.end.257

cond.end.257:                                     ; preds = %cond.false.255, %cond.true.253
  %cond258 = phi i8* [ %175, %cond.true.253 ], [ %178, %cond.false.255 ]
  br label %cond.end.262

cond.false.259:                                   ; preds = %cond.false.240
  %179 = load %struct._object*, %struct._object** %ident.addr, align 8
  %180 = bitcast %struct._object* %179 to %struct.PyUnicodeObject*
  %data260 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %180, i32 0, i32 1
  %any261 = bitcast %union.anon* %data260 to i8**
  %181 = load i8*, i8** %any261, align 8
  br label %cond.end.262

cond.end.262:                                     ; preds = %cond.false.259, %cond.end.257
  %cond263 = phi i8* [ %cond258, %cond.end.257 ], [ %181, %cond.false.259 ]
  %182 = bitcast i8* %cond263 to i32*
  %arrayidx264 = getelementptr i32, i32* %182, i64 %sub241
  %183 = load i32, i32* %arrayidx264, align 4
  br label %cond.end.265

cond.end.265:                                     ; preds = %cond.end.262, %cond.end.236
  %cond266 = phi i32 [ %conv239, %cond.end.236 ], [ %183, %cond.end.262 ]
  br label %cond.end.267

cond.end.267:                                     ; preds = %cond.end.265, %cond.end.203
  %cond268 = phi i32 [ %conv206, %cond.end.203 ], [ %cond266, %cond.end.265 ]
  %cmp269 = icmp eq i32 %cond268, 95
  br i1 %cmp269, label %land.lhs.true, label %lor.lhs.false.367

land.lhs.true:                                    ; preds = %cond.end.267
  %184 = load %struct._object*, %struct._object** %ident.addr, align 8
  %185 = bitcast %struct._object* %184 to %struct.PyASCIIObject*
  %state271 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %185, i32 0, i32 3
  %186 = bitcast %struct.anon* %state271 to i32*
  %bf.load272 = load i32, i32* %186, align 4
  %bf.lshr273 = lshr i32 %bf.load272, 2
  %bf.clear274 = and i32 %bf.lshr273, 7
  %cmp275 = icmp eq i32 %bf.clear274, 1
  br i1 %cmp275, label %cond.true.277, label %cond.false.303

cond.true.277:                                    ; preds = %land.lhs.true
  %187 = load i64, i64* %nlen, align 8
  %sub278 = sub i64 %187, 2
  %188 = load %struct._object*, %struct._object** %ident.addr, align 8
  %189 = bitcast %struct._object* %188 to %struct.PyASCIIObject*
  %state279 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %189, i32 0, i32 3
  %190 = bitcast %struct.anon* %state279 to i32*
  %bf.load280 = load i32, i32* %190, align 4
  %bf.lshr281 = lshr i32 %bf.load280, 5
  %bf.clear282 = and i32 %bf.lshr281, 1
  %tobool283 = icmp ne i32 %bf.clear282, 0
  br i1 %tobool283, label %cond.true.284, label %cond.false.296

cond.true.284:                                    ; preds = %cond.true.277
  %191 = load %struct._object*, %struct._object** %ident.addr, align 8
  %192 = bitcast %struct._object* %191 to %struct.PyASCIIObject*
  %state285 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %192, i32 0, i32 3
  %193 = bitcast %struct.anon* %state285 to i32*
  %bf.load286 = load i32, i32* %193, align 4
  %bf.lshr287 = lshr i32 %bf.load286, 6
  %bf.clear288 = and i32 %bf.lshr287, 1
  %tobool289 = icmp ne i32 %bf.clear288, 0
  br i1 %tobool289, label %cond.true.290, label %cond.false.292

cond.true.290:                                    ; preds = %cond.true.284
  %194 = load %struct._object*, %struct._object** %ident.addr, align 8
  %195 = bitcast %struct._object* %194 to %struct.PyASCIIObject*
  %add.ptr291 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %195, i64 1
  %196 = bitcast %struct.PyASCIIObject* %add.ptr291 to i8*
  br label %cond.end.294

cond.false.292:                                   ; preds = %cond.true.284
  %197 = load %struct._object*, %struct._object** %ident.addr, align 8
  %198 = bitcast %struct._object* %197 to %struct.PyCompactUnicodeObject*
  %add.ptr293 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %198, i64 1
  %199 = bitcast %struct.PyCompactUnicodeObject* %add.ptr293 to i8*
  br label %cond.end.294

cond.end.294:                                     ; preds = %cond.false.292, %cond.true.290
  %cond295 = phi i8* [ %196, %cond.true.290 ], [ %199, %cond.false.292 ]
  br label %cond.end.299

cond.false.296:                                   ; preds = %cond.true.277
  %200 = load %struct._object*, %struct._object** %ident.addr, align 8
  %201 = bitcast %struct._object* %200 to %struct.PyUnicodeObject*
  %data297 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %201, i32 0, i32 1
  %any298 = bitcast %union.anon* %data297 to i8**
  %202 = load i8*, i8** %any298, align 8
  br label %cond.end.299

cond.end.299:                                     ; preds = %cond.false.296, %cond.end.294
  %cond300 = phi i8* [ %cond295, %cond.end.294 ], [ %202, %cond.false.296 ]
  %arrayidx301 = getelementptr i8, i8* %cond300, i64 %sub278
  %203 = load i8, i8* %arrayidx301, align 1
  %conv302 = zext i8 %203 to i32
  br label %cond.end.363

cond.false.303:                                   ; preds = %land.lhs.true
  %204 = load %struct._object*, %struct._object** %ident.addr, align 8
  %205 = bitcast %struct._object* %204 to %struct.PyASCIIObject*
  %state304 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %205, i32 0, i32 3
  %206 = bitcast %struct.anon* %state304 to i32*
  %bf.load305 = load i32, i32* %206, align 4
  %bf.lshr306 = lshr i32 %bf.load305, 2
  %bf.clear307 = and i32 %bf.lshr306, 7
  %cmp308 = icmp eq i32 %bf.clear307, 2
  br i1 %cmp308, label %cond.true.310, label %cond.false.336

cond.true.310:                                    ; preds = %cond.false.303
  %207 = load i64, i64* %nlen, align 8
  %sub311 = sub i64 %207, 2
  %208 = load %struct._object*, %struct._object** %ident.addr, align 8
  %209 = bitcast %struct._object* %208 to %struct.PyASCIIObject*
  %state312 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %209, i32 0, i32 3
  %210 = bitcast %struct.anon* %state312 to i32*
  %bf.load313 = load i32, i32* %210, align 4
  %bf.lshr314 = lshr i32 %bf.load313, 5
  %bf.clear315 = and i32 %bf.lshr314, 1
  %tobool316 = icmp ne i32 %bf.clear315, 0
  br i1 %tobool316, label %cond.true.317, label %cond.false.329

cond.true.317:                                    ; preds = %cond.true.310
  %211 = load %struct._object*, %struct._object** %ident.addr, align 8
  %212 = bitcast %struct._object* %211 to %struct.PyASCIIObject*
  %state318 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %212, i32 0, i32 3
  %213 = bitcast %struct.anon* %state318 to i32*
  %bf.load319 = load i32, i32* %213, align 4
  %bf.lshr320 = lshr i32 %bf.load319, 6
  %bf.clear321 = and i32 %bf.lshr320, 1
  %tobool322 = icmp ne i32 %bf.clear321, 0
  br i1 %tobool322, label %cond.true.323, label %cond.false.325

cond.true.323:                                    ; preds = %cond.true.317
  %214 = load %struct._object*, %struct._object** %ident.addr, align 8
  %215 = bitcast %struct._object* %214 to %struct.PyASCIIObject*
  %add.ptr324 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %215, i64 1
  %216 = bitcast %struct.PyASCIIObject* %add.ptr324 to i8*
  br label %cond.end.327

cond.false.325:                                   ; preds = %cond.true.317
  %217 = load %struct._object*, %struct._object** %ident.addr, align 8
  %218 = bitcast %struct._object* %217 to %struct.PyCompactUnicodeObject*
  %add.ptr326 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %218, i64 1
  %219 = bitcast %struct.PyCompactUnicodeObject* %add.ptr326 to i8*
  br label %cond.end.327

cond.end.327:                                     ; preds = %cond.false.325, %cond.true.323
  %cond328 = phi i8* [ %216, %cond.true.323 ], [ %219, %cond.false.325 ]
  br label %cond.end.332

cond.false.329:                                   ; preds = %cond.true.310
  %220 = load %struct._object*, %struct._object** %ident.addr, align 8
  %221 = bitcast %struct._object* %220 to %struct.PyUnicodeObject*
  %data330 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %221, i32 0, i32 1
  %any331 = bitcast %union.anon* %data330 to i8**
  %222 = load i8*, i8** %any331, align 8
  br label %cond.end.332

cond.end.332:                                     ; preds = %cond.false.329, %cond.end.327
  %cond333 = phi i8* [ %cond328, %cond.end.327 ], [ %222, %cond.false.329 ]
  %223 = bitcast i8* %cond333 to i16*
  %arrayidx334 = getelementptr i16, i16* %223, i64 %sub311
  %224 = load i16, i16* %arrayidx334, align 2
  %conv335 = zext i16 %224 to i32
  br label %cond.end.361

cond.false.336:                                   ; preds = %cond.false.303
  %225 = load i64, i64* %nlen, align 8
  %sub337 = sub i64 %225, 2
  %226 = load %struct._object*, %struct._object** %ident.addr, align 8
  %227 = bitcast %struct._object* %226 to %struct.PyASCIIObject*
  %state338 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %227, i32 0, i32 3
  %228 = bitcast %struct.anon* %state338 to i32*
  %bf.load339 = load i32, i32* %228, align 4
  %bf.lshr340 = lshr i32 %bf.load339, 5
  %bf.clear341 = and i32 %bf.lshr340, 1
  %tobool342 = icmp ne i32 %bf.clear341, 0
  br i1 %tobool342, label %cond.true.343, label %cond.false.355

cond.true.343:                                    ; preds = %cond.false.336
  %229 = load %struct._object*, %struct._object** %ident.addr, align 8
  %230 = bitcast %struct._object* %229 to %struct.PyASCIIObject*
  %state344 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %230, i32 0, i32 3
  %231 = bitcast %struct.anon* %state344 to i32*
  %bf.load345 = load i32, i32* %231, align 4
  %bf.lshr346 = lshr i32 %bf.load345, 6
  %bf.clear347 = and i32 %bf.lshr346, 1
  %tobool348 = icmp ne i32 %bf.clear347, 0
  br i1 %tobool348, label %cond.true.349, label %cond.false.351

cond.true.349:                                    ; preds = %cond.true.343
  %232 = load %struct._object*, %struct._object** %ident.addr, align 8
  %233 = bitcast %struct._object* %232 to %struct.PyASCIIObject*
  %add.ptr350 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %233, i64 1
  %234 = bitcast %struct.PyASCIIObject* %add.ptr350 to i8*
  br label %cond.end.353

cond.false.351:                                   ; preds = %cond.true.343
  %235 = load %struct._object*, %struct._object** %ident.addr, align 8
  %236 = bitcast %struct._object* %235 to %struct.PyCompactUnicodeObject*
  %add.ptr352 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %236, i64 1
  %237 = bitcast %struct.PyCompactUnicodeObject* %add.ptr352 to i8*
  br label %cond.end.353

cond.end.353:                                     ; preds = %cond.false.351, %cond.true.349
  %cond354 = phi i8* [ %234, %cond.true.349 ], [ %237, %cond.false.351 ]
  br label %cond.end.358

cond.false.355:                                   ; preds = %cond.false.336
  %238 = load %struct._object*, %struct._object** %ident.addr, align 8
  %239 = bitcast %struct._object* %238 to %struct.PyUnicodeObject*
  %data356 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %239, i32 0, i32 1
  %any357 = bitcast %union.anon* %data356 to i8**
  %240 = load i8*, i8** %any357, align 8
  br label %cond.end.358

cond.end.358:                                     ; preds = %cond.false.355, %cond.end.353
  %cond359 = phi i8* [ %cond354, %cond.end.353 ], [ %240, %cond.false.355 ]
  %241 = bitcast i8* %cond359 to i32*
  %arrayidx360 = getelementptr i32, i32* %241, i64 %sub337
  %242 = load i32, i32* %arrayidx360, align 4
  br label %cond.end.361

cond.end.361:                                     ; preds = %cond.end.358, %cond.end.332
  %cond362 = phi i32 [ %conv335, %cond.end.332 ], [ %242, %cond.end.358 ]
  br label %cond.end.363

cond.end.363:                                     ; preds = %cond.end.361, %cond.end.299
  %cond364 = phi i32 [ %conv302, %cond.end.299 ], [ %cond362, %cond.end.361 ]
  %cmp365 = icmp eq i32 %cond364, 95
  br i1 %cmp365, label %if.then.370, label %lor.lhs.false.367

lor.lhs.false.367:                                ; preds = %cond.end.363, %cond.end.267
  %243 = load %struct._object*, %struct._object** %ident.addr, align 8
  %244 = load i64, i64* %nlen, align 8
  %call = call i64 @PyUnicode_FindChar(%struct._object* %243, i32 46, i64 0, i64 %244, i32 1)
  %cmp368 = icmp ne i64 %call, -1
  br i1 %cmp368, label %if.then.370, label %if.end.373

if.then.370:                                      ; preds = %lor.lhs.false.367, %cond.end.363
  %245 = load %struct._object*, %struct._object** %ident.addr, align 8
  %ob_refcnt371 = getelementptr inbounds %struct._object, %struct._object* %245, i32 0, i32 0
  %246 = load i64, i64* %ob_refcnt371, align 8
  %inc372 = add i64 %246, 1
  store i64 %inc372, i64* %ob_refcnt371, align 8
  %247 = load %struct._object*, %struct._object** %ident.addr, align 8
  store %struct._object* %247, %struct._object** %retval
  br label %return

if.end.373:                                       ; preds = %lor.lhs.false.367
  store i64 0, i64* %ipriv, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.373
  %248 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %249 = bitcast %struct._object* %248 to %struct.PyASCIIObject*
  %state374 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %249, i32 0, i32 3
  %250 = bitcast %struct.anon* %state374 to i32*
  %bf.load375 = load i32, i32* %250, align 4
  %bf.lshr376 = lshr i32 %bf.load375, 2
  %bf.clear377 = and i32 %bf.lshr376, 7
  %cmp378 = icmp eq i32 %bf.clear377, 1
  br i1 %cmp378, label %cond.true.380, label %cond.false.405

cond.true.380:                                    ; preds = %while.cond
  %251 = load i64, i64* %ipriv, align 8
  %252 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %253 = bitcast %struct._object* %252 to %struct.PyASCIIObject*
  %state381 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %253, i32 0, i32 3
  %254 = bitcast %struct.anon* %state381 to i32*
  %bf.load382 = load i32, i32* %254, align 4
  %bf.lshr383 = lshr i32 %bf.load382, 5
  %bf.clear384 = and i32 %bf.lshr383, 1
  %tobool385 = icmp ne i32 %bf.clear384, 0
  br i1 %tobool385, label %cond.true.386, label %cond.false.398

cond.true.386:                                    ; preds = %cond.true.380
  %255 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %256 = bitcast %struct._object* %255 to %struct.PyASCIIObject*
  %state387 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %256, i32 0, i32 3
  %257 = bitcast %struct.anon* %state387 to i32*
  %bf.load388 = load i32, i32* %257, align 4
  %bf.lshr389 = lshr i32 %bf.load388, 6
  %bf.clear390 = and i32 %bf.lshr389, 1
  %tobool391 = icmp ne i32 %bf.clear390, 0
  br i1 %tobool391, label %cond.true.392, label %cond.false.394

cond.true.392:                                    ; preds = %cond.true.386
  %258 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %259 = bitcast %struct._object* %258 to %struct.PyASCIIObject*
  %add.ptr393 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %259, i64 1
  %260 = bitcast %struct.PyASCIIObject* %add.ptr393 to i8*
  br label %cond.end.396

cond.false.394:                                   ; preds = %cond.true.386
  %261 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %262 = bitcast %struct._object* %261 to %struct.PyCompactUnicodeObject*
  %add.ptr395 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %262, i64 1
  %263 = bitcast %struct.PyCompactUnicodeObject* %add.ptr395 to i8*
  br label %cond.end.396

cond.end.396:                                     ; preds = %cond.false.394, %cond.true.392
  %cond397 = phi i8* [ %260, %cond.true.392 ], [ %263, %cond.false.394 ]
  br label %cond.end.401

cond.false.398:                                   ; preds = %cond.true.380
  %264 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %265 = bitcast %struct._object* %264 to %struct.PyUnicodeObject*
  %data399 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %265, i32 0, i32 1
  %any400 = bitcast %union.anon* %data399 to i8**
  %266 = load i8*, i8** %any400, align 8
  br label %cond.end.401

cond.end.401:                                     ; preds = %cond.false.398, %cond.end.396
  %cond402 = phi i8* [ %cond397, %cond.end.396 ], [ %266, %cond.false.398 ]
  %arrayidx403 = getelementptr i8, i8* %cond402, i64 %251
  %267 = load i8, i8* %arrayidx403, align 1
  %conv404 = zext i8 %267 to i32
  br label %cond.end.463

cond.false.405:                                   ; preds = %while.cond
  %268 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %269 = bitcast %struct._object* %268 to %struct.PyASCIIObject*
  %state406 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %269, i32 0, i32 3
  %270 = bitcast %struct.anon* %state406 to i32*
  %bf.load407 = load i32, i32* %270, align 4
  %bf.lshr408 = lshr i32 %bf.load407, 2
  %bf.clear409 = and i32 %bf.lshr408, 7
  %cmp410 = icmp eq i32 %bf.clear409, 2
  br i1 %cmp410, label %cond.true.412, label %cond.false.437

cond.true.412:                                    ; preds = %cond.false.405
  %271 = load i64, i64* %ipriv, align 8
  %272 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %273 = bitcast %struct._object* %272 to %struct.PyASCIIObject*
  %state413 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %273, i32 0, i32 3
  %274 = bitcast %struct.anon* %state413 to i32*
  %bf.load414 = load i32, i32* %274, align 4
  %bf.lshr415 = lshr i32 %bf.load414, 5
  %bf.clear416 = and i32 %bf.lshr415, 1
  %tobool417 = icmp ne i32 %bf.clear416, 0
  br i1 %tobool417, label %cond.true.418, label %cond.false.430

cond.true.418:                                    ; preds = %cond.true.412
  %275 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %276 = bitcast %struct._object* %275 to %struct.PyASCIIObject*
  %state419 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %276, i32 0, i32 3
  %277 = bitcast %struct.anon* %state419 to i32*
  %bf.load420 = load i32, i32* %277, align 4
  %bf.lshr421 = lshr i32 %bf.load420, 6
  %bf.clear422 = and i32 %bf.lshr421, 1
  %tobool423 = icmp ne i32 %bf.clear422, 0
  br i1 %tobool423, label %cond.true.424, label %cond.false.426

cond.true.424:                                    ; preds = %cond.true.418
  %278 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %279 = bitcast %struct._object* %278 to %struct.PyASCIIObject*
  %add.ptr425 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %279, i64 1
  %280 = bitcast %struct.PyASCIIObject* %add.ptr425 to i8*
  br label %cond.end.428

cond.false.426:                                   ; preds = %cond.true.418
  %281 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %282 = bitcast %struct._object* %281 to %struct.PyCompactUnicodeObject*
  %add.ptr427 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %282, i64 1
  %283 = bitcast %struct.PyCompactUnicodeObject* %add.ptr427 to i8*
  br label %cond.end.428

cond.end.428:                                     ; preds = %cond.false.426, %cond.true.424
  %cond429 = phi i8* [ %280, %cond.true.424 ], [ %283, %cond.false.426 ]
  br label %cond.end.433

cond.false.430:                                   ; preds = %cond.true.412
  %284 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %285 = bitcast %struct._object* %284 to %struct.PyUnicodeObject*
  %data431 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %285, i32 0, i32 1
  %any432 = bitcast %union.anon* %data431 to i8**
  %286 = load i8*, i8** %any432, align 8
  br label %cond.end.433

cond.end.433:                                     ; preds = %cond.false.430, %cond.end.428
  %cond434 = phi i8* [ %cond429, %cond.end.428 ], [ %286, %cond.false.430 ]
  %287 = bitcast i8* %cond434 to i16*
  %arrayidx435 = getelementptr i16, i16* %287, i64 %271
  %288 = load i16, i16* %arrayidx435, align 2
  %conv436 = zext i16 %288 to i32
  br label %cond.end.461

cond.false.437:                                   ; preds = %cond.false.405
  %289 = load i64, i64* %ipriv, align 8
  %290 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %291 = bitcast %struct._object* %290 to %struct.PyASCIIObject*
  %state438 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %291, i32 0, i32 3
  %292 = bitcast %struct.anon* %state438 to i32*
  %bf.load439 = load i32, i32* %292, align 4
  %bf.lshr440 = lshr i32 %bf.load439, 5
  %bf.clear441 = and i32 %bf.lshr440, 1
  %tobool442 = icmp ne i32 %bf.clear441, 0
  br i1 %tobool442, label %cond.true.443, label %cond.false.455

cond.true.443:                                    ; preds = %cond.false.437
  %293 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %294 = bitcast %struct._object* %293 to %struct.PyASCIIObject*
  %state444 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %294, i32 0, i32 3
  %295 = bitcast %struct.anon* %state444 to i32*
  %bf.load445 = load i32, i32* %295, align 4
  %bf.lshr446 = lshr i32 %bf.load445, 6
  %bf.clear447 = and i32 %bf.lshr446, 1
  %tobool448 = icmp ne i32 %bf.clear447, 0
  br i1 %tobool448, label %cond.true.449, label %cond.false.451

cond.true.449:                                    ; preds = %cond.true.443
  %296 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %297 = bitcast %struct._object* %296 to %struct.PyASCIIObject*
  %add.ptr450 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %297, i64 1
  %298 = bitcast %struct.PyASCIIObject* %add.ptr450 to i8*
  br label %cond.end.453

cond.false.451:                                   ; preds = %cond.true.443
  %299 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %300 = bitcast %struct._object* %299 to %struct.PyCompactUnicodeObject*
  %add.ptr452 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %300, i64 1
  %301 = bitcast %struct.PyCompactUnicodeObject* %add.ptr452 to i8*
  br label %cond.end.453

cond.end.453:                                     ; preds = %cond.false.451, %cond.true.449
  %cond454 = phi i8* [ %298, %cond.true.449 ], [ %301, %cond.false.451 ]
  br label %cond.end.458

cond.false.455:                                   ; preds = %cond.false.437
  %302 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %303 = bitcast %struct._object* %302 to %struct.PyUnicodeObject*
  %data456 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %303, i32 0, i32 1
  %any457 = bitcast %union.anon* %data456 to i8**
  %304 = load i8*, i8** %any457, align 8
  br label %cond.end.458

cond.end.458:                                     ; preds = %cond.false.455, %cond.end.453
  %cond459 = phi i8* [ %cond454, %cond.end.453 ], [ %304, %cond.false.455 ]
  %305 = bitcast i8* %cond459 to i32*
  %arrayidx460 = getelementptr i32, i32* %305, i64 %289
  %306 = load i32, i32* %arrayidx460, align 4
  br label %cond.end.461

cond.end.461:                                     ; preds = %cond.end.458, %cond.end.433
  %cond462 = phi i32 [ %conv436, %cond.end.433 ], [ %306, %cond.end.458 ]
  br label %cond.end.463

cond.end.463:                                     ; preds = %cond.end.461, %cond.end.401
  %cond464 = phi i32 [ %conv404, %cond.end.401 ], [ %cond462, %cond.end.461 ]
  %cmp465 = icmp eq i32 %cond464, 95
  br i1 %cmp465, label %while.body, label %while.end

while.body:                                       ; preds = %cond.end.463
  %307 = load i64, i64* %ipriv, align 8
  %inc467 = add i64 %307, 1
  store i64 %inc467, i64* %ipriv, align 8
  br label %while.cond

while.end:                                        ; preds = %cond.end.463
  %308 = load i64, i64* %ipriv, align 8
  %309 = load i64, i64* %plen, align 8
  %cmp468 = icmp eq i64 %308, %309
  br i1 %cmp468, label %if.then.470, label %if.end.473

if.then.470:                                      ; preds = %while.end
  %310 = load %struct._object*, %struct._object** %ident.addr, align 8
  %ob_refcnt471 = getelementptr inbounds %struct._object, %struct._object* %310, i32 0, i32 0
  %311 = load i64, i64* %ob_refcnt471, align 8
  %inc472 = add i64 %311, 1
  store i64 %inc472, i64* %ob_refcnt471, align 8
  %312 = load %struct._object*, %struct._object** %ident.addr, align 8
  store %struct._object* %312, %struct._object** %retval
  br label %return

if.end.473:                                       ; preds = %while.end
  %313 = load i64, i64* %ipriv, align 8
  %314 = load i64, i64* %plen, align 8
  %sub474 = sub i64 %314, %313
  store i64 %sub474, i64* %plen, align 8
  %315 = load i64, i64* %plen, align 8
  %316 = load i64, i64* %nlen, align 8
  %add = add i64 %315, %316
  %cmp475 = icmp uge i64 %add, 9223372036854775806
  br i1 %cmp475, label %if.then.477, label %if.end.478

if.then.477:                                      ; preds = %if.end.473
  %317 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %317, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.478:                                       ; preds = %if.end.473
  %318 = load %struct._object*, %struct._object** %ident.addr, align 8
  %319 = bitcast %struct._object* %318 to %struct.PyASCIIObject*
  %state479 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %319, i32 0, i32 3
  %320 = bitcast %struct.anon* %state479 to i32*
  %bf.load480 = load i32, i32* %320, align 4
  %bf.lshr481 = lshr i32 %bf.load480, 6
  %bf.clear482 = and i32 %bf.lshr481, 1
  %tobool483 = icmp ne i32 %bf.clear482, 0
  br i1 %tobool483, label %cond.true.484, label %cond.false.485

cond.true.484:                                    ; preds = %if.end.478
  br label %cond.end.503

cond.false.485:                                   ; preds = %if.end.478
  %321 = load %struct._object*, %struct._object** %ident.addr, align 8
  %322 = bitcast %struct._object* %321 to %struct.PyASCIIObject*
  %state486 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %322, i32 0, i32 3
  %323 = bitcast %struct.anon* %state486 to i32*
  %bf.load487 = load i32, i32* %323, align 4
  %bf.lshr488 = lshr i32 %bf.load487, 2
  %bf.clear489 = and i32 %bf.lshr488, 7
  %cmp490 = icmp eq i32 %bf.clear489, 1
  br i1 %cmp490, label %cond.true.492, label %cond.false.493

cond.true.492:                                    ; preds = %cond.false.485
  br label %cond.end.501

cond.false.493:                                   ; preds = %cond.false.485
  %324 = load %struct._object*, %struct._object** %ident.addr, align 8
  %325 = bitcast %struct._object* %324 to %struct.PyASCIIObject*
  %state494 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %325, i32 0, i32 3
  %326 = bitcast %struct.anon* %state494 to i32*
  %bf.load495 = load i32, i32* %326, align 4
  %bf.lshr496 = lshr i32 %bf.load495, 2
  %bf.clear497 = and i32 %bf.lshr496, 7
  %cmp498 = icmp eq i32 %bf.clear497, 2
  %cond500 = select i1 %cmp498, i32 65535, i32 1114111
  br label %cond.end.501

cond.end.501:                                     ; preds = %cond.false.493, %cond.true.492
  %cond502 = phi i32 [ 255, %cond.true.492 ], [ %cond500, %cond.false.493 ]
  br label %cond.end.503

cond.end.503:                                     ; preds = %cond.end.501, %cond.true.484
  %cond504 = phi i32 [ 127, %cond.true.484 ], [ %cond502, %cond.end.501 ]
  store i32 %cond504, i32* %maxchar, align 4
  %327 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %328 = bitcast %struct._object* %327 to %struct.PyASCIIObject*
  %state505 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %328, i32 0, i32 3
  %329 = bitcast %struct.anon* %state505 to i32*
  %bf.load506 = load i32, i32* %329, align 4
  %bf.lshr507 = lshr i32 %bf.load506, 6
  %bf.clear508 = and i32 %bf.lshr507, 1
  %tobool509 = icmp ne i32 %bf.clear508, 0
  br i1 %tobool509, label %cond.true.510, label %cond.false.511

cond.true.510:                                    ; preds = %cond.end.503
  br label %cond.end.529

cond.false.511:                                   ; preds = %cond.end.503
  %330 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %331 = bitcast %struct._object* %330 to %struct.PyASCIIObject*
  %state512 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %331, i32 0, i32 3
  %332 = bitcast %struct.anon* %state512 to i32*
  %bf.load513 = load i32, i32* %332, align 4
  %bf.lshr514 = lshr i32 %bf.load513, 2
  %bf.clear515 = and i32 %bf.lshr514, 7
  %cmp516 = icmp eq i32 %bf.clear515, 1
  br i1 %cmp516, label %cond.true.518, label %cond.false.519

cond.true.518:                                    ; preds = %cond.false.511
  br label %cond.end.527

cond.false.519:                                   ; preds = %cond.false.511
  %333 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %334 = bitcast %struct._object* %333 to %struct.PyASCIIObject*
  %state520 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %334, i32 0, i32 3
  %335 = bitcast %struct.anon* %state520 to i32*
  %bf.load521 = load i32, i32* %335, align 4
  %bf.lshr522 = lshr i32 %bf.load521, 2
  %bf.clear523 = and i32 %bf.lshr522, 7
  %cmp524 = icmp eq i32 %bf.clear523, 2
  %cond526 = select i1 %cmp524, i32 65535, i32 1114111
  br label %cond.end.527

cond.end.527:                                     ; preds = %cond.false.519, %cond.true.518
  %cond528 = phi i32 [ 255, %cond.true.518 ], [ %cond526, %cond.false.519 ]
  br label %cond.end.529

cond.end.529:                                     ; preds = %cond.end.527, %cond.true.510
  %cond530 = phi i32 [ 127, %cond.true.510 ], [ %cond528, %cond.end.527 ]
  %336 = load i32, i32* %maxchar, align 4
  %cmp531 = icmp ugt i32 %cond530, %336
  br i1 %cmp531, label %if.then.533, label %if.end.560

if.then.533:                                      ; preds = %cond.end.529
  %337 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %338 = bitcast %struct._object* %337 to %struct.PyASCIIObject*
  %state534 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %338, i32 0, i32 3
  %339 = bitcast %struct.anon* %state534 to i32*
  %bf.load535 = load i32, i32* %339, align 4
  %bf.lshr536 = lshr i32 %bf.load535, 6
  %bf.clear537 = and i32 %bf.lshr536, 1
  %tobool538 = icmp ne i32 %bf.clear537, 0
  br i1 %tobool538, label %cond.true.539, label %cond.false.540

cond.true.539:                                    ; preds = %if.then.533
  br label %cond.end.558

cond.false.540:                                   ; preds = %if.then.533
  %340 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %341 = bitcast %struct._object* %340 to %struct.PyASCIIObject*
  %state541 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %341, i32 0, i32 3
  %342 = bitcast %struct.anon* %state541 to i32*
  %bf.load542 = load i32, i32* %342, align 4
  %bf.lshr543 = lshr i32 %bf.load542, 2
  %bf.clear544 = and i32 %bf.lshr543, 7
  %cmp545 = icmp eq i32 %bf.clear544, 1
  br i1 %cmp545, label %cond.true.547, label %cond.false.548

cond.true.547:                                    ; preds = %cond.false.540
  br label %cond.end.556

cond.false.548:                                   ; preds = %cond.false.540
  %343 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %344 = bitcast %struct._object* %343 to %struct.PyASCIIObject*
  %state549 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %344, i32 0, i32 3
  %345 = bitcast %struct.anon* %state549 to i32*
  %bf.load550 = load i32, i32* %345, align 4
  %bf.lshr551 = lshr i32 %bf.load550, 2
  %bf.clear552 = and i32 %bf.lshr551, 7
  %cmp553 = icmp eq i32 %bf.clear552, 2
  %cond555 = select i1 %cmp553, i32 65535, i32 1114111
  br label %cond.end.556

cond.end.556:                                     ; preds = %cond.false.548, %cond.true.547
  %cond557 = phi i32 [ 255, %cond.true.547 ], [ %cond555, %cond.false.548 ]
  br label %cond.end.558

cond.end.558:                                     ; preds = %cond.end.556, %cond.true.539
  %cond559 = phi i32 [ 127, %cond.true.539 ], [ %cond557, %cond.end.556 ]
  store i32 %cond559, i32* %maxchar, align 4
  br label %if.end.560

if.end.560:                                       ; preds = %cond.end.558, %cond.end.529
  %346 = load i64, i64* %nlen, align 8
  %add561 = add i64 1, %346
  %347 = load i64, i64* %plen, align 8
  %add562 = add i64 %add561, %347
  %348 = load i32, i32* %maxchar, align 4
  %call563 = call %struct._object* @PyUnicode_New(i64 %add562, i32 %348)
  store %struct._object* %call563, %struct._object** %result, align 8
  %349 = load %struct._object*, %struct._object** %result, align 8
  %tobool564 = icmp ne %struct._object* %349, null
  br i1 %tobool564, label %if.end.566, label %if.then.565

if.then.565:                                      ; preds = %if.end.560
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.566:                                       ; preds = %if.end.560
  br label %do.body

do.body:                                          ; preds = %if.end.566
  %350 = load %struct._object*, %struct._object** %result, align 8
  %351 = bitcast %struct._object* %350 to %struct.PyASCIIObject*
  %state567 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %351, i32 0, i32 3
  %352 = bitcast %struct.anon* %state567 to i32*
  %bf.load568 = load i32, i32* %352, align 4
  %bf.lshr569 = lshr i32 %bf.load568, 2
  %bf.clear570 = and i32 %bf.lshr569, 7
  switch i32 %bf.clear570, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.594
  ]

sw.bb:                                            ; preds = %do.body
  %353 = load %struct._object*, %struct._object** %result, align 8
  %354 = bitcast %struct._object* %353 to %struct.PyASCIIObject*
  %state571 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %354, i32 0, i32 3
  %355 = bitcast %struct.anon* %state571 to i32*
  %bf.load572 = load i32, i32* %355, align 4
  %bf.lshr573 = lshr i32 %bf.load572, 5
  %bf.clear574 = and i32 %bf.lshr573, 1
  %tobool575 = icmp ne i32 %bf.clear574, 0
  br i1 %tobool575, label %cond.true.576, label %cond.false.588

cond.true.576:                                    ; preds = %sw.bb
  %356 = load %struct._object*, %struct._object** %result, align 8
  %357 = bitcast %struct._object* %356 to %struct.PyASCIIObject*
  %state577 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %357, i32 0, i32 3
  %358 = bitcast %struct.anon* %state577 to i32*
  %bf.load578 = load i32, i32* %358, align 4
  %bf.lshr579 = lshr i32 %bf.load578, 6
  %bf.clear580 = and i32 %bf.lshr579, 1
  %tobool581 = icmp ne i32 %bf.clear580, 0
  br i1 %tobool581, label %cond.true.582, label %cond.false.584

cond.true.582:                                    ; preds = %cond.true.576
  %359 = load %struct._object*, %struct._object** %result, align 8
  %360 = bitcast %struct._object* %359 to %struct.PyASCIIObject*
  %add.ptr583 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %360, i64 1
  %361 = bitcast %struct.PyASCIIObject* %add.ptr583 to i8*
  br label %cond.end.586

cond.false.584:                                   ; preds = %cond.true.576
  %362 = load %struct._object*, %struct._object** %result, align 8
  %363 = bitcast %struct._object* %362 to %struct.PyCompactUnicodeObject*
  %add.ptr585 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %363, i64 1
  %364 = bitcast %struct.PyCompactUnicodeObject* %add.ptr585 to i8*
  br label %cond.end.586

cond.end.586:                                     ; preds = %cond.false.584, %cond.true.582
  %cond587 = phi i8* [ %361, %cond.true.582 ], [ %364, %cond.false.584 ]
  br label %cond.end.591

cond.false.588:                                   ; preds = %sw.bb
  %365 = load %struct._object*, %struct._object** %result, align 8
  %366 = bitcast %struct._object* %365 to %struct.PyUnicodeObject*
  %data589 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %366, i32 0, i32 1
  %any590 = bitcast %union.anon* %data589 to i8**
  %367 = load i8*, i8** %any590, align 8
  br label %cond.end.591

cond.end.591:                                     ; preds = %cond.false.588, %cond.end.586
  %cond592 = phi i8* [ %cond587, %cond.end.586 ], [ %367, %cond.false.588 ]
  %arrayidx593 = getelementptr i8, i8* %cond592, i64 0
  store i8 95, i8* %arrayidx593, align 1
  br label %sw.epilog

sw.bb.594:                                        ; preds = %do.body
  %368 = load %struct._object*, %struct._object** %result, align 8
  %369 = bitcast %struct._object* %368 to %struct.PyASCIIObject*
  %state595 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %369, i32 0, i32 3
  %370 = bitcast %struct.anon* %state595 to i32*
  %bf.load596 = load i32, i32* %370, align 4
  %bf.lshr597 = lshr i32 %bf.load596, 5
  %bf.clear598 = and i32 %bf.lshr597, 1
  %tobool599 = icmp ne i32 %bf.clear598, 0
  br i1 %tobool599, label %cond.true.600, label %cond.false.612

cond.true.600:                                    ; preds = %sw.bb.594
  %371 = load %struct._object*, %struct._object** %result, align 8
  %372 = bitcast %struct._object* %371 to %struct.PyASCIIObject*
  %state601 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %372, i32 0, i32 3
  %373 = bitcast %struct.anon* %state601 to i32*
  %bf.load602 = load i32, i32* %373, align 4
  %bf.lshr603 = lshr i32 %bf.load602, 6
  %bf.clear604 = and i32 %bf.lshr603, 1
  %tobool605 = icmp ne i32 %bf.clear604, 0
  br i1 %tobool605, label %cond.true.606, label %cond.false.608

cond.true.606:                                    ; preds = %cond.true.600
  %374 = load %struct._object*, %struct._object** %result, align 8
  %375 = bitcast %struct._object* %374 to %struct.PyASCIIObject*
  %add.ptr607 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %375, i64 1
  %376 = bitcast %struct.PyASCIIObject* %add.ptr607 to i8*
  br label %cond.end.610

cond.false.608:                                   ; preds = %cond.true.600
  %377 = load %struct._object*, %struct._object** %result, align 8
  %378 = bitcast %struct._object* %377 to %struct.PyCompactUnicodeObject*
  %add.ptr609 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %378, i64 1
  %379 = bitcast %struct.PyCompactUnicodeObject* %add.ptr609 to i8*
  br label %cond.end.610

cond.end.610:                                     ; preds = %cond.false.608, %cond.true.606
  %cond611 = phi i8* [ %376, %cond.true.606 ], [ %379, %cond.false.608 ]
  br label %cond.end.615

cond.false.612:                                   ; preds = %sw.bb.594
  %380 = load %struct._object*, %struct._object** %result, align 8
  %381 = bitcast %struct._object* %380 to %struct.PyUnicodeObject*
  %data613 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %381, i32 0, i32 1
  %any614 = bitcast %union.anon* %data613 to i8**
  %382 = load i8*, i8** %any614, align 8
  br label %cond.end.615

cond.end.615:                                     ; preds = %cond.false.612, %cond.end.610
  %cond616 = phi i8* [ %cond611, %cond.end.610 ], [ %382, %cond.false.612 ]
  %383 = bitcast i8* %cond616 to i16*
  %arrayidx617 = getelementptr i16, i16* %383, i64 0
  store i16 95, i16* %arrayidx617, align 2
  br label %sw.epilog

sw.default:                                       ; preds = %do.body
  %384 = load %struct._object*, %struct._object** %result, align 8
  %385 = bitcast %struct._object* %384 to %struct.PyASCIIObject*
  %state618 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %385, i32 0, i32 3
  %386 = bitcast %struct.anon* %state618 to i32*
  %bf.load619 = load i32, i32* %386, align 4
  %bf.lshr620 = lshr i32 %bf.load619, 5
  %bf.clear621 = and i32 %bf.lshr620, 1
  %tobool622 = icmp ne i32 %bf.clear621, 0
  br i1 %tobool622, label %cond.true.623, label %cond.false.635

cond.true.623:                                    ; preds = %sw.default
  %387 = load %struct._object*, %struct._object** %result, align 8
  %388 = bitcast %struct._object* %387 to %struct.PyASCIIObject*
  %state624 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %388, i32 0, i32 3
  %389 = bitcast %struct.anon* %state624 to i32*
  %bf.load625 = load i32, i32* %389, align 4
  %bf.lshr626 = lshr i32 %bf.load625, 6
  %bf.clear627 = and i32 %bf.lshr626, 1
  %tobool628 = icmp ne i32 %bf.clear627, 0
  br i1 %tobool628, label %cond.true.629, label %cond.false.631

cond.true.629:                                    ; preds = %cond.true.623
  %390 = load %struct._object*, %struct._object** %result, align 8
  %391 = bitcast %struct._object* %390 to %struct.PyASCIIObject*
  %add.ptr630 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %391, i64 1
  %392 = bitcast %struct.PyASCIIObject* %add.ptr630 to i8*
  br label %cond.end.633

cond.false.631:                                   ; preds = %cond.true.623
  %393 = load %struct._object*, %struct._object** %result, align 8
  %394 = bitcast %struct._object* %393 to %struct.PyCompactUnicodeObject*
  %add.ptr632 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %394, i64 1
  %395 = bitcast %struct.PyCompactUnicodeObject* %add.ptr632 to i8*
  br label %cond.end.633

cond.end.633:                                     ; preds = %cond.false.631, %cond.true.629
  %cond634 = phi i8* [ %392, %cond.true.629 ], [ %395, %cond.false.631 ]
  br label %cond.end.638

cond.false.635:                                   ; preds = %sw.default
  %396 = load %struct._object*, %struct._object** %result, align 8
  %397 = bitcast %struct._object* %396 to %struct.PyUnicodeObject*
  %data636 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %397, i32 0, i32 1
  %any637 = bitcast %union.anon* %data636 to i8**
  %398 = load i8*, i8** %any637, align 8
  br label %cond.end.638

cond.end.638:                                     ; preds = %cond.false.635, %cond.end.633
  %cond639 = phi i8* [ %cond634, %cond.end.633 ], [ %398, %cond.false.635 ]
  %399 = bitcast i8* %cond639 to i32*
  %arrayidx640 = getelementptr i32, i32* %399, i64 0
  store i32 95, i32* %arrayidx640, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end.638, %cond.end.615, %cond.end.591
  br label %do.end

do.end:                                           ; preds = %sw.epilog
  %400 = load %struct._object*, %struct._object** %result, align 8
  %401 = load %struct._object*, %struct._object** %privateobj.addr, align 8
  %402 = load i64, i64* %ipriv, align 8
  %403 = load i64, i64* %plen, align 8
  %call641 = call i64 @PyUnicode_CopyCharacters(%struct._object* %400, i64 1, %struct._object* %401, i64 %402, i64 %403)
  %cmp642 = icmp slt i64 %call641, 0
  br i1 %cmp642, label %if.then.644, label %if.end.653

if.then.644:                                      ; preds = %do.end
  br label %do.body.645

do.body.645:                                      ; preds = %if.then.644
  %404 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %404, %struct._object** %_py_decref_tmp, align 8
  %405 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt646 = getelementptr inbounds %struct._object, %struct._object* %405, i32 0, i32 0
  %406 = load i64, i64* %ob_refcnt646, align 8
  %dec = add i64 %406, -1
  store i64 %dec, i64* %ob_refcnt646, align 8
  %cmp647 = icmp ne i64 %dec, 0
  br i1 %cmp647, label %if.then.649, label %if.else

if.then.649:                                      ; preds = %do.body.645
  br label %if.end.651

if.else:                                          ; preds = %do.body.645
  %407 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type650 = getelementptr inbounds %struct._object, %struct._object* %407, i32 0, i32 1
  %408 = load %struct._typeobject*, %struct._typeobject** %ob_type650, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %408, i32 0, i32 4
  %409 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %410 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %409(%struct._object* %410)
  br label %if.end.651

if.end.651:                                       ; preds = %if.else, %if.then.649
  br label %do.end.652

do.end.652:                                       ; preds = %if.end.651
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.653:                                       ; preds = %do.end
  %411 = load %struct._object*, %struct._object** %result, align 8
  %412 = load i64, i64* %plen, align 8
  %add654 = add i64 %412, 1
  %413 = load %struct._object*, %struct._object** %ident.addr, align 8
  %414 = load i64, i64* %nlen, align 8
  %call655 = call i64 @PyUnicode_CopyCharacters(%struct._object* %411, i64 %add654, %struct._object* %413, i64 0, i64 %414)
  %cmp656 = icmp slt i64 %call655, 0
  br i1 %cmp656, label %if.then.658, label %if.end.671

if.then.658:                                      ; preds = %if.end.653
  br label %do.body.659

do.body.659:                                      ; preds = %if.then.658
  %415 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %415, %struct._object** %_py_decref_tmp660, align 8
  %416 = load %struct._object*, %struct._object** %_py_decref_tmp660, align 8
  %ob_refcnt661 = getelementptr inbounds %struct._object, %struct._object* %416, i32 0, i32 0
  %417 = load i64, i64* %ob_refcnt661, align 8
  %dec662 = add i64 %417, -1
  store i64 %dec662, i64* %ob_refcnt661, align 8
  %cmp663 = icmp ne i64 %dec662, 0
  br i1 %cmp663, label %if.then.665, label %if.else.666

if.then.665:                                      ; preds = %do.body.659
  br label %if.end.669

if.else.666:                                      ; preds = %do.body.659
  %418 = load %struct._object*, %struct._object** %_py_decref_tmp660, align 8
  %ob_type667 = getelementptr inbounds %struct._object, %struct._object* %418, i32 0, i32 1
  %419 = load %struct._typeobject*, %struct._typeobject** %ob_type667, align 8
  %tp_dealloc668 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %419, i32 0, i32 4
  %420 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc668, align 8
  %421 = load %struct._object*, %struct._object** %_py_decref_tmp660, align 8
  call void %420(%struct._object* %421)
  br label %if.end.669

if.end.669:                                       ; preds = %if.else.666, %if.then.665
  br label %do.end.670

do.end.670:                                       ; preds = %if.end.669
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.671:                                       ; preds = %if.end.653
  %422 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %422, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.671, %do.end.670, %do.end.652, %if.then.565, %if.then.477, %if.then.470, %if.then.370, %if.then
  %423 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %423
}

declare i64 @PyUnicode_FindChar(%struct._object*, i32, i64, i64, i32) #1

declare void @PyErr_SetString(%struct._object*, i8*) #1

declare %struct._object* @PyUnicode_New(i64, i32) #1

declare i64 @PyUnicode_CopyCharacters(%struct._object*, i64, %struct._object*, i64, i64) #1

; Function Attrs: nounwind uwtable
define %struct.PyCodeObject* @PyAST_CompileObject(%struct._mod* %mod, %struct._object* %filename, %struct.PyCompilerFlags* %flags, i32 %optimize, %struct._arena* %arena) #0 {
entry:
  %retval = alloca %struct.PyCodeObject*, align 8
  %mod.addr = alloca %struct._mod*, align 8
  %filename.addr = alloca %struct._object*, align 8
  %flags.addr = alloca %struct.PyCompilerFlags*, align 8
  %optimize.addr = alloca i32, align 4
  %arena.addr = alloca %struct._arena*, align 8
  %c = alloca %struct.compiler, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %local_flags = alloca %struct.PyCompilerFlags, align 4
  %merged = alloca i32, align 4
  store %struct._mod* %mod, %struct._mod** %mod.addr, align 8
  store %struct._object* %filename, %struct._object** %filename.addr, align 8
  store %struct.PyCompilerFlags* %flags, %struct.PyCompilerFlags** %flags.addr, align 8
  store i32 %optimize, i32* %optimize.addr, align 4
  store %struct._arena* %arena, %struct._arena** %arena.addr, align 8
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %co, align 8
  %0 = load %struct._object*, %struct._object** @__doc__, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end.3, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @__doc__, align 8
  %1 = load %struct._object*, %struct._object** @__doc__, align 8
  %tobool1 = icmp ne %struct._object* %1, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %call4 = call i32 @compiler_init(%struct.compiler* %c)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %2 = load %struct._object*, %struct._object** %filename.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 0
  %3 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %4 = load %struct._object*, %struct._object** %filename.addr, align 8
  %c_filename = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 0
  store %struct._object* %4, %struct._object** %c_filename, align 8
  %5 = load %struct._arena*, %struct._arena** %arena.addr, align 8
  %c_arena = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 9
  store %struct._arena* %5, %struct._arena** %c_arena, align 8
  %6 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %7 = load %struct._object*, %struct._object** %filename.addr, align 8
  %call8 = call %struct.PyFutureFeatures* @PyFuture_FromASTObject(%struct._mod* %6, %struct._object* %7)
  %c_future = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 2
  store %struct.PyFutureFeatures* %call8, %struct.PyFutureFeatures** %c_future, align 8
  %c_future9 = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 2
  %8 = load %struct.PyFutureFeatures*, %struct.PyFutureFeatures** %c_future9, align 8
  %cmp = icmp eq %struct.PyFutureFeatures* %8, null
  br i1 %cmp, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.7
  br label %finally

if.end.11:                                        ; preds = %if.end.7
  %9 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %flags.addr, align 8
  %tobool12 = icmp ne %struct.PyCompilerFlags* %9, null
  br i1 %tobool12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.end.11
  %cf_flags = getelementptr inbounds %struct.PyCompilerFlags, %struct.PyCompilerFlags* %local_flags, i32 0, i32 0
  store i32 0, i32* %cf_flags, align 4
  store %struct.PyCompilerFlags* %local_flags, %struct.PyCompilerFlags** %flags.addr, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.end.11
  %c_future15 = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 2
  %10 = load %struct.PyFutureFeatures*, %struct.PyFutureFeatures** %c_future15, align 8
  %ff_features = getelementptr inbounds %struct.PyFutureFeatures, %struct.PyFutureFeatures* %10, i32 0, i32 0
  %11 = load i32, i32* %ff_features, align 4
  %12 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %flags.addr, align 8
  %cf_flags16 = getelementptr inbounds %struct.PyCompilerFlags, %struct.PyCompilerFlags* %12, i32 0, i32 0
  %13 = load i32, i32* %cf_flags16, align 4
  %or = or i32 %11, %13
  store i32 %or, i32* %merged, align 4
  %14 = load i32, i32* %merged, align 4
  %c_future17 = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 2
  %15 = load %struct.PyFutureFeatures*, %struct.PyFutureFeatures** %c_future17, align 8
  %ff_features18 = getelementptr inbounds %struct.PyFutureFeatures, %struct.PyFutureFeatures* %15, i32 0, i32 0
  store i32 %14, i32* %ff_features18, align 4
  %16 = load i32, i32* %merged, align 4
  %17 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %flags.addr, align 8
  %cf_flags19 = getelementptr inbounds %struct.PyCompilerFlags, %struct.PyCompilerFlags* %17, i32 0, i32 0
  store i32 %16, i32* %cf_flags19, align 4
  %18 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %flags.addr, align 8
  %c_flags = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 3
  store %struct.PyCompilerFlags* %18, %struct.PyCompilerFlags** %c_flags, align 8
  %19 = load i32, i32* %optimize.addr, align 4
  %cmp20 = icmp eq i32 %19, -1
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.14
  %20 = load i32, i32* @Py_OptimizeFlag, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end.14
  %21 = load i32, i32* %optimize.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %20, %cond.true ], [ %21, %cond.false ]
  %c_optimize = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 4
  store i32 %cond, i32* %c_optimize, align 4
  %c_nestlevel = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 6
  store i32 0, i32* %c_nestlevel, align 4
  %22 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %23 = load %struct._object*, %struct._object** %filename.addr, align 8
  %c_future21 = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 2
  %24 = load %struct.PyFutureFeatures*, %struct.PyFutureFeatures** %c_future21, align 8
  %call22 = call %struct.symtable* @PySymtable_BuildObject(%struct._mod* %22, %struct._object* %23, %struct.PyFutureFeatures* %24)
  %c_st = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 1
  store %struct.symtable* %call22, %struct.symtable** %c_st, align 8
  %c_st23 = getelementptr inbounds %struct.compiler, %struct.compiler* %c, i32 0, i32 1
  %25 = load %struct.symtable*, %struct.symtable** %c_st23, align 8
  %cmp24 = icmp eq %struct.symtable* %25, null
  br i1 %cmp24, label %if.then.25, label %if.end.30

if.then.25:                                       ; preds = %cond.end
  %call26 = call %struct._object* @PyErr_Occurred()
  %tobool27 = icmp ne %struct._object* %call26, null
  br i1 %tobool27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %if.then.25
  %26 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i32 0, i32 0))
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %if.then.25
  br label %finally

if.end.30:                                        ; preds = %cond.end
  %27 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %call31 = call %struct.PyCodeObject* @compiler_mod(%struct.compiler* %c, %struct._mod* %27)
  store %struct.PyCodeObject* %call31, %struct.PyCodeObject** %co, align 8
  br label %finally

finally:                                          ; preds = %if.end.30, %if.end.29, %if.then.10
  call void @compiler_free(%struct.compiler* %c)
  %28 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  store %struct.PyCodeObject* %28, %struct.PyCodeObject** %retval
  br label %return

return:                                           ; preds = %finally, %if.then.6, %if.then.2
  %29 = load %struct.PyCodeObject*, %struct.PyCodeObject** %retval
  ret %struct.PyCodeObject* %29
}

declare %struct._object* @PyUnicode_InternFromString(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compiler_init(%struct.compiler* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = bitcast %struct.compiler* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 72, i32 8, i1 false)
  %call = call %struct._object* @PyList_New(i64 0)
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack = getelementptr inbounds %struct.compiler, %struct.compiler* %2, i32 0, i32 8
  store %struct._object* %call, %struct._object** %c_stack, align 8
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack1 = getelementptr inbounds %struct.compiler, %struct.compiler* %3, i32 0, i32 8
  %4 = load %struct._object*, %struct._object** %c_stack1, align 8
  %tobool = icmp ne %struct._object* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

declare %struct.PyFutureFeatures* @PyFuture_FromASTObject(%struct._mod*, %struct._object*) #1

declare %struct.symtable* @PySymtable_BuildObject(%struct._mod*, %struct._object*, %struct.PyFutureFeatures*) #1

declare %struct._object* @PyErr_Occurred() #1

; Function Attrs: nounwind uwtable
define internal %struct.PyCodeObject* @compiler_mod(%struct.compiler* %c, %struct._mod* %mod) #0 {
entry:
  %retval = alloca %struct.PyCodeObject*, align 8
  %c.addr = alloca %struct.compiler*, align 8
  %mod.addr = alloca %struct._mod*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %addNone = alloca i32, align 4
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._mod* %mod, %struct._mod** %mod.addr, align 8
  store i32 1, i32* %addNone, align 4
  %0 = load %struct._object*, %struct._object** @compiler_mod.module, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end.3, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @compiler_mod.module, align 8
  %1 = load %struct._object*, %struct._object** @compiler_mod.module, align 8
  %tobool1 = icmp ne %struct._object* %1, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._object*, %struct._object** @compiler_mod.module, align 8
  %4 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %5 = bitcast %struct._mod* %4 to i8*
  %call4 = call i32 @compiler_enter_scope(%struct.compiler* %2, %struct._object* %3, i32 0, i8* %5, i32 0)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %6 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %kind = getelementptr inbounds %struct._mod, %struct._mod* %6, i32 0, i32 0
  %7 = load i32, i32* %kind, align 4
  switch i32 %7, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.12
    i32 3, label %sw.bb.22
    i32 4, label %sw.bb.29
  ]

sw.bb:                                            ; preds = %if.end.7
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %9 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %v = getelementptr inbounds %struct._mod, %struct._mod* %9, i32 0, i32 1
  %Module = bitcast %union.anon.0* %v to %struct.anon.1*
  %body = getelementptr inbounds %struct.anon.1, %struct.anon.1* %Module, i32 0, i32 0
  %10 = load %struct.asdl_seq*, %struct.asdl_seq** %body, align 8
  %call8 = call i32 @compiler_body(%struct.compiler* %8, %struct.asdl_seq* %10)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %sw.bb
  %11 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %11)
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end.11:                                        ; preds = %sw.bb
  br label %sw.epilog

sw.bb.12:                                         ; preds = %if.end.7
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_interactive = getelementptr inbounds %struct.compiler, %struct.compiler* %12, i32 0, i32 5
  store i32 1, i32* %c_interactive, align 4
  %13 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %v13 = getelementptr inbounds %struct._mod, %struct._mod* %13, i32 0, i32 1
  %Interactive = bitcast %union.anon.0* %v13 to %struct.anon.2*
  %body14 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %Interactive, i32 0, i32 0
  %14 = load %struct.asdl_seq*, %struct.asdl_seq** %body14, align 8
  store %struct.asdl_seq* %14, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.12
  %15 = load i32, i32* %_i, align 4
  %conv = sext i32 %15 to i64
  %16 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp = icmp eq %struct.asdl_seq* %16, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %17 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %17, i32 0, i32 0
  %18 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %18, %cond.false ]
  %cmp16 = icmp slt i64 %conv, %cond
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %19 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %20, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %21 = load i8*, i8** %arrayidx, align 8
  %22 = bitcast i8* %21 to %struct._stmt*
  store %struct._stmt* %22, %struct._stmt** %elt, align 8
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %24 = load %struct._stmt*, %struct._stmt** %elt, align 8
  %call18 = call i32 @compiler_visit_stmt(%struct.compiler* %23, %struct._stmt* %24)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %for.body
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %25)
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end.21:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.21
  %26 = load i32, i32* %_i, align 4
  %inc = add i32 %26, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  br label %sw.epilog

sw.bb.22:                                         ; preds = %if.end.7
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %28 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %v23 = getelementptr inbounds %struct._mod, %struct._mod* %28, i32 0, i32 1
  %Expression = bitcast %union.anon.0* %v23 to %struct.anon.3*
  %body24 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %Expression, i32 0, i32 0
  %29 = load %struct._expr*, %struct._expr** %body24, align 8
  %call25 = call i32 @compiler_visit_expr(%struct.compiler* %27, %struct._expr* %29)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %sw.bb.22
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %30)
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end.28:                                        ; preds = %sw.bb.22
  store i32 0, i32* %addNone, align 4
  br label %sw.epilog

sw.bb.29:                                         ; preds = %if.end.7
  %31 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %31, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i32 0, i32 0))
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

sw.default:                                       ; preds = %if.end.7
  %32 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %33 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %kind30 = getelementptr inbounds %struct._mod, %struct._mod* %33, i32 0, i32 0
  %34 = load i32, i32* %kind30, align 4
  %call31 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %32, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i32 0, i32 0), i32 %34)
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.28, %for.end, %if.end.11
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %36 = load i32, i32* %addNone, align 4
  %call32 = call %struct.PyCodeObject* @assemble(%struct.compiler* %35, i32 %36)
  store %struct.PyCodeObject* %call32, %struct.PyCodeObject** %co, align 8
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %37)
  %38 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  store %struct.PyCodeObject* %38, %struct.PyCodeObject** %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %sw.bb.29, %if.then.27, %if.then.20, %if.then.10, %if.then.6, %if.then.2
  %39 = load %struct.PyCodeObject*, %struct.PyCodeObject** %retval
  ret %struct.PyCodeObject* %39
}

; Function Attrs: nounwind uwtable
define internal void @compiler_free(%struct.compiler* %c) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp14 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_st = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 1
  %1 = load %struct.symtable*, %struct.symtable** %c_st, align 8
  %tobool = icmp ne %struct.symtable* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_st1 = getelementptr inbounds %struct.compiler, %struct.compiler* %2, i32 0, i32 1
  %3 = load %struct.symtable*, %struct.symtable** %c_st1, align 8
  call void @PySymtable_Free(%struct.symtable* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_future = getelementptr inbounds %struct.compiler, %struct.compiler* %4, i32 0, i32 2
  %5 = load %struct.PyFutureFeatures*, %struct.PyFutureFeatures** %c_future, align 8
  %tobool2 = icmp ne %struct.PyFutureFeatures* %5, null
  br i1 %tobool2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_future4 = getelementptr inbounds %struct.compiler, %struct.compiler* %6, i32 0, i32 2
  %7 = load %struct.PyFutureFeatures*, %struct.PyFutureFeatures** %c_future4, align 8
  %8 = bitcast %struct.PyFutureFeatures* %7 to i8*
  call void @PyObject_Free(i8* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.3, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.5
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_filename = getelementptr inbounds %struct.compiler, %struct.compiler* %9, i32 0, i32 0
  %10 = load %struct._object*, %struct._object** %c_filename, align 8
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %11, null
  br i1 %cmp, label %if.then.6, label %if.end.11

if.then.6:                                        ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body.7
  br label %if.end.10

if.else:                                          ; preds = %do.body.7
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %if.end.11

if.end.11:                                        ; preds = %do.end, %do.body
  br label %do.end.12

do.end.12:                                        ; preds = %if.end.11
  br label %do.body.13

do.body.13:                                       ; preds = %do.end.12
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack = getelementptr inbounds %struct.compiler, %struct.compiler* %19, i32 0, i32 8
  %20 = load %struct._object*, %struct._object** %c_stack, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp14, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt15, align 8
  %dec16 = add i64 %22, -1
  store i64 %dec16, i64* %ob_refcnt15, align 8
  %cmp17 = icmp ne i64 %dec16, 0
  br i1 %cmp17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %do.body.13
  br label %if.end.22

if.else.19:                                       ; preds = %do.body.13
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc21, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  call void %25(%struct._object* %26)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.18
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.PyCodeObject* @PyAST_CompileEx(%struct._mod* %mod, i8* %filename_str, %struct.PyCompilerFlags* %flags, i32 %optimize, %struct._arena* %arena) #0 {
entry:
  %retval = alloca %struct.PyCodeObject*, align 8
  %mod.addr = alloca %struct._mod*, align 8
  %filename_str.addr = alloca i8*, align 8
  %flags.addr = alloca %struct.PyCompilerFlags*, align 8
  %optimize.addr = alloca i32, align 4
  %arena.addr = alloca %struct._arena*, align 8
  %filename = alloca %struct._object*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._mod* %mod, %struct._mod** %mod.addr, align 8
  store i8* %filename_str, i8** %filename_str.addr, align 8
  store %struct.PyCompilerFlags* %flags, %struct.PyCompilerFlags** %flags.addr, align 8
  store i32 %optimize, i32* %optimize.addr, align 4
  store %struct._arena* %arena, %struct._arena** %arena.addr, align 8
  %0 = load i8*, i8** %filename_str.addr, align 8
  %call = call %struct._object* @PyUnicode_DecodeFSDefault(i8* %0)
  store %struct._object* %call, %struct._object** %filename, align 8
  %1 = load %struct._object*, %struct._object** %filename, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %3 = load %struct._object*, %struct._object** %filename, align 8
  %4 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %flags.addr, align 8
  %5 = load i32, i32* %optimize.addr, align 4
  %6 = load %struct._arena*, %struct._arena** %arena.addr, align 8
  %call1 = call %struct.PyCodeObject* @PyAST_CompileObject(%struct._mod* %2, %struct._object* %3, %struct.PyCompilerFlags* %4, i32 %5, %struct._arena* %6)
  store %struct.PyCodeObject* %call1, %struct.PyCodeObject** %co, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %filename, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %14 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  store %struct.PyCodeObject* %14, %struct.PyCodeObject** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %15 = load %struct.PyCodeObject*, %struct.PyCodeObject** %retval
  ret %struct.PyCodeObject* %15
}

declare %struct._object* @PyUnicode_DecodeFSDefault(i8*) #1

; Function Attrs: nounwind uwtable
define %struct.PyCodeObject* @PyNode_Compile(%struct._node* %n, i8* %filename) #0 {
entry:
  %retval = alloca %struct.PyCodeObject*, align 8
  %n.addr = alloca %struct._node*, align 8
  %filename.addr = alloca i8*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %mod = alloca %struct._mod*, align 8
  %arena = alloca %struct._arena*, align 8
  store %struct._node* %n, %struct._node** %n.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %co, align 8
  %call = call %struct._arena* @PyArena_New()
  store %struct._arena* %call, %struct._arena** %arena, align 8
  %0 = load %struct._arena*, %struct._arena** %arena, align 8
  %tobool = icmp ne %struct._arena* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._node*, %struct._node** %n.addr, align 8
  %2 = load i8*, i8** %filename.addr, align 8
  %3 = load %struct._arena*, %struct._arena** %arena, align 8
  %call1 = call %struct._mod* @PyAST_FromNode(%struct._node* %1, %struct.PyCompilerFlags* null, i8* %2, %struct._arena* %3)
  store %struct._mod* %call1, %struct._mod** %mod, align 8
  %4 = load %struct._mod*, %struct._mod** %mod, align 8
  %tobool2 = icmp ne %struct._mod* %4, null
  br i1 %tobool2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %5 = load %struct._mod*, %struct._mod** %mod, align 8
  %6 = load i8*, i8** %filename.addr, align 8
  %7 = load %struct._arena*, %struct._arena** %arena, align 8
  %call4 = call %struct.PyCodeObject* @PyAST_CompileEx(%struct._mod* %5, i8* %6, %struct.PyCompilerFlags* null, i32 -1, %struct._arena* %7)
  store %struct.PyCodeObject* %call4, %struct.PyCodeObject** %co, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.3, %if.end
  %8 = load %struct._arena*, %struct._arena** %arena, align 8
  call void @PyArena_Free(%struct._arena* %8)
  %9 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  store %struct.PyCodeObject* %9, %struct.PyCodeObject** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then
  %10 = load %struct.PyCodeObject*, %struct.PyCodeObject** %retval
  ret %struct.PyCodeObject* %10
}

declare %struct._arena* @PyArena_New() #1

declare %struct._mod* @PyAST_FromNode(%struct._node*, %struct.PyCompilerFlags*, i8*, %struct._arena*) #1

declare void @PyArena_Free(%struct._arena*) #1

; Function Attrs: nounwind uwtable
define i32 @PyCompile_OpcodeStackEffect(i32 %opcode, i32 %oparg) #0 {
entry:
  %retval = alloca i32, align 4
  %opcode.addr = alloca i32, align 4
  %oparg.addr = alloca i32, align 4
  store i32 %opcode, i32* %opcode.addr, align 4
  store i32 %oparg, i32* %oparg.addr, align 4
  %0 = load i32, i32* %opcode.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.2
    i32 5, label %sw.bb.3
    i32 10, label %sw.bb.4
    i32 11, label %sw.bb.4
    i32 12, label %sw.bb.4
    i32 15, label %sw.bb.4
    i32 146, label %sw.bb.5
    i32 145, label %sw.bb.5
    i32 147, label %sw.bb.6
    i32 19, label %sw.bb.7
    i32 20, label %sw.bb.7
    i32 22, label %sw.bb.7
    i32 23, label %sw.bb.7
    i32 24, label %sw.bb.7
    i32 25, label %sw.bb.7
    i32 26, label %sw.bb.7
    i32 27, label %sw.bb.7
    i32 28, label %sw.bb.8
    i32 29, label %sw.bb.8
    i32 55, label %sw.bb.9
    i32 56, label %sw.bb.9
    i32 57, label %sw.bb.9
    i32 59, label %sw.bb.9
    i32 60, label %sw.bb.10
    i32 54, label %sw.bb.11
    i32 61, label %sw.bb.12
    i32 62, label %sw.bb.13
    i32 63, label %sw.bb.13
    i32 64, label %sw.bb.13
    i32 65, label %sw.bb.13
    i32 66, label %sw.bb.13
    i32 67, label %sw.bb.14
    i32 68, label %sw.bb.15
    i32 70, label %sw.bb.16
    i32 71, label %sw.bb.17
    i32 75, label %sw.bb.18
    i32 76, label %sw.bb.18
    i32 77, label %sw.bb.18
    i32 78, label %sw.bb.18
    i32 79, label %sw.bb.18
    i32 80, label %sw.bb.19
    i32 143, label %sw.bb.20
    i32 81, label %sw.bb.21
    i32 83, label %sw.bb.22
    i32 84, label %sw.bb.23
    i32 86, label %sw.bb.24
    i32 72, label %sw.bb.25
    i32 87, label %sw.bb.26
    i32 89, label %sw.bb.27
    i32 88, label %sw.bb.28
    i32 90, label %sw.bb.29
    i32 91, label %sw.bb.30
    i32 92, label %sw.bb.31
    i32 94, label %sw.bb.32
    i32 93, label %sw.bb.33
    i32 95, label %sw.bb.34
    i32 96, label %sw.bb.35
    i32 97, label %sw.bb.36
    i32 98, label %sw.bb.37
    i32 100, label %sw.bb.38
    i32 101, label %sw.bb.39
    i32 102, label %sw.bb.40
    i32 103, label %sw.bb.40
    i32 104, label %sw.bb.40
    i32 105, label %sw.bb.42
    i32 106, label %sw.bb.43
    i32 107, label %sw.bb.44
    i32 108, label %sw.bb.45
    i32 109, label %sw.bb.46
    i32 110, label %sw.bb.47
    i32 112, label %sw.bb.47
    i32 111, label %sw.bb.47
    i32 113, label %sw.bb.47
    i32 114, label %sw.bb.48
    i32 115, label %sw.bb.48
    i32 116, label %sw.bb.49
    i32 119, label %sw.bb.50
    i32 120, label %sw.bb.51
    i32 121, label %sw.bb.52
    i32 122, label %sw.bb.52
    i32 124, label %sw.bb.53
    i32 125, label %sw.bb.54
    i32 126, label %sw.bb.55
    i32 130, label %sw.bb.56
    i32 131, label %sw.bb.58
    i32 140, label %sw.bb.62
    i32 141, label %sw.bb.62
    i32 142, label %sw.bb.70
    i32 132, label %sw.bb.78
    i32 134, label %sw.bb.88
    i32 133, label %sw.bb.98
    i32 135, label %sw.bb.99
    i32 136, label %sw.bb.100
    i32 148, label %sw.bb.100
    i32 137, label %sw.bb.101
    i32 138, label %sw.bb.102
  ]

sw.bb:                                            ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i32 2, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %entry, %entry, %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

sw.bb.7:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.8:                                          ; preds = %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %entry, %entry, %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i32 -3, i32* %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

sw.bb.12:                                         ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

sw.bb.13:                                         ; preds = %entry, %entry, %entry, %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.14:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.15:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.16:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.17:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.18:                                         ; preds = %entry, %entry, %entry, %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.20:                                         ; preds = %entry
  store i32 7, i32* %retval
  br label %return

sw.bb.21:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.22:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.23:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.24:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.25:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.26:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.29:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.30:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.31:                                         ; preds = %entry
  %1 = load i32, i32* %oparg.addr, align 4
  %sub = sub i32 %1, 1
  store i32 %sub, i32* %retval
  br label %return

sw.bb.32:                                         ; preds = %entry
  %2 = load i32, i32* %oparg.addr, align 4
  %and = and i32 %2, 255
  %3 = load i32, i32* %oparg.addr, align 4
  %shr = ashr i32 %3, 8
  %add = add i32 %and, %shr
  store i32 %add, i32* %retval
  br label %return

sw.bb.33:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.34:                                         ; preds = %entry
  store i32 -2, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.37:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.38:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.39:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.40:                                         ; preds = %entry, %entry, %entry
  %4 = load i32, i32* %oparg.addr, align 4
  %sub41 = sub i32 1, %4
  store i32 %sub41, i32* %retval
  br label %return

sw.bb.42:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.45:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.46:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.47:                                         ; preds = %entry, %entry, %entry, %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.48:                                         ; preds = %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.49:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.50:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.51:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.52:                                         ; preds = %entry, %entry
  store i32 6, i32* %retval
  br label %return

sw.bb.53:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.54:                                         ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.55:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.56:                                         ; preds = %entry
  %5 = load i32, i32* %oparg.addr, align 4
  %sub57 = sub i32 0, %5
  store i32 %sub57, i32* %retval
  br label %return

sw.bb.58:                                         ; preds = %entry
  %6 = load i32, i32* %oparg.addr, align 4
  %rem = srem i32 %6, 256
  %7 = load i32, i32* %oparg.addr, align 4
  %div = sdiv i32 %7, 256
  %rem59 = srem i32 %div, 256
  %mul = mul i32 2, %rem59
  %add60 = add i32 %rem, %mul
  %sub61 = sub i32 0, %add60
  store i32 %sub61, i32* %retval
  br label %return

sw.bb.62:                                         ; preds = %entry, %entry
  %8 = load i32, i32* %oparg.addr, align 4
  %rem63 = srem i32 %8, 256
  %9 = load i32, i32* %oparg.addr, align 4
  %div64 = sdiv i32 %9, 256
  %rem65 = srem i32 %div64, 256
  %mul66 = mul i32 2, %rem65
  %add67 = add i32 %rem63, %mul66
  %sub68 = sub i32 0, %add67
  %sub69 = sub i32 %sub68, 1
  store i32 %sub69, i32* %retval
  br label %return

sw.bb.70:                                         ; preds = %entry
  %10 = load i32, i32* %oparg.addr, align 4
  %rem71 = srem i32 %10, 256
  %11 = load i32, i32* %oparg.addr, align 4
  %div72 = sdiv i32 %11, 256
  %rem73 = srem i32 %div72, 256
  %mul74 = mul i32 2, %rem73
  %add75 = add i32 %rem71, %mul74
  %sub76 = sub i32 0, %add75
  %sub77 = sub i32 %sub76, 2
  store i32 %sub77, i32* %retval
  br label %return

sw.bb.78:                                         ; preds = %entry
  %12 = load i32, i32* %oparg.addr, align 4
  %rem79 = srem i32 %12, 256
  %13 = load i32, i32* %oparg.addr, align 4
  %div80 = sdiv i32 %13, 256
  %rem81 = srem i32 %div80, 256
  %mul82 = mul i32 2, %rem81
  %add83 = add i32 %rem79, %mul82
  %sub84 = sub i32 -1, %add83
  %14 = load i32, i32* %oparg.addr, align 4
  %shr85 = ashr i32 %14, 16
  %and86 = and i32 %shr85, 65535
  %sub87 = sub i32 %sub84, %and86
  store i32 %sub87, i32* %retval
  br label %return

sw.bb.88:                                         ; preds = %entry
  %15 = load i32, i32* %oparg.addr, align 4
  %rem89 = srem i32 %15, 256
  %16 = load i32, i32* %oparg.addr, align 4
  %div90 = sdiv i32 %16, 256
  %rem91 = srem i32 %div90, 256
  %mul92 = mul i32 2, %rem91
  %add93 = add i32 %rem89, %mul92
  %sub94 = sub i32 -2, %add93
  %17 = load i32, i32* %oparg.addr, align 4
  %shr95 = ashr i32 %17, 16
  %and96 = and i32 %shr95, 65535
  %sub97 = sub i32 %sub94, %and96
  store i32 %sub97, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %entry
  %18 = load i32, i32* %oparg.addr, align 4
  %cmp = icmp eq i32 %18, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb.98
  store i32 -2, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb.98
  store i32 -1, i32* %retval
  br label %return

sw.bb.99:                                         ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.100:                                        ; preds = %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.101:                                        ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.102:                                        ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 2147483647, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.102, %sw.bb.101, %sw.bb.100, %sw.bb.99, %if.else, %if.then, %sw.bb.88, %sw.bb.78, %sw.bb.70, %sw.bb.62, %sw.bb.58, %sw.bb.56, %sw.bb.55, %sw.bb.54, %sw.bb.53, %sw.bb.52, %sw.bb.51, %sw.bb.50, %sw.bb.49, %sw.bb.48, %sw.bb.47, %sw.bb.46, %sw.bb.45, %sw.bb.44, %sw.bb.43, %sw.bb.42, %sw.bb.40, %sw.bb.39, %sw.bb.38, %sw.bb.37, %sw.bb.36, %sw.bb.35, %sw.bb.34, %sw.bb.33, %sw.bb.32, %sw.bb.31, %sw.bb.30, %sw.bb.29, %sw.bb.28, %sw.bb.27, %sw.bb.26, %sw.bb.25, %sw.bb.24, %sw.bb.23, %sw.bb.22, %sw.bb.21, %sw.bb.20, %sw.bb.19, %sw.bb.18, %sw.bb.17, %sw.bb.16, %sw.bb.15, %sw.bb.14, %sw.bb.13, %sw.bb.12, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define %struct.PyCodeObject* @PyAST_Compile(%struct._mod* %mod, i8* %filename, %struct.PyCompilerFlags* %flags, %struct._arena* %arena) #0 {
entry:
  %mod.addr = alloca %struct._mod*, align 8
  %filename.addr = alloca i8*, align 8
  %flags.addr = alloca %struct.PyCompilerFlags*, align 8
  %arena.addr = alloca %struct._arena*, align 8
  store %struct._mod* %mod, %struct._mod** %mod.addr, align 8
  store i8* %filename, i8** %filename.addr, align 8
  store %struct.PyCompilerFlags* %flags, %struct.PyCompilerFlags** %flags.addr, align 8
  store %struct._arena* %arena, %struct._arena** %arena.addr, align 8
  %0 = load %struct._mod*, %struct._mod** %mod.addr, align 8
  %1 = load i8*, i8** %filename.addr, align 8
  %2 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %flags.addr, align 8
  %3 = load %struct._arena*, %struct._arena** %arena.addr, align 8
  %call = call %struct.PyCodeObject* @PyAST_CompileEx(%struct._mod* %0, i8* %1, %struct.PyCompilerFlags* %2, i32 -1, %struct._arena* %3)
  ret %struct.PyCodeObject* %call
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

declare %struct._object* @PyList_New(i64) #1

declare void @PySymtable_Free(%struct.symtable*) #1

declare void @PyObject_Free(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compiler_enter_scope(%struct.compiler* %c, %struct._object* %name, i32 %scope_type, i8* %key, i32 %lineno) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %name.addr = alloca %struct._object*, align 8
  %scope_type.addr = alloca i32, align 4
  %key.addr = alloca i8*, align 8
  %lineno.addr = alloca i32, align 4
  %u = alloca %struct.compiler_unit*, align 8
  %tuple = alloca %struct._object*, align 8
  %name20 = alloca %struct._object*, align 8
  %zero = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp40 = alloca %struct._object*, align 8
  %_py_decref_tmp51 = alloca %struct._object*, align 8
  %capsule = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp98 = alloca %struct._object*, align 8
  %_py_decref_tmp112 = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store i32 %scope_type, i32* %scope_type.addr, align 4
  store i8* %key, i8** %key.addr, align 8
  store i32 %lineno, i32* %lineno.addr, align 4
  %call = call i8* @PyObject_Malloc(i64 456)
  %0 = bitcast i8* %call to %struct.compiler_unit*
  store %struct.compiler_unit* %0, %struct.compiler_unit** %u, align 8
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %tobool = icmp ne %struct.compiler_unit* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_NoMemory()
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %3 = bitcast %struct.compiler_unit* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 456, i32 8, i1 false)
  %4 = load i32, i32* %scope_type.addr, align 4
  %5 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_scope_type = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %5, i32 0, i32 3
  store i32 %4, i32* %u_scope_type, align 4
  %6 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_argcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %6, i32 0, i32 10
  store i64 0, i64* %u_argcount, align 8
  %7 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_kwonlyargcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %7, i32 0, i32 11
  store i64 0, i64* %u_kwonlyargcount, align 8
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_st = getelementptr inbounds %struct.compiler, %struct.compiler* %8, i32 0, i32 1
  %9 = load %struct.symtable*, %struct.symtable** %c_st, align 8
  %10 = load i8*, i8** %key.addr, align 8
  %call2 = call %struct._symtable_entry* @PySymtable_Lookup(%struct.symtable* %9, i8* %10)
  %11 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %11, i32 0, i32 0
  store %struct._symtable_entry* %call2, %struct._symtable_entry** %u_ste, align 8
  %12 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_ste3 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %12, i32 0, i32 0
  %13 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste3, align 8
  %tobool4 = icmp ne %struct._symtable_entry* %13, null
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %14 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %14)
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %15 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %16, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %17 = load %struct._object*, %struct._object** %name.addr, align 8
  %18 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_name = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %18, i32 0, i32 1
  store %struct._object* %17, %struct._object** %u_name, align 8
  %19 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_ste7 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %19, i32 0, i32 0
  %20 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste7, align 8
  %ste_varnames = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %20, i32 0, i32 4
  %21 = load %struct._object*, %struct._object** %ste_varnames, align 8
  %call8 = call %struct._object* @list2dict(%struct._object* %21)
  %22 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_varnames = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %22, i32 0, i32 6
  store %struct._object* %call8, %struct._object** %u_varnames, align 8
  %23 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_ste9 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %23, i32 0, i32 0
  %24 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste9, align 8
  %ste_symbols = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %24, i32 0, i32 2
  %25 = load %struct._object*, %struct._object** %ste_symbols, align 8
  %call10 = call %struct._object* @dictbytype(%struct._object* %25, i32 5, i32 0, i64 0)
  %26 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_cellvars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %26, i32 0, i32 7
  store %struct._object* %call10, %struct._object** %u_cellvars, align 8
  %27 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_varnames11 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %27, i32 0, i32 6
  %28 = load %struct._object*, %struct._object** %u_varnames11, align 8
  %tobool12 = icmp ne %struct._object* %28, null
  br i1 %tobool12, label %lor.lhs.false, label %if.then.15

lor.lhs.false:                                    ; preds = %if.end.6
  %29 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_cellvars13 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %29, i32 0, i32 7
  %30 = load %struct._object*, %struct._object** %u_cellvars13, align 8
  %tobool14 = icmp ne %struct._object* %30, null
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %lor.lhs.false, %if.end.6
  %31 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %31)
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %lor.lhs.false
  %32 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_ste17 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %32, i32 0, i32 0
  %33 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste17, align 8
  %ste_needs_class_closure = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %33, i32 0, i32 10
  %bf.load = load i8, i8* %ste_needs_class_closure, align 4
  %bf.lshr = lshr i8 %bf.load, 6
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool18 = icmp ne i32 %bf.cast, 0
  br i1 %tobool18, label %if.then.19, label %if.end.64

if.then.19:                                       ; preds = %if.end.16
  %call21 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @compiler_enter_scope.PyId___class__)
  store %struct._object* %call21, %struct._object** %name20, align 8
  %34 = load %struct._object*, %struct._object** %name20, align 8
  %tobool22 = icmp ne %struct._object* %34, null
  br i1 %tobool22, label %if.end.24, label %if.then.23

if.then.23:                                       ; preds = %if.then.19
  %35 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %35)
  store i32 0, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.19
  %36 = load %struct._object*, %struct._object** %name20, align 8
  %37 = load %struct._object*, %struct._object** %name20, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %call25 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %36, %struct._typeobject* %38)
  store %struct._object* %call25, %struct._object** %tuple, align 8
  %39 = load %struct._object*, %struct._object** %tuple, align 8
  %tobool26 = icmp ne %struct._object* %39, null
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.end.24
  %40 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %40)
  store i32 0, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  %call29 = call %struct._object* @PyLong_FromLong(i64 0)
  store %struct._object* %call29, %struct._object** %zero, align 8
  %41 = load %struct._object*, %struct._object** %zero, align 8
  %tobool30 = icmp ne %struct._object* %41, null
  br i1 %tobool30, label %if.end.36, label %if.then.31

if.then.31:                                       ; preds = %if.end.28
  br label %do.body

do.body:                                          ; preds = %if.then.31
  %42 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt32, align 8
  %dec = add i64 %44, -1
  store i64 %dec, i64* %ob_refcnt32, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.33, label %if.else

if.then.33:                                       ; preds = %do.body
  br label %if.end.35

if.else:                                          ; preds = %do.body
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %47(%struct._object* %48)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else, %if.then.33
  br label %do.end

do.end:                                           ; preds = %if.end.35
  %49 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %49)
  store i32 0, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.end.28
  %50 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_cellvars37 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %50, i32 0, i32 7
  %51 = load %struct._object*, %struct._object** %u_cellvars37, align 8
  %52 = load %struct._object*, %struct._object** %tuple, align 8
  %53 = load %struct._object*, %struct._object** %zero, align 8
  %call38 = call i32 @PyDict_SetItem(%struct._object* %51, %struct._object* %52, %struct._object* %53)
  store i32 %call38, i32* %res, align 4
  br label %do.body.39

do.body.39:                                       ; preds = %if.end.36
  %54 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp40, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt41, align 8
  %dec42 = add i64 %56, -1
  store i64 %dec42, i64* %ob_refcnt41, align 8
  %cmp43 = icmp ne i64 %dec42, 0
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %do.body.39
  br label %if.end.48

if.else.45:                                       ; preds = %do.body.39
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_dealloc47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc47, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  call void %59(%struct._object* %60)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.44
  br label %do.end.49

do.end.49:                                        ; preds = %if.end.48
  br label %do.body.50

do.body.50:                                       ; preds = %do.end.49
  %61 = load %struct._object*, %struct._object** %zero, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp51, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt52, align 8
  %dec53 = add i64 %63, -1
  store i64 %dec53, i64* %ob_refcnt52, align 8
  %cmp54 = icmp ne i64 %dec53, 0
  br i1 %cmp54, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %do.body.50
  br label %if.end.59

if.else.56:                                       ; preds = %do.body.50
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  call void %66(%struct._object* %67)
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  %68 = load i32, i32* %res, align 4
  %cmp61 = icmp slt i32 %68, 0
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %do.end.60
  %69 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %69)
  store i32 0, i32* %retval
  br label %return

if.end.63:                                        ; preds = %do.end.60
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %if.end.16
  %70 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_ste65 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %70, i32 0, i32 0
  %71 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste65, align 8
  %ste_symbols66 = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %71, i32 0, i32 2
  %72 = load %struct._object*, %struct._object** %ste_symbols66, align 8
  %73 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_cellvars67 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %73, i32 0, i32 7
  %74 = load %struct._object*, %struct._object** %u_cellvars67, align 8
  %call68 = call i64 @PyDict_Size(%struct._object* %74)
  %call69 = call %struct._object* @dictbytype(%struct._object* %72, i32 4, i32 64, i64 %call68)
  %75 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_freevars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %75, i32 0, i32 8
  store %struct._object* %call69, %struct._object** %u_freevars, align 8
  %76 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_freevars70 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %76, i32 0, i32 8
  %77 = load %struct._object*, %struct._object** %u_freevars70, align 8
  %tobool71 = icmp ne %struct._object* %77, null
  br i1 %tobool71, label %if.end.73, label %if.then.72

if.then.72:                                       ; preds = %if.end.64
  %78 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %78)
  store i32 0, i32* %retval
  br label %return

if.end.73:                                        ; preds = %if.end.64
  %79 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_blocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %79, i32 0, i32 12
  store %struct.basicblock_* null, %struct.basicblock_** %u_blocks, align 8
  %80 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_nfblocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %80, i32 0, i32 14
  store i32 0, i32* %u_nfblocks, align 4
  %81 = load i32, i32* %lineno.addr, align 4
  %82 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_firstlineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %82, i32 0, i32 16
  store i32 %81, i32* %u_firstlineno, align 4
  %83 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_lineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %83, i32 0, i32 17
  store i32 0, i32* %u_lineno, align 4
  %84 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_col_offset = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %84, i32 0, i32 18
  store i32 0, i32* %u_col_offset, align 4
  %85 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_lineno_set = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %85, i32 0, i32 19
  store i32 0, i32* %u_lineno_set, align 4
  %call74 = call %struct._object* @PyDict_New()
  %86 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %86, i32 0, i32 4
  store %struct._object* %call74, %struct._object** %u_consts, align 8
  %87 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts75 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %87, i32 0, i32 4
  %88 = load %struct._object*, %struct._object** %u_consts75, align 8
  %tobool76 = icmp ne %struct._object* %88, null
  br i1 %tobool76, label %if.end.78, label %if.then.77

if.then.77:                                       ; preds = %if.end.73
  %89 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %89)
  store i32 0, i32* %retval
  br label %return

if.end.78:                                        ; preds = %if.end.73
  %call79 = call %struct._object* @PyDict_New()
  %90 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %90, i32 0, i32 5
  store %struct._object* %call79, %struct._object** %u_names, align 8
  %91 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_names80 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %91, i32 0, i32 5
  %92 = load %struct._object*, %struct._object** %u_names80, align 8
  %tobool81 = icmp ne %struct._object* %92, null
  br i1 %tobool81, label %if.end.83, label %if.then.82

if.then.82:                                       ; preds = %if.end.78
  %93 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %93)
  store i32 0, i32* %retval
  br label %return

if.end.83:                                        ; preds = %if.end.78
  %94 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %94, i32 0, i32 9
  store %struct._object* null, %struct._object** %u_private, align 8
  %95 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u84 = getelementptr inbounds %struct.compiler, %struct.compiler* %95, i32 0, i32 7
  %96 = load %struct.compiler_unit*, %struct.compiler_unit** %u84, align 8
  %tobool85 = icmp ne %struct.compiler_unit* %96, null
  br i1 %tobool85, label %if.then.86, label %if.end.133

if.then.86:                                       ; preds = %if.end.83
  %97 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u87 = getelementptr inbounds %struct.compiler, %struct.compiler* %97, i32 0, i32 7
  %98 = load %struct.compiler_unit*, %struct.compiler_unit** %u87, align 8
  %99 = bitcast %struct.compiler_unit* %98 to i8*
  %call88 = call %struct._object* @PyCapsule_New(i8* %99, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i32 0, i32 0), void (%struct._object*)* null)
  store %struct._object* %call88, %struct._object** %capsule, align 8
  %100 = load %struct._object*, %struct._object** %capsule, align 8
  %tobool89 = icmp ne %struct._object* %100, null
  br i1 %tobool89, label %lor.lhs.false.90, label %if.then.93

lor.lhs.false.90:                                 ; preds = %if.then.86
  %101 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack = getelementptr inbounds %struct.compiler, %struct.compiler* %101, i32 0, i32 8
  %102 = load %struct._object*, %struct._object** %c_stack, align 8
  %103 = load %struct._object*, %struct._object** %capsule, align 8
  %call91 = call i32 @PyList_Append(%struct._object* %102, %struct._object* %103)
  %cmp92 = icmp slt i32 %call91, 0
  br i1 %cmp92, label %if.then.93, label %if.end.110

if.then.93:                                       ; preds = %lor.lhs.false.90, %if.then.86
  br label %do.body.94

do.body.94:                                       ; preds = %if.then.93
  %104 = load %struct._object*, %struct._object** %capsule, align 8
  store %struct._object* %104, %struct._object** %_py_xdecref_tmp, align 8
  %105 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp95 = icmp ne %struct._object* %105, null
  br i1 %cmp95, label %if.then.96, label %if.end.108

if.then.96:                                       ; preds = %do.body.94
  br label %do.body.97

do.body.97:                                       ; preds = %if.then.96
  %106 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %106, %struct._object** %_py_decref_tmp98, align 8
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  %ob_refcnt99 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 0
  %108 = load i64, i64* %ob_refcnt99, align 8
  %dec100 = add i64 %108, -1
  store i64 %dec100, i64* %ob_refcnt99, align 8
  %cmp101 = icmp ne i64 %dec100, 0
  br i1 %cmp101, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %do.body.97
  br label %if.end.106

if.else.103:                                      ; preds = %do.body.97
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 1
  %110 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 4
  %111 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  call void %111(%struct._object* %112)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  br label %if.end.108

if.end.108:                                       ; preds = %do.end.107, %do.body.94
  br label %do.end.109

do.end.109:                                       ; preds = %if.end.108
  %113 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %113)
  store i32 0, i32* %retval
  br label %return

if.end.110:                                       ; preds = %lor.lhs.false.90
  br label %do.body.111

do.body.111:                                      ; preds = %if.end.110
  %114 = load %struct._object*, %struct._object** %capsule, align 8
  store %struct._object* %114, %struct._object** %_py_decref_tmp112, align 8
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  %ob_refcnt113 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 0
  %116 = load i64, i64* %ob_refcnt113, align 8
  %dec114 = add i64 %116, -1
  store i64 %dec114, i64* %ob_refcnt113, align 8
  %cmp115 = icmp ne i64 %dec114, 0
  br i1 %cmp115, label %if.then.116, label %if.else.117

if.then.116:                                      ; preds = %do.body.111
  br label %if.end.120

if.else.117:                                      ; preds = %do.body.111
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  %ob_type118 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 1
  %118 = load %struct._typeobject*, %struct._typeobject** %ob_type118, align 8
  %tp_dealloc119 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %118, i32 0, i32 4
  %119 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc119, align 8
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  call void %119(%struct._object* %120)
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.117, %if.then.116
  br label %do.end.121

do.end.121:                                       ; preds = %if.end.120
  %121 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u122 = getelementptr inbounds %struct.compiler, %struct.compiler* %121, i32 0, i32 7
  %122 = load %struct.compiler_unit*, %struct.compiler_unit** %u122, align 8
  %u_private123 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %122, i32 0, i32 9
  %123 = load %struct._object*, %struct._object** %u_private123, align 8
  %124 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_private124 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %124, i32 0, i32 9
  store %struct._object* %123, %struct._object** %u_private124, align 8
  br label %do.body.125

do.body.125:                                      ; preds = %do.end.121
  %125 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_private126 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %125, i32 0, i32 9
  %126 = load %struct._object*, %struct._object** %u_private126, align 8
  store %struct._object* %126, %struct._object** %_py_xincref_tmp, align 8
  %127 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp127 = icmp ne %struct._object* %127, null
  br i1 %cmp127, label %if.then.128, label %if.end.131

if.then.128:                                      ; preds = %do.body.125
  %128 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt129 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 0
  %129 = load i64, i64* %ob_refcnt129, align 8
  %inc130 = add i64 %129, 1
  store i64 %inc130, i64* %ob_refcnt129, align 8
  br label %if.end.131

if.end.131:                                       ; preds = %if.then.128, %do.body.125
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  br label %if.end.133

if.end.133:                                       ; preds = %do.end.132, %if.end.83
  %130 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %131 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u134 = getelementptr inbounds %struct.compiler, %struct.compiler* %131, i32 0, i32 7
  store %struct.compiler_unit* %130, %struct.compiler_unit** %u134, align 8
  %132 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_nestlevel = getelementptr inbounds %struct.compiler, %struct.compiler* %132, i32 0, i32 6
  %133 = load i32, i32* %c_nestlevel, align 4
  %inc135 = add i32 %133, 1
  store i32 %inc135, i32* %c_nestlevel, align 4
  %134 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call136 = call %struct.basicblock_* @compiler_use_new_block(%struct.compiler* %134)
  %cmp137 = icmp eq %struct.basicblock_* %call136, null
  br i1 %cmp137, label %if.then.138, label %if.end.139

if.then.138:                                      ; preds = %if.end.133
  store i32 0, i32* %retval
  br label %return

if.end.139:                                       ; preds = %if.end.133
  %135 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_scope_type140 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %135, i32 0, i32 3
  %136 = load i32, i32* %u_scope_type140, align 4
  %cmp141 = icmp ne i32 %136, 0
  br i1 %cmp141, label %if.then.142, label %if.end.147

if.then.142:                                      ; preds = %if.end.139
  %137 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call143 = call i32 @compiler_set_qualname(%struct.compiler* %137)
  %tobool144 = icmp ne i32 %call143, 0
  br i1 %tobool144, label %if.end.146, label %if.then.145

if.then.145:                                      ; preds = %if.then.142
  store i32 0, i32* %retval
  br label %return

if.end.146:                                       ; preds = %if.then.142
  br label %if.end.147

if.end.147:                                       ; preds = %if.end.146, %if.end.139
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.147, %if.then.145, %if.then.138, %do.end.109, %if.then.82, %if.then.77, %if.then.72, %if.then.62, %do.end, %if.then.27, %if.then.23, %if.then.15, %if.then.5, %if.then
  %138 = load i32, i32* %retval
  ret i32 %138
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_body(%struct.compiler* %c, %struct.asdl_seq* %stmts) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %stmts.addr = alloca %struct.asdl_seq*, align 8
  %i = alloca i32, align 4
  %st = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.asdl_seq* %stmts, %struct.asdl_seq** %stmts.addr, align 8
  store i32 0, i32* %i, align 4
  %0 = load %struct.asdl_seq*, %struct.asdl_seq** %stmts.addr, align 8
  %cmp = icmp eq %struct.asdl_seq* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 false, label %if.end, label %if.then

cond.false:                                       ; preds = %entry
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %stmts.addr, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %1, i32 0, i32 0
  %2 = load i64, i64* %size, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.false, %cond.true
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.false, %cond.true
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %stmts.addr, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %3, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 0
  %4 = load i8*, i8** %arrayidx, align 8
  %5 = bitcast i8* %4 to %struct._stmt*
  store %struct._stmt* %5, %struct._stmt** %st, align 8
  %6 = load %struct._stmt*, %struct._stmt** %st, align 8
  %call = call i32 @compiler_isdocstring(%struct._stmt* %6)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_optimize = getelementptr inbounds %struct.compiler, %struct.compiler* %7, i32 0, i32 4
  %8 = load i32, i32* %c_optimize, align 4
  %cmp2 = icmp slt i32 %8, 2
  br i1 %cmp2, label %if.then.3, label %if.end.12

if.then.3:                                        ; preds = %land.lhs.true
  store i32 1, i32* %i, align 4
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %10 = load %struct._stmt*, %struct._stmt** %st, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %10, i32 0, i32 1
  %Expr = bitcast %union.anon.35* %v to %struct.anon.53*
  %value = getelementptr inbounds %struct.anon.53, %struct.anon.53* %Expr, i32 0, i32 0
  %11 = load %struct._expr*, %struct._expr** %value, align 8
  %call4 = call i32 @compiler_visit_expr(%struct.compiler* %9, %struct._expr* %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.then.3
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.then.3
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %13 = load %struct._object*, %struct._object** @__doc__, align 8
  %call8 = call i32 @compiler_nameop(%struct.compiler* %12, %struct._object* %13, i32 2)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end.7
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.7
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %land.lhs.true, %if.end
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.12
  %14 = load i32, i32* %i, align 4
  %conv = sext i32 %14 to i64
  %15 = load %struct.asdl_seq*, %struct.asdl_seq** %stmts.addr, align 8
  %cmp13 = icmp eq %struct.asdl_seq* %15, null
  br i1 %cmp13, label %cond.true.15, label %cond.false.16

cond.true.15:                                     ; preds = %for.cond
  br label %cond.end

cond.false.16:                                    ; preds = %for.cond
  %16 = load %struct.asdl_seq*, %struct.asdl_seq** %stmts.addr, align 8
  %size17 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %16, i32 0, i32 0
  %17 = load i64, i64* %size17, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.16, %cond.true.15
  %cond = phi i64 [ 0, %cond.true.15 ], [ %17, %cond.false.16 ]
  %cmp18 = icmp slt i64 %conv, %cond
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %19 = load i32, i32* %i, align 4
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.asdl_seq*, %struct.asdl_seq** %stmts.addr, align 8
  %elements20 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %20, i32 0, i32 1
  %arrayidx21 = getelementptr [1 x i8*], [1 x i8*]* %elements20, i32 0, i64 %idxprom
  %21 = load i8*, i8** %arrayidx21, align 8
  %22 = bitcast i8* %21 to %struct._stmt*
  %call22 = call i32 @compiler_visit_stmt(%struct.compiler* %18, %struct._stmt* %22)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.25
  %23 = load i32, i32* %i, align 4
  %inc = add i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.24, %if.then.10, %if.then.6, %if.then
  %24 = load i32, i32* %retval
  ret i32 %24
}

; Function Attrs: nounwind uwtable
define internal void @compiler_exit_scope(%struct.compiler* %c) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %n = alloca i64, align 8
  %capsule = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_nestlevel = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 6
  %1 = load i32, i32* %c_nestlevel, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %c_nestlevel, align 4
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %2, i32 0, i32 7
  %3 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  call void @compiler_unit_free(%struct.compiler_unit* %3)
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack = getelementptr inbounds %struct.compiler, %struct.compiler* %4, i32 0, i32 8
  %5 = load %struct._object*, %struct._object** %c_stack, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1
  %7 = load i64, i64* %ob_size, align 8
  %sub = sub i64 %7, 1
  store i64 %sub, i64* %n, align 8
  %8 = load i64, i64* %n, align 8
  %cmp = icmp sge i64 %8, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %n, align 8
  %10 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack1 = getelementptr inbounds %struct.compiler, %struct.compiler* %10, i32 0, i32 8
  %11 = load %struct._object*, %struct._object** %c_stack1, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %12, i32 0, i32 1
  %13 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %13, i64 %9
  %14 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %14, %struct._object** %capsule, align 8
  %15 = load %struct._object*, %struct._object** %capsule, align 8
  %call = call i8* @PyCapsule_GetPointer(%struct._object* %15, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i32 0, i32 0))
  %16 = bitcast i8* %call to %struct.compiler_unit*
  %17 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u2 = getelementptr inbounds %struct.compiler, %struct.compiler* %17, i32 0, i32 7
  store %struct.compiler_unit* %16, %struct.compiler_unit** %u2, align 8
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack3 = getelementptr inbounds %struct.compiler, %struct.compiler* %18, i32 0, i32 8
  %19 = load %struct._object*, %struct._object** %c_stack3, align 8
  %20 = load i64, i64* %n, align 8
  %call4 = call i32 @PySequence_DelItem(%struct._object* %19, i64 %20)
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then
  call void @Py_FatalError(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i32 0, i32 0)) #6
  unreachable

if.end:                                           ; preds = %if.then
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u7 = getelementptr inbounds %struct.compiler, %struct.compiler* %21, i32 0, i32 7
  %22 = load %struct.compiler_unit*, %struct.compiler_unit** %u7, align 8
  call void @compiler_unit_check(%struct.compiler_unit* %22)
  br label %if.end.9

if.else:                                          ; preds = %entry
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u8 = getelementptr inbounds %struct.compiler, %struct.compiler* %23, i32 0, i32 7
  store %struct.compiler_unit* null, %struct.compiler_unit** %u8, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_stmt(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %lineno = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 2
  %1 = load i32, i32* %lineno, align 4
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %2, i32 0, i32 7
  %3 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_lineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %3, i32 0, i32 17
  store i32 %1, i32* %u_lineno, align 4
  %4 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %col_offset = getelementptr inbounds %struct._stmt, %struct._stmt* %4, i32 0, i32 3
  %5 = load i32, i32* %col_offset, align 4
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %6, i32 0, i32 7
  %7 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_col_offset = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %7, i32 0, i32 18
  store i32 %5, i32* %u_col_offset, align 4
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u2 = getelementptr inbounds %struct.compiler, %struct.compiler* %8, i32 0, i32 7
  %9 = load %struct.compiler_unit*, %struct.compiler_unit** %u2, align 8
  %u_lineno_set = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %9, i32 0, i32 19
  store i32 0, i32* %u_lineno_set, align 4
  %10 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %kind = getelementptr inbounds %struct._stmt, %struct._stmt* %10, i32 0, i32 0
  %11 = load i32, i32* %kind, align 4
  switch i32 %11, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.3
    i32 3, label %sw.bb.5
    i32 4, label %sw.bb.26
    i32 5, label %sw.bb.36
    i32 6, label %sw.bb.80
    i32 7, label %sw.bb.82
    i32 8, label %sw.bb.84
    i32 9, label %sw.bb.86
    i32 11, label %sw.bb.88
    i32 12, label %sw.bb.120
    i32 13, label %sw.bb.122
    i32 14, label %sw.bb.124
    i32 15, label %sw.bb.126
    i32 16, label %sw.bb.128
    i32 17, label %sw.bb.128
    i32 18, label %sw.bb.129
    i32 19, label %sw.bb.172
    i32 20, label %sw.bb.173
    i32 21, label %sw.bb.183
    i32 10, label %sw.bb.185
  ]

sw.bb:                                            ; preds = %entry
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %13 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call = call i32 @compiler_function(%struct.compiler* %12, %struct._stmt* %13)
  store i32 %call, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %15 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call4 = call i32 @compiler_class(%struct.compiler* %14, %struct._stmt* %15)
  store i32 %call4, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u6 = getelementptr inbounds %struct.compiler, %struct.compiler* %16, i32 0, i32 7
  %17 = load %struct.compiler_unit*, %struct.compiler_unit** %u6, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %17, i32 0, i32 0
  %18 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %ste_type = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %18, i32 0, i32 7
  %19 = load i32, i32* %ste_type, align 4
  %cmp = icmp ne i32 %19, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.5
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call7 = call i32 @compiler_error(%struct.compiler* %20, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i32 0, i32 0))
  store i32 %call7, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb.5
  %21 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %21, i32 0, i32 1
  %Return = bitcast %union.anon.35* %v to %struct.anon.38*
  %value = getelementptr inbounds %struct.anon.38, %struct.anon.38* %Return, i32 0, i32 0
  %22 = load %struct._expr*, %struct._expr** %value, align 8
  %tobool = icmp ne %struct._expr* %22, null
  br i1 %tobool, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %24 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v9 = getelementptr inbounds %struct._stmt, %struct._stmt* %24, i32 0, i32 1
  %Return10 = bitcast %union.anon.35* %v9 to %struct.anon.38*
  %value11 = getelementptr inbounds %struct.anon.38, %struct.anon.38* %Return10, i32 0, i32 0
  %25 = load %struct._expr*, %struct._expr** %value11, align 8
  %call12 = call i32 @compiler_visit_expr(%struct.compiler* %23, %struct._expr* %25)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.then.8
  store i32 0, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.then.8
  br label %if.end.21

if.else:                                          ; preds = %if.end
  %26 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u16 = getelementptr inbounds %struct.compiler, %struct.compiler* %27, i32 0, i32 7
  %28 = load %struct.compiler_unit*, %struct.compiler_unit** %u16, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %28, i32 0, i32 4
  %29 = load %struct._object*, %struct._object** %u_consts, align 8
  %call17 = call i32 @compiler_addop_o(%struct.compiler* %26, i32 100, %struct._object* %29, %struct._object* @_Py_NoneStruct)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.else
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.end.15
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call22 = call i32 @compiler_addop(%struct.compiler* %30, i32 83)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %if.end.21
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  br label %sw.epilog

sw.bb.26:                                         ; preds = %entry
  %31 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v27 = getelementptr inbounds %struct._stmt, %struct._stmt* %31, i32 0, i32 1
  %Delete = bitcast %union.anon.35* %v27 to %struct.anon.39*
  %targets = getelementptr inbounds %struct.anon.39, %struct.anon.39* %Delete, i32 0, i32 0
  %32 = load %struct.asdl_seq*, %struct.asdl_seq** %targets, align 8
  store %struct.asdl_seq* %32, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.26
  %33 = load i32, i32* %_i, align 4
  %conv = sext i32 %33 to i64
  %34 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp28 = icmp eq %struct.asdl_seq* %34, null
  br i1 %cmp28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %35 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %35, i32 0, i32 0
  %36 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %36, %cond.false ]
  %cmp30 = icmp slt i64 %conv, %cond
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %37 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %37 to i64
  %38 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %38, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %39 = load i8*, i8** %arrayidx, align 8
  %40 = bitcast i8* %39 to %struct._expr*
  store %struct._expr* %40, %struct._expr** %elt, align 8
  %41 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %42 = load %struct._expr*, %struct._expr** %elt, align 8
  %call32 = call i32 @compiler_visit_expr(%struct.compiler* %41, %struct._expr* %42)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end.35, label %if.then.34

if.then.34:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.35:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.35
  %43 = load i32, i32* %_i, align 4
  %inc = add i32 %43, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  br label %sw.epilog

sw.bb.36:                                         ; preds = %entry
  %44 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v37 = getelementptr inbounds %struct._stmt, %struct._stmt* %44, i32 0, i32 1
  %Assign = bitcast %union.anon.35* %v37 to %struct.anon.40*
  %targets38 = getelementptr inbounds %struct.anon.40, %struct.anon.40* %Assign, i32 0, i32 0
  %45 = load %struct.asdl_seq*, %struct.asdl_seq** %targets38, align 8
  %cmp39 = icmp eq %struct.asdl_seq* %45, null
  br i1 %cmp39, label %cond.true.41, label %cond.false.42

cond.true.41:                                     ; preds = %sw.bb.36
  br label %cond.end.47

cond.false.42:                                    ; preds = %sw.bb.36
  %46 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v43 = getelementptr inbounds %struct._stmt, %struct._stmt* %46, i32 0, i32 1
  %Assign44 = bitcast %union.anon.35* %v43 to %struct.anon.40*
  %targets45 = getelementptr inbounds %struct.anon.40, %struct.anon.40* %Assign44, i32 0, i32 0
  %47 = load %struct.asdl_seq*, %struct.asdl_seq** %targets45, align 8
  %size46 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %47, i32 0, i32 0
  %48 = load i64, i64* %size46, align 8
  br label %cond.end.47

cond.end.47:                                      ; preds = %cond.false.42, %cond.true.41
  %cond48 = phi i64 [ 0, %cond.true.41 ], [ %48, %cond.false.42 ]
  store i64 %cond48, i64* %n, align 8
  %49 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %50 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v49 = getelementptr inbounds %struct._stmt, %struct._stmt* %50, i32 0, i32 1
  %Assign50 = bitcast %union.anon.35* %v49 to %struct.anon.40*
  %value51 = getelementptr inbounds %struct.anon.40, %struct.anon.40* %Assign50, i32 0, i32 1
  %51 = load %struct._expr*, %struct._expr** %value51, align 8
  %call52 = call i32 @compiler_visit_expr(%struct.compiler* %49, %struct._expr* %51)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %cond.end.47
  store i32 0, i32* %retval
  br label %return

if.end.55:                                        ; preds = %cond.end.47
  store i64 0, i64* %i, align 8
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc.77, %if.end.55
  %52 = load i64, i64* %i, align 8
  %53 = load i64, i64* %n, align 8
  %cmp57 = icmp slt i64 %52, %53
  br i1 %cmp57, label %for.body.59, label %for.end.79

for.body.59:                                      ; preds = %for.cond.56
  %54 = load i64, i64* %i, align 8
  %55 = load i64, i64* %n, align 8
  %sub = sub i64 %55, 1
  %cmp60 = icmp slt i64 %54, %sub
  br i1 %cmp60, label %if.then.62, label %if.end.67

if.then.62:                                       ; preds = %for.body.59
  %56 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call63 = call i32 @compiler_addop(%struct.compiler* %56, i32 4)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end.66, label %if.then.65

if.then.65:                                       ; preds = %if.then.62
  store i32 0, i32* %retval
  br label %return

if.end.66:                                        ; preds = %if.then.62
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %for.body.59
  %57 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %58 = load i64, i64* %i, align 8
  %59 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v68 = getelementptr inbounds %struct._stmt, %struct._stmt* %59, i32 0, i32 1
  %Assign69 = bitcast %union.anon.35* %v68 to %struct.anon.40*
  %targets70 = getelementptr inbounds %struct.anon.40, %struct.anon.40* %Assign69, i32 0, i32 0
  %60 = load %struct.asdl_seq*, %struct.asdl_seq** %targets70, align 8
  %elements71 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %60, i32 0, i32 1
  %arrayidx72 = getelementptr [1 x i8*], [1 x i8*]* %elements71, i32 0, i64 %58
  %61 = load i8*, i8** %arrayidx72, align 8
  %62 = bitcast i8* %61 to %struct._expr*
  %call73 = call i32 @compiler_visit_expr(%struct.compiler* %57, %struct._expr* %62)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end.76, label %if.then.75

if.then.75:                                       ; preds = %if.end.67
  store i32 0, i32* %retval
  br label %return

if.end.76:                                        ; preds = %if.end.67
  br label %for.inc.77

for.inc.77:                                       ; preds = %if.end.76
  %63 = load i64, i64* %i, align 8
  %inc78 = add i64 %63, 1
  store i64 %inc78, i64* %i, align 8
  br label %for.cond.56

for.end.79:                                       ; preds = %for.cond.56
  br label %sw.epilog

sw.bb.80:                                         ; preds = %entry
  %64 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %65 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call81 = call i32 @compiler_augassign(%struct.compiler* %64, %struct._stmt* %65)
  store i32 %call81, i32* %retval
  br label %return

sw.bb.82:                                         ; preds = %entry
  %66 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %67 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call83 = call i32 @compiler_for(%struct.compiler* %66, %struct._stmt* %67)
  store i32 %call83, i32* %retval
  br label %return

sw.bb.84:                                         ; preds = %entry
  %68 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %69 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call85 = call i32 @compiler_while(%struct.compiler* %68, %struct._stmt* %69)
  store i32 %call85, i32* %retval
  br label %return

sw.bb.86:                                         ; preds = %entry
  %70 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %71 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call87 = call i32 @compiler_if(%struct.compiler* %70, %struct._stmt* %71)
  store i32 %call87, i32* %retval
  br label %return

sw.bb.88:                                         ; preds = %entry
  store i64 0, i64* %n, align 8
  %72 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v89 = getelementptr inbounds %struct._stmt, %struct._stmt* %72, i32 0, i32 1
  %Raise = bitcast %union.anon.35* %v89 to %struct.anon.46*
  %exc = getelementptr inbounds %struct.anon.46, %struct.anon.46* %Raise, i32 0, i32 0
  %73 = load %struct._expr*, %struct._expr** %exc, align 8
  %tobool90 = icmp ne %struct._expr* %73, null
  br i1 %tobool90, label %if.then.91, label %if.end.113

if.then.91:                                       ; preds = %sw.bb.88
  %74 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %75 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v92 = getelementptr inbounds %struct._stmt, %struct._stmt* %75, i32 0, i32 1
  %Raise93 = bitcast %union.anon.35* %v92 to %struct.anon.46*
  %exc94 = getelementptr inbounds %struct.anon.46, %struct.anon.46* %Raise93, i32 0, i32 0
  %76 = load %struct._expr*, %struct._expr** %exc94, align 8
  %call95 = call i32 @compiler_visit_expr(%struct.compiler* %74, %struct._expr* %76)
  %tobool96 = icmp ne i32 %call95, 0
  br i1 %tobool96, label %if.end.98, label %if.then.97

if.then.97:                                       ; preds = %if.then.91
  store i32 0, i32* %retval
  br label %return

if.end.98:                                        ; preds = %if.then.91
  %77 = load i64, i64* %n, align 8
  %inc99 = add i64 %77, 1
  store i64 %inc99, i64* %n, align 8
  %78 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v100 = getelementptr inbounds %struct._stmt, %struct._stmt* %78, i32 0, i32 1
  %Raise101 = bitcast %union.anon.35* %v100 to %struct.anon.46*
  %cause = getelementptr inbounds %struct.anon.46, %struct.anon.46* %Raise101, i32 0, i32 1
  %79 = load %struct._expr*, %struct._expr** %cause, align 8
  %tobool102 = icmp ne %struct._expr* %79, null
  br i1 %tobool102, label %if.then.103, label %if.end.112

if.then.103:                                      ; preds = %if.end.98
  %80 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %81 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v104 = getelementptr inbounds %struct._stmt, %struct._stmt* %81, i32 0, i32 1
  %Raise105 = bitcast %union.anon.35* %v104 to %struct.anon.46*
  %cause106 = getelementptr inbounds %struct.anon.46, %struct.anon.46* %Raise105, i32 0, i32 1
  %82 = load %struct._expr*, %struct._expr** %cause106, align 8
  %call107 = call i32 @compiler_visit_expr(%struct.compiler* %80, %struct._expr* %82)
  %tobool108 = icmp ne i32 %call107, 0
  br i1 %tobool108, label %if.end.110, label %if.then.109

if.then.109:                                      ; preds = %if.then.103
  store i32 0, i32* %retval
  br label %return

if.end.110:                                       ; preds = %if.then.103
  %83 = load i64, i64* %n, align 8
  %inc111 = add i64 %83, 1
  store i64 %inc111, i64* %n, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.110, %if.end.98
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %sw.bb.88
  %84 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %85 = load i64, i64* %n, align 8
  %conv114 = trunc i64 %85 to i32
  %conv115 = sext i32 %conv114 to i64
  %call116 = call i32 @compiler_addop_i(%struct.compiler* %84, i32 130, i64 %conv115)
  %tobool117 = icmp ne i32 %call116, 0
  br i1 %tobool117, label %if.end.119, label %if.then.118

if.then.118:                                      ; preds = %if.end.113
  store i32 0, i32* %retval
  br label %return

if.end.119:                                       ; preds = %if.end.113
  br label %sw.epilog

sw.bb.120:                                        ; preds = %entry
  %86 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %87 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call121 = call i32 @compiler_try(%struct.compiler* %86, %struct._stmt* %87)
  store i32 %call121, i32* %retval
  br label %return

sw.bb.122:                                        ; preds = %entry
  %88 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %89 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call123 = call i32 @compiler_assert(%struct.compiler* %88, %struct._stmt* %89)
  store i32 %call123, i32* %retval
  br label %return

sw.bb.124:                                        ; preds = %entry
  %90 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %91 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call125 = call i32 @compiler_import(%struct.compiler* %90, %struct._stmt* %91)
  store i32 %call125, i32* %retval
  br label %return

sw.bb.126:                                        ; preds = %entry
  %92 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %93 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call127 = call i32 @compiler_from_import(%struct.compiler* %92, %struct._stmt* %93)
  store i32 %call127, i32* %retval
  br label %return

sw.bb.128:                                        ; preds = %entry, %entry
  br label %sw.epilog

sw.bb.129:                                        ; preds = %entry
  %94 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_interactive = getelementptr inbounds %struct.compiler, %struct.compiler* %94, i32 0, i32 5
  %95 = load i32, i32* %c_interactive, align 4
  %tobool130 = icmp ne i32 %95, 0
  br i1 %tobool130, label %land.lhs.true, label %if.else.144

land.lhs.true:                                    ; preds = %sw.bb.129
  %96 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_nestlevel = getelementptr inbounds %struct.compiler, %struct.compiler* %96, i32 0, i32 6
  %97 = load i32, i32* %c_nestlevel, align 4
  %cmp131 = icmp sle i32 %97, 1
  br i1 %cmp131, label %if.then.133, label %if.else.144

if.then.133:                                      ; preds = %land.lhs.true
  %98 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %99 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v134 = getelementptr inbounds %struct._stmt, %struct._stmt* %99, i32 0, i32 1
  %Expr = bitcast %union.anon.35* %v134 to %struct.anon.53*
  %value135 = getelementptr inbounds %struct.anon.53, %struct.anon.53* %Expr, i32 0, i32 0
  %100 = load %struct._expr*, %struct._expr** %value135, align 8
  %call136 = call i32 @compiler_visit_expr(%struct.compiler* %98, %struct._expr* %100)
  %tobool137 = icmp ne i32 %call136, 0
  br i1 %tobool137, label %if.end.139, label %if.then.138

if.then.138:                                      ; preds = %if.then.133
  store i32 0, i32* %retval
  br label %return

if.end.139:                                       ; preds = %if.then.133
  %101 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call140 = call i32 @compiler_addop(%struct.compiler* %101, i32 70)
  %tobool141 = icmp ne i32 %call140, 0
  br i1 %tobool141, label %if.end.143, label %if.then.142

if.then.142:                                      ; preds = %if.end.139
  store i32 0, i32* %retval
  br label %return

if.end.143:                                       ; preds = %if.end.139
  br label %if.end.171

if.else.144:                                      ; preds = %land.lhs.true, %sw.bb.129
  %102 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v145 = getelementptr inbounds %struct._stmt, %struct._stmt* %102, i32 0, i32 1
  %Expr146 = bitcast %union.anon.35* %v145 to %struct.anon.53*
  %value147 = getelementptr inbounds %struct.anon.53, %struct.anon.53* %Expr146, i32 0, i32 0
  %103 = load %struct._expr*, %struct._expr** %value147, align 8
  %kind148 = getelementptr inbounds %struct._expr, %struct._expr* %103, i32 0, i32 0
  %104 = load i32, i32* %kind148, align 4
  %cmp149 = icmp ne i32 %104, 17
  br i1 %cmp149, label %land.lhs.true.151, label %if.end.170

land.lhs.true.151:                                ; preds = %if.else.144
  %105 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v152 = getelementptr inbounds %struct._stmt, %struct._stmt* %105, i32 0, i32 1
  %Expr153 = bitcast %union.anon.35* %v152 to %struct.anon.53*
  %value154 = getelementptr inbounds %struct.anon.53, %struct.anon.53* %Expr153, i32 0, i32 0
  %106 = load %struct._expr*, %struct._expr** %value154, align 8
  %kind155 = getelementptr inbounds %struct._expr, %struct._expr* %106, i32 0, i32 0
  %107 = load i32, i32* %kind155, align 4
  %cmp156 = icmp ne i32 %107, 16
  br i1 %cmp156, label %if.then.158, label %if.end.170

if.then.158:                                      ; preds = %land.lhs.true.151
  %108 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %109 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v159 = getelementptr inbounds %struct._stmt, %struct._stmt* %109, i32 0, i32 1
  %Expr160 = bitcast %union.anon.35* %v159 to %struct.anon.53*
  %value161 = getelementptr inbounds %struct.anon.53, %struct.anon.53* %Expr160, i32 0, i32 0
  %110 = load %struct._expr*, %struct._expr** %value161, align 8
  %call162 = call i32 @compiler_visit_expr(%struct.compiler* %108, %struct._expr* %110)
  %tobool163 = icmp ne i32 %call162, 0
  br i1 %tobool163, label %if.end.165, label %if.then.164

if.then.164:                                      ; preds = %if.then.158
  store i32 0, i32* %retval
  br label %return

if.end.165:                                       ; preds = %if.then.158
  %111 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call166 = call i32 @compiler_addop(%struct.compiler* %111, i32 1)
  %tobool167 = icmp ne i32 %call166, 0
  br i1 %tobool167, label %if.end.169, label %if.then.168

if.then.168:                                      ; preds = %if.end.165
  store i32 0, i32* %retval
  br label %return

if.end.169:                                       ; preds = %if.end.165
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %land.lhs.true.151, %if.else.144
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %if.end.143
  br label %sw.epilog

sw.bb.172:                                        ; preds = %entry
  br label %sw.epilog

sw.bb.173:                                        ; preds = %entry
  %112 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call174 = call i32 @compiler_in_loop(%struct.compiler* %112)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end.178, label %if.then.176

if.then.176:                                      ; preds = %sw.bb.173
  %113 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call177 = call i32 @compiler_error(%struct.compiler* %113, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0))
  store i32 %call177, i32* %retval
  br label %return

if.end.178:                                       ; preds = %sw.bb.173
  %114 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call179 = call i32 @compiler_addop(%struct.compiler* %114, i32 80)
  %tobool180 = icmp ne i32 %call179, 0
  br i1 %tobool180, label %if.end.182, label %if.then.181

if.then.181:                                      ; preds = %if.end.178
  store i32 0, i32* %retval
  br label %return

if.end.182:                                       ; preds = %if.end.178
  br label %sw.epilog

sw.bb.183:                                        ; preds = %entry
  %115 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call184 = call i32 @compiler_continue(%struct.compiler* %115)
  store i32 %call184, i32* %retval
  br label %return

sw.bb.185:                                        ; preds = %entry
  %116 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %117 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call186 = call i32 @compiler_with(%struct.compiler* %116, %struct._stmt* %117, i32 0)
  store i32 %call186, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %entry, %if.end.182, %sw.bb.172, %if.end.171, %sw.bb.128, %if.end.119, %for.end.79, %for.end, %if.end.25
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb.185, %sw.bb.183, %if.then.181, %if.then.176, %if.then.168, %if.then.164, %if.then.142, %if.then.138, %sw.bb.126, %sw.bb.124, %sw.bb.122, %sw.bb.120, %if.then.118, %if.then.109, %if.then.97, %sw.bb.86, %sw.bb.84, %sw.bb.82, %sw.bb.80, %if.then.75, %if.then.65, %if.then.54, %if.then.34, %if.then.24, %if.then.19, %if.then.14, %if.then, %sw.bb.3, %sw.bb
  %118 = load i32, i32* %retval
  ret i32 %118
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_expr(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %lineno = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 2
  %1 = load i32, i32* %lineno, align 4
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %2, i32 0, i32 7
  %3 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_lineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %3, i32 0, i32 17
  %4 = load i32, i32* %u_lineno, align 4
  %cmp = icmp sgt i32 %1, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %lineno1 = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 2
  %6 = load i32, i32* %lineno1, align 4
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u2 = getelementptr inbounds %struct.compiler, %struct.compiler* %7, i32 0, i32 7
  %8 = load %struct.compiler_unit*, %struct.compiler_unit** %u2, align 8
  %u_lineno3 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %8, i32 0, i32 17
  store i32 %6, i32* %u_lineno3, align 4
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u4 = getelementptr inbounds %struct.compiler, %struct.compiler* %9, i32 0, i32 7
  %10 = load %struct.compiler_unit*, %struct.compiler_unit** %u4, align 8
  %u_lineno_set = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %10, i32 0, i32 19
  store i32 0, i32* %u_lineno_set, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %col_offset = getelementptr inbounds %struct._expr, %struct._expr* %11, i32 0, i32 3
  %12 = load i32, i32* %col_offset, align 4
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u5 = getelementptr inbounds %struct.compiler, %struct.compiler* %13, i32 0, i32 7
  %14 = load %struct.compiler_unit*, %struct.compiler_unit** %u5, align 8
  %u_col_offset = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %14, i32 0, i32 18
  store i32 %12, i32* %u_col_offset, align 4
  %15 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %kind = getelementptr inbounds %struct._expr, %struct._expr* %15, i32 0, i32 0
  %16 = load i32, i32* %kind, align 4
  switch i32 %16, label %sw.epilog.369 [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.6
    i32 3, label %sw.bb.23
    i32 4, label %sw.bb.37
    i32 5, label %sw.bb.39
    i32 6, label %sw.bb.41
    i32 7, label %sw.bb.76
    i32 11, label %sw.bb.114
    i32 8, label %sw.bb.116
    i32 9, label %sw.bb.118
    i32 10, label %sw.bb.120
    i32 12, label %sw.bb.122
    i32 13, label %sw.bb.149
    i32 14, label %sw.bb.178
    i32 15, label %sw.bb.180
    i32 16, label %sw.bb.182
    i32 17, label %sw.bb.191
    i32 18, label %sw.bb.199
    i32 20, label %sw.bb.208
    i32 19, label %sw.bb.215
    i32 21, label %sw.bb.224
    i32 22, label %sw.bb.279
    i32 23, label %sw.bb.352
    i32 24, label %sw.bb.359
    i32 25, label %sw.bb.365
    i32 26, label %sw.bb.367
  ]

sw.bb:                                            ; preds = %if.end
  %17 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %18 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call = call i32 @compiler_boolop(%struct.compiler* %17, %struct._expr* %18)
  store i32 %call, i32* %retval
  br label %return

sw.bb.6:                                          ; preds = %if.end
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %20 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %20, i32 0, i32 1
  %BinOp = bitcast %union.anon.4* %v to %struct.anon.6*
  %left = getelementptr inbounds %struct.anon.6, %struct.anon.6* %BinOp, i32 0, i32 0
  %21 = load %struct._expr*, %struct._expr** %left, align 8
  %call7 = call i32 @compiler_visit_expr(%struct.compiler* %19, %struct._expr* %21)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %sw.bb.6
  store i32 0, i32* %retval
  br label %return

if.end.9:                                         ; preds = %sw.bb.6
  %22 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %23 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v10 = getelementptr inbounds %struct._expr, %struct._expr* %23, i32 0, i32 1
  %BinOp11 = bitcast %union.anon.4* %v10 to %struct.anon.6*
  %right = getelementptr inbounds %struct.anon.6, %struct.anon.6* %BinOp11, i32 0, i32 2
  %24 = load %struct._expr*, %struct._expr** %right, align 8
  %call12 = call i32 @compiler_visit_expr(%struct.compiler* %22, %struct._expr* %24)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.end.9
  store i32 0, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.9
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %26 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %27 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v16 = getelementptr inbounds %struct._expr, %struct._expr* %27, i32 0, i32 1
  %BinOp17 = bitcast %union.anon.4* %v16 to %struct.anon.6*
  %op = getelementptr inbounds %struct.anon.6, %struct.anon.6* %BinOp17, i32 0, i32 1
  %28 = load i32, i32* %op, align 4
  %call18 = call i32 @binop(%struct.compiler* %26, i32 %28)
  %call19 = call i32 @compiler_addop(%struct.compiler* %25, i32 %call18)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %if.end.15
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.15
  br label %sw.epilog.369

sw.bb.23:                                         ; preds = %if.end
  %29 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %30 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v24 = getelementptr inbounds %struct._expr, %struct._expr* %30, i32 0, i32 1
  %UnaryOp = bitcast %union.anon.4* %v24 to %struct.anon.7*
  %operand = getelementptr inbounds %struct.anon.7, %struct.anon.7* %UnaryOp, i32 0, i32 1
  %31 = load %struct._expr*, %struct._expr** %operand, align 8
  %call25 = call i32 @compiler_visit_expr(%struct.compiler* %29, %struct._expr* %31)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %sw.bb.23
  store i32 0, i32* %retval
  br label %return

if.end.28:                                        ; preds = %sw.bb.23
  %32 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %33 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v29 = getelementptr inbounds %struct._expr, %struct._expr* %33, i32 0, i32 1
  %UnaryOp30 = bitcast %union.anon.4* %v29 to %struct.anon.7*
  %op31 = getelementptr inbounds %struct.anon.7, %struct.anon.7* %UnaryOp30, i32 0, i32 0
  %34 = load i32, i32* %op31, align 4
  %call32 = call i32 @unaryop(i32 %34)
  %call33 = call i32 @compiler_addop(%struct.compiler* %32, i32 %call32)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end.36, label %if.then.35

if.then.35:                                       ; preds = %if.end.28
  store i32 0, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.end.28
  br label %sw.epilog.369

sw.bb.37:                                         ; preds = %if.end
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %36 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call38 = call i32 @compiler_lambda(%struct.compiler* %35, %struct._expr* %36)
  store i32 %call38, i32* %retval
  br label %return

sw.bb.39:                                         ; preds = %if.end
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %38 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call40 = call i32 @compiler_ifexp(%struct.compiler* %37, %struct._expr* %38)
  store i32 %call40, i32* %retval
  br label %return

sw.bb.41:                                         ; preds = %if.end
  %39 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v42 = getelementptr inbounds %struct._expr, %struct._expr* %39, i32 0, i32 1
  %Dict = bitcast %union.anon.4* %v42 to %struct.anon.10*
  %values = getelementptr inbounds %struct.anon.10, %struct.anon.10* %Dict, i32 0, i32 1
  %40 = load %struct.asdl_seq*, %struct.asdl_seq** %values, align 8
  %cmp43 = icmp eq %struct.asdl_seq* %40, null
  br i1 %cmp43, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.41
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.41
  %41 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v44 = getelementptr inbounds %struct._expr, %struct._expr* %41, i32 0, i32 1
  %Dict45 = bitcast %union.anon.4* %v44 to %struct.anon.10*
  %values46 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %Dict45, i32 0, i32 1
  %42 = load %struct.asdl_seq*, %struct.asdl_seq** %values46, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %42, i32 0, i32 0
  %43 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %43, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %44 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %45 = load i64, i64* %n, align 8
  %cmp47 = icmp sgt i64 %45, 65535
  br i1 %cmp47, label %cond.true.48, label %cond.false.49

cond.true.48:                                     ; preds = %cond.end
  br label %cond.end.50

cond.false.49:                                    ; preds = %cond.end
  %46 = load i64, i64* %n, align 8
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.49, %cond.true.48
  %cond51 = phi i64 [ 65535, %cond.true.48 ], [ %46, %cond.false.49 ]
  %call52 = call i32 @compiler_addop_i(%struct.compiler* %44, i32 105, i64 %cond51)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %cond.end.50
  store i32 0, i32* %retval
  br label %return

if.end.55:                                        ; preds = %cond.end.50
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.55
  %47 = load i64, i64* %i, align 8
  %48 = load i64, i64* %n, align 8
  %cmp56 = icmp slt i64 %47, %48
  br i1 %cmp56, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %49 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %50 = load i64, i64* %i, align 8
  %51 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v57 = getelementptr inbounds %struct._expr, %struct._expr* %51, i32 0, i32 1
  %Dict58 = bitcast %union.anon.4* %v57 to %struct.anon.10*
  %values59 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %Dict58, i32 0, i32 1
  %52 = load %struct.asdl_seq*, %struct.asdl_seq** %values59, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %52, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %50
  %53 = load i8*, i8** %arrayidx, align 8
  %54 = bitcast i8* %53 to %struct._expr*
  %call60 = call i32 @compiler_visit_expr(%struct.compiler* %49, %struct._expr* %54)
  %tobool61 = icmp ne i32 %call60, 0
  br i1 %tobool61, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.63:                                        ; preds = %for.body
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %56 = load i64, i64* %i, align 8
  %57 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v64 = getelementptr inbounds %struct._expr, %struct._expr* %57, i32 0, i32 1
  %Dict65 = bitcast %union.anon.4* %v64 to %struct.anon.10*
  %keys = getelementptr inbounds %struct.anon.10, %struct.anon.10* %Dict65, i32 0, i32 0
  %58 = load %struct.asdl_seq*, %struct.asdl_seq** %keys, align 8
  %elements66 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %58, i32 0, i32 1
  %arrayidx67 = getelementptr [1 x i8*], [1 x i8*]* %elements66, i32 0, i64 %56
  %59 = load i8*, i8** %arrayidx67, align 8
  %60 = bitcast i8* %59 to %struct._expr*
  %call68 = call i32 @compiler_visit_expr(%struct.compiler* %55, %struct._expr* %60)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end.71, label %if.then.70

if.then.70:                                       ; preds = %if.end.63
  store i32 0, i32* %retval
  br label %return

if.end.71:                                        ; preds = %if.end.63
  %61 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call72 = call i32 @compiler_addop(%struct.compiler* %61, i32 54)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.end.75, label %if.then.74

if.then.74:                                       ; preds = %if.end.71
  store i32 0, i32* %retval
  br label %return

if.end.75:                                        ; preds = %if.end.71
  br label %for.inc

for.inc:                                          ; preds = %if.end.75
  %62 = load i64, i64* %i, align 8
  %inc = add i64 %62, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog.369

sw.bb.76:                                         ; preds = %if.end
  %63 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v77 = getelementptr inbounds %struct._expr, %struct._expr* %63, i32 0, i32 1
  %Set = bitcast %union.anon.4* %v77 to %struct.anon.11*
  %elts = getelementptr inbounds %struct.anon.11, %struct.anon.11* %Set, i32 0, i32 0
  %64 = load %struct.asdl_seq*, %struct.asdl_seq** %elts, align 8
  %cmp78 = icmp eq %struct.asdl_seq* %64, null
  br i1 %cmp78, label %cond.true.79, label %cond.false.80

cond.true.79:                                     ; preds = %sw.bb.76
  br label %cond.end.85

cond.false.80:                                    ; preds = %sw.bb.76
  %65 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v81 = getelementptr inbounds %struct._expr, %struct._expr* %65, i32 0, i32 1
  %Set82 = bitcast %union.anon.4* %v81 to %struct.anon.11*
  %elts83 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %Set82, i32 0, i32 0
  %66 = load %struct.asdl_seq*, %struct.asdl_seq** %elts83, align 8
  %size84 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %66, i32 0, i32 0
  %67 = load i64, i64* %size84, align 8
  br label %cond.end.85

cond.end.85:                                      ; preds = %cond.false.80, %cond.true.79
  %cond86 = phi i64 [ 0, %cond.true.79 ], [ %67, %cond.false.80 ]
  store i64 %cond86, i64* %n, align 8
  %68 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v87 = getelementptr inbounds %struct._expr, %struct._expr* %68, i32 0, i32 1
  %Set88 = bitcast %union.anon.4* %v87 to %struct.anon.11*
  %elts89 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %Set88, i32 0, i32 0
  %69 = load %struct.asdl_seq*, %struct.asdl_seq** %elts89, align 8
  store %struct.asdl_seq* %69, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond.90

for.cond.90:                                      ; preds = %for.inc.107, %cond.end.85
  %70 = load i32, i32* %_i, align 4
  %conv = sext i32 %70 to i64
  %71 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp91 = icmp eq %struct.asdl_seq* %71, null
  br i1 %cmp91, label %cond.true.93, label %cond.false.94

cond.true.93:                                     ; preds = %for.cond.90
  br label %cond.end.96

cond.false.94:                                    ; preds = %for.cond.90
  %72 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size95 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %72, i32 0, i32 0
  %73 = load i64, i64* %size95, align 8
  br label %cond.end.96

cond.end.96:                                      ; preds = %cond.false.94, %cond.true.93
  %cond97 = phi i64 [ 0, %cond.true.93 ], [ %73, %cond.false.94 ]
  %cmp98 = icmp slt i64 %conv, %cond97
  br i1 %cmp98, label %for.body.100, label %for.end.109

for.body.100:                                     ; preds = %cond.end.96
  %74 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %74 to i64
  %75 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements101 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %75, i32 0, i32 1
  %arrayidx102 = getelementptr [1 x i8*], [1 x i8*]* %elements101, i32 0, i64 %idxprom
  %76 = load i8*, i8** %arrayidx102, align 8
  %77 = bitcast i8* %76 to %struct._expr*
  store %struct._expr* %77, %struct._expr** %elt, align 8
  %78 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %79 = load %struct._expr*, %struct._expr** %elt, align 8
  %call103 = call i32 @compiler_visit_expr(%struct.compiler* %78, %struct._expr* %79)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.end.106, label %if.then.105

if.then.105:                                      ; preds = %for.body.100
  store i32 0, i32* %retval
  br label %return

if.end.106:                                       ; preds = %for.body.100
  br label %for.inc.107

for.inc.107:                                      ; preds = %if.end.106
  %80 = load i32, i32* %_i, align 4
  %inc108 = add i32 %80, 1
  store i32 %inc108, i32* %_i, align 4
  br label %for.cond.90

for.end.109:                                      ; preds = %cond.end.96
  %81 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %82 = load i64, i64* %n, align 8
  %call110 = call i32 @compiler_addop_i(%struct.compiler* %81, i32 104, i64 %82)
  %tobool111 = icmp ne i32 %call110, 0
  br i1 %tobool111, label %if.end.113, label %if.then.112

if.then.112:                                      ; preds = %for.end.109
  store i32 0, i32* %retval
  br label %return

if.end.113:                                       ; preds = %for.end.109
  br label %sw.epilog.369

sw.bb.114:                                        ; preds = %if.end
  %83 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %84 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call115 = call i32 @compiler_genexp(%struct.compiler* %83, %struct._expr* %84)
  store i32 %call115, i32* %retval
  br label %return

sw.bb.116:                                        ; preds = %if.end
  %85 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %86 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call117 = call i32 @compiler_listcomp(%struct.compiler* %85, %struct._expr* %86)
  store i32 %call117, i32* %retval
  br label %return

sw.bb.118:                                        ; preds = %if.end
  %87 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %88 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call119 = call i32 @compiler_setcomp(%struct.compiler* %87, %struct._expr* %88)
  store i32 %call119, i32* %retval
  br label %return

sw.bb.120:                                        ; preds = %if.end
  %89 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %90 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call121 = call i32 @compiler_dictcomp(%struct.compiler* %89, %struct._expr* %90)
  store i32 %call121, i32* %retval
  br label %return

sw.bb.122:                                        ; preds = %if.end
  %91 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u123 = getelementptr inbounds %struct.compiler, %struct.compiler* %91, i32 0, i32 7
  %92 = load %struct.compiler_unit*, %struct.compiler_unit** %u123, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %92, i32 0, i32 0
  %93 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %ste_type = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %93, i32 0, i32 7
  %94 = load i32, i32* %ste_type, align 4
  %cmp124 = icmp ne i32 %94, 0
  br i1 %cmp124, label %if.then.126, label %if.end.128

if.then.126:                                      ; preds = %sw.bb.122
  %95 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call127 = call i32 @compiler_error(%struct.compiler* %95, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.37, i32 0, i32 0))
  store i32 %call127, i32* %retval
  br label %return

if.end.128:                                       ; preds = %sw.bb.122
  %96 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v129 = getelementptr inbounds %struct._expr, %struct._expr* %96, i32 0, i32 1
  %Yield = bitcast %union.anon.4* %v129 to %struct.anon.16*
  %value = getelementptr inbounds %struct.anon.16, %struct.anon.16* %Yield, i32 0, i32 0
  %97 = load %struct._expr*, %struct._expr** %value, align 8
  %tobool130 = icmp ne %struct._expr* %97, null
  br i1 %tobool130, label %if.then.131, label %if.else

if.then.131:                                      ; preds = %if.end.128
  %98 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %99 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v132 = getelementptr inbounds %struct._expr, %struct._expr* %99, i32 0, i32 1
  %Yield133 = bitcast %union.anon.4* %v132 to %struct.anon.16*
  %value134 = getelementptr inbounds %struct.anon.16, %struct.anon.16* %Yield133, i32 0, i32 0
  %100 = load %struct._expr*, %struct._expr** %value134, align 8
  %call135 = call i32 @compiler_visit_expr(%struct.compiler* %98, %struct._expr* %100)
  %tobool136 = icmp ne i32 %call135, 0
  br i1 %tobool136, label %if.end.138, label %if.then.137

if.then.137:                                      ; preds = %if.then.131
  store i32 0, i32* %retval
  br label %return

if.end.138:                                       ; preds = %if.then.131
  br label %if.end.144

if.else:                                          ; preds = %if.end.128
  %101 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %102 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u139 = getelementptr inbounds %struct.compiler, %struct.compiler* %102, i32 0, i32 7
  %103 = load %struct.compiler_unit*, %struct.compiler_unit** %u139, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %103, i32 0, i32 4
  %104 = load %struct._object*, %struct._object** %u_consts, align 8
  %call140 = call i32 @compiler_addop_o(%struct.compiler* %101, i32 100, %struct._object* %104, %struct._object* @_Py_NoneStruct)
  %tobool141 = icmp ne i32 %call140, 0
  br i1 %tobool141, label %if.end.143, label %if.then.142

if.then.142:                                      ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.143:                                       ; preds = %if.else
  br label %if.end.144

if.end.144:                                       ; preds = %if.end.143, %if.end.138
  %105 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call145 = call i32 @compiler_addop(%struct.compiler* %105, i32 86)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.end.148, label %if.then.147

if.then.147:                                      ; preds = %if.end.144
  store i32 0, i32* %retval
  br label %return

if.end.148:                                       ; preds = %if.end.144
  br label %sw.epilog.369

sw.bb.149:                                        ; preds = %if.end
  %106 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u150 = getelementptr inbounds %struct.compiler, %struct.compiler* %106, i32 0, i32 7
  %107 = load %struct.compiler_unit*, %struct.compiler_unit** %u150, align 8
  %u_ste151 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %107, i32 0, i32 0
  %108 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste151, align 8
  %ste_type152 = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %108, i32 0, i32 7
  %109 = load i32, i32* %ste_type152, align 4
  %cmp153 = icmp ne i32 %109, 0
  br i1 %cmp153, label %if.then.155, label %if.end.157

if.then.155:                                      ; preds = %sw.bb.149
  %110 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call156 = call i32 @compiler_error(%struct.compiler* %110, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.37, i32 0, i32 0))
  store i32 %call156, i32* %retval
  br label %return

if.end.157:                                       ; preds = %sw.bb.149
  %111 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %112 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v158 = getelementptr inbounds %struct._expr, %struct._expr* %112, i32 0, i32 1
  %YieldFrom = bitcast %union.anon.4* %v158 to %struct.anon.17*
  %value159 = getelementptr inbounds %struct.anon.17, %struct.anon.17* %YieldFrom, i32 0, i32 0
  %113 = load %struct._expr*, %struct._expr** %value159, align 8
  %call160 = call i32 @compiler_visit_expr(%struct.compiler* %111, %struct._expr* %113)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %if.end.163, label %if.then.162

if.then.162:                                      ; preds = %if.end.157
  store i32 0, i32* %retval
  br label %return

if.end.163:                                       ; preds = %if.end.157
  %114 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call164 = call i32 @compiler_addop(%struct.compiler* %114, i32 68)
  %tobool165 = icmp ne i32 %call164, 0
  br i1 %tobool165, label %if.end.167, label %if.then.166

if.then.166:                                      ; preds = %if.end.163
  store i32 0, i32* %retval
  br label %return

if.end.167:                                       ; preds = %if.end.163
  %115 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %116 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u168 = getelementptr inbounds %struct.compiler, %struct.compiler* %116, i32 0, i32 7
  %117 = load %struct.compiler_unit*, %struct.compiler_unit** %u168, align 8
  %u_consts169 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %117, i32 0, i32 4
  %118 = load %struct._object*, %struct._object** %u_consts169, align 8
  %call170 = call i32 @compiler_addop_o(%struct.compiler* %115, i32 100, %struct._object* %118, %struct._object* @_Py_NoneStruct)
  %tobool171 = icmp ne i32 %call170, 0
  br i1 %tobool171, label %if.end.173, label %if.then.172

if.then.172:                                      ; preds = %if.end.167
  store i32 0, i32* %retval
  br label %return

if.end.173:                                       ; preds = %if.end.167
  %119 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call174 = call i32 @compiler_addop(%struct.compiler* %119, i32 72)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end.177, label %if.then.176

if.then.176:                                      ; preds = %if.end.173
  store i32 0, i32* %retval
  br label %return

if.end.177:                                       ; preds = %if.end.173
  br label %sw.epilog.369

sw.bb.178:                                        ; preds = %if.end
  %120 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %121 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call179 = call i32 @compiler_compare(%struct.compiler* %120, %struct._expr* %121)
  store i32 %call179, i32* %retval
  br label %return

sw.bb.180:                                        ; preds = %if.end
  %122 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %123 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call181 = call i32 @compiler_call(%struct.compiler* %122, %struct._expr* %123)
  store i32 %call181, i32* %retval
  br label %return

sw.bb.182:                                        ; preds = %if.end
  %124 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %125 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u183 = getelementptr inbounds %struct.compiler, %struct.compiler* %125, i32 0, i32 7
  %126 = load %struct.compiler_unit*, %struct.compiler_unit** %u183, align 8
  %u_consts184 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %126, i32 0, i32 4
  %127 = load %struct._object*, %struct._object** %u_consts184, align 8
  %128 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v185 = getelementptr inbounds %struct._expr, %struct._expr* %128, i32 0, i32 1
  %Num = bitcast %union.anon.4* %v185 to %struct.anon.20*
  %n186 = getelementptr inbounds %struct.anon.20, %struct.anon.20* %Num, i32 0, i32 0
  %129 = load %struct._object*, %struct._object** %n186, align 8
  %call187 = call i32 @compiler_addop_o(%struct.compiler* %124, i32 100, %struct._object* %127, %struct._object* %129)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end.190, label %if.then.189

if.then.189:                                      ; preds = %sw.bb.182
  store i32 0, i32* %retval
  br label %return

if.end.190:                                       ; preds = %sw.bb.182
  br label %sw.epilog.369

sw.bb.191:                                        ; preds = %if.end
  %130 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %131 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u192 = getelementptr inbounds %struct.compiler, %struct.compiler* %131, i32 0, i32 7
  %132 = load %struct.compiler_unit*, %struct.compiler_unit** %u192, align 8
  %u_consts193 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %132, i32 0, i32 4
  %133 = load %struct._object*, %struct._object** %u_consts193, align 8
  %134 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v194 = getelementptr inbounds %struct._expr, %struct._expr* %134, i32 0, i32 1
  %Str = bitcast %union.anon.4* %v194 to %struct.anon.21*
  %s = getelementptr inbounds %struct.anon.21, %struct.anon.21* %Str, i32 0, i32 0
  %135 = load %struct._object*, %struct._object** %s, align 8
  %call195 = call i32 @compiler_addop_o(%struct.compiler* %130, i32 100, %struct._object* %133, %struct._object* %135)
  %tobool196 = icmp ne i32 %call195, 0
  br i1 %tobool196, label %if.end.198, label %if.then.197

if.then.197:                                      ; preds = %sw.bb.191
  store i32 0, i32* %retval
  br label %return

if.end.198:                                       ; preds = %sw.bb.191
  br label %sw.epilog.369

sw.bb.199:                                        ; preds = %if.end
  %136 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %137 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u200 = getelementptr inbounds %struct.compiler, %struct.compiler* %137, i32 0, i32 7
  %138 = load %struct.compiler_unit*, %struct.compiler_unit** %u200, align 8
  %u_consts201 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %138, i32 0, i32 4
  %139 = load %struct._object*, %struct._object** %u_consts201, align 8
  %140 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v202 = getelementptr inbounds %struct._expr, %struct._expr* %140, i32 0, i32 1
  %Bytes = bitcast %union.anon.4* %v202 to %struct.anon.22*
  %s203 = getelementptr inbounds %struct.anon.22, %struct.anon.22* %Bytes, i32 0, i32 0
  %141 = load %struct._object*, %struct._object** %s203, align 8
  %call204 = call i32 @compiler_addop_o(%struct.compiler* %136, i32 100, %struct._object* %139, %struct._object* %141)
  %tobool205 = icmp ne i32 %call204, 0
  br i1 %tobool205, label %if.end.207, label %if.then.206

if.then.206:                                      ; preds = %sw.bb.199
  store i32 0, i32* %retval
  br label %return

if.end.207:                                       ; preds = %sw.bb.199
  br label %sw.epilog.369

sw.bb.208:                                        ; preds = %if.end
  %142 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %143 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u209 = getelementptr inbounds %struct.compiler, %struct.compiler* %143, i32 0, i32 7
  %144 = load %struct.compiler_unit*, %struct.compiler_unit** %u209, align 8
  %u_consts210 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %144, i32 0, i32 4
  %145 = load %struct._object*, %struct._object** %u_consts210, align 8
  %call211 = call i32 @compiler_addop_o(%struct.compiler* %142, i32 100, %struct._object* %145, %struct._object* @_Py_EllipsisObject)
  %tobool212 = icmp ne i32 %call211, 0
  br i1 %tobool212, label %if.end.214, label %if.then.213

if.then.213:                                      ; preds = %sw.bb.208
  store i32 0, i32* %retval
  br label %return

if.end.214:                                       ; preds = %sw.bb.208
  br label %sw.epilog.369

sw.bb.215:                                        ; preds = %if.end
  %146 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %147 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u216 = getelementptr inbounds %struct.compiler, %struct.compiler* %147, i32 0, i32 7
  %148 = load %struct.compiler_unit*, %struct.compiler_unit** %u216, align 8
  %u_consts217 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %148, i32 0, i32 4
  %149 = load %struct._object*, %struct._object** %u_consts217, align 8
  %150 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v218 = getelementptr inbounds %struct._expr, %struct._expr* %150, i32 0, i32 1
  %NameConstant = bitcast %union.anon.4* %v218 to %struct.anon.23*
  %value219 = getelementptr inbounds %struct.anon.23, %struct.anon.23* %NameConstant, i32 0, i32 0
  %151 = load %struct._object*, %struct._object** %value219, align 8
  %call220 = call i32 @compiler_addop_o(%struct.compiler* %146, i32 100, %struct._object* %149, %struct._object* %151)
  %tobool221 = icmp ne i32 %call220, 0
  br i1 %tobool221, label %if.end.223, label %if.then.222

if.then.222:                                      ; preds = %sw.bb.215
  store i32 0, i32* %retval
  br label %return

if.end.223:                                       ; preds = %sw.bb.215
  br label %sw.epilog.369

sw.bb.224:                                        ; preds = %if.end
  %152 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v225 = getelementptr inbounds %struct._expr, %struct._expr* %152, i32 0, i32 1
  %Attribute = bitcast %union.anon.4* %v225 to %struct.anon.24*
  %ctx = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute, i32 0, i32 2
  %153 = load i32, i32* %ctx, align 4
  %cmp226 = icmp ne i32 %153, 5
  br i1 %cmp226, label %if.then.228, label %if.end.236

if.then.228:                                      ; preds = %sw.bb.224
  %154 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %155 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v229 = getelementptr inbounds %struct._expr, %struct._expr* %155, i32 0, i32 1
  %Attribute230 = bitcast %union.anon.4* %v229 to %struct.anon.24*
  %value231 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute230, i32 0, i32 0
  %156 = load %struct._expr*, %struct._expr** %value231, align 8
  %call232 = call i32 @compiler_visit_expr(%struct.compiler* %154, %struct._expr* %156)
  %tobool233 = icmp ne i32 %call232, 0
  br i1 %tobool233, label %if.end.235, label %if.then.234

if.then.234:                                      ; preds = %if.then.228
  store i32 0, i32* %retval
  br label %return

if.end.235:                                       ; preds = %if.then.228
  br label %if.end.236

if.end.236:                                       ; preds = %if.end.235, %sw.bb.224
  %157 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v237 = getelementptr inbounds %struct._expr, %struct._expr* %157, i32 0, i32 1
  %Attribute238 = bitcast %union.anon.4* %v237 to %struct.anon.24*
  %ctx239 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute238, i32 0, i32 2
  %158 = load i32, i32* %ctx239, align 4
  switch i32 %158, label %sw.default [
    i32 4, label %sw.bb.240
    i32 1, label %sw.bb.245
    i32 5, label %sw.bb.253
    i32 2, label %sw.bb.258
    i32 3, label %sw.bb.268
    i32 6, label %sw.bb.278
  ]

sw.bb.240:                                        ; preds = %if.end.236
  %159 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call241 = call i32 @compiler_addop(%struct.compiler* %159, i32 4)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.end.244, label %if.then.243

if.then.243:                                      ; preds = %sw.bb.240
  store i32 0, i32* %retval
  br label %return

if.end.244:                                       ; preds = %sw.bb.240
  br label %sw.bb.245

sw.bb.245:                                        ; preds = %if.end.236, %if.end.244
  %160 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %161 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u246 = getelementptr inbounds %struct.compiler, %struct.compiler* %161, i32 0, i32 7
  %162 = load %struct.compiler_unit*, %struct.compiler_unit** %u246, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %162, i32 0, i32 5
  %163 = load %struct._object*, %struct._object** %u_names, align 8
  %164 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v247 = getelementptr inbounds %struct._expr, %struct._expr* %164, i32 0, i32 1
  %Attribute248 = bitcast %union.anon.4* %v247 to %struct.anon.24*
  %attr = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute248, i32 0, i32 1
  %165 = load %struct._object*, %struct._object** %attr, align 8
  %call249 = call i32 @compiler_addop_name(%struct.compiler* %160, i32 106, %struct._object* %163, %struct._object* %165)
  %tobool250 = icmp ne i32 %call249, 0
  br i1 %tobool250, label %if.end.252, label %if.then.251

if.then.251:                                      ; preds = %sw.bb.245
  store i32 0, i32* %retval
  br label %return

if.end.252:                                       ; preds = %sw.bb.245
  br label %sw.epilog

sw.bb.253:                                        ; preds = %if.end.236
  %166 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call254 = call i32 @compiler_addop(%struct.compiler* %166, i32 2)
  %tobool255 = icmp ne i32 %call254, 0
  br i1 %tobool255, label %if.end.257, label %if.then.256

if.then.256:                                      ; preds = %sw.bb.253
  store i32 0, i32* %retval
  br label %return

if.end.257:                                       ; preds = %sw.bb.253
  br label %sw.bb.258

sw.bb.258:                                        ; preds = %if.end.236, %if.end.257
  %167 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %168 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u259 = getelementptr inbounds %struct.compiler, %struct.compiler* %168, i32 0, i32 7
  %169 = load %struct.compiler_unit*, %struct.compiler_unit** %u259, align 8
  %u_names260 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %169, i32 0, i32 5
  %170 = load %struct._object*, %struct._object** %u_names260, align 8
  %171 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v261 = getelementptr inbounds %struct._expr, %struct._expr* %171, i32 0, i32 1
  %Attribute262 = bitcast %union.anon.4* %v261 to %struct.anon.24*
  %attr263 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute262, i32 0, i32 1
  %172 = load %struct._object*, %struct._object** %attr263, align 8
  %call264 = call i32 @compiler_addop_name(%struct.compiler* %167, i32 95, %struct._object* %170, %struct._object* %172)
  %tobool265 = icmp ne i32 %call264, 0
  br i1 %tobool265, label %if.end.267, label %if.then.266

if.then.266:                                      ; preds = %sw.bb.258
  store i32 0, i32* %retval
  br label %return

if.end.267:                                       ; preds = %sw.bb.258
  br label %sw.epilog

sw.bb.268:                                        ; preds = %if.end.236
  %173 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %174 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u269 = getelementptr inbounds %struct.compiler, %struct.compiler* %174, i32 0, i32 7
  %175 = load %struct.compiler_unit*, %struct.compiler_unit** %u269, align 8
  %u_names270 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %175, i32 0, i32 5
  %176 = load %struct._object*, %struct._object** %u_names270, align 8
  %177 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v271 = getelementptr inbounds %struct._expr, %struct._expr* %177, i32 0, i32 1
  %Attribute272 = bitcast %union.anon.4* %v271 to %struct.anon.24*
  %attr273 = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute272, i32 0, i32 1
  %178 = load %struct._object*, %struct._object** %attr273, align 8
  %call274 = call i32 @compiler_addop_name(%struct.compiler* %173, i32 96, %struct._object* %176, %struct._object* %178)
  %tobool275 = icmp ne i32 %call274, 0
  br i1 %tobool275, label %if.end.277, label %if.then.276

if.then.276:                                      ; preds = %sw.bb.268
  store i32 0, i32* %retval
  br label %return

if.end.277:                                       ; preds = %sw.bb.268
  br label %sw.epilog

sw.bb.278:                                        ; preds = %if.end.236
  br label %sw.default

sw.default:                                       ; preds = %if.end.236, %sw.bb.278
  %179 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %179, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.38, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.277, %if.end.267, %if.end.252
  br label %sw.epilog.369

sw.bb.279:                                        ; preds = %if.end
  %180 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v280 = getelementptr inbounds %struct._expr, %struct._expr* %180, i32 0, i32 1
  %Subscript = bitcast %union.anon.4* %v280 to %struct.anon.25*
  %ctx281 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript, i32 0, i32 2
  %181 = load i32, i32* %ctx281, align 4
  switch i32 %181, label %sw.default.350 [
    i32 4, label %sw.bb.282
    i32 1, label %sw.bb.296
    i32 5, label %sw.bb.311
    i32 2, label %sw.bb.319
    i32 3, label %sw.bb.334
    i32 6, label %sw.bb.349
  ]

sw.bb.282:                                        ; preds = %sw.bb.279
  %182 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %183 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v283 = getelementptr inbounds %struct._expr, %struct._expr* %183, i32 0, i32 1
  %Subscript284 = bitcast %union.anon.4* %v283 to %struct.anon.25*
  %value285 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript284, i32 0, i32 0
  %184 = load %struct._expr*, %struct._expr** %value285, align 8
  %call286 = call i32 @compiler_visit_expr(%struct.compiler* %182, %struct._expr* %184)
  %tobool287 = icmp ne i32 %call286, 0
  br i1 %tobool287, label %if.end.289, label %if.then.288

if.then.288:                                      ; preds = %sw.bb.282
  store i32 0, i32* %retval
  br label %return

if.end.289:                                       ; preds = %sw.bb.282
  %185 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %186 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v290 = getelementptr inbounds %struct._expr, %struct._expr* %186, i32 0, i32 1
  %Subscript291 = bitcast %union.anon.4* %v290 to %struct.anon.25*
  %slice = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript291, i32 0, i32 1
  %187 = load %struct._slice*, %struct._slice** %slice, align 8
  %call292 = call i32 @compiler_visit_slice(%struct.compiler* %185, %struct._slice* %187, i32 4)
  %tobool293 = icmp ne i32 %call292, 0
  br i1 %tobool293, label %if.end.295, label %if.then.294

if.then.294:                                      ; preds = %if.end.289
  store i32 0, i32* %retval
  br label %return

if.end.295:                                       ; preds = %if.end.289
  br label %sw.epilog.351

sw.bb.296:                                        ; preds = %sw.bb.279
  %188 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %189 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v297 = getelementptr inbounds %struct._expr, %struct._expr* %189, i32 0, i32 1
  %Subscript298 = bitcast %union.anon.4* %v297 to %struct.anon.25*
  %value299 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript298, i32 0, i32 0
  %190 = load %struct._expr*, %struct._expr** %value299, align 8
  %call300 = call i32 @compiler_visit_expr(%struct.compiler* %188, %struct._expr* %190)
  %tobool301 = icmp ne i32 %call300, 0
  br i1 %tobool301, label %if.end.303, label %if.then.302

if.then.302:                                      ; preds = %sw.bb.296
  store i32 0, i32* %retval
  br label %return

if.end.303:                                       ; preds = %sw.bb.296
  %191 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %192 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v304 = getelementptr inbounds %struct._expr, %struct._expr* %192, i32 0, i32 1
  %Subscript305 = bitcast %union.anon.4* %v304 to %struct.anon.25*
  %slice306 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript305, i32 0, i32 1
  %193 = load %struct._slice*, %struct._slice** %slice306, align 8
  %call307 = call i32 @compiler_visit_slice(%struct.compiler* %191, %struct._slice* %193, i32 1)
  %tobool308 = icmp ne i32 %call307, 0
  br i1 %tobool308, label %if.end.310, label %if.then.309

if.then.309:                                      ; preds = %if.end.303
  store i32 0, i32* %retval
  br label %return

if.end.310:                                       ; preds = %if.end.303
  br label %sw.epilog.351

sw.bb.311:                                        ; preds = %sw.bb.279
  %194 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %195 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v312 = getelementptr inbounds %struct._expr, %struct._expr* %195, i32 0, i32 1
  %Subscript313 = bitcast %union.anon.4* %v312 to %struct.anon.25*
  %slice314 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript313, i32 0, i32 1
  %196 = load %struct._slice*, %struct._slice** %slice314, align 8
  %call315 = call i32 @compiler_visit_slice(%struct.compiler* %194, %struct._slice* %196, i32 5)
  %tobool316 = icmp ne i32 %call315, 0
  br i1 %tobool316, label %if.end.318, label %if.then.317

if.then.317:                                      ; preds = %sw.bb.311
  store i32 0, i32* %retval
  br label %return

if.end.318:                                       ; preds = %sw.bb.311
  br label %sw.epilog.351

sw.bb.319:                                        ; preds = %sw.bb.279
  %197 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %198 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v320 = getelementptr inbounds %struct._expr, %struct._expr* %198, i32 0, i32 1
  %Subscript321 = bitcast %union.anon.4* %v320 to %struct.anon.25*
  %value322 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript321, i32 0, i32 0
  %199 = load %struct._expr*, %struct._expr** %value322, align 8
  %call323 = call i32 @compiler_visit_expr(%struct.compiler* %197, %struct._expr* %199)
  %tobool324 = icmp ne i32 %call323, 0
  br i1 %tobool324, label %if.end.326, label %if.then.325

if.then.325:                                      ; preds = %sw.bb.319
  store i32 0, i32* %retval
  br label %return

if.end.326:                                       ; preds = %sw.bb.319
  %200 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %201 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v327 = getelementptr inbounds %struct._expr, %struct._expr* %201, i32 0, i32 1
  %Subscript328 = bitcast %union.anon.4* %v327 to %struct.anon.25*
  %slice329 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript328, i32 0, i32 1
  %202 = load %struct._slice*, %struct._slice** %slice329, align 8
  %call330 = call i32 @compiler_visit_slice(%struct.compiler* %200, %struct._slice* %202, i32 2)
  %tobool331 = icmp ne i32 %call330, 0
  br i1 %tobool331, label %if.end.333, label %if.then.332

if.then.332:                                      ; preds = %if.end.326
  store i32 0, i32* %retval
  br label %return

if.end.333:                                       ; preds = %if.end.326
  br label %sw.epilog.351

sw.bb.334:                                        ; preds = %sw.bb.279
  %203 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %204 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v335 = getelementptr inbounds %struct._expr, %struct._expr* %204, i32 0, i32 1
  %Subscript336 = bitcast %union.anon.4* %v335 to %struct.anon.25*
  %value337 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript336, i32 0, i32 0
  %205 = load %struct._expr*, %struct._expr** %value337, align 8
  %call338 = call i32 @compiler_visit_expr(%struct.compiler* %203, %struct._expr* %205)
  %tobool339 = icmp ne i32 %call338, 0
  br i1 %tobool339, label %if.end.341, label %if.then.340

if.then.340:                                      ; preds = %sw.bb.334
  store i32 0, i32* %retval
  br label %return

if.end.341:                                       ; preds = %sw.bb.334
  %206 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %207 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v342 = getelementptr inbounds %struct._expr, %struct._expr* %207, i32 0, i32 1
  %Subscript343 = bitcast %union.anon.4* %v342 to %struct.anon.25*
  %slice344 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript343, i32 0, i32 1
  %208 = load %struct._slice*, %struct._slice** %slice344, align 8
  %call345 = call i32 @compiler_visit_slice(%struct.compiler* %206, %struct._slice* %208, i32 3)
  %tobool346 = icmp ne i32 %call345, 0
  br i1 %tobool346, label %if.end.348, label %if.then.347

if.then.347:                                      ; preds = %if.end.341
  store i32 0, i32* %retval
  br label %return

if.end.348:                                       ; preds = %if.end.341
  br label %sw.epilog.351

sw.bb.349:                                        ; preds = %sw.bb.279
  br label %sw.default.350

sw.default.350:                                   ; preds = %sw.bb.279, %sw.bb.349
  %209 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %209, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.39, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

sw.epilog.351:                                    ; preds = %if.end.348, %if.end.333, %if.end.318, %if.end.310, %if.end.295
  br label %sw.epilog.369

sw.bb.352:                                        ; preds = %if.end
  %210 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v353 = getelementptr inbounds %struct._expr, %struct._expr* %210, i32 0, i32 1
  %Starred = bitcast %union.anon.4* %v353 to %struct.anon.30*
  %ctx354 = getelementptr inbounds %struct.anon.30, %struct.anon.30* %Starred, i32 0, i32 1
  %211 = load i32, i32* %ctx354, align 4
  switch i32 %211, label %sw.default.357 [
    i32 2, label %sw.bb.355
  ]

sw.bb.355:                                        ; preds = %sw.bb.352
  %212 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call356 = call i32 @compiler_error(%struct.compiler* %212, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.40, i32 0, i32 0))
  store i32 %call356, i32* %retval
  br label %return

sw.default.357:                                   ; preds = %sw.bb.352
  %213 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call358 = call i32 @compiler_error(%struct.compiler* %213, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.41, i32 0, i32 0))
  store i32 %call358, i32* %retval
  br label %return

sw.bb.359:                                        ; preds = %if.end
  %214 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %215 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v360 = getelementptr inbounds %struct._expr, %struct._expr* %215, i32 0, i32 1
  %Name = bitcast %union.anon.4* %v360 to %struct.anon.31*
  %id = getelementptr inbounds %struct.anon.31, %struct.anon.31* %Name, i32 0, i32 0
  %216 = load %struct._object*, %struct._object** %id, align 8
  %217 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v361 = getelementptr inbounds %struct._expr, %struct._expr* %217, i32 0, i32 1
  %Name362 = bitcast %union.anon.4* %v361 to %struct.anon.31*
  %ctx363 = getelementptr inbounds %struct.anon.31, %struct.anon.31* %Name362, i32 0, i32 1
  %218 = load i32, i32* %ctx363, align 4
  %call364 = call i32 @compiler_nameop(%struct.compiler* %214, %struct._object* %216, i32 %218)
  store i32 %call364, i32* %retval
  br label %return

sw.bb.365:                                        ; preds = %if.end
  %219 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %220 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call366 = call i32 @compiler_list(%struct.compiler* %219, %struct._expr* %220)
  store i32 %call366, i32* %retval
  br label %return

sw.bb.367:                                        ; preds = %if.end
  %221 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %222 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %call368 = call i32 @compiler_tuple(%struct.compiler* %221, %struct._expr* %222)
  store i32 %call368, i32* %retval
  br label %return

sw.epilog.369:                                    ; preds = %if.end, %sw.epilog.351, %sw.epilog, %if.end.223, %if.end.214, %if.end.207, %if.end.198, %if.end.190, %if.end.177, %if.end.148, %if.end.113, %for.end, %if.end.36, %if.end.22
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog.369, %sw.bb.367, %sw.bb.365, %sw.bb.359, %sw.default.357, %sw.bb.355, %sw.default.350, %if.then.347, %if.then.340, %if.then.332, %if.then.325, %if.then.317, %if.then.309, %if.then.302, %if.then.294, %if.then.288, %sw.default, %if.then.276, %if.then.266, %if.then.256, %if.then.251, %if.then.243, %if.then.234, %if.then.222, %if.then.213, %if.then.206, %if.then.197, %if.then.189, %sw.bb.180, %sw.bb.178, %if.then.176, %if.then.172, %if.then.166, %if.then.162, %if.then.155, %if.then.147, %if.then.142, %if.then.137, %if.then.126, %sw.bb.120, %sw.bb.118, %sw.bb.116, %sw.bb.114, %if.then.112, %if.then.105, %if.then.74, %if.then.70, %if.then.62, %if.then.54, %sw.bb.39, %sw.bb.37, %if.then.35, %if.then.27, %if.then.21, %if.then.14, %if.then.8, %sw.bb
  %223 = load i32, i32* %retval
  ret i32 %223
}

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct.PyCodeObject* @assemble(%struct.compiler* %c, i32 %addNone) #0 {
entry:
  %retval = alloca %struct.PyCodeObject*, align 8
  %c.addr = alloca %struct.compiler*, align 8
  %addNone.addr = alloca i32, align 4
  %b = alloca %struct.basicblock_*, align 8
  %entryblock = alloca %struct.basicblock_*, align 8
  %a = alloca %struct.assembler, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nblocks = alloca i32, align 4
  %co = alloca %struct.PyCodeObject*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %addNone, i32* %addNone.addr, align 4
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %co, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 13
  %2 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock, align 8
  %b_return = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %2, i32 0, i32 5
  %bf.load = load i8, i8* %b_return, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end.14, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_next_block(%struct.compiler* %3)
  %cmp = icmp eq %struct.basicblock_* %call, null
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load i32, i32* %addNone.addr, align 4
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.then.3, label %if.end.9

if.then.3:                                        ; preds = %if.end
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u4 = getelementptr inbounds %struct.compiler, %struct.compiler* %6, i32 0, i32 7
  %7 = load %struct.compiler_unit*, %struct.compiler_unit** %u4, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %7, i32 0, i32 4
  %8 = load %struct._object*, %struct._object** %u_consts, align 8
  %call5 = call i32 @compiler_addop_o(%struct.compiler* %5, i32 100, %struct._object* %8, %struct._object* @_Py_NoneStruct)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.then.3
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end.8:                                         ; preds = %if.then.3
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.end
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call10 = call i32 @compiler_addop(%struct.compiler* %9, i32 83)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end.9
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %retval
  br label %return

if.end.13:                                        ; preds = %if.end.9
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %entry
  store i32 0, i32* %nblocks, align 4
  store %struct.basicblock_* null, %struct.basicblock_** %entryblock, align 8
  %10 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u15 = getelementptr inbounds %struct.compiler, %struct.compiler* %10, i32 0, i32 7
  %11 = load %struct.compiler_unit*, %struct.compiler_unit** %u15, align 8
  %u_blocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %11, i32 0, i32 12
  %12 = load %struct.basicblock_*, %struct.basicblock_** %u_blocks, align 8
  store %struct.basicblock_* %12, %struct.basicblock_** %b, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.14
  %13 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %cmp16 = icmp ne %struct.basicblock_* %13, null
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %nblocks, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %nblocks, align 4
  %15 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  store %struct.basicblock_* %15, %struct.basicblock_** %entryblock, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_list = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %16, i32 0, i32 0
  %17 = load %struct.basicblock_*, %struct.basicblock_** %b_list, align 8
  store %struct.basicblock_* %17, %struct.basicblock_** %b, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u17 = getelementptr inbounds %struct.compiler, %struct.compiler* %18, i32 0, i32 7
  %19 = load %struct.compiler_unit*, %struct.compiler_unit** %u17, align 8
  %u_firstlineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %19, i32 0, i32 16
  %20 = load i32, i32* %u_firstlineno, align 4
  %tobool18 = icmp ne i32 %20, 0
  br i1 %tobool18, label %if.end.29, label %if.then.19

if.then.19:                                       ; preds = %for.end
  %21 = load %struct.basicblock_*, %struct.basicblock_** %entryblock, align 8
  %tobool20 = icmp ne %struct.basicblock_* %21, null
  br i1 %tobool20, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then.19
  %22 = load %struct.basicblock_*, %struct.basicblock_** %entryblock, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %22, i32 0, i32 3
  %23 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %tobool21 = icmp ne %struct.instr* %23, null
  br i1 %tobool21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %land.lhs.true
  %24 = load %struct.basicblock_*, %struct.basicblock_** %entryblock, align 8
  %b_instr23 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %24, i32 0, i32 3
  %25 = load %struct.instr*, %struct.instr** %b_instr23, align 8
  %i_lineno = getelementptr inbounds %struct.instr, %struct.instr* %25, i32 0, i32 4
  %26 = load i32, i32* %i_lineno, align 4
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u24 = getelementptr inbounds %struct.compiler, %struct.compiler* %27, i32 0, i32 7
  %28 = load %struct.compiler_unit*, %struct.compiler_unit** %u24, align 8
  %u_firstlineno25 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %28, i32 0, i32 16
  store i32 %26, i32* %u_firstlineno25, align 4
  br label %if.end.28

if.else:                                          ; preds = %land.lhs.true, %if.then.19
  %29 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u26 = getelementptr inbounds %struct.compiler, %struct.compiler* %29, i32 0, i32 7
  %30 = load %struct.compiler_unit*, %struct.compiler_unit** %u26, align 8
  %u_firstlineno27 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %30, i32 0, i32 16
  store i32 1, i32* %u_firstlineno27, align 4
  br label %if.end.28

if.end.28:                                        ; preds = %if.else, %if.then.22
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %for.end
  %31 = load i32, i32* %nblocks, align 4
  %32 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u30 = getelementptr inbounds %struct.compiler, %struct.compiler* %32, i32 0, i32 7
  %33 = load %struct.compiler_unit*, %struct.compiler_unit** %u30, align 8
  %u_firstlineno31 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %33, i32 0, i32 16
  %34 = load i32, i32* %u_firstlineno31, align 4
  %call32 = call i32 @assemble_init(%struct.assembler* %a, i32 %31, i32 %34)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end.35, label %if.then.34

if.then.34:                                       ; preds = %if.end.29
  br label %error

if.end.35:                                        ; preds = %if.end.29
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %36 = load %struct.basicblock_*, %struct.basicblock_** %entryblock, align 8
  call void @dfs(%struct.compiler* %35, %struct.basicblock_* %36, %struct.assembler* %a)
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @assemble_jump_offsets(%struct.assembler* %a, %struct.compiler* %37)
  %a_nblocks = getelementptr inbounds %struct.assembler, %struct.assembler* %a, i32 0, i32 2
  %38 = load i32, i32* %a_nblocks, align 4
  %sub = sub i32 %38, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond.36

for.cond.36:                                      ; preds = %for.inc.52, %if.end.35
  %39 = load i32, i32* %i, align 4
  %cmp37 = icmp sge i32 %39, 0
  br i1 %cmp37, label %for.body.38, label %for.end.53

for.body.38:                                      ; preds = %for.cond.36
  %40 = load i32, i32* %i, align 4
  %idxprom = sext i32 %40 to i64
  %a_postorder = getelementptr inbounds %struct.assembler, %struct.assembler* %a, i32 0, i32 3
  %41 = load %struct.basicblock_**, %struct.basicblock_*** %a_postorder, align 8
  %arrayidx = getelementptr %struct.basicblock_*, %struct.basicblock_** %41, i64 %idxprom
  %42 = load %struct.basicblock_*, %struct.basicblock_** %arrayidx, align 8
  store %struct.basicblock_* %42, %struct.basicblock_** %b, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond.39

for.cond.39:                                      ; preds = %for.inc.49, %for.body.38
  %43 = load i32, i32* %j, align 4
  %44 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_iused = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %44, i32 0, i32 1
  %45 = load i32, i32* %b_iused, align 4
  %cmp40 = icmp slt i32 %43, %45
  br i1 %cmp40, label %for.body.41, label %for.end.51

for.body.41:                                      ; preds = %for.cond.39
  %46 = load i32, i32* %j, align 4
  %idxprom42 = sext i32 %46 to i64
  %47 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_instr43 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %47, i32 0, i32 3
  %48 = load %struct.instr*, %struct.instr** %b_instr43, align 8
  %arrayidx44 = getelementptr %struct.instr, %struct.instr* %48, i64 %idxprom42
  %call45 = call i32 @assemble_emit(%struct.assembler* %a, %struct.instr* %arrayidx44)
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.end.48, label %if.then.47

if.then.47:                                       ; preds = %for.body.41
  br label %error

if.end.48:                                        ; preds = %for.body.41
  br label %for.inc.49

for.inc.49:                                       ; preds = %if.end.48
  %49 = load i32, i32* %j, align 4
  %inc50 = add i32 %49, 1
  store i32 %inc50, i32* %j, align 4
  br label %for.cond.39

for.end.51:                                       ; preds = %for.cond.39
  br label %for.inc.52

for.inc.52:                                       ; preds = %for.end.51
  %50 = load i32, i32* %i, align 4
  %dec = add i32 %50, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond.36

for.end.53:                                       ; preds = %for.cond.36
  %a_lnotab = getelementptr inbounds %struct.assembler, %struct.assembler* %a, i32 0, i32 4
  %a_lnotab_off = getelementptr inbounds %struct.assembler, %struct.assembler* %a, i32 0, i32 5
  %51 = load i32, i32* %a_lnotab_off, align 4
  %conv = sext i32 %51 to i64
  %call54 = call i32 @_PyBytes_Resize(%struct._object** %a_lnotab, i64 %conv)
  %cmp55 = icmp slt i32 %call54, 0
  br i1 %cmp55, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %for.end.53
  br label %error

if.end.58:                                        ; preds = %for.end.53
  %a_bytecode = getelementptr inbounds %struct.assembler, %struct.assembler* %a, i32 0, i32 0
  %a_offset = getelementptr inbounds %struct.assembler, %struct.assembler* %a, i32 0, i32 1
  %52 = load i32, i32* %a_offset, align 4
  %conv59 = sext i32 %52 to i64
  %call60 = call i32 @_PyBytes_Resize(%struct._object** %a_bytecode, i64 %conv59)
  %cmp61 = icmp slt i32 %call60, 0
  br i1 %cmp61, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %if.end.58
  br label %error

if.end.64:                                        ; preds = %if.end.58
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call65 = call %struct.PyCodeObject* @makecode(%struct.compiler* %53, %struct.assembler* %a)
  store %struct.PyCodeObject* %call65, %struct.PyCodeObject** %co, align 8
  br label %error

error:                                            ; preds = %if.end.64, %if.then.63, %if.then.57, %if.then.47, %if.then.34
  call void @assemble_free(%struct.assembler* %a)
  %54 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  store %struct.PyCodeObject* %54, %struct.PyCodeObject** %retval
  br label %return

return:                                           ; preds = %error, %if.then.12, %if.then.7, %if.then.1
  %55 = load %struct.PyCodeObject*, %struct.PyCodeObject** %retval
  ret %struct.PyCodeObject* %55
}

declare i8* @PyObject_Malloc(i64) #1

declare %struct._object* @PyErr_NoMemory() #1

declare %struct._symtable_entry* @PySymtable_Lookup(%struct.symtable*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @compiler_unit_free(%struct.compiler_unit* %u) #0 {
entry:
  %u.addr = alloca %struct.compiler_unit*, align 8
  %b = alloca %struct.basicblock_*, align 8
  %next = alloca %struct.basicblock_*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp12 = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_tmp48 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  %_py_tmp66 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  %_py_tmp84 = alloca %struct._object*, align 8
  %_py_decref_tmp89 = alloca %struct._object*, align 8
  %_py_tmp102 = alloca %struct._object*, align 8
  %_py_decref_tmp107 = alloca %struct._object*, align 8
  %_py_tmp120 = alloca %struct._object*, align 8
  %_py_decref_tmp125 = alloca %struct._object*, align 8
  %_py_tmp138 = alloca %struct._object*, align 8
  %_py_decref_tmp143 = alloca %struct._object*, align 8
  store %struct.compiler_unit* %u, %struct.compiler_unit** %u.addr, align 8
  %0 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  call void @compiler_unit_check(%struct.compiler_unit* %0)
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_blocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 12
  %2 = load %struct.basicblock_*, %struct.basicblock_** %u_blocks, align 8
  store %struct.basicblock_* %2, %struct.basicblock_** %b, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %cmp = icmp ne %struct.basicblock_* %3, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %4, i32 0, i32 3
  %5 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %tobool = icmp ne %struct.instr* %5, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %6 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_instr1 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %6, i32 0, i32 3
  %7 = load %struct.instr*, %struct.instr** %b_instr1, align 8
  %8 = bitcast %struct.instr* %7 to i8*
  call void @PyObject_Free(i8* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_list = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %9, i32 0, i32 0
  %10 = load %struct.basicblock_*, %struct.basicblock_** %b_list, align 8
  store %struct.basicblock_* %10, %struct.basicblock_** %next, align 8
  %11 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %12 = bitcast %struct.basicblock_* %11 to i8*
  call void @PyObject_Free(i8* %12)
  %13 = load %struct.basicblock_*, %struct.basicblock_** %next, align 8
  store %struct.basicblock_* %13, %struct.basicblock_** %b, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.end
  %14 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %14, i32 0, i32 0
  %15 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %16 = bitcast %struct._symtable_entry* %15 to %struct._object*
  store %struct._object* %16, %struct._object** %_py_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp2 = icmp ne %struct._object* %17, null
  br i1 %cmp2, label %if.then.3, label %if.end.9

if.then.3:                                        ; preds = %do.body
  %18 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_ste4 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %18, i32 0, i32 0
  store %struct._symtable_entry* null, %struct._symtable_entry** %u_ste4, align 8
  br label %do.body.5

do.body.5:                                        ; preds = %if.then.3
  %19 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body.5
  br label %if.end.8

if.else:                                          ; preds = %do.body.5
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  br label %if.end.9

if.end.9:                                         ; preds = %do.end, %do.body
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %26 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_name = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %26, i32 0, i32 1
  %27 = load %struct._object*, %struct._object** %u_name, align 8
  store %struct._object* %27, %struct._object** %_py_tmp12, align 8
  %28 = load %struct._object*, %struct._object** %_py_tmp12, align 8
  %cmp13 = icmp ne %struct._object* %28, null
  br i1 %cmp13, label %if.then.14, label %if.end.27

if.then.14:                                       ; preds = %do.body.11
  %29 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_name15 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %29, i32 0, i32 1
  store %struct._object* null, %struct._object** %u_name15, align 8
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.14
  %30 = load %struct._object*, %struct._object** %_py_tmp12, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp17, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %32, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %35(%struct._object* %36)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %if.end.27

if.end.27:                                        ; preds = %do.end.26, %do.body.11
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  br label %do.body.29

do.body.29:                                       ; preds = %do.end.28
  %37 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_qualname = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %u_qualname, align 8
  store %struct._object* %38, %struct._object** %_py_tmp30, align 8
  %39 = load %struct._object*, %struct._object** %_py_tmp30, align 8
  %cmp31 = icmp ne %struct._object* %39, null
  br i1 %cmp31, label %if.then.32, label %if.end.45

if.then.32:                                       ; preds = %do.body.29
  %40 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_qualname33 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %40, i32 0, i32 2
  store %struct._object* null, %struct._object** %u_qualname33, align 8
  br label %do.body.34

do.body.34:                                       ; preds = %if.then.32
  %41 = load %struct._object*, %struct._object** %_py_tmp30, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp35, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt36, align 8
  %dec37 = add i64 %43, -1
  store i64 %dec37, i64* %ob_refcnt36, align 8
  %cmp38 = icmp ne i64 %dec37, 0
  br i1 %cmp38, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43

if.else.40:                                       ; preds = %do.body.34
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  call void %46(%struct._object* %47)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  br label %if.end.45

if.end.45:                                        ; preds = %do.end.44, %do.body.29
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  br label %do.body.47

do.body.47:                                       ; preds = %do.end.46
  %48 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %48, i32 0, i32 4
  %49 = load %struct._object*, %struct._object** %u_consts, align 8
  store %struct._object* %49, %struct._object** %_py_tmp48, align 8
  %50 = load %struct._object*, %struct._object** %_py_tmp48, align 8
  %cmp49 = icmp ne %struct._object* %50, null
  br i1 %cmp49, label %if.then.50, label %if.end.63

if.then.50:                                       ; preds = %do.body.47
  %51 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_consts51 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %51, i32 0, i32 4
  store %struct._object* null, %struct._object** %u_consts51, align 8
  br label %do.body.52

do.body.52:                                       ; preds = %if.then.50
  %52 = load %struct._object*, %struct._object** %_py_tmp48, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp53, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %54, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %57(%struct._object* %58)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  br label %if.end.63

if.end.63:                                        ; preds = %do.end.62, %do.body.47
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  br label %do.body.65

do.body.65:                                       ; preds = %do.end.64
  %59 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %59, i32 0, i32 5
  %60 = load %struct._object*, %struct._object** %u_names, align 8
  store %struct._object* %60, %struct._object** %_py_tmp66, align 8
  %61 = load %struct._object*, %struct._object** %_py_tmp66, align 8
  %cmp67 = icmp ne %struct._object* %61, null
  br i1 %cmp67, label %if.then.68, label %if.end.81

if.then.68:                                       ; preds = %do.body.65
  %62 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_names69 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %62, i32 0, i32 5
  store %struct._object* null, %struct._object** %u_names69, align 8
  br label %do.body.70

do.body.70:                                       ; preds = %if.then.68
  %63 = load %struct._object*, %struct._object** %_py_tmp66, align 8
  store %struct._object* %63, %struct._object** %_py_decref_tmp71, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt72, align 8
  %dec73 = add i64 %65, -1
  store i64 %dec73, i64* %ob_refcnt72, align 8
  %cmp74 = icmp ne i64 %dec73, 0
  br i1 %cmp74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.70
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.70
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  call void %68(%struct._object* %69)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  br label %if.end.81

if.end.81:                                        ; preds = %do.end.80, %do.body.65
  br label %do.end.82

do.end.82:                                        ; preds = %if.end.81
  br label %do.body.83

do.body.83:                                       ; preds = %do.end.82
  %70 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_varnames = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %70, i32 0, i32 6
  %71 = load %struct._object*, %struct._object** %u_varnames, align 8
  store %struct._object* %71, %struct._object** %_py_tmp84, align 8
  %72 = load %struct._object*, %struct._object** %_py_tmp84, align 8
  %cmp85 = icmp ne %struct._object* %72, null
  br i1 %cmp85, label %if.then.86, label %if.end.99

if.then.86:                                       ; preds = %do.body.83
  %73 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_varnames87 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %73, i32 0, i32 6
  store %struct._object* null, %struct._object** %u_varnames87, align 8
  br label %do.body.88

do.body.88:                                       ; preds = %if.then.86
  %74 = load %struct._object*, %struct._object** %_py_tmp84, align 8
  store %struct._object* %74, %struct._object** %_py_decref_tmp89, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_refcnt90 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt90, align 8
  %dec91 = add i64 %76, -1
  store i64 %dec91, i64* %ob_refcnt90, align 8
  %cmp92 = icmp ne i64 %dec91, 0
  br i1 %cmp92, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %do.body.88
  br label %if.end.97

if.else.94:                                       ; preds = %do.body.88
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_type95 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type95, align 8
  %tp_dealloc96 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 4
  %79 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc96, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  call void %79(%struct._object* %80)
  br label %if.end.97

if.end.97:                                        ; preds = %if.else.94, %if.then.93
  br label %do.end.98

do.end.98:                                        ; preds = %if.end.97
  br label %if.end.99

if.end.99:                                        ; preds = %do.end.98, %do.body.83
  br label %do.end.100

do.end.100:                                       ; preds = %if.end.99
  br label %do.body.101

do.body.101:                                      ; preds = %do.end.100
  %81 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_freevars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %81, i32 0, i32 8
  %82 = load %struct._object*, %struct._object** %u_freevars, align 8
  store %struct._object* %82, %struct._object** %_py_tmp102, align 8
  %83 = load %struct._object*, %struct._object** %_py_tmp102, align 8
  %cmp103 = icmp ne %struct._object* %83, null
  br i1 %cmp103, label %if.then.104, label %if.end.117

if.then.104:                                      ; preds = %do.body.101
  %84 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_freevars105 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %84, i32 0, i32 8
  store %struct._object* null, %struct._object** %u_freevars105, align 8
  br label %do.body.106

do.body.106:                                      ; preds = %if.then.104
  %85 = load %struct._object*, %struct._object** %_py_tmp102, align 8
  store %struct._object* %85, %struct._object** %_py_decref_tmp107, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  %ob_refcnt108 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 0
  %87 = load i64, i64* %ob_refcnt108, align 8
  %dec109 = add i64 %87, -1
  store i64 %dec109, i64* %ob_refcnt108, align 8
  %cmp110 = icmp ne i64 %dec109, 0
  br i1 %cmp110, label %if.then.111, label %if.else.112

if.then.111:                                      ; preds = %do.body.106
  br label %if.end.115

if.else.112:                                      ; preds = %do.body.106
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  %ob_type113 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type113, align 8
  %tp_dealloc114 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %89, i32 0, i32 4
  %90 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc114, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  call void %90(%struct._object* %91)
  br label %if.end.115

if.end.115:                                       ; preds = %if.else.112, %if.then.111
  br label %do.end.116

do.end.116:                                       ; preds = %if.end.115
  br label %if.end.117

if.end.117:                                       ; preds = %do.end.116, %do.body.101
  br label %do.end.118

do.end.118:                                       ; preds = %if.end.117
  br label %do.body.119

do.body.119:                                      ; preds = %do.end.118
  %92 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_cellvars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %92, i32 0, i32 7
  %93 = load %struct._object*, %struct._object** %u_cellvars, align 8
  store %struct._object* %93, %struct._object** %_py_tmp120, align 8
  %94 = load %struct._object*, %struct._object** %_py_tmp120, align 8
  %cmp121 = icmp ne %struct._object* %94, null
  br i1 %cmp121, label %if.then.122, label %if.end.135

if.then.122:                                      ; preds = %do.body.119
  %95 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_cellvars123 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %95, i32 0, i32 7
  store %struct._object* null, %struct._object** %u_cellvars123, align 8
  br label %do.body.124

do.body.124:                                      ; preds = %if.then.122
  %96 = load %struct._object*, %struct._object** %_py_tmp120, align 8
  store %struct._object* %96, %struct._object** %_py_decref_tmp125, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_refcnt126 = getelementptr inbounds %struct._object, %struct._object* %97, i32 0, i32 0
  %98 = load i64, i64* %ob_refcnt126, align 8
  %dec127 = add i64 %98, -1
  store i64 %dec127, i64* %ob_refcnt126, align 8
  %cmp128 = icmp ne i64 %dec127, 0
  br i1 %cmp128, label %if.then.129, label %if.else.130

if.then.129:                                      ; preds = %do.body.124
  br label %if.end.133

if.else.130:                                      ; preds = %do.body.124
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_type131 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 1
  %100 = load %struct._typeobject*, %struct._typeobject** %ob_type131, align 8
  %tp_dealloc132 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 4
  %101 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc132, align 8
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  call void %101(%struct._object* %102)
  br label %if.end.133

if.end.133:                                       ; preds = %if.else.130, %if.then.129
  br label %do.end.134

do.end.134:                                       ; preds = %if.end.133
  br label %if.end.135

if.end.135:                                       ; preds = %do.end.134, %do.body.119
  br label %do.end.136

do.end.136:                                       ; preds = %if.end.135
  br label %do.body.137

do.body.137:                                      ; preds = %do.end.136
  %103 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %103, i32 0, i32 9
  %104 = load %struct._object*, %struct._object** %u_private, align 8
  store %struct._object* %104, %struct._object** %_py_tmp138, align 8
  %105 = load %struct._object*, %struct._object** %_py_tmp138, align 8
  %cmp139 = icmp ne %struct._object* %105, null
  br i1 %cmp139, label %if.then.140, label %if.end.153

if.then.140:                                      ; preds = %do.body.137
  %106 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_private141 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %106, i32 0, i32 9
  store %struct._object* null, %struct._object** %u_private141, align 8
  br label %do.body.142

do.body.142:                                      ; preds = %if.then.140
  %107 = load %struct._object*, %struct._object** %_py_tmp138, align 8
  store %struct._object* %107, %struct._object** %_py_decref_tmp143, align 8
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp143, align 8
  %ob_refcnt144 = getelementptr inbounds %struct._object, %struct._object* %108, i32 0, i32 0
  %109 = load i64, i64* %ob_refcnt144, align 8
  %dec145 = add i64 %109, -1
  store i64 %dec145, i64* %ob_refcnt144, align 8
  %cmp146 = icmp ne i64 %dec145, 0
  br i1 %cmp146, label %if.then.147, label %if.else.148

if.then.147:                                      ; preds = %do.body.142
  br label %if.end.151

if.else.148:                                      ; preds = %do.body.142
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp143, align 8
  %ob_type149 = getelementptr inbounds %struct._object, %struct._object* %110, i32 0, i32 1
  %111 = load %struct._typeobject*, %struct._typeobject** %ob_type149, align 8
  %tp_dealloc150 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %111, i32 0, i32 4
  %112 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc150, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp143, align 8
  call void %112(%struct._object* %113)
  br label %if.end.151

if.end.151:                                       ; preds = %if.else.148, %if.then.147
  br label %do.end.152

do.end.152:                                       ; preds = %if.end.151
  br label %if.end.153

if.end.153:                                       ; preds = %do.end.152, %do.body.137
  br label %do.end.154

do.end.154:                                       ; preds = %if.end.153
  %114 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %115 = bitcast %struct.compiler_unit* %114 to i8*
  call void @PyObject_Free(i8* %115)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @list2dict(%struct._object* %list) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %list.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %v = alloca %struct._object*, align 8
  %k = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp19 = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  %_py_decref_tmp43 = alloca %struct._object*, align 8
  %_py_decref_tmp55 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %list, %struct._object** %list.addr, align 8
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %dict, align 8
  %0 = load %struct._object*, %struct._object** %dict, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %list.addr, align 8
  %call1 = call i64 @PyList_Size(%struct._object* %1)
  store i64 %call1, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, i64* %i, align 8
  %3 = load i64, i64* %n, align 8
  %cmp = icmp slt i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %i, align 8
  %call2 = call %struct._object* @PyLong_FromSsize_t(i64 %4)
  store %struct._object* %call2, %struct._object** %v, align 8
  %5 = load %struct._object*, %struct._object** %v, align 8
  %tobool3 = icmp ne %struct._object* %5, null
  br i1 %tobool3, label %if.end.8, label %if.then.4

if.then.4:                                        ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %if.then.4
  %6 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %for.body
  %13 = load i64, i64* %i, align 8
  %14 = load %struct._object*, %struct._object** %list.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %15, i32 0, i32 1
  %16 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %16, i64 %13
  %17 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %17, %struct._object** %k, align 8
  %18 = load %struct._object*, %struct._object** %k, align 8
  %19 = load %struct._object*, %struct._object** %k, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %call10 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %18, %struct._typeobject* %20)
  store %struct._object* %call10, %struct._object** %k, align 8
  %21 = load %struct._object*, %struct._object** %k, align 8
  %cmp11 = icmp eq %struct._object* %21, null
  br i1 %cmp11, label %if.then.14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.8
  %22 = load %struct._object*, %struct._object** %dict, align 8
  %23 = load %struct._object*, %struct._object** %k, align 8
  %24 = load %struct._object*, %struct._object** %v, align 8
  %call12 = call i32 @PyDict_SetItem(%struct._object* %22, %struct._object* %23, %struct._object* %24)
  %cmp13 = icmp slt i32 %call12, 0
  br i1 %cmp13, label %if.then.14, label %if.end.53

if.then.14:                                       ; preds = %lor.lhs.false, %if.end.8
  br label %do.body.15

do.body.15:                                       ; preds = %if.then.14
  %25 = load %struct._object*, %struct._object** %k, align 8
  store %struct._object* %25, %struct._object** %_py_xdecref_tmp, align 8
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp16 = icmp ne %struct._object* %26, null
  br i1 %cmp16, label %if.then.17, label %if.end.29

if.then.17:                                       ; preds = %do.body.15
  br label %do.body.18

do.body.18:                                       ; preds = %if.then.17
  %27 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp19, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt20, align 8
  %dec21 = add i64 %29, -1
  store i64 %dec21, i64* %ob_refcnt20, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body.18
  br label %if.end.27

if.else.24:                                       ; preds = %do.body.18
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc26 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc26, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  call void %32(%struct._object* %33)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  br label %if.end.29

if.end.29:                                        ; preds = %do.end.28, %do.body.15
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  br label %do.body.31

do.body.31:                                       ; preds = %do.end.30
  %34 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp32, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt33, align 8
  %dec34 = add i64 %36, -1
  store i64 %dec34, i64* %ob_refcnt33, align 8
  %cmp35 = icmp ne i64 %dec34, 0
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40

if.else.37:                                       ; preds = %do.body.31
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  call void %39(%struct._object* %40)
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end.41

do.end.41:                                        ; preds = %if.end.40
  br label %do.body.42

do.body.42:                                       ; preds = %do.end.41
  %41 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp43, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8
  %ob_refcnt44 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt44, align 8
  %dec45 = add i64 %43, -1
  store i64 %dec45, i64* %ob_refcnt44, align 8
  %cmp46 = icmp ne i64 %dec45, 0
  br i1 %cmp46, label %if.then.47, label %if.else.48

if.then.47:                                       ; preds = %do.body.42
  br label %if.end.51

if.else.48:                                       ; preds = %do.body.42
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8
  %tp_dealloc50 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc50, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8
  call void %46(%struct._object* %47)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.48, %if.then.47
  br label %do.end.52

do.end.52:                                        ; preds = %if.end.51
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %lor.lhs.false
  br label %do.body.54

do.body.54:                                       ; preds = %if.end.53
  %48 = load %struct._object*, %struct._object** %k, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp55, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt56, align 8
  %dec57 = add i64 %50, -1
  store i64 %dec57, i64* %ob_refcnt56, align 8
  %cmp58 = icmp ne i64 %dec57, 0
  br i1 %cmp58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.54
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.54
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  call void %53(%struct._object* %54)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  br label %do.body.65

do.body.65:                                       ; preds = %do.end.64
  %55 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %55, %struct._object** %_py_decref_tmp66, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %57, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %60(%struct._object* %61)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  br label %for.inc

for.inc:                                          ; preds = %do.end.75
  %62 = load i64, i64* %i, align 8
  %inc = add i64 %62, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %63 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %63, %struct._object** %retval
  br label %return

return:                                           ; preds = %for.end, %do.end.52, %do.end, %if.then
  %64 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %64
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dictbytype(%struct._object* %src, i32 %scope_type, i32 %flag, i64 %offset) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %src.addr = alloca %struct._object*, align 8
  %scope_type.addr = alloca i32, align 4
  %flag.addr = alloca i32, align 4
  %offset.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %scope = alloca i64, align 8
  %num_keys = alloca i64, align 8
  %key_i = alloca i64, align 8
  %k = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %dest = alloca %struct._object*, align 8
  %sorted_keys = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %vi = alloca i64, align 8
  %tuple = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp70 = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp98 = alloca %struct._object*, align 8
  %_py_decref_tmp113 = alloca %struct._object*, align 8
  %_py_decref_tmp125 = alloca %struct._object*, align 8
  %_py_decref_tmp139 = alloca %struct._object*, align 8
  store %struct._object* %src, %struct._object** %src.addr, align 8
  store i32 %scope_type, i32* %scope_type.addr, align 4
  store i32 %flag, i32* %flag.addr, align 4
  store i64 %offset, i64* %offset.addr, align 8
  %0 = load i64, i64* %offset.addr, align 8
  store i64 %0, i64* %i, align 8
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %dest, align 8
  %1 = load %struct._object*, %struct._object** %dest, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %src.addr, align 8
  %call1 = call %struct._object* @PyDict_Keys(%struct._object* %2)
  store %struct._object* %call1, %struct._object** %sorted_keys, align 8
  %3 = load %struct._object*, %struct._object** %sorted_keys, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %sorted_keys, align 8
  %call5 = call i32 @PyList_Sort(%struct._object* %4)
  %cmp6 = icmp ne i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.11

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %sorted_keys, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %if.end.4
  %12 = load %struct._object*, %struct._object** %sorted_keys, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1
  %14 = load i64, i64* %ob_size, align 8
  store i64 %14, i64* %num_keys, align 8
  store i64 0, i64* %key_i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.11
  %15 = load i64, i64* %key_i, align 8
  %16 = load i64, i64* %num_keys, align 8
  %cmp12 = icmp slt i64 %15, %16
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i64, i64* %key_i, align 8
  %18 = load %struct._object*, %struct._object** %sorted_keys, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %19, i32 0, i32 1
  %20 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %20, i64 %17
  %21 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %21, %struct._object** %k, align 8
  %22 = load %struct._object*, %struct._object** %src.addr, align 8
  %23 = load %struct._object*, %struct._object** %k, align 8
  %call13 = call %struct._object* @PyDict_GetItem(%struct._object* %22, %struct._object* %23)
  store %struct._object* %call13, %struct._object** %v, align 8
  %24 = load %struct._object*, %struct._object** %v, align 8
  %call14 = call i64 @PyLong_AsLong(%struct._object* %24)
  store i64 %call14, i64* %vi, align 8
  %25 = load i64, i64* %vi, align 8
  %shr = ashr i64 %25, 11
  %and = and i64 %shr, 15
  store i64 %and, i64* %scope, align 8
  %26 = load i64, i64* %scope, align 8
  %27 = load i32, i32* %scope_type.addr, align 4
  %conv = sext i32 %27 to i64
  %cmp15 = icmp eq i64 %26, %conv
  br i1 %cmp15, label %if.then.19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %28 = load i64, i64* %vi, align 8
  %29 = load i32, i32* %flag.addr, align 4
  %conv17 = sext i32 %29 to i64
  %and18 = and i64 %28, %conv17
  %tobool = icmp ne i64 %and18, 0
  br i1 %tobool, label %if.then.19, label %if.end.136

if.then.19:                                       ; preds = %lor.lhs.false, %for.body
  %30 = load i64, i64* %i, align 8
  %call20 = call %struct._object* @PyLong_FromSsize_t(i64 %30)
  store %struct._object* %call20, %struct._object** %item, align 8
  %31 = load %struct._object*, %struct._object** %item, align 8
  %cmp21 = icmp eq %struct._object* %31, null
  br i1 %cmp21, label %if.then.23, label %if.end.48

if.then.23:                                       ; preds = %if.then.19
  br label %do.body.24

do.body.24:                                       ; preds = %if.then.23
  %32 = load %struct._object*, %struct._object** %sorted_keys, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp25, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %34, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.24
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.24
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %37(%struct._object* %38)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  br label %do.body.36

do.body.36:                                       ; preds = %do.end.35
  %39 = load %struct._object*, %struct._object** %dest, align 8
  store %struct._object* %39, %struct._object** %_py_decref_tmp37, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0
  %41 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %41, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.36
  br label %if.end.46

if.else.43:                                       ; preds = %do.body.36
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8
  %tp_dealloc45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc45, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %44(%struct._object* %45)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.then.42
  br label %do.end.47

do.end.47:                                        ; preds = %if.end.46
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.48:                                        ; preds = %if.then.19
  %46 = load i64, i64* %i, align 8
  %inc = add i64 %46, 1
  store i64 %inc, i64* %i, align 8
  %47 = load %struct._object*, %struct._object** %k, align 8
  %48 = load %struct._object*, %struct._object** %k, align 8
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8
  %call50 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %47, %struct._typeobject* %49)
  store %struct._object* %call50, %struct._object** %tuple, align 8
  %50 = load %struct._object*, %struct._object** %tuple, align 8
  %tobool51 = icmp ne %struct._object* %50, null
  br i1 %tobool51, label %lor.lhs.false.52, label %if.then.56

lor.lhs.false.52:                                 ; preds = %if.end.48
  %51 = load %struct._object*, %struct._object** %dest, align 8
  %52 = load %struct._object*, %struct._object** %tuple, align 8
  %53 = load %struct._object*, %struct._object** %item, align 8
  %call53 = call i32 @PyDict_SetItem(%struct._object* %51, %struct._object* %52, %struct._object* %53)
  %cmp54 = icmp slt i32 %call53, 0
  br i1 %cmp54, label %if.then.56, label %if.end.111

if.then.56:                                       ; preds = %lor.lhs.false.52, %if.end.48
  br label %do.body.57

do.body.57:                                       ; preds = %if.then.56
  %54 = load %struct._object*, %struct._object** %sorted_keys, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp58, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt59, align 8
  %dec60 = add i64 %56, -1
  store i64 %dec60, i64* %ob_refcnt59, align 8
  %cmp61 = icmp ne i64 %dec60, 0
  br i1 %cmp61, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %do.body.57
  br label %if.end.67

if.else.64:                                       ; preds = %do.body.57
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  call void %59(%struct._object* %60)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  br label %do.body.69

do.body.69:                                       ; preds = %do.end.68
  %61 = load %struct._object*, %struct._object** %item, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp70, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_refcnt71 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt71, align 8
  %dec72 = add i64 %63, -1
  store i64 %dec72, i64* %ob_refcnt71, align 8
  %cmp73 = icmp ne i64 %dec72, 0
  br i1 %cmp73, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.69
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.69
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  call void %66(%struct._object* %67)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  br label %do.body.81

do.body.81:                                       ; preds = %do.end.80
  %68 = load %struct._object*, %struct._object** %dest, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp82, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %70, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.87, label %if.else.88

if.then.87:                                       ; preds = %do.body.81
  br label %if.end.91

if.else.88:                                       ; preds = %do.body.81
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type89 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type89, align 8
  %tp_dealloc90 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc90, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %73(%struct._object* %74)
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.88, %if.then.87
  br label %do.end.92

do.end.92:                                        ; preds = %if.end.91
  br label %do.body.93

do.body.93:                                       ; preds = %do.end.92
  %75 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %75, %struct._object** %_py_xdecref_tmp, align 8
  %76 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp94 = icmp ne %struct._object* %76, null
  br i1 %cmp94, label %if.then.96, label %if.end.109

if.then.96:                                       ; preds = %do.body.93
  br label %do.body.97

do.body.97:                                       ; preds = %if.then.96
  %77 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp98, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  %ob_refcnt99 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt99, align 8
  %dec100 = add i64 %79, -1
  store i64 %dec100, i64* %ob_refcnt99, align 8
  %cmp101 = icmp ne i64 %dec100, 0
  br i1 %cmp101, label %if.then.103, label %if.else.104

if.then.103:                                      ; preds = %do.body.97
  br label %if.end.107

if.else.104:                                      ; preds = %do.body.97
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  %ob_type105 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type105, align 8
  %tp_dealloc106 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc106, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  call void %82(%struct._object* %83)
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.104, %if.then.103
  br label %do.end.108

do.end.108:                                       ; preds = %if.end.107
  br label %if.end.109

if.end.109:                                       ; preds = %do.end.108, %do.body.93
  br label %do.end.110

do.end.110:                                       ; preds = %if.end.109
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.111:                                       ; preds = %lor.lhs.false.52
  br label %do.body.112

do.body.112:                                      ; preds = %if.end.111
  %84 = load %struct._object*, %struct._object** %item, align 8
  store %struct._object* %84, %struct._object** %_py_decref_tmp113, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp113, align 8
  %ob_refcnt114 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 0
  %86 = load i64, i64* %ob_refcnt114, align 8
  %dec115 = add i64 %86, -1
  store i64 %dec115, i64* %ob_refcnt114, align 8
  %cmp116 = icmp ne i64 %dec115, 0
  br i1 %cmp116, label %if.then.118, label %if.else.119

if.then.118:                                      ; preds = %do.body.112
  br label %if.end.122

if.else.119:                                      ; preds = %do.body.112
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp113, align 8
  %ob_type120 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type120, align 8
  %tp_dealloc121 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 4
  %89 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc121, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp113, align 8
  call void %89(%struct._object* %90)
  br label %if.end.122

if.end.122:                                       ; preds = %if.else.119, %if.then.118
  br label %do.end.123

do.end.123:                                       ; preds = %if.end.122
  br label %do.body.124

do.body.124:                                      ; preds = %do.end.123
  %91 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %91, %struct._object** %_py_decref_tmp125, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_refcnt126 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0
  %93 = load i64, i64* %ob_refcnt126, align 8
  %dec127 = add i64 %93, -1
  store i64 %dec127, i64* %ob_refcnt126, align 8
  %cmp128 = icmp ne i64 %dec127, 0
  br i1 %cmp128, label %if.then.130, label %if.else.131

if.then.130:                                      ; preds = %do.body.124
  br label %if.end.134

if.else.131:                                      ; preds = %do.body.124
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_type132 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type132, align 8
  %tp_dealloc133 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc133, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  call void %96(%struct._object* %97)
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.131, %if.then.130
  br label %do.end.135

do.end.135:                                       ; preds = %if.end.134
  br label %if.end.136

if.end.136:                                       ; preds = %do.end.135, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.136
  %98 = load i64, i64* %key_i, align 8
  %inc137 = add i64 %98, 1
  store i64 %inc137, i64* %key_i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body.138

do.body.138:                                      ; preds = %for.end
  %99 = load %struct._object*, %struct._object** %sorted_keys, align 8
  store %struct._object* %99, %struct._object** %_py_decref_tmp139, align 8
  %100 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_refcnt140 = getelementptr inbounds %struct._object, %struct._object* %100, i32 0, i32 0
  %101 = load i64, i64* %ob_refcnt140, align 8
  %dec141 = add i64 %101, -1
  store i64 %dec141, i64* %ob_refcnt140, align 8
  %cmp142 = icmp ne i64 %dec141, 0
  br i1 %cmp142, label %if.then.144, label %if.else.145

if.then.144:                                      ; preds = %do.body.138
  br label %if.end.148

if.else.145:                                      ; preds = %do.body.138
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_type146 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 1
  %103 = load %struct._typeobject*, %struct._typeobject** %ob_type146, align 8
  %tp_dealloc147 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %103, i32 0, i32 4
  %104 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc147, align 8
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  call void %104(%struct._object* %105)
  br label %if.end.148

if.end.148:                                       ; preds = %if.else.145, %if.then.144
  br label %do.end.149

do.end.149:                                       ; preds = %if.end.148
  %106 = load %struct._object*, %struct._object** %dest, align 8
  store %struct._object* %106, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.149, %do.end.110, %do.end.47, %do.end, %if.then.3, %if.then
  %107 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %107
}

declare %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier*) #1

declare %struct._object* @PyTuple_Pack(i64, ...) #1

declare %struct._object* @PyLong_FromLong(i64) #1

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #1

declare i64 @PyDict_Size(%struct._object*) #1

declare %struct._object* @PyDict_New() #1

declare %struct._object* @PyCapsule_New(i8*, i8*, void (%struct._object*)*) #1

declare i32 @PyList_Append(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct.basicblock_* @compiler_use_new_block(%struct.compiler* %c) #0 {
entry:
  %retval = alloca %struct.basicblock_*, align 8
  %c.addr = alloca %struct.compiler*, align 8
  %block = alloca %struct.basicblock_*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %block, align 8
  %1 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %cmp = icmp eq %struct.basicblock_* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.basicblock_* null, %struct.basicblock_** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %3, i32 0, i32 7
  %4 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %4, i32 0, i32 13
  store %struct.basicblock_* %2, %struct.basicblock_** %u_curblock, align 8
  %5 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  store %struct.basicblock_* %5, %struct.basicblock_** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.basicblock_*, %struct.basicblock_** %retval
  ret %struct.basicblock_* %6
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_set_qualname(%struct.compiler* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %stack_size = alloca i64, align 8
  %u = alloca %struct.compiler_unit*, align 8
  %name = alloca %struct._object*, align 8
  %base = alloca %struct._object*, align 8
  %dot_str = alloca %struct._object*, align 8
  %dot_locals_str = alloca %struct._object*, align 8
  %scope = alloca i32, align 4
  %force_global = alloca i32, align 4
  %parent = alloca %struct.compiler_unit*, align 8
  %mangled = alloca %struct._object*, align 8
  %capsule = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  %_py_decref_tmp59 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  store %struct.compiler_unit* %1, %struct.compiler_unit** %u, align 8
  store %struct._object* null, %struct._object** %base, align 8
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack = getelementptr inbounds %struct.compiler, %struct.compiler* %2, i32 0, i32 8
  %3 = load %struct._object*, %struct._object** %c_stack, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  store i64 %5, i64* %stack_size, align 8
  %6 = load i64, i64* %stack_size, align 8
  %cmp = icmp sgt i64 %6, 1
  br i1 %cmp, label %if.then, label %if.end.39

if.then:                                          ; preds = %entry
  store i32 0, i32* %force_global, align 4
  %7 = load i64, i64* %stack_size, align 8
  %sub = sub i64 %7, 1
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_stack2 = getelementptr inbounds %struct.compiler, %struct.compiler* %8, i32 0, i32 8
  %9 = load %struct._object*, %struct._object** %c_stack2, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %10, i32 0, i32 1
  %11 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %11, i64 %sub
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %12, %struct._object** %capsule, align 8
  %13 = load %struct._object*, %struct._object** %capsule, align 8
  %call = call i8* @PyCapsule_GetPointer(%struct._object* %13, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i32 0, i32 0))
  %14 = bitcast i8* %call to %struct.compiler_unit*
  store %struct.compiler_unit* %14, %struct.compiler_unit** %parent, align 8
  %15 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_scope_type = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %15, i32 0, i32 3
  %16 = load i32, i32* %u_scope_type, align 4
  %cmp3 = icmp eq i32 %16, 2
  br i1 %cmp3, label %if.then.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %17 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_scope_type4 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %17, i32 0, i32 3
  %18 = load i32, i32* %u_scope_type4, align 4
  %cmp5 = icmp eq i32 %18, 1
  br i1 %cmp5, label %if.then.6, label %if.end.16

if.then.6:                                        ; preds = %lor.lhs.false, %if.then
  %19 = load %struct.compiler_unit*, %struct.compiler_unit** %parent, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %19, i32 0, i32 9
  %20 = load %struct._object*, %struct._object** %u_private, align 8
  %21 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_name = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %21, i32 0, i32 1
  %22 = load %struct._object*, %struct._object** %u_name, align 8
  %call7 = call %struct._object* @_Py_Mangle(%struct._object* %20, %struct._object* %22)
  store %struct._object* %call7, %struct._object** %mangled, align 8
  %23 = load %struct._object*, %struct._object** %mangled, align 8
  %tobool = icmp ne %struct._object* %23, null
  br i1 %tobool, label %if.end, label %if.then.8

if.then.8:                                        ; preds = %if.then.6
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.6
  %24 = load %struct.compiler_unit*, %struct.compiler_unit** %parent, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %24, i32 0, i32 0
  %25 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %26 = load %struct._object*, %struct._object** %mangled, align 8
  %call9 = call i32 @PyST_GetScope(%struct._symtable_entry* %25, %struct._object* %26)
  store i32 %call9, i32* %scope, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %27 = load %struct._object*, %struct._object** %mangled, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %29, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %32(%struct._object* %33)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  %34 = load i32, i32* %scope, align 4
  %cmp13 = icmp eq i32 %34, 2
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %do.end
  store i32 1, i32* %force_global, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %do.end
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %lor.lhs.false
  %35 = load i32, i32* %force_global, align 4
  %tobool17 = icmp ne i32 %35, 0
  br i1 %tobool17, label %if.end.38, label %if.then.18

if.then.18:                                       ; preds = %if.end.16
  %36 = load %struct.compiler_unit*, %struct.compiler_unit** %parent, align 8
  %u_scope_type19 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %36, i32 0, i32 3
  %37 = load i32, i32* %u_scope_type19, align 4
  %cmp20 = icmp eq i32 %37, 2
  br i1 %cmp20, label %if.then.24, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.then.18
  %38 = load %struct.compiler_unit*, %struct.compiler_unit** %parent, align 8
  %u_scope_type22 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %38, i32 0, i32 3
  %39 = load i32, i32* %u_scope_type22, align 4
  %cmp23 = icmp eq i32 %39, 3
  br i1 %cmp23, label %if.then.24, label %if.else.33

if.then.24:                                       ; preds = %lor.lhs.false.21, %if.then.18
  %call25 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @compiler_set_qualname.dot_locals)
  store %struct._object* %call25, %struct._object** %dot_locals_str, align 8
  %40 = load %struct._object*, %struct._object** %dot_locals_str, align 8
  %cmp26 = icmp eq %struct._object* %40, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.then.24
  store i32 0, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.then.24
  %41 = load %struct.compiler_unit*, %struct.compiler_unit** %parent, align 8
  %u_qualname = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %41, i32 0, i32 2
  %42 = load %struct._object*, %struct._object** %u_qualname, align 8
  %43 = load %struct._object*, %struct._object** %dot_locals_str, align 8
  %call29 = call %struct._object* @PyUnicode_Concat(%struct._object* %42, %struct._object* %43)
  store %struct._object* %call29, %struct._object** %base, align 8
  %44 = load %struct._object*, %struct._object** %base, align 8
  %cmp30 = icmp eq %struct._object* %44, null
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.28
  store i32 0, i32* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.28
  br label %if.end.37

if.else.33:                                       ; preds = %lor.lhs.false.21
  %45 = load %struct.compiler_unit*, %struct.compiler_unit** %parent, align 8
  %u_qualname34 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %45, i32 0, i32 2
  %46 = load %struct._object*, %struct._object** %u_qualname34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt35, align 8
  %inc = add i64 %47, 1
  store i64 %inc, i64* %ob_refcnt35, align 8
  %48 = load %struct.compiler_unit*, %struct.compiler_unit** %parent, align 8
  %u_qualname36 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %48, i32 0, i32 2
  %49 = load %struct._object*, %struct._object** %u_qualname36, align 8
  store %struct._object* %49, %struct._object** %base, align 8
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.33, %if.end.32
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.end.16
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %entry
  %50 = load %struct._object*, %struct._object** %base, align 8
  %cmp40 = icmp ne %struct._object* %50, null
  br i1 %cmp40, label %if.then.41, label %if.else.76

if.then.41:                                       ; preds = %if.end.39
  %call42 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @compiler_set_qualname.dot)
  store %struct._object* %call42, %struct._object** %dot_str, align 8
  %51 = load %struct._object*, %struct._object** %dot_str, align 8
  %cmp43 = icmp eq %struct._object* %51, null
  br i1 %cmp43, label %if.then.44, label %if.end.56

if.then.44:                                       ; preds = %if.then.41
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %52 = load %struct._object*, %struct._object** %base, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp46, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt47, align 8
  %dec48 = add i64 %54, -1
  store i64 %dec48, i64* %ob_refcnt47, align 8
  %cmp49 = icmp ne i64 %dec48, 0
  br i1 %cmp49, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.45
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  call void %57(%struct._object* %58)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  store i32 0, i32* %retval
  br label %return

if.end.56:                                        ; preds = %if.then.41
  %59 = load %struct._object*, %struct._object** %base, align 8
  %60 = load %struct._object*, %struct._object** %dot_str, align 8
  %call57 = call %struct._object* @PyUnicode_Concat(%struct._object* %59, %struct._object* %60)
  store %struct._object* %call57, %struct._object** %name, align 8
  br label %do.body.58

do.body.58:                                       ; preds = %if.end.56
  %61 = load %struct._object*, %struct._object** %base, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp59, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt60, align 8
  %dec61 = add i64 %63, -1
  store i64 %dec61, i64* %ob_refcnt60, align 8
  %cmp62 = icmp ne i64 %dec61, 0
  br i1 %cmp62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %do.body.58
  br label %if.end.67

if.else.64:                                       ; preds = %do.body.58
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  call void %66(%struct._object* %67)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  %68 = load %struct._object*, %struct._object** %name, align 8
  %cmp69 = icmp eq %struct._object* %68, null
  br i1 %cmp69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %do.end.68
  store i32 0, i32* %retval
  br label %return

if.end.71:                                        ; preds = %do.end.68
  %69 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_name72 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %69, i32 0, i32 1
  %70 = load %struct._object*, %struct._object** %u_name72, align 8
  call void @PyUnicode_Append(%struct._object** %name, %struct._object* %70)
  %71 = load %struct._object*, %struct._object** %name, align 8
  %cmp73 = icmp eq %struct._object* %71, null
  br i1 %cmp73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end.71
  store i32 0, i32* %retval
  br label %return

if.end.75:                                        ; preds = %if.end.71
  br label %if.end.81

if.else.76:                                       ; preds = %if.end.39
  %72 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_name77 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %72, i32 0, i32 1
  %73 = load %struct._object*, %struct._object** %u_name77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt78, align 8
  %inc79 = add i64 %74, 1
  store i64 %inc79, i64* %ob_refcnt78, align 8
  %75 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_name80 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %75, i32 0, i32 1
  %76 = load %struct._object*, %struct._object** %u_name80, align 8
  store %struct._object* %76, %struct._object** %name, align 8
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.76, %if.end.75
  %77 = load %struct._object*, %struct._object** %name, align 8
  %78 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_qualname82 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %78, i32 0, i32 2
  store %struct._object* %77, %struct._object** %u_qualname82, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.81, %if.then.74, %if.then.70, %do.end.55, %if.then.31, %if.then.27, %if.then.8
  %79 = load i32, i32* %retval
  ret i32 %79
}

; Function Attrs: nounwind uwtable
define internal void @compiler_unit_check(%struct.compiler_unit* %u) #0 {
entry:
  %u.addr = alloca %struct.compiler_unit*, align 8
  %block = alloca %struct.basicblock_*, align 8
  store %struct.compiler_unit* %u, %struct.compiler_unit** %u.addr, align 8
  %0 = load %struct.compiler_unit*, %struct.compiler_unit** %u.addr, align 8
  %u_blocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %0, i32 0, i32 12
  %1 = load %struct.basicblock_*, %struct.basicblock_** %u_blocks, align 8
  store %struct.basicblock_* %1, %struct.basicblock_** %block, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %cmp = icmp ne %struct.basicblock_* %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %3, i32 0, i32 3
  %4 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %cmp1 = icmp ne %struct.instr* %4, null
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  br label %if.end

if.else:                                          ; preds = %for.body
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %b_list = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %5, i32 0, i32 0
  %6 = load %struct.basicblock_*, %struct.basicblock_** %b_list, align 8
  store %struct.basicblock_* %6, %struct.basicblock_** %block, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i64 @PyList_Size(%struct._object*) #1

declare %struct._object* @PyLong_FromSsize_t(i64) #1

declare %struct._object* @PyDict_Keys(%struct._object*) #1

declare i32 @PyList_Sort(%struct._object*) #1

declare %struct._object* @PyDict_GetItem(%struct._object*, %struct._object*) #1

declare i64 @PyLong_AsLong(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct.basicblock_* @compiler_new_block(%struct.compiler* %c) #0 {
entry:
  %retval = alloca %struct.basicblock_*, align 8
  %c.addr = alloca %struct.compiler*, align 8
  %b = alloca %struct.basicblock_*, align 8
  %u = alloca %struct.compiler_unit*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  store %struct.compiler_unit* %1, %struct.compiler_unit** %u, align 8
  %call = call i8* @PyObject_Malloc(i64 48)
  %2 = bitcast i8* %call to %struct.basicblock_*
  store %struct.basicblock_* %2, %struct.basicblock_** %b, align 8
  %3 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %cmp = icmp eq %struct.basicblock_* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @PyErr_NoMemory()
  store %struct.basicblock_* null, %struct.basicblock_** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %5 = bitcast %struct.basicblock_* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 48, i32 1, i1 false)
  %6 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_blocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %6, i32 0, i32 12
  %7 = load %struct.basicblock_*, %struct.basicblock_** %u_blocks, align 8
  %8 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_list = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %8, i32 0, i32 0
  store %struct.basicblock_* %7, %struct.basicblock_** %b_list, align 8
  %9 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %10 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_blocks3 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %10, i32 0, i32 12
  store %struct.basicblock_* %9, %struct.basicblock_** %u_blocks3, align 8
  %11 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  store %struct.basicblock_* %11, %struct.basicblock_** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct.basicblock_*, %struct.basicblock_** %retval
  ret %struct.basicblock_* %12
}

declare i8* @PyCapsule_GetPointer(%struct._object*, i8*) #1

declare i32 @PyST_GetScope(%struct._symtable_entry*, %struct._object*) #1

declare %struct._object* @PyUnicode_Concat(%struct._object*, %struct._object*) #1

declare void @PyUnicode_Append(%struct._object**, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compiler_isdocstring(%struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct._stmt*, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %kind = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 0
  %1 = load i32, i32* %kind, align 4
  %cmp = icmp ne i32 %1, 18
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %2, i32 0, i32 1
  %Expr = bitcast %union.anon.35* %v to %struct.anon.53*
  %value = getelementptr inbounds %struct.anon.53, %struct.anon.53* %Expr, i32 0, i32 0
  %3 = load %struct._expr*, %struct._expr** %value, align 8
  %kind1 = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 0
  %4 = load i32, i32* %kind1, align 4
  %cmp2 = icmp eq i32 %4, 17
  %conv = zext i1 %cmp2 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_nameop(%struct.compiler* %c, %struct._object* %name, i32 %ctx) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %name.addr = alloca %struct._object*, align 8
  %ctx.addr = alloca i32, align 4
  %op = alloca i32, align 4
  %scope = alloca i32, align 4
  %arg = alloca i64, align 8
  %optype = alloca i32, align 4
  %dict = alloca %struct._object*, align 8
  %mangled = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp70 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store i32 %ctx, i32* %ctx.addr, align 4
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 5
  %2 = load %struct._object*, %struct._object** %u_names, align 8
  store %struct._object* %2, %struct._object** %dict, align 8
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %3, i32 0, i32 7
  %4 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %4, i32 0, i32 9
  %5 = load %struct._object*, %struct._object** %u_private, align 8
  %6 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call %struct._object* @_Py_Mangle(%struct._object* %5, %struct._object* %6)
  store %struct._object* %call, %struct._object** %mangled, align 8
  %7 = load %struct._object*, %struct._object** %mangled, align 8
  %tobool = icmp ne %struct._object* %7, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %op, align 4
  store i32 3, i32* %optype, align 4
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u2 = getelementptr inbounds %struct.compiler, %struct.compiler* %8, i32 0, i32 7
  %9 = load %struct.compiler_unit*, %struct.compiler_unit** %u2, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %9, i32 0, i32 0
  %10 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %11 = load %struct._object*, %struct._object** %mangled, align 8
  %call3 = call i32 @PyST_GetScope(%struct._symtable_entry* %10, %struct._object* %11)
  store i32 %call3, i32* %scope, align 4
  %12 = load i32, i32* %scope, align 4
  switch i32 %12, label %sw.default [
    i32 4, label %sw.bb
    i32 5, label %sw.bb.5
    i32 1, label %sw.bb.7
    i32 3, label %sw.bb.12
    i32 2, label %sw.bb.22
  ]

sw.bb:                                            ; preds = %if.end
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u4 = getelementptr inbounds %struct.compiler, %struct.compiler* %13, i32 0, i32 7
  %14 = load %struct.compiler_unit*, %struct.compiler_unit** %u4, align 8
  %u_freevars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %14, i32 0, i32 8
  %15 = load %struct._object*, %struct._object** %u_freevars, align 8
  store %struct._object* %15, %struct._object** %dict, align 8
  store i32 2, i32* %optype, align 4
  br label %sw.epilog

sw.bb.5:                                          ; preds = %if.end
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u6 = getelementptr inbounds %struct.compiler, %struct.compiler* %16, i32 0, i32 7
  %17 = load %struct.compiler_unit*, %struct.compiler_unit** %u6, align 8
  %u_cellvars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %17, i32 0, i32 7
  %18 = load %struct._object*, %struct._object** %u_cellvars, align 8
  store %struct._object* %18, %struct._object** %dict, align 8
  store i32 2, i32* %optype, align 4
  br label %sw.epilog

sw.bb.7:                                          ; preds = %if.end
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u8 = getelementptr inbounds %struct.compiler, %struct.compiler* %19, i32 0, i32 7
  %20 = load %struct.compiler_unit*, %struct.compiler_unit** %u8, align 8
  %u_ste9 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %20, i32 0, i32 0
  %21 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste9, align 8
  %ste_type = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %21, i32 0, i32 7
  %22 = load i32, i32* %ste_type, align 4
  %cmp = icmp eq i32 %22, 0
  br i1 %cmp, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %sw.bb.7
  store i32 0, i32* %optype, align 4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.10, %sw.bb.7
  br label %sw.epilog

sw.bb.12:                                         ; preds = %if.end
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u13 = getelementptr inbounds %struct.compiler, %struct.compiler* %23, i32 0, i32 7
  %24 = load %struct.compiler_unit*, %struct.compiler_unit** %u13, align 8
  %u_ste14 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %24, i32 0, i32 0
  %25 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste14, align 8
  %ste_type15 = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %25, i32 0, i32 7
  %26 = load i32, i32* %ste_type15, align 4
  %cmp16 = icmp eq i32 %26, 0
  br i1 %cmp16, label %land.lhs.true, label %if.end.21

land.lhs.true:                                    ; preds = %sw.bb.12
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u17 = getelementptr inbounds %struct.compiler, %struct.compiler* %27, i32 0, i32 7
  %28 = load %struct.compiler_unit*, %struct.compiler_unit** %u17, align 8
  %u_ste18 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %28, i32 0, i32 0
  %29 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste18, align 8
  %ste_unoptimized = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %29, i32 0, i32 8
  %30 = load i32, i32* %ste_unoptimized, align 4
  %tobool19 = icmp ne i32 %30, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %land.lhs.true
  store i32 1, i32* %optype, align 4
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.20, %land.lhs.true, %sw.bb.12
  br label %sw.epilog

sw.bb.22:                                         ; preds = %if.end
  store i32 1, i32* %optype, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.22, %if.end.21, %if.end.11, %sw.bb.5, %sw.bb
  %31 = load i32, i32* %optype, align 4
  switch i32 %31, label %sw.epilog.67 [
    i32 2, label %sw.bb.23
    i32 0, label %sw.bb.35
    i32 1, label %sw.bb.51
    i32 3, label %sw.bb.59
  ]

sw.bb.23:                                         ; preds = %sw.epilog
  %32 = load i32, i32* %ctx.addr, align 4
  switch i32 %32, label %sw.default.33 [
    i32 1, label %sw.bb.24
    i32 2, label %sw.bb.29
    i32 4, label %sw.bb.30
    i32 5, label %sw.bb.30
    i32 3, label %sw.bb.31
    i32 6, label %sw.bb.32
  ]

sw.bb.24:                                         ; preds = %sw.bb.23
  %33 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u25 = getelementptr inbounds %struct.compiler, %struct.compiler* %33, i32 0, i32 7
  %34 = load %struct.compiler_unit*, %struct.compiler_unit** %u25, align 8
  %u_ste26 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %34, i32 0, i32 0
  %35 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste26, align 8
  %ste_type27 = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %35, i32 0, i32 7
  %36 = load i32, i32* %ste_type27, align 4
  %cmp28 = icmp eq i32 %36, 1
  %cond = select i1 %cmp28, i32 148, i32 136
  store i32 %cond, i32* %op, align 4
  br label %sw.epilog.34

sw.bb.29:                                         ; preds = %sw.bb.23
  store i32 137, i32* %op, align 4
  br label %sw.epilog.34

sw.bb.30:                                         ; preds = %sw.bb.23, %sw.bb.23
  br label %sw.epilog.34

sw.bb.31:                                         ; preds = %sw.bb.23
  store i32 138, i32* %op, align 4
  br label %sw.epilog.34

sw.bb.32:                                         ; preds = %sw.bb.23
  br label %sw.default.33

sw.default.33:                                    ; preds = %sw.bb.23, %sw.bb.32
  %37 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

sw.epilog.34:                                     ; preds = %sw.bb.31, %sw.bb.30, %sw.bb.29, %sw.bb.24
  br label %sw.epilog.67

sw.bb.35:                                         ; preds = %sw.epilog
  %38 = load i32, i32* %ctx.addr, align 4
  switch i32 %38, label %sw.default.41 [
    i32 1, label %sw.bb.36
    i32 2, label %sw.bb.37
    i32 3, label %sw.bb.38
    i32 4, label %sw.bb.39
    i32 5, label %sw.bb.39
    i32 6, label %sw.bb.40
  ]

sw.bb.36:                                         ; preds = %sw.bb.35
  store i32 124, i32* %op, align 4
  br label %sw.epilog.42

sw.bb.37:                                         ; preds = %sw.bb.35
  store i32 125, i32* %op, align 4
  br label %sw.epilog.42

sw.bb.38:                                         ; preds = %sw.bb.35
  store i32 126, i32* %op, align 4
  br label %sw.epilog.42

sw.bb.39:                                         ; preds = %sw.bb.35, %sw.bb.35
  br label %sw.epilog.42

sw.bb.40:                                         ; preds = %sw.bb.35
  br label %sw.default.41

sw.default.41:                                    ; preds = %sw.bb.35, %sw.bb.40
  %39 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %39, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

sw.epilog.42:                                     ; preds = %sw.bb.39, %sw.bb.38, %sw.bb.37, %sw.bb.36
  %40 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %41 = load i32, i32* %op, align 4
  %42 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u43 = getelementptr inbounds %struct.compiler, %struct.compiler* %42, i32 0, i32 7
  %43 = load %struct.compiler_unit*, %struct.compiler_unit** %u43, align 8
  %u_varnames = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %43, i32 0, i32 6
  %44 = load %struct._object*, %struct._object** %u_varnames, align 8
  %45 = load %struct._object*, %struct._object** %mangled, align 8
  %call44 = call i32 @compiler_addop_o(%struct.compiler* %40, i32 %41, %struct._object* %44, %struct._object* %45)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %sw.epilog.42
  store i32 0, i32* %retval
  br label %return

if.end.47:                                        ; preds = %sw.epilog.42
  br label %do.body

do.body:                                          ; preds = %if.end.47
  %46 = load %struct._object*, %struct._object** %mangled, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %48, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp48 = icmp ne i64 %dec, 0
  br i1 %cmp48, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %do.body
  br label %if.end.50

if.else:                                          ; preds = %do.body
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %51(%struct._object* %52)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else, %if.then.49
  br label %do.end

do.end:                                           ; preds = %if.end.50
  store i32 1, i32* %retval
  br label %return

sw.bb.51:                                         ; preds = %sw.epilog
  %53 = load i32, i32* %ctx.addr, align 4
  switch i32 %53, label %sw.default.57 [
    i32 1, label %sw.bb.52
    i32 2, label %sw.bb.53
    i32 3, label %sw.bb.54
    i32 4, label %sw.bb.55
    i32 5, label %sw.bb.55
    i32 6, label %sw.bb.56
  ]

sw.bb.52:                                         ; preds = %sw.bb.51
  store i32 116, i32* %op, align 4
  br label %sw.epilog.58

sw.bb.53:                                         ; preds = %sw.bb.51
  store i32 97, i32* %op, align 4
  br label %sw.epilog.58

sw.bb.54:                                         ; preds = %sw.bb.51
  store i32 98, i32* %op, align 4
  br label %sw.epilog.58

sw.bb.55:                                         ; preds = %sw.bb.51, %sw.bb.51
  br label %sw.epilog.58

sw.bb.56:                                         ; preds = %sw.bb.51
  br label %sw.default.57

sw.default.57:                                    ; preds = %sw.bb.51, %sw.bb.56
  %54 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %54, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

sw.epilog.58:                                     ; preds = %sw.bb.55, %sw.bb.54, %sw.bb.53, %sw.bb.52
  br label %sw.epilog.67

sw.bb.59:                                         ; preds = %sw.epilog
  %55 = load i32, i32* %ctx.addr, align 4
  switch i32 %55, label %sw.default.65 [
    i32 1, label %sw.bb.60
    i32 2, label %sw.bb.61
    i32 3, label %sw.bb.62
    i32 4, label %sw.bb.63
    i32 5, label %sw.bb.63
    i32 6, label %sw.bb.64
  ]

sw.bb.60:                                         ; preds = %sw.bb.59
  store i32 101, i32* %op, align 4
  br label %sw.epilog.66

sw.bb.61:                                         ; preds = %sw.bb.59
  store i32 90, i32* %op, align 4
  br label %sw.epilog.66

sw.bb.62:                                         ; preds = %sw.bb.59
  store i32 91, i32* %op, align 4
  br label %sw.epilog.66

sw.bb.63:                                         ; preds = %sw.bb.59, %sw.bb.59
  br label %sw.epilog.66

sw.bb.64:                                         ; preds = %sw.bb.59
  br label %sw.default.65

sw.default.65:                                    ; preds = %sw.bb.59, %sw.bb.64
  %56 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %56, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

sw.epilog.66:                                     ; preds = %sw.bb.63, %sw.bb.62, %sw.bb.61, %sw.bb.60
  br label %sw.epilog.67

sw.epilog.67:                                     ; preds = %sw.epilog, %sw.epilog.66, %sw.epilog.58, %sw.epilog.34
  %57 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %58 = load %struct._object*, %struct._object** %dict, align 8
  %59 = load %struct._object*, %struct._object** %mangled, align 8
  %call68 = call i64 @compiler_add_o(%struct.compiler* %57, %struct._object* %58, %struct._object* %59)
  store i64 %call68, i64* %arg, align 8
  br label %do.body.69

do.body.69:                                       ; preds = %sw.epilog.67
  %60 = load %struct._object*, %struct._object** %mangled, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp70, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_refcnt71 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt71, align 8
  %dec72 = add i64 %62, -1
  store i64 %dec72, i64* %ob_refcnt71, align 8
  %cmp73 = icmp ne i64 %dec72, 0
  br i1 %cmp73, label %if.then.74, label %if.else.75

if.then.74:                                       ; preds = %do.body.69
  br label %if.end.78

if.else.75:                                       ; preds = %do.body.69
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_type76 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type76, align 8
  %tp_dealloc77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc77, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  call void %65(%struct._object* %66)
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.75, %if.then.74
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  %67 = load i64, i64* %arg, align 8
  %cmp80 = icmp slt i64 %67, 0
  br i1 %cmp80, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %do.end.79
  store i32 0, i32* %retval
  br label %return

if.end.82:                                        ; preds = %do.end.79
  %68 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %69 = load i32, i32* %op, align 4
  %70 = load i64, i64* %arg, align 8
  %call83 = call i32 @compiler_addop_i(%struct.compiler* %68, i32 %69, i64 %70)
  store i32 %call83, i32* %retval
  br label %return

return:                                           ; preds = %if.end.82, %if.then.81, %sw.default.65, %sw.default.57, %do.end, %if.then.46, %sw.default.41, %sw.default.33, %if.then
  %71 = load i32, i32* %retval
  ret i32 %71
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_addop_o(%struct.compiler* %c, i32 %opcode, %struct._object* %dict, %struct._object* %o) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %opcode.addr = alloca i32, align 4
  %dict.addr = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %arg = alloca i64, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct._object*, %struct._object** %dict.addr, align 8
  %2 = load %struct._object*, %struct._object** %o.addr, align 8
  %call = call i64 @compiler_add_o(%struct.compiler* %0, %struct._object* %1, %struct._object* %2)
  store i64 %call, i64* %arg, align 8
  %3 = load i64, i64* %arg, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %5 = load i32, i32* %opcode.addr, align 4
  %6 = load i64, i64* %arg, align 8
  %call1 = call i32 @compiler_addop_i(%struct.compiler* %4, i32 %5, i64 %6)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i64 @compiler_add_o(%struct.compiler* %c, %struct._object* %dict, %struct._object* %o) #0 {
entry:
  %retval = alloca i64, align 8
  %c.addr = alloca %struct.compiler*, align 8
  %dict.addr = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %t = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %arg = alloca i64, align 8
  %d = alloca double, align 8
  %z = alloca %struct.Py_complex, align 8
  %real_negzero = alloca i32, align 4
  %imag_negzero = alloca i32, align 4
  %coerce = alloca %struct.Py_complex, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  %_py_decref_tmp92 = alloca %struct._object*, align 8
  %_py_decref_tmp104 = alloca %struct._object*, align 8
  %_py_decref_tmp118 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8
  %0 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyFloat_Type
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyFloat_Type)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else.10

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %o.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyFloatObject*
  %ob_fval = getelementptr inbounds %struct.PyFloatObject, %struct.PyFloatObject* %5, i32 0, i32 1
  %6 = load double, double* %ob_fval, align 8
  store double %6, double* %d, align 8
  %7 = load double, double* %d, align 8
  %cmp2 = fcmp oeq double %7, 0.000000e+00
  br i1 %cmp2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %8 = load double, double* %d, align 8
  %call3 = call double @copysign(double 1.000000e+00, double %8) #7
  %cmp4 = fcmp olt double %call3, 0.000000e+00
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %land.lhs.true
  %9 = load %struct._object*, %struct._object** %o.addr, align 8
  %10 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %call7 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 3, %struct._object* %9, %struct._typeobject* %11, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call7, %struct._object** %t, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %if.then
  %12 = load %struct._object*, %struct._object** %o.addr, align 8
  %13 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %call9 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %12, %struct._typeobject* %14)
  store %struct._object* %call9, %struct._object** %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  br label %if.end.56

if.else.10:                                       ; preds = %lor.lhs.false
  %15 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %cmp12 = icmp eq %struct._typeobject* %16, @PyComplex_Type
  br i1 %cmp12, label %if.then.17, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %if.else.10
  %17 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8
  %call15 = call i32 @PyType_IsSubtype(%struct._typeobject* %18, %struct._typeobject* @PyComplex_Type)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.then.17, label %if.else.52

if.then.17:                                       ; preds = %lor.lhs.false.13, %if.else.10
  %19 = load %struct._object*, %struct._object** %o.addr, align 8
  %call18 = call { double, double } @PyComplex_AsCComplex(%struct._object* %19)
  %20 = bitcast %struct.Py_complex* %coerce to { double, double }*
  %21 = getelementptr { double, double }, { double, double }* %20, i32 0, i32 0
  %22 = extractvalue { double, double } %call18, 0
  store double %22, double* %21, align 8
  %23 = getelementptr { double, double }, { double, double }* %20, i32 0, i32 1
  %24 = extractvalue { double, double } %call18, 1
  store double %24, double* %23, align 8
  %25 = bitcast %struct.Py_complex* %z to i8*
  %26 = bitcast %struct.Py_complex* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %real = getelementptr inbounds %struct.Py_complex, %struct.Py_complex* %z, i32 0, i32 0
  %27 = load double, double* %real, align 8
  %cmp19 = fcmp oeq double %27, 0.000000e+00
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.17
  %real20 = getelementptr inbounds %struct.Py_complex, %struct.Py_complex* %z, i32 0, i32 0
  %28 = load double, double* %real20, align 8
  %call21 = call double @copysign(double 1.000000e+00, double %28) #7
  %cmp22 = fcmp olt double %call21, 0.000000e+00
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.17
  %29 = phi i1 [ false, %if.then.17 ], [ %cmp22, %land.rhs ]
  %land.ext = zext i1 %29 to i32
  store i32 %land.ext, i32* %real_negzero, align 4
  %imag = getelementptr inbounds %struct.Py_complex, %struct.Py_complex* %z, i32 0, i32 1
  %30 = load double, double* %imag, align 8
  %cmp23 = fcmp oeq double %30, 0.000000e+00
  br i1 %cmp23, label %land.rhs.24, label %land.end.28

land.rhs.24:                                      ; preds = %land.end
  %imag25 = getelementptr inbounds %struct.Py_complex, %struct.Py_complex* %z, i32 0, i32 1
  %31 = load double, double* %imag25, align 8
  %call26 = call double @copysign(double 1.000000e+00, double %31) #7
  %cmp27 = fcmp olt double %call26, 0.000000e+00
  br label %land.end.28

land.end.28:                                      ; preds = %land.rhs.24, %land.end
  %32 = phi i1 [ false, %land.end ], [ %cmp27, %land.rhs.24 ]
  %land.ext29 = zext i1 %32 to i32
  store i32 %land.ext29, i32* %imag_negzero, align 4
  %33 = load i32, i32* %real_negzero, align 4
  %tobool30 = icmp ne i32 %33, 0
  br i1 %tobool30, label %land.lhs.true.31, label %if.else.36

land.lhs.true.31:                                 ; preds = %land.end.28
  %34 = load i32, i32* %imag_negzero, align 4
  %tobool32 = icmp ne i32 %34, 0
  br i1 %tobool32, label %if.then.33, label %if.else.36

if.then.33:                                       ; preds = %land.lhs.true.31
  %35 = load %struct._object*, %struct._object** %o.addr, align 8
  %36 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %call35 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 5, %struct._object* %35, %struct._typeobject* %37, %struct._object* @_Py_NoneStruct, %struct._object* @_Py_NoneStruct, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call35, %struct._object** %t, align 8
  br label %if.end.51

if.else.36:                                       ; preds = %land.lhs.true.31, %land.end.28
  %38 = load i32, i32* %imag_negzero, align 4
  %tobool37 = icmp ne i32 %38, 0
  br i1 %tobool37, label %if.then.38, label %if.else.41

if.then.38:                                       ; preds = %if.else.36
  %39 = load %struct._object*, %struct._object** %o.addr, align 8
  %40 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %call40 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 4, %struct._object* %39, %struct._typeobject* %41, %struct._object* @_Py_NoneStruct, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call40, %struct._object** %t, align 8
  br label %if.end.50

if.else.41:                                       ; preds = %if.else.36
  %42 = load i32, i32* %real_negzero, align 4
  %tobool42 = icmp ne i32 %42, 0
  br i1 %tobool42, label %if.then.43, label %if.else.46

if.then.43:                                       ; preds = %if.else.41
  %43 = load %struct._object*, %struct._object** %o.addr, align 8
  %44 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8
  %call45 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 3, %struct._object* %43, %struct._typeobject* %45, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call45, %struct._object** %t, align 8
  br label %if.end.49

if.else.46:                                       ; preds = %if.else.41
  %46 = load %struct._object*, %struct._object** %o.addr, align 8
  %47 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %call48 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %46, %struct._typeobject* %48)
  store %struct._object* %call48, %struct._object** %t, align 8
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.43
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %if.then.38
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.33
  br label %if.end.55

if.else.52:                                       ; preds = %lor.lhs.false.13
  %49 = load %struct._object*, %struct._object** %o.addr, align 8
  %50 = load %struct._object*, %struct._object** %o.addr, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %call54 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %49, %struct._typeobject* %51)
  store %struct._object* %call54, %struct._object** %t, align 8
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.end.51
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.end
  %52 = load %struct._object*, %struct._object** %t, align 8
  %cmp57 = icmp eq %struct._object* %52, null
  br i1 %cmp57, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.end.56
  store i64 -1, i64* %retval
  br label %return

if.end.59:                                        ; preds = %if.end.56
  %53 = load %struct._object*, %struct._object** %dict.addr, align 8
  %54 = load %struct._object*, %struct._object** %t, align 8
  %call60 = call %struct._object* @PyDict_GetItem(%struct._object* %53, %struct._object* %54)
  store %struct._object* %call60, %struct._object** %v, align 8
  %55 = load %struct._object*, %struct._object** %v, align 8
  %tobool61 = icmp ne %struct._object* %55, null
  br i1 %tobool61, label %if.else.114, label %if.then.62

if.then.62:                                       ; preds = %if.end.59
  %call63 = call %struct._object* @PyErr_Occurred()
  %tobool64 = icmp ne %struct._object* %call63, null
  br i1 %tobool64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %if.then.62
  store i64 -1, i64* %retval
  br label %return

if.end.66:                                        ; preds = %if.then.62
  %56 = load %struct._object*, %struct._object** %dict.addr, align 8
  %call67 = call i64 @PyDict_Size(%struct._object* %56)
  store i64 %call67, i64* %arg, align 8
  %57 = load i64, i64* %arg, align 8
  %call68 = call %struct._object* @PyLong_FromSsize_t(i64 %57)
  store %struct._object* %call68, %struct._object** %v, align 8
  %58 = load %struct._object*, %struct._object** %v, align 8
  %tobool69 = icmp ne %struct._object* %58, null
  br i1 %tobool69, label %if.end.76, label %if.then.70

if.then.70:                                       ; preds = %if.end.66
  br label %do.body

do.body:                                          ; preds = %if.then.70
  %59 = load %struct._object*, %struct._object** %t, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %61, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp71 = icmp ne i64 %dec, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body
  br label %if.end.75

if.else.73:                                       ; preds = %do.body
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %64(%struct._object* %65)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end

do.end:                                           ; preds = %if.end.75
  store i64 -1, i64* %retval
  br label %return

if.end.76:                                        ; preds = %if.end.66
  %66 = load %struct._object*, %struct._object** %dict.addr, align 8
  %67 = load %struct._object*, %struct._object** %t, align 8
  %68 = load %struct._object*, %struct._object** %v, align 8
  %call77 = call i32 @PyDict_SetItem(%struct._object* %66, %struct._object* %67, %struct._object* %68)
  %cmp78 = icmp slt i32 %call77, 0
  br i1 %cmp78, label %if.then.79, label %if.end.102

if.then.79:                                       ; preds = %if.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %69 = load %struct._object*, %struct._object** %t, align 8
  store %struct._object* %69, %struct._object** %_py_decref_tmp81, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %71, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 4
  %74 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %74(%struct._object* %75)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  br label %do.body.91

do.body.91:                                       ; preds = %do.end.90
  %76 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %76, %struct._object** %_py_decref_tmp92, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_refcnt93 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0
  %78 = load i64, i64* %ob_refcnt93, align 8
  %dec94 = add i64 %78, -1
  store i64 %dec94, i64* %ob_refcnt93, align 8
  %cmp95 = icmp ne i64 %dec94, 0
  br i1 %cmp95, label %if.then.96, label %if.else.97

if.then.96:                                       ; preds = %do.body.91
  br label %if.end.100

if.else.97:                                       ; preds = %do.body.91
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_type98 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type98, align 8
  %tp_dealloc99 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc99, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  call void %81(%struct._object* %82)
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.97, %if.then.96
  br label %do.end.101

do.end.101:                                       ; preds = %if.end.100
  store i64 -1, i64* %retval
  br label %return

if.end.102:                                       ; preds = %if.end.76
  br label %do.body.103

do.body.103:                                      ; preds = %if.end.102
  %83 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %83, %struct._object** %_py_decref_tmp104, align 8
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_refcnt105 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 0
  %85 = load i64, i64* %ob_refcnt105, align 8
  %dec106 = add i64 %85, -1
  store i64 %dec106, i64* %ob_refcnt105, align 8
  %cmp107 = icmp ne i64 %dec106, 0
  br i1 %cmp107, label %if.then.108, label %if.else.109

if.then.108:                                      ; preds = %do.body.103
  br label %if.end.112

if.else.109:                                      ; preds = %do.body.103
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_type110 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 1
  %87 = load %struct._typeobject*, %struct._typeobject** %ob_type110, align 8
  %tp_dealloc111 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %87, i32 0, i32 4
  %88 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc111, align 8
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  call void %88(%struct._object* %89)
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.109, %if.then.108
  br label %do.end.113

do.end.113:                                       ; preds = %if.end.112
  br label %if.end.116

if.else.114:                                      ; preds = %if.end.59
  %90 = load %struct._object*, %struct._object** %v, align 8
  %call115 = call i64 @PyLong_AsLong(%struct._object* %90)
  store i64 %call115, i64* %arg, align 8
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.114, %do.end.113
  br label %do.body.117

do.body.117:                                      ; preds = %if.end.116
  %91 = load %struct._object*, %struct._object** %t, align 8
  store %struct._object* %91, %struct._object** %_py_decref_tmp118, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp118, align 8
  %ob_refcnt119 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0
  %93 = load i64, i64* %ob_refcnt119, align 8
  %dec120 = add i64 %93, -1
  store i64 %dec120, i64* %ob_refcnt119, align 8
  %cmp121 = icmp ne i64 %dec120, 0
  br i1 %cmp121, label %if.then.122, label %if.else.123

if.then.122:                                      ; preds = %do.body.117
  br label %if.end.126

if.else.123:                                      ; preds = %do.body.117
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp118, align 8
  %ob_type124 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type124, align 8
  %tp_dealloc125 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc125, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp118, align 8
  call void %96(%struct._object* %97)
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.123, %if.then.122
  br label %do.end.127

do.end.127:                                       ; preds = %if.end.126
  %98 = load i64, i64* %arg, align 8
  store i64 %98, i64* %retval
  br label %return

return:                                           ; preds = %do.end.127, %do.end.101, %do.end, %if.then.65, %if.then.58
  %99 = load i64, i64* %retval
  ret i64 %99
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_addop_i(%struct.compiler* %c, i32 %opcode, i64 %oparg) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %opcode.addr = alloca i32, align 4
  %oparg.addr = alloca i64, align 8
  %i = alloca %struct.instr*, align 8
  %off = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  store i64 %oparg, i64* %oparg.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %1, i32 0, i32 7
  %2 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %2, i32 0, i32 13
  %3 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock, align 8
  %call = call i32 @compiler_next_instr(%struct.compiler* %0, %struct.basicblock_* %3)
  store i32 %call, i32* %off, align 4
  %4 = load i32, i32* %off, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %off, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %6, i32 0, i32 7
  %7 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_curblock2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %7, i32 0, i32 13
  %8 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock2, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %8, i32 0, i32 3
  %9 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx = getelementptr %struct.instr, %struct.instr* %9, i64 %idxprom
  store %struct.instr* %arrayidx, %struct.instr** %i, align 8
  %10 = load i32, i32* %opcode.addr, align 4
  %conv = trunc i32 %10 to i8
  %11 = load %struct.instr*, %struct.instr** %i, align 8
  %i_opcode = getelementptr inbounds %struct.instr, %struct.instr* %11, i32 0, i32 1
  store i8 %conv, i8* %i_opcode, align 1
  %12 = load i64, i64* %oparg.addr, align 8
  %conv3 = trunc i64 %12 to i32
  %13 = load %struct.instr*, %struct.instr** %i, align 8
  %i_oparg = getelementptr inbounds %struct.instr, %struct.instr* %13, i32 0, i32 2
  store i32 %conv3, i32* %i_oparg, align 4
  %14 = load %struct.instr*, %struct.instr** %i, align 8
  %15 = bitcast %struct.instr* %14 to i8*
  %bf.load = load i8, i8* %15, align 8
  %bf.clear = and i8 %bf.load, -5
  %bf.set = or i8 %bf.clear, 4
  store i8 %bf.set, i8* %15, align 8
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load i32, i32* %off, align 4
  call void @compiler_set_lineno(%struct.compiler* %16, i32 %17)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #1

; Function Attrs: nounwind readnone
declare double @copysign(double, double) #3

declare { double, double } @PyComplex_AsCComplex(%struct._object*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal i32 @compiler_next_instr(%struct.compiler* %c, %struct.basicblock_* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %b.addr = alloca %struct.basicblock_*, align 8
  %tmp = alloca %struct.instr*, align 8
  %oldsize = alloca i64, align 8
  %newsize = alloca i64, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.basicblock_* %b, %struct.basicblock_** %b.addr, align 8
  %0 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %0, i32 0, i32 3
  %1 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %cmp = icmp eq %struct.instr* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i8* @PyObject_Malloc(i64 384)
  %2 = bitcast i8* %call to %struct.instr*
  %3 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr1 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %3, i32 0, i32 3
  store %struct.instr* %2, %struct.instr** %b_instr1, align 8
  %4 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr2 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %4, i32 0, i32 3
  %5 = load %struct.instr*, %struct.instr** %b_instr2, align 8
  %cmp3 = icmp eq %struct.instr* %5, null
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %call5 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_ialloc = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %6, i32 0, i32 2
  store i32 16, i32* %b_ialloc, align 4
  %7 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr6 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %7, i32 0, i32 3
  %8 = load %struct.instr*, %struct.instr** %b_instr6, align 8
  %9 = bitcast %struct.instr* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 384, i32 1, i1 false)
  br label %if.end.35

if.else:                                          ; preds = %entry
  %10 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_iused = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %10, i32 0, i32 1
  %11 = load i32, i32* %b_iused, align 4
  %12 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_ialloc7 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %12, i32 0, i32 2
  %13 = load i32, i32* %b_ialloc7, align 4
  %cmp8 = icmp eq i32 %11, %13
  br i1 %cmp8, label %if.then.9, label %if.end.34

if.then.9:                                        ; preds = %if.else
  %14 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_ialloc12 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %14, i32 0, i32 2
  %15 = load i32, i32* %b_ialloc12, align 4
  %conv = sext i32 %15 to i64
  %mul = mul i64 %conv, 24
  store i64 %mul, i64* %oldsize, align 8
  %16 = load i64, i64* %oldsize, align 8
  %shl = shl i64 %16, 1
  store i64 %shl, i64* %newsize, align 8
  %17 = load i64, i64* %oldsize, align 8
  %cmp13 = icmp ugt i64 %17, 9223372036854775807
  br i1 %cmp13, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %if.then.9
  %call16 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.then.9
  %18 = load i64, i64* %newsize, align 8
  %cmp18 = icmp eq i64 %18, 0
  br i1 %cmp18, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %if.end.17
  %call21 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.17
  %19 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_ialloc23 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %19, i32 0, i32 2
  %20 = load i32, i32* %b_ialloc23, align 4
  %shl24 = shl i32 %20, 1
  store i32 %shl24, i32* %b_ialloc23, align 4
  %21 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr25 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %21, i32 0, i32 3
  %22 = load %struct.instr*, %struct.instr** %b_instr25, align 8
  %23 = bitcast %struct.instr* %22 to i8*
  %24 = load i64, i64* %newsize, align 8
  %call26 = call i8* @PyObject_Realloc(i8* %23, i64 %24)
  %25 = bitcast i8* %call26 to %struct.instr*
  store %struct.instr* %25, %struct.instr** %tmp, align 8
  %26 = load %struct.instr*, %struct.instr** %tmp, align 8
  %cmp27 = icmp eq %struct.instr* %26, null
  br i1 %cmp27, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %if.end.22
  %call30 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end.31:                                        ; preds = %if.end.22
  %27 = load %struct.instr*, %struct.instr** %tmp, align 8
  %28 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr32 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %28, i32 0, i32 3
  store %struct.instr* %27, %struct.instr** %b_instr32, align 8
  %29 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr33 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %29, i32 0, i32 3
  %30 = load %struct.instr*, %struct.instr** %b_instr33, align 8
  %31 = bitcast %struct.instr* %30 to i8*
  %32 = load i64, i64* %oldsize, align 8
  %add.ptr = getelementptr i8, i8* %31, i64 %32
  %33 = load i64, i64* %newsize, align 8
  %34 = load i64, i64* %oldsize, align 8
  %sub = sub i64 %33, %34
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 %sub, i32 1, i1 false)
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.31, %if.else
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end
  %35 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_iused36 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %35, i32 0, i32 1
  %36 = load i32, i32* %b_iused36, align 4
  %inc = add i32 %36, 1
  store i32 %inc, i32* %b_iused36, align 4
  store i32 %36, i32* %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.then.29, %if.then.20, %if.then.15, %if.then.4
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal void @compiler_set_lineno(%struct.compiler* %c, i32 %off) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %off.addr = alloca i32, align 4
  %b = alloca %struct.basicblock_*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %off, i32* %off.addr, align 4
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_lineno_set = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 19
  %2 = load i32, i32* %u_lineno_set, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %3, i32 0, i32 7
  %4 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_lineno_set2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %4, i32 0, i32 19
  store i32 1, i32* %u_lineno_set2, align 4
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u3 = getelementptr inbounds %struct.compiler, %struct.compiler* %5, i32 0, i32 7
  %6 = load %struct.compiler_unit*, %struct.compiler_unit** %u3, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %6, i32 0, i32 13
  %7 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock, align 8
  store %struct.basicblock_* %7, %struct.basicblock_** %b, align 8
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u4 = getelementptr inbounds %struct.compiler, %struct.compiler* %8, i32 0, i32 7
  %9 = load %struct.compiler_unit*, %struct.compiler_unit** %u4, align 8
  %u_lineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %9, i32 0, i32 17
  %10 = load i32, i32* %u_lineno, align 4
  %11 = load i32, i32* %off.addr, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %12, i32 0, i32 3
  %13 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx = getelementptr %struct.instr, %struct.instr* %13, i64 %idxprom
  %i_lineno = getelementptr inbounds %struct.instr, %struct.instr* %arrayidx, i32 0, i32 4
  store i32 %10, i32* %i_lineno, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare i8* @PyObject_Realloc(i8*, i64) #1

declare i32 @PySequence_DelItem(%struct._object*, i64) #1

; Function Attrs: noreturn
declare void @Py_FatalError(i8*) #4

; Function Attrs: nounwind uwtable
define internal i32 @compiler_function(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %qualname = alloca %struct._object*, align 8
  %first_const = alloca %struct._object*, align 8
  %args = alloca %struct._arguments*, align 8
  %returns = alloca %struct._expr*, align 8
  %decos = alloca %struct.asdl_seq*, align 8
  %st = alloca %struct._stmt*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %arglength = alloca i64, align 8
  %docstring = alloca i32, align 4
  %kw_default_count = alloca i32, align 4
  %num_annotations = alloca i32, align 4
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._expr*, align 8
  %res = alloca i32, align 4
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp124 = alloca %struct._object*, align 8
  %_py_decref_tmp129 = alloca %struct._object*, align 8
  %_py_decref_tmp158 = alloca %struct._object*, align 8
  %_py_decref_tmp170 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %first_const, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 1
  %FunctionDef = bitcast %union.anon.35* %v to %struct.anon.36*
  %args1 = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef, i32 0, i32 1
  %1 = load %struct._arguments*, %struct._arguments** %args1, align 8
  store %struct._arguments* %1, %struct._arguments** %args, align 8
  %2 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v2 = getelementptr inbounds %struct._stmt, %struct._stmt* %2, i32 0, i32 1
  %FunctionDef3 = bitcast %union.anon.35* %v2 to %struct.anon.36*
  %returns4 = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef3, i32 0, i32 4
  %3 = load %struct._expr*, %struct._expr** %returns4, align 8
  store %struct._expr* %3, %struct._expr** %returns, align 8
  %4 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v5 = getelementptr inbounds %struct._stmt, %struct._stmt* %4, i32 0, i32 1
  %FunctionDef6 = bitcast %union.anon.35* %v5 to %struct.anon.36*
  %decorator_list = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef6, i32 0, i32 3
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %decorator_list, align 8
  store %struct.asdl_seq* %5, %struct.asdl_seq** %decos, align 8
  store i32 0, i32* %kw_default_count, align 4
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %decos, align 8
  %call = call i32 @compiler_decorators(%struct.compiler* %6, %struct.asdl_seq* %7)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults = getelementptr inbounds %struct._arguments, %struct._arguments* %8, i32 0, i32 5
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults, align 8
  %tobool7 = icmp ne %struct.asdl_seq* %9, null
  br i1 %tobool7, label %if.then.8, label %if.end.17

if.then.8:                                        ; preds = %if.end
  %10 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults9 = getelementptr inbounds %struct._arguments, %struct._arguments* %10, i32 0, i32 5
  %11 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults9, align 8
  store %struct.asdl_seq* %11, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.8
  %12 = load i32, i32* %_i, align 4
  %conv = sext i32 %12 to i64
  %13 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp = icmp eq %struct.asdl_seq* %13, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %14 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %14, i32 0, i32 0
  %15 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %15, %cond.false ]
  %cmp11 = icmp slt i64 %conv, %cond
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %16 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %17, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %18 = load i8*, i8** %arrayidx, align 8
  %19 = bitcast i8* %18 to %struct._expr*
  store %struct._expr* %19, %struct._expr** %elt, align 8
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %21 = load %struct._expr*, %struct._expr** %elt, align 8
  %call13 = call i32 @compiler_visit_expr(%struct.compiler* %20, %struct._expr* %21)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.16
  %22 = load i32, i32* %_i, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  br label %if.end.17

if.end.17:                                        ; preds = %for.end, %if.end
  %23 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs = getelementptr inbounds %struct._arguments, %struct._arguments* %23, i32 0, i32 2
  %24 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs, align 8
  %tobool18 = icmp ne %struct.asdl_seq* %24, null
  br i1 %tobool18, label %if.then.19, label %if.end.26

if.then.19:                                       ; preds = %if.end.17
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %26 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs20 = getelementptr inbounds %struct._arguments, %struct._arguments* %26, i32 0, i32 2
  %27 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs20, align 8
  %28 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kw_defaults = getelementptr inbounds %struct._arguments, %struct._arguments* %28, i32 0, i32 3
  %29 = load %struct.asdl_seq*, %struct.asdl_seq** %kw_defaults, align 8
  %call21 = call i32 @compiler_visit_kwonlydefaults(%struct.compiler* %25, %struct.asdl_seq* %27, %struct.asdl_seq* %29)
  store i32 %call21, i32* %res, align 4
  %30 = load i32, i32* %res, align 4
  %cmp22 = icmp slt i32 %30, 0
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.then.19
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.then.19
  %31 = load i32, i32* %res, align 4
  store i32 %31, i32* %kw_default_count, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %if.end.17
  %32 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %33 = load %struct._arguments*, %struct._arguments** %args, align 8
  %34 = load %struct._expr*, %struct._expr** %returns, align 8
  %call27 = call i32 @compiler_visit_annotations(%struct.compiler* %32, %struct._arguments* %33, %struct._expr* %34)
  store i32 %call27, i32* %num_annotations, align 4
  %35 = load i32, i32* %num_annotations, align 4
  %cmp28 = icmp slt i32 %35, 0
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.26
  store i32 0, i32* %retval
  br label %return

if.end.31:                                        ; preds = %if.end.26
  %36 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %37 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v32 = getelementptr inbounds %struct._stmt, %struct._stmt* %37, i32 0, i32 1
  %FunctionDef33 = bitcast %union.anon.35* %v32 to %struct.anon.36*
  %name = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef33, i32 0, i32 0
  %38 = load %struct._object*, %struct._object** %name, align 8
  %39 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %40 = bitcast %struct._stmt* %39 to i8*
  %41 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %lineno = getelementptr inbounds %struct._stmt, %struct._stmt* %41, i32 0, i32 2
  %42 = load i32, i32* %lineno, align 4
  %call34 = call i32 @compiler_enter_scope(%struct.compiler* %36, %struct._object* %38, i32 2, i8* %40, i32 %42)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end.37, label %if.then.36

if.then.36:                                       ; preds = %if.end.31
  store i32 0, i32* %retval
  br label %return

if.end.37:                                        ; preds = %if.end.31
  %43 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v38 = getelementptr inbounds %struct._stmt, %struct._stmt* %43, i32 0, i32 1
  %FunctionDef39 = bitcast %union.anon.35* %v38 to %struct.anon.36*
  %body = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef39, i32 0, i32 2
  %44 = load %struct.asdl_seq*, %struct.asdl_seq** %body, align 8
  %elements40 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %44, i32 0, i32 1
  %arrayidx41 = getelementptr [1 x i8*], [1 x i8*]* %elements40, i32 0, i64 0
  %45 = load i8*, i8** %arrayidx41, align 8
  %46 = bitcast i8* %45 to %struct._stmt*
  store %struct._stmt* %46, %struct._stmt** %st, align 8
  %47 = load %struct._stmt*, %struct._stmt** %st, align 8
  %call42 = call i32 @compiler_isdocstring(%struct._stmt* %47)
  store i32 %call42, i32* %docstring, align 4
  %48 = load i32, i32* %docstring, align 4
  %tobool43 = icmp ne i32 %48, 0
  br i1 %tobool43, label %land.lhs.true, label %if.end.50

land.lhs.true:                                    ; preds = %if.end.37
  %49 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_optimize = getelementptr inbounds %struct.compiler, %struct.compiler* %49, i32 0, i32 4
  %50 = load i32, i32* %c_optimize, align 4
  %cmp44 = icmp slt i32 %50, 2
  br i1 %cmp44, label %if.then.46, label %if.end.50

if.then.46:                                       ; preds = %land.lhs.true
  %51 = load %struct._stmt*, %struct._stmt** %st, align 8
  %v47 = getelementptr inbounds %struct._stmt, %struct._stmt* %51, i32 0, i32 1
  %Expr = bitcast %union.anon.35* %v47 to %struct.anon.53*
  %value = getelementptr inbounds %struct.anon.53, %struct.anon.53* %Expr, i32 0, i32 0
  %52 = load %struct._expr*, %struct._expr** %value, align 8
  %v48 = getelementptr inbounds %struct._expr, %struct._expr* %52, i32 0, i32 1
  %Str = bitcast %union.anon.4* %v48 to %struct.anon.21*
  %s49 = getelementptr inbounds %struct.anon.21, %struct.anon.21* %Str, i32 0, i32 0
  %53 = load %struct._object*, %struct._object** %s49, align 8
  store %struct._object* %53, %struct._object** %first_const, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.46, %land.lhs.true, %if.end.37
  %54 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %55, i32 0, i32 7
  %56 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %56, i32 0, i32 4
  %57 = load %struct._object*, %struct._object** %u_consts, align 8
  %58 = load %struct._object*, %struct._object** %first_const, align 8
  %call51 = call i64 @compiler_add_o(%struct.compiler* %54, %struct._object* %57, %struct._object* %58)
  %cmp52 = icmp slt i64 %call51, 0
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %if.end.50
  %59 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %59)
  store i32 0, i32* %retval
  br label %return

if.end.55:                                        ; preds = %if.end.50
  %60 = load %struct._arguments*, %struct._arguments** %args, align 8
  %args56 = getelementptr inbounds %struct._arguments, %struct._arguments* %60, i32 0, i32 0
  %61 = load %struct.asdl_seq*, %struct.asdl_seq** %args56, align 8
  %cmp57 = icmp eq %struct.asdl_seq* %61, null
  br i1 %cmp57, label %cond.true.59, label %cond.false.60

cond.true.59:                                     ; preds = %if.end.55
  br label %cond.end.63

cond.false.60:                                    ; preds = %if.end.55
  %62 = load %struct._arguments*, %struct._arguments** %args, align 8
  %args61 = getelementptr inbounds %struct._arguments, %struct._arguments* %62, i32 0, i32 0
  %63 = load %struct.asdl_seq*, %struct.asdl_seq** %args61, align 8
  %size62 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %63, i32 0, i32 0
  %64 = load i64, i64* %size62, align 8
  br label %cond.end.63

cond.end.63:                                      ; preds = %cond.false.60, %cond.true.59
  %cond64 = phi i64 [ 0, %cond.true.59 ], [ %64, %cond.false.60 ]
  %65 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u65 = getelementptr inbounds %struct.compiler, %struct.compiler* %65, i32 0, i32 7
  %66 = load %struct.compiler_unit*, %struct.compiler_unit** %u65, align 8
  %u_argcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %66, i32 0, i32 10
  store i64 %cond64, i64* %u_argcount, align 8
  %67 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs66 = getelementptr inbounds %struct._arguments, %struct._arguments* %67, i32 0, i32 2
  %68 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs66, align 8
  %cmp67 = icmp eq %struct.asdl_seq* %68, null
  br i1 %cmp67, label %cond.true.69, label %cond.false.70

cond.true.69:                                     ; preds = %cond.end.63
  br label %cond.end.73

cond.false.70:                                    ; preds = %cond.end.63
  %69 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs71 = getelementptr inbounds %struct._arguments, %struct._arguments* %69, i32 0, i32 2
  %70 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs71, align 8
  %size72 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %70, i32 0, i32 0
  %71 = load i64, i64* %size72, align 8
  br label %cond.end.73

cond.end.73:                                      ; preds = %cond.false.70, %cond.true.69
  %cond74 = phi i64 [ 0, %cond.true.69 ], [ %71, %cond.false.70 ]
  %72 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u75 = getelementptr inbounds %struct.compiler, %struct.compiler* %72, i32 0, i32 7
  %73 = load %struct.compiler_unit*, %struct.compiler_unit** %u75, align 8
  %u_kwonlyargcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %73, i32 0, i32 11
  store i64 %cond74, i64* %u_kwonlyargcount, align 8
  %74 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v76 = getelementptr inbounds %struct._stmt, %struct._stmt* %74, i32 0, i32 1
  %FunctionDef77 = bitcast %union.anon.35* %v76 to %struct.anon.36*
  %body78 = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef77, i32 0, i32 2
  %75 = load %struct.asdl_seq*, %struct.asdl_seq** %body78, align 8
  %cmp79 = icmp eq %struct.asdl_seq* %75, null
  br i1 %cmp79, label %cond.true.81, label %cond.false.82

cond.true.81:                                     ; preds = %cond.end.73
  br label %cond.end.87

cond.false.82:                                    ; preds = %cond.end.73
  %76 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v83 = getelementptr inbounds %struct._stmt, %struct._stmt* %76, i32 0, i32 1
  %FunctionDef84 = bitcast %union.anon.35* %v83 to %struct.anon.36*
  %body85 = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef84, i32 0, i32 2
  %77 = load %struct.asdl_seq*, %struct.asdl_seq** %body85, align 8
  %size86 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %77, i32 0, i32 0
  %78 = load i64, i64* %size86, align 8
  br label %cond.end.87

cond.end.87:                                      ; preds = %cond.false.82, %cond.true.81
  %cond88 = phi i64 [ 0, %cond.true.81 ], [ %78, %cond.false.82 ]
  store i64 %cond88, i64* %n, align 8
  %79 = load i32, i32* %docstring, align 4
  %conv89 = sext i32 %79 to i64
  store i64 %conv89, i64* %i, align 8
  br label %for.cond.90

for.cond.90:                                      ; preds = %for.inc.103, %cond.end.87
  %80 = load i64, i64* %i, align 8
  %81 = load i64, i64* %n, align 8
  %cmp91 = icmp slt i64 %80, %81
  br i1 %cmp91, label %for.body.93, label %for.end.105

for.body.93:                                      ; preds = %for.cond.90
  %82 = load i64, i64* %i, align 8
  %83 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v94 = getelementptr inbounds %struct._stmt, %struct._stmt* %83, i32 0, i32 1
  %FunctionDef95 = bitcast %union.anon.35* %v94 to %struct.anon.36*
  %body96 = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef95, i32 0, i32 2
  %84 = load %struct.asdl_seq*, %struct.asdl_seq** %body96, align 8
  %elements97 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %84, i32 0, i32 1
  %arrayidx98 = getelementptr [1 x i8*], [1 x i8*]* %elements97, i32 0, i64 %82
  %85 = load i8*, i8** %arrayidx98, align 8
  %86 = bitcast i8* %85 to %struct._stmt*
  store %struct._stmt* %86, %struct._stmt** %st, align 8
  %87 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %88 = load %struct._stmt*, %struct._stmt** %st, align 8
  %call99 = call i32 @compiler_visit_stmt(%struct.compiler* %87, %struct._stmt* %88)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %if.end.102, label %if.then.101

if.then.101:                                      ; preds = %for.body.93
  %89 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %89)
  store i32 0, i32* %retval
  br label %return

if.end.102:                                       ; preds = %for.body.93
  br label %for.inc.103

for.inc.103:                                      ; preds = %if.end.102
  %90 = load i64, i64* %i, align 8
  %inc104 = add i64 %90, 1
  store i64 %inc104, i64* %i, align 8
  br label %for.cond.90

for.end.105:                                      ; preds = %for.cond.90
  %91 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call106 = call %struct.PyCodeObject* @assemble(%struct.compiler* %91, i32 1)
  store %struct.PyCodeObject* %call106, %struct.PyCodeObject** %co, align 8
  %92 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u107 = getelementptr inbounds %struct.compiler, %struct.compiler* %92, i32 0, i32 7
  %93 = load %struct.compiler_unit*, %struct.compiler_unit** %u107, align 8
  %u_qualname = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %93, i32 0, i32 2
  %94 = load %struct._object*, %struct._object** %u_qualname, align 8
  store %struct._object* %94, %struct._object** %qualname, align 8
  %95 = load %struct._object*, %struct._object** %qualname, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 0
  %96 = load i64, i64* %ob_refcnt, align 8
  %inc108 = add i64 %96, 1
  store i64 %inc108, i64* %ob_refcnt, align 8
  %97 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %97)
  %98 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %cmp109 = icmp eq %struct.PyCodeObject* %98, null
  br i1 %cmp109, label %if.then.111, label %if.end.142

if.then.111:                                      ; preds = %for.end.105
  br label %do.body

do.body:                                          ; preds = %if.then.111
  %99 = load %struct._object*, %struct._object** %qualname, align 8
  store %struct._object* %99, %struct._object** %_py_xdecref_tmp, align 8
  %100 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp112 = icmp ne %struct._object* %100, null
  br i1 %cmp112, label %if.then.114, label %if.end.121

if.then.114:                                      ; preds = %do.body
  br label %do.body.115

do.body.115:                                      ; preds = %if.then.114
  %101 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %101, %struct._object** %_py_decref_tmp, align 8
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0
  %103 = load i64, i64* %ob_refcnt116, align 8
  %dec = add i64 %103, -1
  store i64 %dec, i64* %ob_refcnt116, align 8
  %cmp117 = icmp ne i64 %dec, 0
  br i1 %cmp117, label %if.then.119, label %if.else

if.then.119:                                      ; preds = %do.body.115
  br label %if.end.120

if.else:                                          ; preds = %do.body.115
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %106(%struct._object* %107)
  br label %if.end.120

if.end.120:                                       ; preds = %if.else, %if.then.119
  br label %do.end

do.end:                                           ; preds = %if.end.120
  br label %if.end.121

if.end.121:                                       ; preds = %do.end, %do.body
  br label %do.end.122

do.end.122:                                       ; preds = %if.end.121
  br label %do.body.123

do.body.123:                                      ; preds = %do.end.122
  %108 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %109 = bitcast %struct.PyCodeObject* %108 to %struct._object*
  store %struct._object* %109, %struct._object** %_py_xdecref_tmp124, align 8
  %110 = load %struct._object*, %struct._object** %_py_xdecref_tmp124, align 8
  %cmp125 = icmp ne %struct._object* %110, null
  br i1 %cmp125, label %if.then.127, label %if.end.140

if.then.127:                                      ; preds = %do.body.123
  br label %do.body.128

do.body.128:                                      ; preds = %if.then.127
  %111 = load %struct._object*, %struct._object** %_py_xdecref_tmp124, align 8
  store %struct._object* %111, %struct._object** %_py_decref_tmp129, align 8
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp129, align 8
  %ob_refcnt130 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 0
  %113 = load i64, i64* %ob_refcnt130, align 8
  %dec131 = add i64 %113, -1
  store i64 %dec131, i64* %ob_refcnt130, align 8
  %cmp132 = icmp ne i64 %dec131, 0
  br i1 %cmp132, label %if.then.134, label %if.else.135

if.then.134:                                      ; preds = %do.body.128
  br label %if.end.138

if.else.135:                                      ; preds = %do.body.128
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp129, align 8
  %ob_type136 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 1
  %115 = load %struct._typeobject*, %struct._typeobject** %ob_type136, align 8
  %tp_dealloc137 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %115, i32 0, i32 4
  %116 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc137, align 8
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp129, align 8
  call void %116(%struct._object* %117)
  br label %if.end.138

if.end.138:                                       ; preds = %if.else.135, %if.then.134
  br label %do.end.139

do.end.139:                                       ; preds = %if.end.138
  br label %if.end.140

if.end.140:                                       ; preds = %do.end.139, %do.body.123
  br label %do.end.141

do.end.141:                                       ; preds = %if.end.140
  store i32 0, i32* %retval
  br label %return

if.end.142:                                       ; preds = %for.end.105
  %118 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults143 = getelementptr inbounds %struct._arguments, %struct._arguments* %118, i32 0, i32 5
  %119 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults143, align 8
  %cmp144 = icmp eq %struct.asdl_seq* %119, null
  br i1 %cmp144, label %cond.true.146, label %cond.false.147

cond.true.146:                                    ; preds = %if.end.142
  br label %cond.end.150

cond.false.147:                                   ; preds = %if.end.142
  %120 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults148 = getelementptr inbounds %struct._arguments, %struct._arguments* %120, i32 0, i32 5
  %121 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults148, align 8
  %size149 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %121, i32 0, i32 0
  %122 = load i64, i64* %size149, align 8
  br label %cond.end.150

cond.end.150:                                     ; preds = %cond.false.147, %cond.true.146
  %cond151 = phi i64 [ 0, %cond.true.146 ], [ %122, %cond.false.147 ]
  store i64 %cond151, i64* %arglength, align 8
  %123 = load i32, i32* %kw_default_count, align 4
  %shl = shl i32 %123, 8
  %conv152 = sext i32 %shl to i64
  %124 = load i64, i64* %arglength, align 8
  %or = or i64 %124, %conv152
  store i64 %or, i64* %arglength, align 8
  %125 = load i32, i32* %num_annotations, align 4
  %shl153 = shl i32 %125, 16
  %conv154 = sext i32 %shl153 to i64
  %126 = load i64, i64* %arglength, align 8
  %or155 = or i64 %126, %conv154
  store i64 %or155, i64* %arglength, align 8
  %127 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %128 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %129 = load i64, i64* %arglength, align 8
  %130 = load %struct._object*, %struct._object** %qualname, align 8
  %call156 = call i32 @compiler_make_closure(%struct.compiler* %127, %struct.PyCodeObject* %128, i64 %129, %struct._object* %130)
  br label %do.body.157

do.body.157:                                      ; preds = %cond.end.150
  %131 = load %struct._object*, %struct._object** %qualname, align 8
  store %struct._object* %131, %struct._object** %_py_decref_tmp158, align 8
  %132 = load %struct._object*, %struct._object** %_py_decref_tmp158, align 8
  %ob_refcnt159 = getelementptr inbounds %struct._object, %struct._object* %132, i32 0, i32 0
  %133 = load i64, i64* %ob_refcnt159, align 8
  %dec160 = add i64 %133, -1
  store i64 %dec160, i64* %ob_refcnt159, align 8
  %cmp161 = icmp ne i64 %dec160, 0
  br i1 %cmp161, label %if.then.163, label %if.else.164

if.then.163:                                      ; preds = %do.body.157
  br label %if.end.167

if.else.164:                                      ; preds = %do.body.157
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp158, align 8
  %ob_type165 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 1
  %135 = load %struct._typeobject*, %struct._typeobject** %ob_type165, align 8
  %tp_dealloc166 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %135, i32 0, i32 4
  %136 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc166, align 8
  %137 = load %struct._object*, %struct._object** %_py_decref_tmp158, align 8
  call void %136(%struct._object* %137)
  br label %if.end.167

if.end.167:                                       ; preds = %if.else.164, %if.then.163
  br label %do.end.168

do.end.168:                                       ; preds = %if.end.167
  br label %do.body.169

do.body.169:                                      ; preds = %do.end.168
  %138 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %139 = bitcast %struct.PyCodeObject* %138 to %struct._object*
  store %struct._object* %139, %struct._object** %_py_decref_tmp170, align 8
  %140 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  %ob_refcnt171 = getelementptr inbounds %struct._object, %struct._object* %140, i32 0, i32 0
  %141 = load i64, i64* %ob_refcnt171, align 8
  %dec172 = add i64 %141, -1
  store i64 %dec172, i64* %ob_refcnt171, align 8
  %cmp173 = icmp ne i64 %dec172, 0
  br i1 %cmp173, label %if.then.175, label %if.else.176

if.then.175:                                      ; preds = %do.body.169
  br label %if.end.179

if.else.176:                                      ; preds = %do.body.169
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  %ob_type177 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 1
  %143 = load %struct._typeobject*, %struct._typeobject** %ob_type177, align 8
  %tp_dealloc178 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %143, i32 0, i32 4
  %144 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc178, align 8
  %145 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  call void %144(%struct._object* %145)
  br label %if.end.179

if.end.179:                                       ; preds = %if.else.176, %if.then.175
  br label %do.end.180

do.end.180:                                       ; preds = %if.end.179
  store i64 0, i64* %i, align 8
  br label %for.cond.181

for.cond.181:                                     ; preds = %for.inc.196, %do.end.180
  %146 = load i64, i64* %i, align 8
  %147 = load %struct.asdl_seq*, %struct.asdl_seq** %decos, align 8
  %cmp182 = icmp eq %struct.asdl_seq* %147, null
  br i1 %cmp182, label %cond.true.184, label %cond.false.185

cond.true.184:                                    ; preds = %for.cond.181
  br label %cond.end.187

cond.false.185:                                   ; preds = %for.cond.181
  %148 = load %struct.asdl_seq*, %struct.asdl_seq** %decos, align 8
  %size186 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %148, i32 0, i32 0
  %149 = load i64, i64* %size186, align 8
  br label %cond.end.187

cond.end.187:                                     ; preds = %cond.false.185, %cond.true.184
  %cond188 = phi i64 [ 0, %cond.true.184 ], [ %149, %cond.false.185 ]
  %cmp189 = icmp slt i64 %146, %cond188
  br i1 %cmp189, label %for.body.191, label %for.end.198

for.body.191:                                     ; preds = %cond.end.187
  %150 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call192 = call i32 @compiler_addop_i(%struct.compiler* %150, i32 131, i64 1)
  %tobool193 = icmp ne i32 %call192, 0
  br i1 %tobool193, label %if.end.195, label %if.then.194

if.then.194:                                      ; preds = %for.body.191
  store i32 0, i32* %retval
  br label %return

if.end.195:                                       ; preds = %for.body.191
  br label %for.inc.196

for.inc.196:                                      ; preds = %if.end.195
  %151 = load i64, i64* %i, align 8
  %inc197 = add i64 %151, 1
  store i64 %inc197, i64* %i, align 8
  br label %for.cond.181

for.end.198:                                      ; preds = %cond.end.187
  %152 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %153 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v199 = getelementptr inbounds %struct._stmt, %struct._stmt* %153, i32 0, i32 1
  %FunctionDef200 = bitcast %union.anon.35* %v199 to %struct.anon.36*
  %name201 = getelementptr inbounds %struct.anon.36, %struct.anon.36* %FunctionDef200, i32 0, i32 0
  %154 = load %struct._object*, %struct._object** %name201, align 8
  %call202 = call i32 @compiler_nameop(%struct.compiler* %152, %struct._object* %154, i32 2)
  store i32 %call202, i32* %retval
  br label %return

return:                                           ; preds = %for.end.198, %if.then.194, %do.end.141, %if.then.101, %if.then.54, %if.then.36, %if.then.30, %if.then.24, %if.then.15, %if.then
  %155 = load i32, i32* %retval
  ret i32 %155
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_class(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %str = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %decos = alloca %struct.asdl_seq*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  %_py_xdecref_tmp64 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  %_py_xdecref_tmp105 = alloca %struct._object*, align 8
  %_py_decref_tmp109 = alloca %struct._object*, align 8
  %_py_decref_tmp123 = alloca %struct._object*, align 8
  %_py_decref_tmp149 = alloca %struct._object*, align 8
  %_py_decref_tmp189 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 1
  %ClassDef = bitcast %union.anon.35* %v to %struct.anon.37*
  %decorator_list = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef, i32 0, i32 6
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %decorator_list, align 8
  store %struct.asdl_seq* %1, %struct.asdl_seq** %decos, align 8
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %decos, align 8
  %call = call i32 @compiler_decorators(%struct.compiler* %2, %struct.asdl_seq* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %5 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v1 = getelementptr inbounds %struct._stmt, %struct._stmt* %5, i32 0, i32 1
  %ClassDef2 = bitcast %union.anon.35* %v1 to %struct.anon.37*
  %name = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef2, i32 0, i32 0
  %6 = load %struct._object*, %struct._object** %name, align 8
  %7 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %8 = bitcast %struct._stmt* %7 to i8*
  %9 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %lineno = getelementptr inbounds %struct._stmt, %struct._stmt* %9, i32 0, i32 2
  %10 = load i32, i32* %lineno, align 4
  %call3 = call i32 @compiler_enter_scope(%struct.compiler* %4, %struct._object* %6, i32 1, i8* %8, i32 %10)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %11 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v7 = getelementptr inbounds %struct._stmt, %struct._stmt* %11, i32 0, i32 1
  %ClassDef8 = bitcast %union.anon.35* %v7 to %struct.anon.37*
  %name9 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef8, i32 0, i32 0
  %12 = load %struct._object*, %struct._object** %name9, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %13, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.6
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %14, i32 0, i32 7
  %15 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %15, i32 0, i32 9
  %16 = load %struct._object*, %struct._object** %u_private, align 8
  store %struct._object* %16, %struct._object** %_py_xdecref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %17, null
  br i1 %cmp, label %if.then.10, label %if.end.16

if.then.10:                                       ; preds = %do.body
  br label %do.body.11

do.body.11:                                       ; preds = %if.then.10
  %18 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt12, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt12, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body.11
  br label %if.end.15

if.else:                                          ; preds = %do.body.11
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  br label %if.end.16

if.end.16:                                        ; preds = %do.end, %do.body
  br label %do.end.17

do.end.17:                                        ; preds = %if.end.16
  %25 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v18 = getelementptr inbounds %struct._stmt, %struct._stmt* %25, i32 0, i32 1
  %ClassDef19 = bitcast %union.anon.35* %v18 to %struct.anon.37*
  %name20 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef19, i32 0, i32 0
  %26 = load %struct._object*, %struct._object** %name20, align 8
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u21 = getelementptr inbounds %struct.compiler, %struct.compiler* %27, i32 0, i32 7
  %28 = load %struct.compiler_unit*, %struct.compiler_unit** %u21, align 8
  %u_private22 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %28, i32 0, i32 9
  store %struct._object* %26, %struct._object** %u_private22, align 8
  %call23 = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0))
  store %struct._object* %call23, %struct._object** %str, align 8
  %29 = load %struct._object*, %struct._object** %str, align 8
  %tobool24 = icmp ne %struct._object* %29, null
  br i1 %tobool24, label %lor.lhs.false, label %if.then.27

lor.lhs.false:                                    ; preds = %do.end.17
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %31 = load %struct._object*, %struct._object** %str, align 8
  %call25 = call i32 @compiler_nameop(%struct.compiler* %30, %struct._object* %31, i32 1)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.45, label %if.then.27

if.then.27:                                       ; preds = %lor.lhs.false, %do.end.17
  br label %do.body.28

do.body.28:                                       ; preds = %if.then.27
  %32 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %32, %struct._object** %_py_xdecref_tmp29, align 8
  %33 = load %struct._object*, %struct._object** %_py_xdecref_tmp29, align 8
  %cmp30 = icmp ne %struct._object* %33, null
  br i1 %cmp30, label %if.then.31, label %if.end.43

if.then.31:                                       ; preds = %do.body.28
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.31
  %34 = load %struct._object*, %struct._object** %_py_xdecref_tmp29, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp33, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %36, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %39(%struct._object* %40)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %if.end.43

if.end.43:                                        ; preds = %do.end.42, %do.body.28
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  %41 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %41)
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %lor.lhs.false
  br label %do.body.46

do.body.46:                                       ; preds = %if.end.45
  %42 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp47, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt48, align 8
  %dec49 = add i64 %44, -1
  store i64 %dec49, i64* %ob_refcnt48, align 8
  %cmp50 = icmp ne i64 %dec49, 0
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %do.body.46
  br label %if.end.55

if.else.52:                                       ; preds = %do.body.46
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  call void %47(%struct._object* %48)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  %call57 = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.23, i32 0, i32 0))
  store %struct._object* %call57, %struct._object** %str, align 8
  %49 = load %struct._object*, %struct._object** %str, align 8
  %tobool58 = icmp ne %struct._object* %49, null
  br i1 %tobool58, label %lor.lhs.false.59, label %if.then.62

lor.lhs.false.59:                                 ; preds = %do.end.56
  %50 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %51 = load %struct._object*, %struct._object** %str, align 8
  %call60 = call i32 @compiler_nameop(%struct.compiler* %50, %struct._object* %51, i32 2)
  %tobool61 = icmp ne i32 %call60, 0
  br i1 %tobool61, label %if.end.80, label %if.then.62

if.then.62:                                       ; preds = %lor.lhs.false.59, %do.end.56
  br label %do.body.63

do.body.63:                                       ; preds = %if.then.62
  %52 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %52, %struct._object** %_py_xdecref_tmp64, align 8
  %53 = load %struct._object*, %struct._object** %_py_xdecref_tmp64, align 8
  %cmp65 = icmp ne %struct._object* %53, null
  br i1 %cmp65, label %if.then.66, label %if.end.78

if.then.66:                                       ; preds = %do.body.63
  br label %do.body.67

do.body.67:                                       ; preds = %if.then.66
  %54 = load %struct._object*, %struct._object** %_py_xdecref_tmp64, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp68, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %56, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.67
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.67
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %59(%struct._object* %60)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  br label %if.end.78

if.end.78:                                        ; preds = %do.end.77, %do.body.63
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  %61 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %61)
  store i32 0, i32* %retval
  br label %return

if.end.80:                                        ; preds = %lor.lhs.false.59
  br label %do.body.81

do.body.81:                                       ; preds = %if.end.80
  %62 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %62, %struct._object** %_py_decref_tmp82, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0
  %64 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %64, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.86, label %if.else.87

if.then.86:                                       ; preds = %do.body.81
  br label %if.end.90

if.else.87:                                       ; preds = %do.body.81
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %67(%struct._object* %68)
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  br label %do.end.91

do.end.91:                                        ; preds = %if.end.90
  %69 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %70 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u92 = getelementptr inbounds %struct.compiler, %struct.compiler* %70, i32 0, i32 7
  %71 = load %struct.compiler_unit*, %struct.compiler_unit** %u92, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %71, i32 0, i32 4
  %72 = load %struct._object*, %struct._object** %u_consts, align 8
  %73 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u93 = getelementptr inbounds %struct.compiler, %struct.compiler* %73, i32 0, i32 7
  %74 = load %struct.compiler_unit*, %struct.compiler_unit** %u93, align 8
  %u_qualname = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %74, i32 0, i32 2
  %75 = load %struct._object*, %struct._object** %u_qualname, align 8
  %call94 = call i32 @compiler_addop_o(%struct.compiler* %69, i32 100, %struct._object* %72, %struct._object* %75)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %if.end.97, label %if.then.96

if.then.96:                                       ; preds = %do.end.91
  store i32 0, i32* %retval
  br label %return

if.end.97:                                        ; preds = %do.end.91
  %call98 = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i32 0, i32 0))
  store %struct._object* %call98, %struct._object** %str, align 8
  %76 = load %struct._object*, %struct._object** %str, align 8
  %tobool99 = icmp ne %struct._object* %76, null
  br i1 %tobool99, label %lor.lhs.false.100, label %if.then.103

lor.lhs.false.100:                                ; preds = %if.end.97
  %77 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %78 = load %struct._object*, %struct._object** %str, align 8
  %call101 = call i32 @compiler_nameop(%struct.compiler* %77, %struct._object* %78, i32 2)
  %tobool102 = icmp ne i32 %call101, 0
  br i1 %tobool102, label %if.end.121, label %if.then.103

if.then.103:                                      ; preds = %lor.lhs.false.100, %if.end.97
  br label %do.body.104

do.body.104:                                      ; preds = %if.then.103
  %79 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %79, %struct._object** %_py_xdecref_tmp105, align 8
  %80 = load %struct._object*, %struct._object** %_py_xdecref_tmp105, align 8
  %cmp106 = icmp ne %struct._object* %80, null
  br i1 %cmp106, label %if.then.107, label %if.end.119

if.then.107:                                      ; preds = %do.body.104
  br label %do.body.108

do.body.108:                                      ; preds = %if.then.107
  %81 = load %struct._object*, %struct._object** %_py_xdecref_tmp105, align 8
  store %struct._object* %81, %struct._object** %_py_decref_tmp109, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  %ob_refcnt110 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt110, align 8
  %dec111 = add i64 %83, -1
  store i64 %dec111, i64* %ob_refcnt110, align 8
  %cmp112 = icmp ne i64 %dec111, 0
  br i1 %cmp112, label %if.then.113, label %if.else.114

if.then.113:                                      ; preds = %do.body.108
  br label %if.end.117

if.else.114:                                      ; preds = %do.body.108
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  %ob_type115 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type115, align 8
  %tp_dealloc116 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 4
  %86 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc116, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  call void %86(%struct._object* %87)
  br label %if.end.117

if.end.117:                                       ; preds = %if.else.114, %if.then.113
  br label %do.end.118

do.end.118:                                       ; preds = %if.end.117
  br label %if.end.119

if.end.119:                                       ; preds = %do.end.118, %do.body.104
  br label %do.end.120

do.end.120:                                       ; preds = %if.end.119
  %88 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %88)
  store i32 0, i32* %retval
  br label %return

if.end.121:                                       ; preds = %lor.lhs.false.100
  br label %do.body.122

do.body.122:                                      ; preds = %if.end.121
  %89 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %89, %struct._object** %_py_decref_tmp123, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_refcnt124 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt124, align 8
  %dec125 = add i64 %91, -1
  store i64 %dec125, i64* %ob_refcnt124, align 8
  %cmp126 = icmp ne i64 %dec125, 0
  br i1 %cmp126, label %if.then.127, label %if.else.128

if.then.127:                                      ; preds = %do.body.122
  br label %if.end.131

if.else.128:                                      ; preds = %do.body.122
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_type129 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type129, align 8
  %tp_dealloc130 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc130, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  call void %94(%struct._object* %95)
  br label %if.end.131

if.end.131:                                       ; preds = %if.else.128, %if.then.127
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  %96 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %97 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v133 = getelementptr inbounds %struct._stmt, %struct._stmt* %97, i32 0, i32 1
  %ClassDef134 = bitcast %union.anon.35* %v133 to %struct.anon.37*
  %body = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef134, i32 0, i32 5
  %98 = load %struct.asdl_seq*, %struct.asdl_seq** %body, align 8
  %call135 = call i32 @compiler_body(%struct.compiler* %96, %struct.asdl_seq* %98)
  %tobool136 = icmp ne i32 %call135, 0
  br i1 %tobool136, label %if.end.138, label %if.then.137

if.then.137:                                      ; preds = %do.end.132
  %99 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %99)
  store i32 0, i32* %retval
  br label %return

if.end.138:                                       ; preds = %do.end.132
  %100 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u139 = getelementptr inbounds %struct.compiler, %struct.compiler* %100, i32 0, i32 7
  %101 = load %struct.compiler_unit*, %struct.compiler_unit** %u139, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %101, i32 0, i32 0
  %102 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %ste_needs_class_closure = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %102, i32 0, i32 10
  %bf.load = load i8, i8* %ste_needs_class_closure, align 4
  %bf.lshr = lshr i8 %bf.load, 6
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool140 = icmp ne i32 %bf.cast, 0
  br i1 %tobool140, label %if.then.141, label %if.else.166

if.then.141:                                      ; preds = %if.end.138
  %call142 = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  store %struct._object* %call142, %struct._object** %str, align 8
  %103 = load %struct._object*, %struct._object** %str, align 8
  %cmp143 = icmp eq %struct._object* %103, null
  br i1 %cmp143, label %if.then.144, label %if.end.145

if.then.144:                                      ; preds = %if.then.141
  %104 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %104)
  store i32 0, i32* %retval
  br label %return

if.end.145:                                       ; preds = %if.then.141
  %105 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u146 = getelementptr inbounds %struct.compiler, %struct.compiler* %105, i32 0, i32 7
  %106 = load %struct.compiler_unit*, %struct.compiler_unit** %u146, align 8
  %u_cellvars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %106, i32 0, i32 7
  %107 = load %struct._object*, %struct._object** %u_cellvars, align 8
  %108 = load %struct._object*, %struct._object** %str, align 8
  %call147 = call i32 @compiler_lookup_arg(%struct._object* %107, %struct._object* %108)
  store i32 %call147, i32* %i, align 4
  br label %do.body.148

do.body.148:                                      ; preds = %if.end.145
  %109 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %109, %struct._object** %_py_decref_tmp149, align 8
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  %ob_refcnt150 = getelementptr inbounds %struct._object, %struct._object* %110, i32 0, i32 0
  %111 = load i64, i64* %ob_refcnt150, align 8
  %dec151 = add i64 %111, -1
  store i64 %dec151, i64* %ob_refcnt150, align 8
  %cmp152 = icmp ne i64 %dec151, 0
  br i1 %cmp152, label %if.then.153, label %if.else.154

if.then.153:                                      ; preds = %do.body.148
  br label %if.end.157

if.else.154:                                      ; preds = %do.body.148
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  %ob_type155 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 1
  %113 = load %struct._typeobject*, %struct._typeobject** %ob_type155, align 8
  %tp_dealloc156 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %113, i32 0, i32 4
  %114 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc156, align 8
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  call void %114(%struct._object* %115)
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.154, %if.then.153
  br label %do.end.158

do.end.158:                                       ; preds = %if.end.157
  %116 = load i32, i32* %i, align 4
  %cmp159 = icmp slt i32 %116, 0
  br i1 %cmp159, label %if.then.160, label %if.end.161

if.then.160:                                      ; preds = %do.end.158
  %117 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %117)
  store i32 0, i32* %retval
  br label %return

if.end.161:                                       ; preds = %do.end.158
  %118 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %119 = load i32, i32* %i, align 4
  %conv = sext i32 %119 to i64
  %call162 = call i32 @compiler_addop_i(%struct.compiler* %118, i32 135, i64 %conv)
  %tobool163 = icmp ne i32 %call162, 0
  br i1 %tobool163, label %if.end.165, label %if.then.164

if.then.164:                                      ; preds = %if.end.161
  store i32 0, i32* %retval
  br label %return

if.end.165:                                       ; preds = %if.end.161
  br label %if.end.173

if.else.166:                                      ; preds = %if.end.138
  %120 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %121 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u167 = getelementptr inbounds %struct.compiler, %struct.compiler* %121, i32 0, i32 7
  %122 = load %struct.compiler_unit*, %struct.compiler_unit** %u167, align 8
  %u_consts168 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %122, i32 0, i32 4
  %123 = load %struct._object*, %struct._object** %u_consts168, align 8
  %call169 = call i32 @compiler_addop_o(%struct.compiler* %120, i32 100, %struct._object* %123, %struct._object* @_Py_NoneStruct)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end.172, label %if.then.171

if.then.171:                                      ; preds = %if.else.166
  store i32 0, i32* %retval
  br label %return

if.end.172:                                       ; preds = %if.else.166
  br label %if.end.173

if.end.173:                                       ; preds = %if.end.172, %if.end.165
  %124 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call174 = call i32 @compiler_addop(%struct.compiler* %124, i32 83)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end.177, label %if.then.176

if.then.176:                                      ; preds = %if.end.173
  %125 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %125)
  store i32 0, i32* %retval
  br label %return

if.end.177:                                       ; preds = %if.end.173
  %126 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call178 = call %struct.PyCodeObject* @assemble(%struct.compiler* %126, i32 1)
  store %struct.PyCodeObject* %call178, %struct.PyCodeObject** %co, align 8
  %127 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %127)
  %128 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %cmp179 = icmp eq %struct.PyCodeObject* %128, null
  br i1 %cmp179, label %if.then.181, label %if.end.182

if.then.181:                                      ; preds = %if.end.177
  store i32 0, i32* %retval
  br label %return

if.end.182:                                       ; preds = %if.end.177
  %129 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call183 = call i32 @compiler_addop(%struct.compiler* %129, i32 71)
  %tobool184 = icmp ne i32 %call183, 0
  br i1 %tobool184, label %if.end.186, label %if.then.185

if.then.185:                                      ; preds = %if.end.182
  store i32 0, i32* %retval
  br label %return

if.end.186:                                       ; preds = %if.end.182
  %130 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %131 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %call187 = call i32 @compiler_make_closure(%struct.compiler* %130, %struct.PyCodeObject* %131, i64 0, %struct._object* null)
  br label %do.body.188

do.body.188:                                      ; preds = %if.end.186
  %132 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %133 = bitcast %struct.PyCodeObject* %132 to %struct._object*
  store %struct._object* %133, %struct._object** %_py_decref_tmp189, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  %ob_refcnt190 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 0
  %135 = load i64, i64* %ob_refcnt190, align 8
  %dec191 = add i64 %135, -1
  store i64 %dec191, i64* %ob_refcnt190, align 8
  %cmp192 = icmp ne i64 %dec191, 0
  br i1 %cmp192, label %if.then.194, label %if.else.195

if.then.194:                                      ; preds = %do.body.188
  br label %if.end.198

if.else.195:                                      ; preds = %do.body.188
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  %ob_type196 = getelementptr inbounds %struct._object, %struct._object* %136, i32 0, i32 1
  %137 = load %struct._typeobject*, %struct._typeobject** %ob_type196, align 8
  %tp_dealloc197 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %137, i32 0, i32 4
  %138 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc197, align 8
  %139 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  call void %138(%struct._object* %139)
  br label %if.end.198

if.end.198:                                       ; preds = %if.else.195, %if.then.194
  br label %do.end.199

do.end.199:                                       ; preds = %if.end.198
  %140 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %141 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u200 = getelementptr inbounds %struct.compiler, %struct.compiler* %141, i32 0, i32 7
  %142 = load %struct.compiler_unit*, %struct.compiler_unit** %u200, align 8
  %u_consts201 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %142, i32 0, i32 4
  %143 = load %struct._object*, %struct._object** %u_consts201, align 8
  %144 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v202 = getelementptr inbounds %struct._stmt, %struct._stmt* %144, i32 0, i32 1
  %ClassDef203 = bitcast %union.anon.35* %v202 to %struct.anon.37*
  %name204 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef203, i32 0, i32 0
  %145 = load %struct._object*, %struct._object** %name204, align 8
  %call205 = call i32 @compiler_addop_o(%struct.compiler* %140, i32 100, %struct._object* %143, %struct._object* %145)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end.208, label %if.then.207

if.then.207:                                      ; preds = %do.end.199
  store i32 0, i32* %retval
  br label %return

if.end.208:                                       ; preds = %do.end.199
  %146 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %147 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v209 = getelementptr inbounds %struct._stmt, %struct._stmt* %147, i32 0, i32 1
  %ClassDef210 = bitcast %union.anon.35* %v209 to %struct.anon.37*
  %bases = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef210, i32 0, i32 1
  %148 = load %struct.asdl_seq*, %struct.asdl_seq** %bases, align 8
  %149 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v211 = getelementptr inbounds %struct._stmt, %struct._stmt* %149, i32 0, i32 1
  %ClassDef212 = bitcast %union.anon.35* %v211 to %struct.anon.37*
  %keywords = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef212, i32 0, i32 2
  %150 = load %struct.asdl_seq*, %struct.asdl_seq** %keywords, align 8
  %151 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v213 = getelementptr inbounds %struct._stmt, %struct._stmt* %151, i32 0, i32 1
  %ClassDef214 = bitcast %union.anon.35* %v213 to %struct.anon.37*
  %starargs = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef214, i32 0, i32 3
  %152 = load %struct._expr*, %struct._expr** %starargs, align 8
  %153 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v215 = getelementptr inbounds %struct._stmt, %struct._stmt* %153, i32 0, i32 1
  %ClassDef216 = bitcast %union.anon.35* %v215 to %struct.anon.37*
  %kwargs = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef216, i32 0, i32 4
  %154 = load %struct._expr*, %struct._expr** %kwargs, align 8
  %call217 = call i32 @compiler_call_helper(%struct.compiler* %146, i64 2, %struct.asdl_seq* %148, %struct.asdl_seq* %150, %struct._expr* %152, %struct._expr* %154)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end.220, label %if.then.219

if.then.219:                                      ; preds = %if.end.208
  store i32 0, i32* %retval
  br label %return

if.end.220:                                       ; preds = %if.end.208
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.220
  %155 = load i32, i32* %i, align 4
  %conv221 = sext i32 %155 to i64
  %156 = load %struct.asdl_seq*, %struct.asdl_seq** %decos, align 8
  %cmp222 = icmp eq %struct.asdl_seq* %156, null
  br i1 %cmp222, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %157 = load %struct.asdl_seq*, %struct.asdl_seq** %decos, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %157, i32 0, i32 0
  %158 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %158, %cond.false ]
  %cmp224 = icmp slt i64 %conv221, %cond
  br i1 %cmp224, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %159 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call226 = call i32 @compiler_addop_i(%struct.compiler* %159, i32 131, i64 1)
  %tobool227 = icmp ne i32 %call226, 0
  br i1 %tobool227, label %if.end.229, label %if.then.228

if.then.228:                                      ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.229:                                       ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.229
  %160 = load i32, i32* %i, align 4
  %inc230 = add i32 %160, 1
  store i32 %inc230, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  %161 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %162 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v231 = getelementptr inbounds %struct._stmt, %struct._stmt* %162, i32 0, i32 1
  %ClassDef232 = bitcast %union.anon.35* %v231 to %struct.anon.37*
  %name233 = getelementptr inbounds %struct.anon.37, %struct.anon.37* %ClassDef232, i32 0, i32 0
  %163 = load %struct._object*, %struct._object** %name233, align 8
  %call234 = call i32 @compiler_nameop(%struct.compiler* %161, %struct._object* %163, i32 2)
  %tobool235 = icmp ne i32 %call234, 0
  br i1 %tobool235, label %if.end.237, label %if.then.236

if.then.236:                                      ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.237:                                       ; preds = %for.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.237, %if.then.236, %if.then.228, %if.then.219, %if.then.207, %if.then.185, %if.then.181, %if.then.176, %if.then.171, %if.then.164, %if.then.160, %if.then.144, %if.then.137, %do.end.120, %if.then.96, %do.end.79, %do.end.44, %if.then.5, %if.then
  %164 = load i32, i32* %retval
  ret i32 %164
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_error(%struct.compiler* %c, i8* %errstr) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %errstr.addr = alloca i8*, align 8
  %loc = alloca %struct._object*, align 8
  %u = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  %_py_xdecref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i8* %errstr, i8** %errstr.addr, align 8
  store %struct._object* null, %struct._object** %u, align 8
  store %struct._object* null, %struct._object** %v, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_filename = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 0
  %1 = load %struct._object*, %struct._object** %c_filename, align 8
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %2, i32 0, i32 7
  %3 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_lineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %3, i32 0, i32 17
  %4 = load i32, i32* %u_lineno, align 4
  %call = call %struct._object* @PyErr_ProgramTextObject(%struct._object* %1, i32 %4)
  store %struct._object* %call, %struct._object** %loc, align 8
  %5 = load %struct._object*, %struct._object** %loc, align 8
  %tobool = icmp ne %struct._object* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %6 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %loc, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_filename2 = getelementptr inbounds %struct.compiler, %struct.compiler* %7, i32 0, i32 0
  %8 = load %struct._object*, %struct._object** %c_filename2, align 8
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u3 = getelementptr inbounds %struct.compiler, %struct.compiler* %9, i32 0, i32 7
  %10 = load %struct.compiler_unit*, %struct.compiler_unit** %u3, align 8
  %u_lineno4 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %10, i32 0, i32 17
  %11 = load i32, i32* %u_lineno4, align 4
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u5 = getelementptr inbounds %struct.compiler, %struct.compiler* %12, i32 0, i32 7
  %13 = load %struct.compiler_unit*, %struct.compiler_unit** %u5, align 8
  %u_col_offset = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %13, i32 0, i32 18
  %14 = load i32, i32* %u_col_offset, align 4
  %15 = load %struct._object*, %struct._object** %loc, align 8
  %call6 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0), %struct._object* %8, i32 %11, i32 %14, %struct._object* %15)
  store %struct._object* %call6, %struct._object** %u, align 8
  %16 = load %struct._object*, %struct._object** %u, align 8
  %tobool7 = icmp ne %struct._object* %16, null
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.end
  br label %exit

if.end.9:                                         ; preds = %if.end
  %17 = load i8*, i8** %errstr.addr, align 8
  %18 = load %struct._object*, %struct._object** %u, align 8
  %call10 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* %17, %struct._object* %18)
  store %struct._object* %call10, %struct._object** %v, align 8
  %19 = load %struct._object*, %struct._object** %v, align 8
  %tobool11 = icmp ne %struct._object* %19, null
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end.9
  br label %exit

if.end.13:                                        ; preds = %if.end.9
  %20 = load %struct._object*, %struct._object** @PyExc_SyntaxError, align 8
  %21 = load %struct._object*, %struct._object** %v, align 8
  call void @PyErr_SetObject(%struct._object* %20, %struct._object* %21)
  br label %exit

exit:                                             ; preds = %if.end.13, %if.then.12, %if.then.8
  br label %do.body

do.body:                                          ; preds = %exit
  %22 = load %struct._object*, %struct._object** %loc, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %24, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %27(%struct._object* %28)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  br label %do.body.16

do.body.16:                                       ; preds = %do.end
  %29 = load %struct._object*, %struct._object** %u, align 8
  store %struct._object* %29, %struct._object** %_py_xdecref_tmp, align 8
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp17 = icmp ne %struct._object* %30, null
  br i1 %cmp17, label %if.then.18, label %if.end.30

if.then.18:                                       ; preds = %do.body.16
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  %31 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp20, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt21, align 8
  %dec22 = add i64 %33, -1
  store i64 %dec22, i64* %ob_refcnt21, align 8
  %cmp23 = icmp ne i64 %dec22, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.19
  br label %if.end.28

if.else.25:                                       ; preds = %do.body.19
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  call void %36(%struct._object* %37)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  br label %if.end.30

if.end.30:                                        ; preds = %do.end.29, %do.body.16
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %do.body.32

do.body.32:                                       ; preds = %do.end.31
  %38 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %38, %struct._object** %_py_xdecref_tmp33, align 8
  %39 = load %struct._object*, %struct._object** %_py_xdecref_tmp33, align 8
  %cmp34 = icmp ne %struct._object* %39, null
  br i1 %cmp34, label %if.then.35, label %if.end.47

if.then.35:                                       ; preds = %do.body.32
  br label %do.body.36

do.body.36:                                       ; preds = %if.then.35
  %40 = load %struct._object*, %struct._object** %_py_xdecref_tmp33, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp37, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %42, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.36
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.36
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %45(%struct._object* %46)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  br label %if.end.47

if.end.47:                                        ; preds = %do.end.46, %do.body.32
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_addop(%struct.compiler* %c, i32 %opcode) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %opcode.addr = alloca i32, align 4
  %b = alloca %struct.basicblock_*, align 8
  %i = alloca %struct.instr*, align 8
  %off = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %1, i32 0, i32 7
  %2 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %2, i32 0, i32 13
  %3 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock, align 8
  %call = call i32 @compiler_next_instr(%struct.compiler* %0, %struct.basicblock_* %3)
  store i32 %call, i32* %off, align 4
  %4 = load i32, i32* %off, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %5, i32 0, i32 7
  %6 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_curblock2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %6, i32 0, i32 13
  %7 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock2, align 8
  store %struct.basicblock_* %7, %struct.basicblock_** %b, align 8
  %8 = load i32, i32* %off, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %9, i32 0, i32 3
  %10 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx = getelementptr %struct.instr, %struct.instr* %10, i64 %idxprom
  store %struct.instr* %arrayidx, %struct.instr** %i, align 8
  %11 = load i32, i32* %opcode.addr, align 4
  %conv = trunc i32 %11 to i8
  %12 = load %struct.instr*, %struct.instr** %i, align 8
  %i_opcode = getelementptr inbounds %struct.instr, %struct.instr* %12, i32 0, i32 1
  store i8 %conv, i8* %i_opcode, align 1
  %13 = load %struct.instr*, %struct.instr** %i, align 8
  %14 = bitcast %struct.instr* %13 to i8*
  %bf.load = load i8, i8* %14, align 8
  %bf.clear = and i8 %bf.load, -5
  store i8 %bf.clear, i8* %14, align 8
  %15 = load i32, i32* %opcode.addr, align 4
  %cmp3 = icmp eq i32 %15, 83
  br i1 %cmp3, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %16 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_return = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %16, i32 0, i32 5
  %bf.load6 = load i8, i8* %b_return, align 8
  %bf.clear7 = and i8 %bf.load6, -3
  %bf.set = or i8 %bf.clear7, 2
  store i8 %bf.set, i8* %b_return, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.5, %if.end
  %17 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %18 = load i32, i32* %off, align 4
  call void @compiler_set_lineno(%struct.compiler* %17, i32 %18)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_augassign(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %e = alloca %struct._expr*, align 8
  %auge = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 1
  %AugAssign = bitcast %union.anon.35* %v to %struct.anon.41*
  %target = getelementptr inbounds %struct.anon.41, %struct.anon.41* %AugAssign, i32 0, i32 0
  %1 = load %struct._expr*, %struct._expr** %target, align 8
  store %struct._expr* %1, %struct._expr** %e, align 8
  %2 = load %struct._expr*, %struct._expr** %e, align 8
  %kind = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 0
  %3 = load i32, i32* %kind, align 4
  switch i32 %3, label %sw.default [
    i32 21, label %sw.bb
    i32 22, label %sw.bb.27
    i32 24, label %sw.bb.65
  ]

sw.bb:                                            ; preds = %entry
  %4 = load %struct._expr*, %struct._expr** %e, align 8
  %v1 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 1
  %Attribute = bitcast %union.anon.4* %v1 to %struct.anon.24*
  %value = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute, i32 0, i32 0
  %5 = load %struct._expr*, %struct._expr** %value, align 8
  %6 = load %struct._expr*, %struct._expr** %e, align 8
  %v2 = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 1
  %Attribute3 = bitcast %union.anon.4* %v2 to %struct.anon.24*
  %attr = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute3, i32 0, i32 1
  %7 = load %struct._object*, %struct._object** %attr, align 8
  %8 = load %struct._expr*, %struct._expr** %e, align 8
  %lineno = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 2
  %9 = load i32, i32* %lineno, align 4
  %10 = load %struct._expr*, %struct._expr** %e, align 8
  %col_offset = getelementptr inbounds %struct._expr, %struct._expr* %10, i32 0, i32 3
  %11 = load i32, i32* %col_offset, align 4
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_arena = getelementptr inbounds %struct.compiler, %struct.compiler* %12, i32 0, i32 9
  %13 = load %struct._arena*, %struct._arena** %c_arena, align 8
  %call = call %struct._expr* @_Py_Attribute(%struct._expr* %5, %struct._object* %7, i32 4, i32 %9, i32 %11, %struct._arena* %13)
  store %struct._expr* %call, %struct._expr** %auge, align 8
  %14 = load %struct._expr*, %struct._expr** %auge, align 8
  %cmp = icmp eq %struct._expr* %14, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  %15 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %16 = load %struct._expr*, %struct._expr** %auge, align 8
  %call4 = call i32 @compiler_visit_expr(%struct.compiler* %15, %struct._expr* %16)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %17 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %18 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v7 = getelementptr inbounds %struct._stmt, %struct._stmt* %18, i32 0, i32 1
  %AugAssign8 = bitcast %union.anon.35* %v7 to %struct.anon.41*
  %value9 = getelementptr inbounds %struct.anon.41, %struct.anon.41* %AugAssign8, i32 0, i32 2
  %19 = load %struct._expr*, %struct._expr** %value9, align 8
  %call10 = call i32 @compiler_visit_expr(%struct.compiler* %17, %struct._expr* %19)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end.6
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.6
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %22 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v14 = getelementptr inbounds %struct._stmt, %struct._stmt* %22, i32 0, i32 1
  %AugAssign15 = bitcast %union.anon.35* %v14 to %struct.anon.41*
  %op = getelementptr inbounds %struct.anon.41, %struct.anon.41* %AugAssign15, i32 0, i32 1
  %23 = load i32, i32* %op, align 4
  %call16 = call i32 @inplace_binop(%struct.compiler* %21, i32 %23)
  %call17 = call i32 @compiler_addop(%struct.compiler* %20, i32 %call16)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.end.13
  %24 = load %struct._expr*, %struct._expr** %auge, align 8
  %v21 = getelementptr inbounds %struct._expr, %struct._expr* %24, i32 0, i32 1
  %Attribute22 = bitcast %union.anon.4* %v21 to %struct.anon.24*
  %ctx = getelementptr inbounds %struct.anon.24, %struct.anon.24* %Attribute22, i32 0, i32 2
  store i32 5, i32* %ctx, align 4
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %26 = load %struct._expr*, %struct._expr** %auge, align 8
  %call23 = call i32 @compiler_visit_expr(%struct.compiler* %25, %struct._expr* %26)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.end.20
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.20
  br label %sw.epilog

sw.bb.27:                                         ; preds = %entry
  %27 = load %struct._expr*, %struct._expr** %e, align 8
  %v28 = getelementptr inbounds %struct._expr, %struct._expr* %27, i32 0, i32 1
  %Subscript = bitcast %union.anon.4* %v28 to %struct.anon.25*
  %value29 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript, i32 0, i32 0
  %28 = load %struct._expr*, %struct._expr** %value29, align 8
  %29 = load %struct._expr*, %struct._expr** %e, align 8
  %v30 = getelementptr inbounds %struct._expr, %struct._expr* %29, i32 0, i32 1
  %Subscript31 = bitcast %union.anon.4* %v30 to %struct.anon.25*
  %slice = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript31, i32 0, i32 1
  %30 = load %struct._slice*, %struct._slice** %slice, align 8
  %31 = load %struct._expr*, %struct._expr** %e, align 8
  %lineno32 = getelementptr inbounds %struct._expr, %struct._expr* %31, i32 0, i32 2
  %32 = load i32, i32* %lineno32, align 4
  %33 = load %struct._expr*, %struct._expr** %e, align 8
  %col_offset33 = getelementptr inbounds %struct._expr, %struct._expr* %33, i32 0, i32 3
  %34 = load i32, i32* %col_offset33, align 4
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_arena34 = getelementptr inbounds %struct.compiler, %struct.compiler* %35, i32 0, i32 9
  %36 = load %struct._arena*, %struct._arena** %c_arena34, align 8
  %call35 = call %struct._expr* @_Py_Subscript(%struct._expr* %28, %struct._slice* %30, i32 4, i32 %32, i32 %34, %struct._arena* %36)
  store %struct._expr* %call35, %struct._expr** %auge, align 8
  %37 = load %struct._expr*, %struct._expr** %auge, align 8
  %cmp36 = icmp eq %struct._expr* %37, null
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %sw.bb.27
  store i32 0, i32* %retval
  br label %return

if.end.38:                                        ; preds = %sw.bb.27
  %38 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %39 = load %struct._expr*, %struct._expr** %auge, align 8
  %call39 = call i32 @compiler_visit_expr(%struct.compiler* %38, %struct._expr* %39)
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %if.end.38
  store i32 0, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.end.38
  %40 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %41 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v43 = getelementptr inbounds %struct._stmt, %struct._stmt* %41, i32 0, i32 1
  %AugAssign44 = bitcast %union.anon.35* %v43 to %struct.anon.41*
  %value45 = getelementptr inbounds %struct.anon.41, %struct.anon.41* %AugAssign44, i32 0, i32 2
  %42 = load %struct._expr*, %struct._expr** %value45, align 8
  %call46 = call i32 @compiler_visit_expr(%struct.compiler* %40, %struct._expr* %42)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.end.42
  store i32 0, i32* %retval
  br label %return

if.end.49:                                        ; preds = %if.end.42
  %43 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %44 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %45 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v50 = getelementptr inbounds %struct._stmt, %struct._stmt* %45, i32 0, i32 1
  %AugAssign51 = bitcast %union.anon.35* %v50 to %struct.anon.41*
  %op52 = getelementptr inbounds %struct.anon.41, %struct.anon.41* %AugAssign51, i32 0, i32 1
  %46 = load i32, i32* %op52, align 4
  %call53 = call i32 @inplace_binop(%struct.compiler* %44, i32 %46)
  %call54 = call i32 @compiler_addop(%struct.compiler* %43, i32 %call53)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end.57, label %if.then.56

if.then.56:                                       ; preds = %if.end.49
  store i32 0, i32* %retval
  br label %return

if.end.57:                                        ; preds = %if.end.49
  %47 = load %struct._expr*, %struct._expr** %auge, align 8
  %v58 = getelementptr inbounds %struct._expr, %struct._expr* %47, i32 0, i32 1
  %Subscript59 = bitcast %union.anon.4* %v58 to %struct.anon.25*
  %ctx60 = getelementptr inbounds %struct.anon.25, %struct.anon.25* %Subscript59, i32 0, i32 2
  store i32 5, i32* %ctx60, align 4
  %48 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %49 = load %struct._expr*, %struct._expr** %auge, align 8
  %call61 = call i32 @compiler_visit_expr(%struct.compiler* %48, %struct._expr* %49)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end.64, label %if.then.63

if.then.63:                                       ; preds = %if.end.57
  store i32 0, i32* %retval
  br label %return

if.end.64:                                        ; preds = %if.end.57
  br label %sw.epilog

sw.bb.65:                                         ; preds = %entry
  %50 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %51 = load %struct._expr*, %struct._expr** %e, align 8
  %v66 = getelementptr inbounds %struct._expr, %struct._expr* %51, i32 0, i32 1
  %Name = bitcast %union.anon.4* %v66 to %struct.anon.31*
  %id = getelementptr inbounds %struct.anon.31, %struct.anon.31* %Name, i32 0, i32 0
  %52 = load %struct._object*, %struct._object** %id, align 8
  %call67 = call i32 @compiler_nameop(%struct.compiler* %50, %struct._object* %52, i32 1)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end.70, label %if.then.69

if.then.69:                                       ; preds = %sw.bb.65
  store i32 0, i32* %retval
  br label %return

if.end.70:                                        ; preds = %sw.bb.65
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %54 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v71 = getelementptr inbounds %struct._stmt, %struct._stmt* %54, i32 0, i32 1
  %AugAssign72 = bitcast %union.anon.35* %v71 to %struct.anon.41*
  %value73 = getelementptr inbounds %struct.anon.41, %struct.anon.41* %AugAssign72, i32 0, i32 2
  %55 = load %struct._expr*, %struct._expr** %value73, align 8
  %call74 = call i32 @compiler_visit_expr(%struct.compiler* %53, %struct._expr* %55)
  %tobool75 = icmp ne i32 %call74, 0
  br i1 %tobool75, label %if.end.77, label %if.then.76

if.then.76:                                       ; preds = %if.end.70
  store i32 0, i32* %retval
  br label %return

if.end.77:                                        ; preds = %if.end.70
  %56 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %57 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %58 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v78 = getelementptr inbounds %struct._stmt, %struct._stmt* %58, i32 0, i32 1
  %AugAssign79 = bitcast %union.anon.35* %v78 to %struct.anon.41*
  %op80 = getelementptr inbounds %struct.anon.41, %struct.anon.41* %AugAssign79, i32 0, i32 1
  %59 = load i32, i32* %op80, align 4
  %call81 = call i32 @inplace_binop(%struct.compiler* %57, i32 %59)
  %call82 = call i32 @compiler_addop(%struct.compiler* %56, i32 %call81)
  %tobool83 = icmp ne i32 %call82, 0
  br i1 %tobool83, label %if.end.85, label %if.then.84

if.then.84:                                       ; preds = %if.end.77
  store i32 0, i32* %retval
  br label %return

if.end.85:                                        ; preds = %if.end.77
  %60 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %61 = load %struct._expr*, %struct._expr** %e, align 8
  %v86 = getelementptr inbounds %struct._expr, %struct._expr* %61, i32 0, i32 1
  %Name87 = bitcast %union.anon.4* %v86 to %struct.anon.31*
  %id88 = getelementptr inbounds %struct.anon.31, %struct.anon.31* %Name87, i32 0, i32 0
  %62 = load %struct._object*, %struct._object** %id88, align 8
  %call89 = call i32 @compiler_nameop(%struct.compiler* %60, %struct._object* %62, i32 2)
  store i32 %call89, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  %63 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %64 = load %struct._expr*, %struct._expr** %e, align 8
  %kind90 = getelementptr inbounds %struct._expr, %struct._expr* %64, i32 0, i32 0
  %65 = load i32, i32* %kind90, align 4
  %call91 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %63, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.27, i32 0, i32 0), i32 %65)
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.64, %if.end.26
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %if.end.85, %if.then.84, %if.then.76, %if.then.69, %if.then.63, %if.then.56, %if.then.48, %if.then.41, %if.then.37, %if.then.25, %if.then.19, %if.then.12, %if.then.5, %if.then
  %66 = load i32, i32* %retval
  ret i32 %66
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_for(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %start = alloca %struct.basicblock_*, align 8
  %cleanup = alloca %struct.basicblock_*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._stmt*, align 8
  %_i51 = alloca i32, align 4
  %seq52 = alloca %struct.asdl_seq*, align 8
  %elt67 = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %start, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call1 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %1)
  store %struct.basicblock_* %call1, %struct.basicblock_** %cleanup, align 8
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call2 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %2)
  store %struct.basicblock_* %call2, %struct.basicblock_** %end, align 8
  %3 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  %cmp = icmp eq %struct.basicblock_* %3, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp3 = icmp eq %struct.basicblock_* %4, null
  br i1 %cmp3, label %if.then, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %lor.lhs.false
  %5 = load %struct.basicblock_*, %struct.basicblock_** %cleanup, align 8
  %cmp5 = icmp eq %struct.basicblock_* %5, null
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.4, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.4
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %7 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call6 = call i32 @compiler_addop_j(%struct.compiler* %6, i32 120, %struct.basicblock_* %7, i32 0)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %9 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  %call9 = call i32 @compiler_push_fblock(%struct.compiler* %8, i32 0, %struct.basicblock_* %9)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end.12, label %if.then.11

if.then.11:                                       ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  %10 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %11 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %11, i32 0, i32 1
  %For = bitcast %union.anon.35* %v to %struct.anon.42*
  %iter = getelementptr inbounds %struct.anon.42, %struct.anon.42* %For, i32 0, i32 1
  %12 = load %struct._expr*, %struct._expr** %iter, align 8
  %call13 = call i32 @compiler_visit_expr(%struct.compiler* %10, %struct._expr* %12)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call17 = call i32 @compiler_addop(%struct.compiler* %13, i32 68)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.end.16
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %15 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  %call21 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %14, %struct.basicblock_* %15)
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load %struct.basicblock_*, %struct.basicblock_** %cleanup, align 8
  %call22 = call i32 @compiler_addop_j(%struct.compiler* %16, i32 93, %struct.basicblock_* %17, i32 0)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %if.end.20
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.20
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %19 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v26 = getelementptr inbounds %struct._stmt, %struct._stmt* %19, i32 0, i32 1
  %For27 = bitcast %union.anon.35* %v26 to %struct.anon.42*
  %target = getelementptr inbounds %struct.anon.42, %struct.anon.42* %For27, i32 0, i32 0
  %20 = load %struct._expr*, %struct._expr** %target, align 8
  %call28 = call i32 @compiler_visit_expr(%struct.compiler* %18, %struct._expr* %20)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %if.end.25
  store i32 0, i32* %retval
  br label %return

if.end.31:                                        ; preds = %if.end.25
  %21 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v32 = getelementptr inbounds %struct._stmt, %struct._stmt* %21, i32 0, i32 1
  %For33 = bitcast %union.anon.35* %v32 to %struct.anon.42*
  %body = getelementptr inbounds %struct.anon.42, %struct.anon.42* %For33, i32 0, i32 2
  %22 = load %struct.asdl_seq*, %struct.asdl_seq** %body, align 8
  store %struct.asdl_seq* %22, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.31
  %23 = load i32, i32* %_i, align 4
  %conv = sext i32 %23 to i64
  %24 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp34 = icmp eq %struct.asdl_seq* %24, null
  br i1 %cmp34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %25 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %25, i32 0, i32 0
  %26 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %26, %cond.false ]
  %cmp36 = icmp slt i64 %conv, %cond
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %27 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %27 to i64
  %28 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %28, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %29 = load i8*, i8** %arrayidx, align 8
  %30 = bitcast i8* %29 to %struct._stmt*
  store %struct._stmt* %30, %struct._stmt** %elt, align 8
  %31 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %32 = load %struct._stmt*, %struct._stmt** %elt, align 8
  %call38 = call i32 @compiler_visit_stmt(%struct.compiler* %31, %struct._stmt* %32)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.end.41, label %if.then.40

if.then.40:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.41:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.41
  %33 = load i32, i32* %_i, align 4
  %inc = add i32 %33, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  %34 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %35 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  %call42 = call i32 @compiler_addop_j(%struct.compiler* %34, i32 113, %struct.basicblock_* %35, i32 1)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %for.end
  %36 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %37 = load %struct.basicblock_*, %struct.basicblock_** %cleanup, align 8
  %call46 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %36, %struct.basicblock_* %37)
  %38 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call47 = call i32 @compiler_addop(%struct.compiler* %38, i32 87)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %if.end.50, label %if.then.49

if.then.49:                                       ; preds = %if.end.45
  store i32 0, i32* %retval
  br label %return

if.end.50:                                        ; preds = %if.end.45
  %39 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %40 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  call void @compiler_pop_fblock(%struct.compiler* %39, i32 0, %struct.basicblock_* %40)
  %41 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v53 = getelementptr inbounds %struct._stmt, %struct._stmt* %41, i32 0, i32 1
  %For54 = bitcast %union.anon.35* %v53 to %struct.anon.42*
  %orelse = getelementptr inbounds %struct.anon.42, %struct.anon.42* %For54, i32 0, i32 3
  %42 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse, align 8
  store %struct.asdl_seq* %42, %struct.asdl_seq** %seq52, align 8
  store i32 0, i32* %_i51, align 4
  br label %for.cond.55

for.cond.55:                                      ; preds = %for.inc.75, %if.end.50
  %43 = load i32, i32* %_i51, align 4
  %conv56 = sext i32 %43 to i64
  %44 = load %struct.asdl_seq*, %struct.asdl_seq** %seq52, align 8
  %cmp57 = icmp eq %struct.asdl_seq* %44, null
  br i1 %cmp57, label %cond.true.59, label %cond.false.60

cond.true.59:                                     ; preds = %for.cond.55
  br label %cond.end.62

cond.false.60:                                    ; preds = %for.cond.55
  %45 = load %struct.asdl_seq*, %struct.asdl_seq** %seq52, align 8
  %size61 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %45, i32 0, i32 0
  %46 = load i64, i64* %size61, align 8
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.60, %cond.true.59
  %cond63 = phi i64 [ 0, %cond.true.59 ], [ %46, %cond.false.60 ]
  %cmp64 = icmp slt i64 %conv56, %cond63
  br i1 %cmp64, label %for.body.66, label %for.end.77

for.body.66:                                      ; preds = %cond.end.62
  %47 = load i32, i32* %_i51, align 4
  %idxprom68 = sext i32 %47 to i64
  %48 = load %struct.asdl_seq*, %struct.asdl_seq** %seq52, align 8
  %elements69 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %48, i32 0, i32 1
  %arrayidx70 = getelementptr [1 x i8*], [1 x i8*]* %elements69, i32 0, i64 %idxprom68
  %49 = load i8*, i8** %arrayidx70, align 8
  %50 = bitcast i8* %49 to %struct._stmt*
  store %struct._stmt* %50, %struct._stmt** %elt67, align 8
  %51 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %52 = load %struct._stmt*, %struct._stmt** %elt67, align 8
  %call71 = call i32 @compiler_visit_stmt(%struct.compiler* %51, %struct._stmt* %52)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %for.body.66
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %for.body.66
  br label %for.inc.75

for.inc.75:                                       ; preds = %if.end.74
  %53 = load i32, i32* %_i51, align 4
  %inc76 = add i32 %53, 1
  store i32 %inc76, i32* %_i51, align 4
  br label %for.cond.55

for.end.77:                                       ; preds = %cond.end.62
  %54 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %55 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call78 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %54, %struct.basicblock_* %55)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.77, %if.then.73, %if.then.49, %if.then.44, %if.then.40, %if.then.30, %if.then.24, %if.then.19, %if.then.15, %if.then.11, %if.then.7, %if.then
  %56 = load i32, i32* %retval
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_while(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %loop = alloca %struct.basicblock_*, align 8
  %orelse = alloca %struct.basicblock_*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %anchor = alloca %struct.basicblock_*, align 8
  %constant = alloca i32, align 4
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._stmt*, align 8
  %_i69 = alloca i32, align 4
  %seq70 = alloca %struct.asdl_seq*, align 8
  %elt85 = alloca %struct._stmt*, align 8
  %_i112 = alloca i32, align 4
  %seq113 = alloca %struct.asdl_seq*, align 8
  %elt129 = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  store %struct.basicblock_* null, %struct.basicblock_** %anchor, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %1, i32 0, i32 1
  %While = bitcast %union.anon.35* %v to %struct.anon.43*
  %test = getelementptr inbounds %struct.anon.43, %struct.anon.43* %While, i32 0, i32 0
  %2 = load %struct._expr*, %struct._expr** %test, align 8
  %call = call i32 @expr_constant(%struct.compiler* %0, %struct._expr* %2)
  store i32 %call, i32* %constant, align 4
  %3 = load i32, i32* %constant, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end.16

if.then:                                          ; preds = %entry
  %4 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v1 = getelementptr inbounds %struct._stmt, %struct._stmt* %4, i32 0, i32 1
  %While2 = bitcast %union.anon.35* %v1 to %struct.anon.43*
  %orelse3 = getelementptr inbounds %struct.anon.43, %struct.anon.43* %While2, i32 0, i32 2
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse3, align 8
  %tobool = icmp ne %struct.asdl_seq* %5, null
  br i1 %tobool, label %if.then.4, label %if.end.15

if.then.4:                                        ; preds = %if.then
  %6 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v5 = getelementptr inbounds %struct._stmt, %struct._stmt* %6, i32 0, i32 1
  %While6 = bitcast %union.anon.35* %v5 to %struct.anon.43*
  %orelse7 = getelementptr inbounds %struct.anon.43, %struct.anon.43* %While6, i32 0, i32 2
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse7, align 8
  store %struct.asdl_seq* %7, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.4
  %8 = load i32, i32* %_i, align 4
  %conv = sext i32 %8 to i64
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp8 = icmp eq %struct.asdl_seq* %9, null
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %10 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %10, i32 0, i32 0
  %11 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %11, %cond.false ]
  %cmp10 = icmp slt i64 %conv, %cond
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %12 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %13, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %14 = load i8*, i8** %arrayidx, align 8
  %15 = bitcast i8* %14 to %struct._stmt*
  store %struct._stmt* %15, %struct._stmt** %elt, align 8
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load %struct._stmt*, %struct._stmt** %elt, align 8
  %call12 = call i32 @compiler_visit_stmt(%struct.compiler* %16, %struct._stmt* %17)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end, label %if.then.14

if.then.14:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %_i, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  br label %if.end.15

if.end.15:                                        ; preds = %for.end, %if.then
  store i32 1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %entry
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call17 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %19)
  store %struct.basicblock_* %call17, %struct.basicblock_** %loop, align 8
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call18 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %20)
  store %struct.basicblock_* %call18, %struct.basicblock_** %end, align 8
  %21 = load i32, i32* %constant, align 4
  %cmp19 = icmp eq i32 %21, -1
  br i1 %cmp19, label %if.then.21, label %if.end.27

if.then.21:                                       ; preds = %if.end.16
  %22 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call22 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %22)
  store %struct.basicblock_* %call22, %struct.basicblock_** %anchor, align 8
  %23 = load %struct.basicblock_*, %struct.basicblock_** %anchor, align 8
  %cmp23 = icmp eq %struct.basicblock_* %23, null
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.21
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.then.21
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.16
  %24 = load %struct.basicblock_*, %struct.basicblock_** %loop, align 8
  %cmp28 = icmp eq %struct.basicblock_* %24, null
  br i1 %cmp28, label %if.then.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.27
  %25 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp30 = icmp eq %struct.basicblock_* %25, null
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %lor.lhs.false, %if.end.27
  store i32 0, i32* %retval
  br label %return

if.end.33:                                        ; preds = %lor.lhs.false
  %26 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v34 = getelementptr inbounds %struct._stmt, %struct._stmt* %26, i32 0, i32 1
  %While35 = bitcast %union.anon.35* %v34 to %struct.anon.43*
  %orelse36 = getelementptr inbounds %struct.anon.43, %struct.anon.43* %While35, i32 0, i32 2
  %27 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse36, align 8
  %tobool37 = icmp ne %struct.asdl_seq* %27, null
  br i1 %tobool37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.end.33
  %28 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call39 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %28)
  store %struct.basicblock_* %call39, %struct.basicblock_** %orelse, align 8
  %29 = load %struct.basicblock_*, %struct.basicblock_** %orelse, align 8
  %cmp40 = icmp eq %struct.basicblock_* %29, null
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.then.38
  store i32 0, i32* %retval
  br label %return

if.end.43:                                        ; preds = %if.then.38
  br label %if.end.44

if.else:                                          ; preds = %if.end.33
  store %struct.basicblock_* null, %struct.basicblock_** %orelse, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.end.43
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %31 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call45 = call i32 @compiler_addop_j(%struct.compiler* %30, i32 120, %struct.basicblock_* %31, i32 0)
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.end.48, label %if.then.47

if.then.47:                                       ; preds = %if.end.44
  store i32 0, i32* %retval
  br label %return

if.end.48:                                        ; preds = %if.end.44
  %32 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %33 = load %struct.basicblock_*, %struct.basicblock_** %loop, align 8
  %call49 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %32, %struct.basicblock_* %33)
  %34 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %35 = load %struct.basicblock_*, %struct.basicblock_** %loop, align 8
  %call50 = call i32 @compiler_push_fblock(%struct.compiler* %34, i32 0, %struct.basicblock_* %35)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %if.end.53, label %if.then.52

if.then.52:                                       ; preds = %if.end.48
  store i32 0, i32* %retval
  br label %return

if.end.53:                                        ; preds = %if.end.48
  %36 = load i32, i32* %constant, align 4
  %cmp54 = icmp eq i32 %36, -1
  br i1 %cmp54, label %if.then.56, label %if.end.68

if.then.56:                                       ; preds = %if.end.53
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %38 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v57 = getelementptr inbounds %struct._stmt, %struct._stmt* %38, i32 0, i32 1
  %While58 = bitcast %union.anon.35* %v57 to %struct.anon.43*
  %test59 = getelementptr inbounds %struct.anon.43, %struct.anon.43* %While58, i32 0, i32 0
  %39 = load %struct._expr*, %struct._expr** %test59, align 8
  %call60 = call i32 @compiler_visit_expr(%struct.compiler* %37, %struct._expr* %39)
  %tobool61 = icmp ne i32 %call60, 0
  br i1 %tobool61, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %if.then.56
  store i32 0, i32* %retval
  br label %return

if.end.63:                                        ; preds = %if.then.56
  %40 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %41 = load %struct.basicblock_*, %struct.basicblock_** %anchor, align 8
  %call64 = call i32 @compiler_addop_j(%struct.compiler* %40, i32 114, %struct.basicblock_* %41, i32 1)
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.end.67, label %if.then.66

if.then.66:                                       ; preds = %if.end.63
  store i32 0, i32* %retval
  br label %return

if.end.67:                                        ; preds = %if.end.63
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %if.end.53
  %42 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v71 = getelementptr inbounds %struct._stmt, %struct._stmt* %42, i32 0, i32 1
  %While72 = bitcast %union.anon.35* %v71 to %struct.anon.43*
  %body = getelementptr inbounds %struct.anon.43, %struct.anon.43* %While72, i32 0, i32 1
  %43 = load %struct.asdl_seq*, %struct.asdl_seq** %body, align 8
  store %struct.asdl_seq* %43, %struct.asdl_seq** %seq70, align 8
  store i32 0, i32* %_i69, align 4
  br label %for.cond.73

for.cond.73:                                      ; preds = %for.inc.93, %if.end.68
  %44 = load i32, i32* %_i69, align 4
  %conv74 = sext i32 %44 to i64
  %45 = load %struct.asdl_seq*, %struct.asdl_seq** %seq70, align 8
  %cmp75 = icmp eq %struct.asdl_seq* %45, null
  br i1 %cmp75, label %cond.true.77, label %cond.false.78

cond.true.77:                                     ; preds = %for.cond.73
  br label %cond.end.80

cond.false.78:                                    ; preds = %for.cond.73
  %46 = load %struct.asdl_seq*, %struct.asdl_seq** %seq70, align 8
  %size79 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %46, i32 0, i32 0
  %47 = load i64, i64* %size79, align 8
  br label %cond.end.80

cond.end.80:                                      ; preds = %cond.false.78, %cond.true.77
  %cond81 = phi i64 [ 0, %cond.true.77 ], [ %47, %cond.false.78 ]
  %cmp82 = icmp slt i64 %conv74, %cond81
  br i1 %cmp82, label %for.body.84, label %for.end.95

for.body.84:                                      ; preds = %cond.end.80
  %48 = load i32, i32* %_i69, align 4
  %idxprom86 = sext i32 %48 to i64
  %49 = load %struct.asdl_seq*, %struct.asdl_seq** %seq70, align 8
  %elements87 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %49, i32 0, i32 1
  %arrayidx88 = getelementptr [1 x i8*], [1 x i8*]* %elements87, i32 0, i64 %idxprom86
  %50 = load i8*, i8** %arrayidx88, align 8
  %51 = bitcast i8* %50 to %struct._stmt*
  store %struct._stmt* %51, %struct._stmt** %elt85, align 8
  %52 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %53 = load %struct._stmt*, %struct._stmt** %elt85, align 8
  %call89 = call i32 @compiler_visit_stmt(%struct.compiler* %52, %struct._stmt* %53)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.end.92, label %if.then.91

if.then.91:                                       ; preds = %for.body.84
  store i32 0, i32* %retval
  br label %return

if.end.92:                                        ; preds = %for.body.84
  br label %for.inc.93

for.inc.93:                                       ; preds = %if.end.92
  %54 = load i32, i32* %_i69, align 4
  %inc94 = add i32 %54, 1
  store i32 %inc94, i32* %_i69, align 4
  br label %for.cond.73

for.end.95:                                       ; preds = %cond.end.80
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %56 = load %struct.basicblock_*, %struct.basicblock_** %loop, align 8
  %call96 = call i32 @compiler_addop_j(%struct.compiler* %55, i32 113, %struct.basicblock_* %56, i32 1)
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.end.99, label %if.then.98

if.then.98:                                       ; preds = %for.end.95
  store i32 0, i32* %retval
  br label %return

if.end.99:                                        ; preds = %for.end.95
  %57 = load i32, i32* %constant, align 4
  %cmp100 = icmp eq i32 %57, -1
  br i1 %cmp100, label %if.then.102, label %if.end.108

if.then.102:                                      ; preds = %if.end.99
  %58 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %59 = load %struct.basicblock_*, %struct.basicblock_** %anchor, align 8
  %call103 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %58, %struct.basicblock_* %59)
  %60 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call104 = call i32 @compiler_addop(%struct.compiler* %60, i32 87)
  %tobool105 = icmp ne i32 %call104, 0
  br i1 %tobool105, label %if.end.107, label %if.then.106

if.then.106:                                      ; preds = %if.then.102
  store i32 0, i32* %retval
  br label %return

if.end.107:                                       ; preds = %if.then.102
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.end.99
  %61 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %62 = load %struct.basicblock_*, %struct.basicblock_** %loop, align 8
  call void @compiler_pop_fblock(%struct.compiler* %61, i32 0, %struct.basicblock_* %62)
  %63 = load %struct.basicblock_*, %struct.basicblock_** %orelse, align 8
  %cmp109 = icmp ne %struct.basicblock_* %63, null
  br i1 %cmp109, label %if.then.111, label %if.end.140

if.then.111:                                      ; preds = %if.end.108
  %64 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v114 = getelementptr inbounds %struct._stmt, %struct._stmt* %64, i32 0, i32 1
  %While115 = bitcast %union.anon.35* %v114 to %struct.anon.43*
  %orelse116 = getelementptr inbounds %struct.anon.43, %struct.anon.43* %While115, i32 0, i32 2
  %65 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse116, align 8
  store %struct.asdl_seq* %65, %struct.asdl_seq** %seq113, align 8
  store i32 0, i32* %_i112, align 4
  br label %for.cond.117

for.cond.117:                                     ; preds = %for.inc.137, %if.then.111
  %66 = load i32, i32* %_i112, align 4
  %conv118 = sext i32 %66 to i64
  %67 = load %struct.asdl_seq*, %struct.asdl_seq** %seq113, align 8
  %cmp119 = icmp eq %struct.asdl_seq* %67, null
  br i1 %cmp119, label %cond.true.121, label %cond.false.122

cond.true.121:                                    ; preds = %for.cond.117
  br label %cond.end.124

cond.false.122:                                   ; preds = %for.cond.117
  %68 = load %struct.asdl_seq*, %struct.asdl_seq** %seq113, align 8
  %size123 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %68, i32 0, i32 0
  %69 = load i64, i64* %size123, align 8
  br label %cond.end.124

cond.end.124:                                     ; preds = %cond.false.122, %cond.true.121
  %cond125 = phi i64 [ 0, %cond.true.121 ], [ %69, %cond.false.122 ]
  %cmp126 = icmp slt i64 %conv118, %cond125
  br i1 %cmp126, label %for.body.128, label %for.end.139

for.body.128:                                     ; preds = %cond.end.124
  %70 = load i32, i32* %_i112, align 4
  %idxprom130 = sext i32 %70 to i64
  %71 = load %struct.asdl_seq*, %struct.asdl_seq** %seq113, align 8
  %elements131 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %71, i32 0, i32 1
  %arrayidx132 = getelementptr [1 x i8*], [1 x i8*]* %elements131, i32 0, i64 %idxprom130
  %72 = load i8*, i8** %arrayidx132, align 8
  %73 = bitcast i8* %72 to %struct._stmt*
  store %struct._stmt* %73, %struct._stmt** %elt129, align 8
  %74 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %75 = load %struct._stmt*, %struct._stmt** %elt129, align 8
  %call133 = call i32 @compiler_visit_stmt(%struct.compiler* %74, %struct._stmt* %75)
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.end.136, label %if.then.135

if.then.135:                                      ; preds = %for.body.128
  store i32 0, i32* %retval
  br label %return

if.end.136:                                       ; preds = %for.body.128
  br label %for.inc.137

for.inc.137:                                      ; preds = %if.end.136
  %76 = load i32, i32* %_i112, align 4
  %inc138 = add i32 %76, 1
  store i32 %inc138, i32* %_i112, align 4
  br label %for.cond.117

for.end.139:                                      ; preds = %cond.end.124
  br label %if.end.140

if.end.140:                                       ; preds = %for.end.139, %if.end.108
  %77 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %78 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call141 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %77, %struct.basicblock_* %78)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.140, %if.then.135, %if.then.106, %if.then.98, %if.then.91, %if.then.66, %if.then.62, %if.then.52, %if.then.47, %if.then.42, %if.then.32, %if.then.25, %if.end.15, %if.then.14
  %79 = load i32, i32* %retval
  ret i32 %79
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_if(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %next = alloca %struct.basicblock_*, align 8
  %constant = alloca i32, align 4
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._stmt*, align 8
  %_i22 = alloca i32, align 4
  %seq23 = alloca %struct.asdl_seq*, align 8
  %elt38 = alloca %struct._stmt*, align 8
  %_i73 = alloca i32, align 4
  %seq74 = alloca %struct.asdl_seq*, align 8
  %elt90 = alloca %struct._stmt*, align 8
  %_i111 = alloca i32, align 4
  %seq112 = alloca %struct.asdl_seq*, align 8
  %elt128 = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %end, align 8
  %1 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp = icmp eq %struct.basicblock_* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %3, i32 0, i32 1
  %If = bitcast %union.anon.35* %v to %struct.anon.44*
  %test = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If, i32 0, i32 0
  %4 = load %struct._expr*, %struct._expr** %test, align 8
  %call1 = call i32 @expr_constant(%struct.compiler* %2, %struct._expr* %4)
  store i32 %call1, i32* %constant, align 4
  %5 = load i32, i32* %constant, align 4
  %cmp2 = icmp eq i32 %5, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %6 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v4 = getelementptr inbounds %struct._stmt, %struct._stmt* %6, i32 0, i32 1
  %If5 = bitcast %union.anon.35* %v4 to %struct.anon.44*
  %orelse = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If5, i32 0, i32 2
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse, align 8
  %tobool = icmp ne %struct.asdl_seq* %7, null
  br i1 %tobool, label %if.then.6, label %if.end.18

if.then.6:                                        ; preds = %if.then.3
  %8 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v7 = getelementptr inbounds %struct._stmt, %struct._stmt* %8, i32 0, i32 1
  %If8 = bitcast %union.anon.35* %v7 to %struct.anon.44*
  %orelse9 = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If8, i32 0, i32 2
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse9, align 8
  store %struct.asdl_seq* %9, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.6
  %10 = load i32, i32* %_i, align 4
  %conv = sext i32 %10 to i64
  %11 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp10 = icmp eq %struct.asdl_seq* %11, null
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %12 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %12, i32 0, i32 0
  %13 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %13, %cond.false ]
  %cmp12 = icmp slt i64 %conv, %cond
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %14 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %14 to i64
  %15 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %15, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %16 = load i8*, i8** %arrayidx, align 8
  %17 = bitcast i8* %16 to %struct._stmt*
  store %struct._stmt* %17, %struct._stmt** %elt, align 8
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %19 = load %struct._stmt*, %struct._stmt** %elt, align 8
  %call14 = call i32 @compiler_visit_stmt(%struct.compiler* %18, %struct._stmt* %19)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.17
  %20 = load i32, i32* %_i, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  br label %if.end.18

if.end.18:                                        ; preds = %for.end, %if.then.3
  br label %if.end.141

if.else:                                          ; preds = %if.end
  %21 = load i32, i32* %constant, align 4
  %cmp19 = icmp eq i32 %21, 1
  br i1 %cmp19, label %if.then.21, label %if.else.49

if.then.21:                                       ; preds = %if.else
  %22 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v24 = getelementptr inbounds %struct._stmt, %struct._stmt* %22, i32 0, i32 1
  %If25 = bitcast %union.anon.35* %v24 to %struct.anon.44*
  %body = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If25, i32 0, i32 1
  %23 = load %struct.asdl_seq*, %struct.asdl_seq** %body, align 8
  store %struct.asdl_seq* %23, %struct.asdl_seq** %seq23, align 8
  store i32 0, i32* %_i22, align 4
  br label %for.cond.26

for.cond.26:                                      ; preds = %for.inc.46, %if.then.21
  %24 = load i32, i32* %_i22, align 4
  %conv27 = sext i32 %24 to i64
  %25 = load %struct.asdl_seq*, %struct.asdl_seq** %seq23, align 8
  %cmp28 = icmp eq %struct.asdl_seq* %25, null
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %for.cond.26
  br label %cond.end.33

cond.false.31:                                    ; preds = %for.cond.26
  %26 = load %struct.asdl_seq*, %struct.asdl_seq** %seq23, align 8
  %size32 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %26, i32 0, i32 0
  %27 = load i64, i64* %size32, align 8
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.31, %cond.true.30
  %cond34 = phi i64 [ 0, %cond.true.30 ], [ %27, %cond.false.31 ]
  %cmp35 = icmp slt i64 %conv27, %cond34
  br i1 %cmp35, label %for.body.37, label %for.end.48

for.body.37:                                      ; preds = %cond.end.33
  %28 = load i32, i32* %_i22, align 4
  %idxprom39 = sext i32 %28 to i64
  %29 = load %struct.asdl_seq*, %struct.asdl_seq** %seq23, align 8
  %elements40 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %29, i32 0, i32 1
  %arrayidx41 = getelementptr [1 x i8*], [1 x i8*]* %elements40, i32 0, i64 %idxprom39
  %30 = load i8*, i8** %arrayidx41, align 8
  %31 = bitcast i8* %30 to %struct._stmt*
  store %struct._stmt* %31, %struct._stmt** %elt38, align 8
  %32 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %33 = load %struct._stmt*, %struct._stmt** %elt38, align 8
  %call42 = call i32 @compiler_visit_stmt(%struct.compiler* %32, %struct._stmt* %33)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %for.body.37
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %for.body.37
  br label %for.inc.46

for.inc.46:                                       ; preds = %if.end.45
  %34 = load i32, i32* %_i22, align 4
  %inc47 = add i32 %34, 1
  store i32 %inc47, i32* %_i22, align 4
  br label %for.cond.26

for.end.48:                                       ; preds = %cond.end.33
  br label %if.end.140

if.else.49:                                       ; preds = %if.else
  %35 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v50 = getelementptr inbounds %struct._stmt, %struct._stmt* %35, i32 0, i32 1
  %If51 = bitcast %union.anon.35* %v50 to %struct.anon.44*
  %orelse52 = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If51, i32 0, i32 2
  %36 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse52, align 8
  %tobool53 = icmp ne %struct.asdl_seq* %36, null
  br i1 %tobool53, label %if.then.54, label %if.else.60

if.then.54:                                       ; preds = %if.else.49
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call55 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %37)
  store %struct.basicblock_* %call55, %struct.basicblock_** %next, align 8
  %38 = load %struct.basicblock_*, %struct.basicblock_** %next, align 8
  %cmp56 = icmp eq %struct.basicblock_* %38, null
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.then.54
  store i32 0, i32* %retval
  br label %return

if.end.59:                                        ; preds = %if.then.54
  br label %if.end.61

if.else.60:                                       ; preds = %if.else.49
  %39 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  store %struct.basicblock_* %39, %struct.basicblock_** %next, align 8
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.60, %if.end.59
  %40 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %41 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v62 = getelementptr inbounds %struct._stmt, %struct._stmt* %41, i32 0, i32 1
  %If63 = bitcast %union.anon.35* %v62 to %struct.anon.44*
  %test64 = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If63, i32 0, i32 0
  %42 = load %struct._expr*, %struct._expr** %test64, align 8
  %call65 = call i32 @compiler_visit_expr(%struct.compiler* %40, %struct._expr* %42)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.end.68, label %if.then.67

if.then.67:                                       ; preds = %if.end.61
  store i32 0, i32* %retval
  br label %return

if.end.68:                                        ; preds = %if.end.61
  %43 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %44 = load %struct.basicblock_*, %struct.basicblock_** %next, align 8
  %call69 = call i32 @compiler_addop_j(%struct.compiler* %43, i32 114, %struct.basicblock_* %44, i32 1)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end.72, label %if.then.71

if.then.71:                                       ; preds = %if.end.68
  store i32 0, i32* %retval
  br label %return

if.end.72:                                        ; preds = %if.end.68
  %45 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v75 = getelementptr inbounds %struct._stmt, %struct._stmt* %45, i32 0, i32 1
  %If76 = bitcast %union.anon.35* %v75 to %struct.anon.44*
  %body77 = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If76, i32 0, i32 1
  %46 = load %struct.asdl_seq*, %struct.asdl_seq** %body77, align 8
  store %struct.asdl_seq* %46, %struct.asdl_seq** %seq74, align 8
  store i32 0, i32* %_i73, align 4
  br label %for.cond.78

for.cond.78:                                      ; preds = %for.inc.98, %if.end.72
  %47 = load i32, i32* %_i73, align 4
  %conv79 = sext i32 %47 to i64
  %48 = load %struct.asdl_seq*, %struct.asdl_seq** %seq74, align 8
  %cmp80 = icmp eq %struct.asdl_seq* %48, null
  br i1 %cmp80, label %cond.true.82, label %cond.false.83

cond.true.82:                                     ; preds = %for.cond.78
  br label %cond.end.85

cond.false.83:                                    ; preds = %for.cond.78
  %49 = load %struct.asdl_seq*, %struct.asdl_seq** %seq74, align 8
  %size84 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %49, i32 0, i32 0
  %50 = load i64, i64* %size84, align 8
  br label %cond.end.85

cond.end.85:                                      ; preds = %cond.false.83, %cond.true.82
  %cond86 = phi i64 [ 0, %cond.true.82 ], [ %50, %cond.false.83 ]
  %cmp87 = icmp slt i64 %conv79, %cond86
  br i1 %cmp87, label %for.body.89, label %for.end.100

for.body.89:                                      ; preds = %cond.end.85
  %51 = load i32, i32* %_i73, align 4
  %idxprom91 = sext i32 %51 to i64
  %52 = load %struct.asdl_seq*, %struct.asdl_seq** %seq74, align 8
  %elements92 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %52, i32 0, i32 1
  %arrayidx93 = getelementptr [1 x i8*], [1 x i8*]* %elements92, i32 0, i64 %idxprom91
  %53 = load i8*, i8** %arrayidx93, align 8
  %54 = bitcast i8* %53 to %struct._stmt*
  store %struct._stmt* %54, %struct._stmt** %elt90, align 8
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %56 = load %struct._stmt*, %struct._stmt** %elt90, align 8
  %call94 = call i32 @compiler_visit_stmt(%struct.compiler* %55, %struct._stmt* %56)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %if.end.97, label %if.then.96

if.then.96:                                       ; preds = %for.body.89
  store i32 0, i32* %retval
  br label %return

if.end.97:                                        ; preds = %for.body.89
  br label %for.inc.98

for.inc.98:                                       ; preds = %if.end.97
  %57 = load i32, i32* %_i73, align 4
  %inc99 = add i32 %57, 1
  store i32 %inc99, i32* %_i73, align 4
  br label %for.cond.78

for.end.100:                                      ; preds = %cond.end.85
  %58 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %59 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call101 = call i32 @compiler_addop_j(%struct.compiler* %58, i32 110, %struct.basicblock_* %59, i32 0)
  %tobool102 = icmp ne i32 %call101, 0
  br i1 %tobool102, label %if.end.104, label %if.then.103

if.then.103:                                      ; preds = %for.end.100
  store i32 0, i32* %retval
  br label %return

if.end.104:                                       ; preds = %for.end.100
  %60 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v105 = getelementptr inbounds %struct._stmt, %struct._stmt* %60, i32 0, i32 1
  %If106 = bitcast %union.anon.35* %v105 to %struct.anon.44*
  %orelse107 = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If106, i32 0, i32 2
  %61 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse107, align 8
  %tobool108 = icmp ne %struct.asdl_seq* %61, null
  br i1 %tobool108, label %if.then.109, label %if.end.139

if.then.109:                                      ; preds = %if.end.104
  %62 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %63 = load %struct.basicblock_*, %struct.basicblock_** %next, align 8
  %call110 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %62, %struct.basicblock_* %63)
  %64 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v113 = getelementptr inbounds %struct._stmt, %struct._stmt* %64, i32 0, i32 1
  %If114 = bitcast %union.anon.35* %v113 to %struct.anon.44*
  %orelse115 = getelementptr inbounds %struct.anon.44, %struct.anon.44* %If114, i32 0, i32 2
  %65 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse115, align 8
  store %struct.asdl_seq* %65, %struct.asdl_seq** %seq112, align 8
  store i32 0, i32* %_i111, align 4
  br label %for.cond.116

for.cond.116:                                     ; preds = %for.inc.136, %if.then.109
  %66 = load i32, i32* %_i111, align 4
  %conv117 = sext i32 %66 to i64
  %67 = load %struct.asdl_seq*, %struct.asdl_seq** %seq112, align 8
  %cmp118 = icmp eq %struct.asdl_seq* %67, null
  br i1 %cmp118, label %cond.true.120, label %cond.false.121

cond.true.120:                                    ; preds = %for.cond.116
  br label %cond.end.123

cond.false.121:                                   ; preds = %for.cond.116
  %68 = load %struct.asdl_seq*, %struct.asdl_seq** %seq112, align 8
  %size122 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %68, i32 0, i32 0
  %69 = load i64, i64* %size122, align 8
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.false.121, %cond.true.120
  %cond124 = phi i64 [ 0, %cond.true.120 ], [ %69, %cond.false.121 ]
  %cmp125 = icmp slt i64 %conv117, %cond124
  br i1 %cmp125, label %for.body.127, label %for.end.138

for.body.127:                                     ; preds = %cond.end.123
  %70 = load i32, i32* %_i111, align 4
  %idxprom129 = sext i32 %70 to i64
  %71 = load %struct.asdl_seq*, %struct.asdl_seq** %seq112, align 8
  %elements130 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %71, i32 0, i32 1
  %arrayidx131 = getelementptr [1 x i8*], [1 x i8*]* %elements130, i32 0, i64 %idxprom129
  %72 = load i8*, i8** %arrayidx131, align 8
  %73 = bitcast i8* %72 to %struct._stmt*
  store %struct._stmt* %73, %struct._stmt** %elt128, align 8
  %74 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %75 = load %struct._stmt*, %struct._stmt** %elt128, align 8
  %call132 = call i32 @compiler_visit_stmt(%struct.compiler* %74, %struct._stmt* %75)
  %tobool133 = icmp ne i32 %call132, 0
  br i1 %tobool133, label %if.end.135, label %if.then.134

if.then.134:                                      ; preds = %for.body.127
  store i32 0, i32* %retval
  br label %return

if.end.135:                                       ; preds = %for.body.127
  br label %for.inc.136

for.inc.136:                                      ; preds = %if.end.135
  %76 = load i32, i32* %_i111, align 4
  %inc137 = add i32 %76, 1
  store i32 %inc137, i32* %_i111, align 4
  br label %for.cond.116

for.end.138:                                      ; preds = %cond.end.123
  br label %if.end.139

if.end.139:                                       ; preds = %for.end.138, %if.end.104
  br label %if.end.140

if.end.140:                                       ; preds = %if.end.139, %for.end.48
  br label %if.end.141

if.end.141:                                       ; preds = %if.end.140, %if.end.18
  %77 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %78 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call142 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %77, %struct.basicblock_* %78)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.141, %if.then.134, %if.then.103, %if.then.96, %if.then.71, %if.then.67, %if.then.58, %if.then.44, %if.then.16, %if.then
  %79 = load i32, i32* %retval
  ret i32 %79
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_try(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 1
  %Try = bitcast %union.anon.35* %v to %struct.anon.47*
  %finalbody = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try, i32 0, i32 3
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %finalbody, align 8
  %tobool = icmp ne %struct.asdl_seq* %1, null
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v1 = getelementptr inbounds %struct._stmt, %struct._stmt* %2, i32 0, i32 1
  %Try2 = bitcast %union.anon.35* %v1 to %struct.anon.47*
  %finalbody3 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try2, i32 0, i32 3
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %finalbody3, align 8
  %cmp = icmp eq %struct.asdl_seq* %3, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 false, label %if.then, label %if.else

cond.false:                                       ; preds = %land.lhs.true
  %4 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v4 = getelementptr inbounds %struct._stmt, %struct._stmt* %4, i32 0, i32 1
  %Try5 = bitcast %union.anon.35* %v4 to %struct.anon.47*
  %finalbody6 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try5, i32 0, i32 3
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %finalbody6, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %5, i32 0, i32 0
  %6 = load i64, i64* %size, align 8
  %tobool7 = icmp ne i64 %6, 0
  br i1 %tobool7, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %8 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call = call i32 @compiler_try_finally(%struct.compiler* %7, %struct._stmt* %8)
  store i32 %call, i32* %retval
  br label %return

if.else:                                          ; preds = %cond.false, %cond.true, %entry
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %10 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call8 = call i32 @compiler_try_except(%struct.compiler* %9, %struct._stmt* %10)
  store i32 %call8, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_assert(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %msg = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_optimize = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 4
  %1 = load i32, i32* %c_optimize, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** @compiler_assert.assertion_error, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then.1, label %if.end.5

if.then.1:                                        ; preds = %if.end
  %call = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @compiler_assert.assertion_error, align 8
  %3 = load %struct._object*, %struct._object** @compiler_assert.assertion_error, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.then.1
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.then.1
  br label %if.end.5

if.end.5:                                         ; preds = %if.end.4, %if.end
  %4 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %4, i32 0, i32 1
  %Assert = bitcast %union.anon.35* %v to %struct.anon.48*
  %test = getelementptr inbounds %struct.anon.48, %struct.anon.48* %Assert, i32 0, i32 0
  %5 = load %struct._expr*, %struct._expr** %test, align 8
  %kind = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 0
  %6 = load i32, i32* %kind, align 4
  %cmp6 = icmp eq i32 %6, 26
  br i1 %cmp6, label %land.lhs.true, label %if.end.42

land.lhs.true:                                    ; preds = %if.end.5
  %7 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v7 = getelementptr inbounds %struct._stmt, %struct._stmt* %7, i32 0, i32 1
  %Assert8 = bitcast %union.anon.35* %v7 to %struct.anon.48*
  %test9 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %Assert8, i32 0, i32 0
  %8 = load %struct._expr*, %struct._expr** %test9, align 8
  %v10 = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 1
  %Tuple = bitcast %union.anon.4* %v10 to %struct.anon.33*
  %elts = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple, i32 0, i32 0
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %elts, align 8
  %cmp11 = icmp eq %struct.asdl_seq* %9, null
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %10 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v12 = getelementptr inbounds %struct._stmt, %struct._stmt* %10, i32 0, i32 1
  %Assert13 = bitcast %union.anon.35* %v12 to %struct.anon.48*
  %test14 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %Assert13, i32 0, i32 0
  %11 = load %struct._expr*, %struct._expr** %test14, align 8
  %v15 = getelementptr inbounds %struct._expr, %struct._expr* %11, i32 0, i32 1
  %Tuple16 = bitcast %union.anon.4* %v15 to %struct.anon.33*
  %elts17 = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple16, i32 0, i32 0
  %12 = load %struct.asdl_seq*, %struct.asdl_seq** %elts17, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %12, i32 0, i32 0
  %13 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %13, %cond.false ]
  %cmp18 = icmp sgt i64 %cond, 0
  br i1 %cmp18, label %if.then.19, label %if.end.42

if.then.19:                                       ; preds = %cond.end
  %call20 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.33, i32 0, i32 0))
  store %struct._object* %call20, %struct._object** %msg, align 8
  %14 = load %struct._object*, %struct._object** %msg, align 8
  %cmp21 = icmp eq %struct._object* %14, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.19
  store i32 0, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.then.19
  %15 = load %struct._object*, %struct._object** @PyExc_SyntaxWarning, align 8
  %16 = load %struct._object*, %struct._object** %msg, align 8
  %17 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_filename = getelementptr inbounds %struct.compiler, %struct.compiler* %17, i32 0, i32 0
  %18 = load %struct._object*, %struct._object** %c_filename, align 8
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %19, i32 0, i32 7
  %20 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_lineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %20, i32 0, i32 17
  %21 = load i32, i32* %u_lineno, align 4
  %call24 = call i32 @PyErr_WarnExplicitObject(%struct._object* %15, %struct._object* %16, %struct._object* %18, i32 %21, %struct._object* null, %struct._object* null)
  %cmp25 = icmp eq i32 %call24, -1
  br i1 %cmp25, label %if.then.26, label %if.end.30

if.then.26:                                       ; preds = %if.end.23
  br label %do.body

do.body:                                          ; preds = %if.then.26
  %22 = load %struct._object*, %struct._object** %msg, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %24, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp27 = icmp ne i64 %dec, 0
  br i1 %cmp27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %27(%struct._object* %28)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.28
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.end.23
  br label %do.body.31

do.body.31:                                       ; preds = %if.end.30
  %29 = load %struct._object*, %struct._object** %msg, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp32, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt33, align 8
  %dec34 = add i64 %31, -1
  store i64 %dec34, i64* %ob_refcnt33, align 8
  %cmp35 = icmp ne i64 %dec34, 0
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40

if.else.37:                                       ; preds = %do.body.31
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  call void %34(%struct._object* %35)
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end.41

do.end.41:                                        ; preds = %if.end.40
  br label %if.end.42

if.end.42:                                        ; preds = %do.end.41, %cond.end, %if.end.5
  %36 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %37 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v43 = getelementptr inbounds %struct._stmt, %struct._stmt* %37, i32 0, i32 1
  %Assert44 = bitcast %union.anon.35* %v43 to %struct.anon.48*
  %test45 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %Assert44, i32 0, i32 0
  %38 = load %struct._expr*, %struct._expr** %test45, align 8
  %call46 = call i32 @compiler_visit_expr(%struct.compiler* %36, %struct._expr* %38)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.end.42
  store i32 0, i32* %retval
  br label %return

if.end.49:                                        ; preds = %if.end.42
  %39 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call50 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %39)
  store %struct.basicblock_* %call50, %struct.basicblock_** %end, align 8
  %40 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp51 = icmp eq %struct.basicblock_* %40, null
  br i1 %cmp51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.49
  store i32 0, i32* %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %41 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %42 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call54 = call i32 @compiler_addop_j(%struct.compiler* %41, i32 115, %struct.basicblock_* %42, i32 1)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end.57, label %if.then.56

if.then.56:                                       ; preds = %if.end.53
  store i32 0, i32* %retval
  br label %return

if.end.57:                                        ; preds = %if.end.53
  %43 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %44 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u58 = getelementptr inbounds %struct.compiler, %struct.compiler* %44, i32 0, i32 7
  %45 = load %struct.compiler_unit*, %struct.compiler_unit** %u58, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %45, i32 0, i32 5
  %46 = load %struct._object*, %struct._object** %u_names, align 8
  %47 = load %struct._object*, %struct._object** @compiler_assert.assertion_error, align 8
  %call59 = call i32 @compiler_addop_o(%struct.compiler* %43, i32 116, %struct._object* %46, %struct._object* %47)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.end.62, label %if.then.61

if.then.61:                                       ; preds = %if.end.57
  store i32 0, i32* %retval
  br label %return

if.end.62:                                        ; preds = %if.end.57
  %48 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v63 = getelementptr inbounds %struct._stmt, %struct._stmt* %48, i32 0, i32 1
  %Assert64 = bitcast %union.anon.35* %v63 to %struct.anon.48*
  %msg65 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %Assert64, i32 0, i32 1
  %49 = load %struct._expr*, %struct._expr** %msg65, align 8
  %tobool66 = icmp ne %struct._expr* %49, null
  br i1 %tobool66, label %if.then.67, label %if.end.79

if.then.67:                                       ; preds = %if.end.62
  %50 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %51 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v68 = getelementptr inbounds %struct._stmt, %struct._stmt* %51, i32 0, i32 1
  %Assert69 = bitcast %union.anon.35* %v68 to %struct.anon.48*
  %msg70 = getelementptr inbounds %struct.anon.48, %struct.anon.48* %Assert69, i32 0, i32 1
  %52 = load %struct._expr*, %struct._expr** %msg70, align 8
  %call71 = call i32 @compiler_visit_expr(%struct.compiler* %50, %struct._expr* %52)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %if.then.67
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %if.then.67
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call75 = call i32 @compiler_addop_i(%struct.compiler* %53, i32 131, i64 1)
  %tobool76 = icmp ne i32 %call75, 0
  br i1 %tobool76, label %if.end.78, label %if.then.77

if.then.77:                                       ; preds = %if.end.74
  store i32 0, i32* %retval
  br label %return

if.end.78:                                        ; preds = %if.end.74
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.end.62
  %54 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call80 = call i32 @compiler_addop_i(%struct.compiler* %54, i32 130, i64 1)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %if.end.83, label %if.then.82

if.then.82:                                       ; preds = %if.end.79
  store i32 0, i32* %retval
  br label %return

if.end.83:                                        ; preds = %if.end.79
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %56 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call84 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %55, %struct.basicblock_* %56)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.83, %if.then.82, %if.then.77, %if.then.73, %if.then.61, %if.then.56, %if.then.52, %if.then.48, %do.end, %if.then.22, %if.then.3, %if.then
  %57 = load i32, i32* %retval
  ret i32 %57
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_import(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %alias = alloca %struct._alias*, align 8
  %r = alloca i32, align 4
  %level = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %dot = alloca i64, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 1
  %Import = bitcast %union.anon.35* %v to %struct.anon.49*
  %names = getelementptr inbounds %struct.anon.49, %struct.anon.49* %Import, i32 0, i32 0
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %names, align 8
  %cmp = icmp eq %struct.asdl_seq* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v1 = getelementptr inbounds %struct._stmt, %struct._stmt* %2, i32 0, i32 1
  %Import2 = bitcast %union.anon.35* %v1 to %struct.anon.49*
  %names3 = getelementptr inbounds %struct.anon.49, %struct.anon.49* %Import2, i32 0, i32 0
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %names3, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %3, i32 0, i32 0
  %4 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %4, %cond.false ]
  store i64 %cond, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i64, i64* %i, align 8
  %6 = load i64, i64* %n, align 8
  %cmp4 = icmp slt i64 %5, %6
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %i, align 8
  %8 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v5 = getelementptr inbounds %struct._stmt, %struct._stmt* %8, i32 0, i32 1
  %Import6 = bitcast %union.anon.35* %v5 to %struct.anon.49*
  %names7 = getelementptr inbounds %struct.anon.49, %struct.anon.49* %Import6, i32 0, i32 0
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %names7, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %9, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %7
  %10 = load i8*, i8** %arrayidx, align 8
  %11 = bitcast i8* %10 to %struct._alias*
  store %struct._alias* %11, %struct._alias** %alias, align 8
  %call = call %struct._object* @PyLong_FromLong(i64 0)
  store %struct._object* %call, %struct._object** %level, align 8
  %12 = load %struct._object*, %struct._object** %level, align 8
  %cmp8 = icmp eq %struct._object* %12, null
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %14, i32 0, i32 7
  %15 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %15, i32 0, i32 4
  %16 = load %struct._object*, %struct._object** %u_consts, align 8
  %17 = load %struct._object*, %struct._object** %level, align 8
  %call9 = call i32 @compiler_addop_o(%struct.compiler* %13, i32 100, %struct._object* %16, %struct._object* %17)
  %tobool = icmp ne i32 %call9, 0
  br i1 %tobool, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.11
  %18 = load %struct._object*, %struct._object** %level, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.14

if.else:                                          ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.14
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %26 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u15 = getelementptr inbounds %struct.compiler, %struct.compiler* %26, i32 0, i32 7
  %27 = load %struct.compiler_unit*, %struct.compiler_unit** %u15, align 8
  %u_consts16 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %27, i32 0, i32 4
  %28 = load %struct._object*, %struct._object** %u_consts16, align 8
  %call17 = call i32 @compiler_addop_o(%struct.compiler* %25, i32 100, %struct._object* %28, %struct._object* @_Py_NoneStruct)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %do.end
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %do.end
  %29 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u21 = getelementptr inbounds %struct.compiler, %struct.compiler* %30, i32 0, i32 7
  %31 = load %struct.compiler_unit*, %struct.compiler_unit** %u21, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %31, i32 0, i32 5
  %32 = load %struct._object*, %struct._object** %u_names, align 8
  %33 = load %struct._alias*, %struct._alias** %alias, align 8
  %name = getelementptr inbounds %struct._alias, %struct._alias* %33, i32 0, i32 0
  %34 = load %struct._object*, %struct._object** %name, align 8
  %call22 = call i32 @compiler_addop_name(%struct.compiler* %29, i32 108, %struct._object* %32, %struct._object* %34)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %if.end.20
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.20
  %35 = load %struct._alias*, %struct._alias** %alias, align 8
  %asname = getelementptr inbounds %struct._alias, %struct._alias* %35, i32 0, i32 1
  %36 = load %struct._object*, %struct._object** %asname, align 8
  %tobool26 = icmp ne %struct._object* %36, null
  br i1 %tobool26, label %if.then.27, label %if.else.34

if.then.27:                                       ; preds = %if.end.25
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %38 = load %struct._alias*, %struct._alias** %alias, align 8
  %name28 = getelementptr inbounds %struct._alias, %struct._alias* %38, i32 0, i32 0
  %39 = load %struct._object*, %struct._object** %name28, align 8
  %40 = load %struct._alias*, %struct._alias** %alias, align 8
  %asname29 = getelementptr inbounds %struct._alias, %struct._alias* %40, i32 0, i32 1
  %41 = load %struct._object*, %struct._object** %asname29, align 8
  %call30 = call i32 @compiler_import_as(%struct.compiler* %37, %struct._object* %39, %struct._object* %41)
  store i32 %call30, i32* %r, align 4
  %42 = load i32, i32* %r, align 4
  %tobool31 = icmp ne i32 %42, 0
  br i1 %tobool31, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %if.then.27
  %43 = load i32, i32* %r, align 4
  store i32 %43, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.then.27
  br label %if.end.67

if.else.34:                                       ; preds = %if.end.25
  %44 = load %struct._alias*, %struct._alias** %alias, align 8
  %name35 = getelementptr inbounds %struct._alias, %struct._alias* %44, i32 0, i32 0
  %45 = load %struct._object*, %struct._object** %name35, align 8
  store %struct._object* %45, %struct._object** %tmp, align 8
  %46 = load %struct._alias*, %struct._alias** %alias, align 8
  %name37 = getelementptr inbounds %struct._alias, %struct._alias* %46, i32 0, i32 0
  %47 = load %struct._object*, %struct._object** %name37, align 8
  %48 = load %struct._alias*, %struct._alias** %alias, align 8
  %name38 = getelementptr inbounds %struct._alias, %struct._alias* %48, i32 0, i32 0
  %49 = load %struct._object*, %struct._object** %name38, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %50, i32 0, i32 1
  %51 = load i64, i64* %length, align 8
  %call39 = call i64 @PyUnicode_FindChar(%struct._object* %47, i32 46, i64 0, i64 %51, i32 1)
  store i64 %call39, i64* %dot, align 8
  %52 = load i64, i64* %dot, align 8
  %cmp40 = icmp ne i64 %52, -1
  br i1 %cmp40, label %if.then.41, label %if.end.47

if.then.41:                                       ; preds = %if.else.34
  %53 = load %struct._alias*, %struct._alias** %alias, align 8
  %name42 = getelementptr inbounds %struct._alias, %struct._alias* %53, i32 0, i32 0
  %54 = load %struct._object*, %struct._object** %name42, align 8
  %55 = load i64, i64* %dot, align 8
  %call43 = call %struct._object* @PyUnicode_Substring(%struct._object* %54, i64 0, i64 %55)
  store %struct._object* %call43, %struct._object** %tmp, align 8
  %56 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp44 = icmp eq %struct._object* %56, null
  br i1 %cmp44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.41
  store i32 0, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.then.41
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.else.34
  %57 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %58 = load %struct._object*, %struct._object** %tmp, align 8
  %call48 = call i32 @compiler_nameop(%struct.compiler* %57, %struct._object* %58, i32 2)
  store i32 %call48, i32* %r, align 4
  %59 = load i64, i64* %dot, align 8
  %cmp49 = icmp ne i64 %59, -1
  br i1 %cmp49, label %if.then.50, label %if.end.63

if.then.50:                                       ; preds = %if.end.47
  br label %do.body.51

do.body.51:                                       ; preds = %if.then.50
  %60 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp53, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %62, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.51
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.51
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %65(%struct._object* %66)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  br label %if.end.63

if.end.63:                                        ; preds = %do.end.62, %if.end.47
  %67 = load i32, i32* %r, align 4
  %tobool64 = icmp ne i32 %67, 0
  br i1 %tobool64, label %if.end.66, label %if.then.65

if.then.65:                                       ; preds = %if.end.63
  %68 = load i32, i32* %r, align 4
  store i32 %68, i32* %retval
  br label %return

if.end.66:                                        ; preds = %if.end.63
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.end.33
  br label %for.inc

for.inc:                                          ; preds = %if.end.67
  %69 = load i64, i64* %i, align 8
  %inc = add i64 %69, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.65, %if.then.45, %if.then.32, %if.then.24, %if.then.19, %if.then.10, %if.then
  %70 = load i32, i32* %retval
  ret i32 %70
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_from_import(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %names4 = alloca %struct._object*, align 8
  %level = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %alias = alloca %struct._alias*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp75 = alloca %struct._object*, align 8
  %_py_decref_tmp93 = alloca %struct._object*, align 8
  %alias129 = alloca %struct._alias*, align 8
  %store_name = alloca %struct._object*, align 8
  %_py_decref_tmp263 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %0, i32 0, i32 1
  %ImportFrom = bitcast %union.anon.35* %v to %struct.anon.50*
  %names = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom, i32 0, i32 1
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %names, align 8
  %cmp = icmp eq %struct.asdl_seq* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v1 = getelementptr inbounds %struct._stmt, %struct._stmt* %2, i32 0, i32 1
  %ImportFrom2 = bitcast %union.anon.35* %v1 to %struct.anon.50*
  %names3 = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom2, i32 0, i32 1
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %names3, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %3, i32 0, i32 0
  %4 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %4, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %5 = load i64, i64* %n, align 8
  %call = call %struct._object* @PyTuple_New(i64 %5)
  store %struct._object* %call, %struct._object** %names4, align 8
  %6 = load %struct._object*, %struct._object** @compiler_from_import.empty_string, align 8
  %tobool = icmp ne %struct._object* %6, null
  br i1 %tobool, label %if.end.8, label %if.then

if.then:                                          ; preds = %cond.end
  %call5 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.34, i32 0, i32 0))
  store %struct._object* %call5, %struct._object** @compiler_from_import.empty_string, align 8
  %7 = load %struct._object*, %struct._object** @compiler_from_import.empty_string, align 8
  %tobool6 = icmp ne %struct._object* %7, null
  br i1 %tobool6, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %cond.end
  %8 = load %struct._object*, %struct._object** %names4, align 8
  %tobool9 = icmp ne %struct._object* %8, null
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.8
  %9 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v12 = getelementptr inbounds %struct._stmt, %struct._stmt* %9, i32 0, i32 1
  %ImportFrom13 = bitcast %union.anon.35* %v12 to %struct.anon.50*
  %level14 = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom13, i32 0, i32 2
  %10 = load i32, i32* %level14, align 4
  %conv = sext i32 %10 to i64
  %call15 = call %struct._object* @PyLong_FromLong(i64 %conv)
  store %struct._object* %call15, %struct._object** %level, align 8
  %11 = load %struct._object*, %struct._object** %level, align 8
  %tobool16 = icmp ne %struct._object* %11, null
  br i1 %tobool16, label %if.end.22, label %if.then.17

if.then.17:                                       ; preds = %if.end.11
  br label %do.body

do.body:                                          ; preds = %if.then.17
  %12 = load %struct._object*, %struct._object** %names4, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp18 = icmp ne i64 %dec, 0
  br i1 %cmp18, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body
  br label %if.end.21

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.20
  br label %do.end

do.end:                                           ; preds = %if.end.21
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.11
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.22
  %19 = load i64, i64* %i, align 8
  %20 = load i64, i64* %n, align 8
  %cmp23 = icmp slt i64 %19, %20
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i64, i64* %i, align 8
  %22 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v25 = getelementptr inbounds %struct._stmt, %struct._stmt* %22, i32 0, i32 1
  %ImportFrom26 = bitcast %union.anon.35* %v25 to %struct.anon.50*
  %names27 = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom26, i32 0, i32 1
  %23 = load %struct.asdl_seq*, %struct.asdl_seq** %names27, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %23, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %21
  %24 = load i8*, i8** %arrayidx, align 8
  %25 = bitcast i8* %24 to %struct._alias*
  store %struct._alias* %25, %struct._alias** %alias, align 8
  %26 = load %struct._alias*, %struct._alias** %alias, align 8
  %name = getelementptr inbounds %struct._alias, %struct._alias* %26, i32 0, i32 0
  %27 = load %struct._object*, %struct._object** %name, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt28, align 8
  %inc = add i64 %28, 1
  store i64 %inc, i64* %ob_refcnt28, align 8
  %29 = load %struct._alias*, %struct._alias** %alias, align 8
  %name29 = getelementptr inbounds %struct._alias, %struct._alias* %29, i32 0, i32 0
  %30 = load %struct._object*, %struct._object** %name29, align 8
  %31 = load i64, i64* %i, align 8
  %32 = load %struct._object*, %struct._object** %names4, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %33, i32 0, i32 1
  %arrayidx30 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %31
  store %struct._object* %30, %struct._object** %arrayidx30, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %34 = load i64, i64* %i, align 8
  %inc31 = add i64 %34, 1
  store i64 %inc31, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %lineno = getelementptr inbounds %struct._stmt, %struct._stmt* %35, i32 0, i32 2
  %36 = load i32, i32* %lineno, align 4
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_future = getelementptr inbounds %struct.compiler, %struct.compiler* %37, i32 0, i32 2
  %38 = load %struct.PyFutureFeatures*, %struct.PyFutureFeatures** %c_future, align 8
  %ff_lineno = getelementptr inbounds %struct.PyFutureFeatures, %struct.PyFutureFeatures* %38, i32 0, i32 1
  %39 = load i32, i32* %ff_lineno, align 4
  %cmp32 = icmp sgt i32 %36, %39
  br i1 %cmp32, label %land.lhs.true, label %if.end.69

land.lhs.true:                                    ; preds = %for.end
  %40 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v34 = getelementptr inbounds %struct._stmt, %struct._stmt* %40, i32 0, i32 1
  %ImportFrom35 = bitcast %union.anon.35* %v34 to %struct.anon.50*
  %module = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom35, i32 0, i32 0
  %41 = load %struct._object*, %struct._object** %module, align 8
  %tobool36 = icmp ne %struct._object* %41, null
  br i1 %tobool36, label %land.lhs.true.37, label %if.end.69

land.lhs.true.37:                                 ; preds = %land.lhs.true
  %42 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v38 = getelementptr inbounds %struct._stmt, %struct._stmt* %42, i32 0, i32 1
  %ImportFrom39 = bitcast %union.anon.35* %v38 to %struct.anon.50*
  %module40 = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom39, i32 0, i32 0
  %43 = load %struct._object*, %struct._object** %module40, align 8
  %call41 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %43, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.35, i32 0, i32 0))
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.end.69, label %if.then.43

if.then.43:                                       ; preds = %land.lhs.true.37
  br label %do.body.44

do.body.44:                                       ; preds = %if.then.43
  %44 = load %struct._object*, %struct._object** %level, align 8
  store %struct._object* %44, %struct._object** %_py_decref_tmp45, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0
  %46 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %46, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.44
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.44
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %49(%struct._object* %50)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  br label %do.body.56

do.body.56:                                       ; preds = %do.end.55
  %51 = load %struct._object*, %struct._object** %names4, align 8
  store %struct._object* %51, %struct._object** %_py_decref_tmp57, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %53, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %do.body.56
  br label %if.end.66

if.else.63:                                       ; preds = %do.body.56
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %56(%struct._object* %57)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  %58 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call68 = call i32 @compiler_error(%struct.compiler* %58, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.36, i32 0, i32 0))
  store i32 %call68, i32* %retval
  br label %return

if.end.69:                                        ; preds = %land.lhs.true.37, %land.lhs.true, %for.end
  %59 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %60 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %60, i32 0, i32 7
  %61 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %61, i32 0, i32 4
  %62 = load %struct._object*, %struct._object** %u_consts, align 8
  %63 = load %struct._object*, %struct._object** %level, align 8
  %call70 = call i32 @compiler_addop_o(%struct.compiler* %59, i32 100, %struct._object* %62, %struct._object* %63)
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.end.73, label %if.then.72

if.then.72:                                       ; preds = %if.end.69
  store i32 0, i32* %retval
  br label %return

if.end.73:                                        ; preds = %if.end.69
  br label %do.body.74

do.body.74:                                       ; preds = %if.end.73
  %64 = load %struct._object*, %struct._object** %level, align 8
  store %struct._object* %64, %struct._object** %_py_decref_tmp75, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_refcnt76 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 0
  %66 = load i64, i64* %ob_refcnt76, align 8
  %dec77 = add i64 %66, -1
  store i64 %dec77, i64* %ob_refcnt76, align 8
  %cmp78 = icmp ne i64 %dec77, 0
  br i1 %cmp78, label %if.then.80, label %if.else.81

if.then.80:                                       ; preds = %do.body.74
  br label %if.end.84

if.else.81:                                       ; preds = %do.body.74
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_type82 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type82, align 8
  %tp_dealloc83 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 4
  %69 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc83, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  call void %69(%struct._object* %70)
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.81, %if.then.80
  br label %do.end.85

do.end.85:                                        ; preds = %if.end.84
  %71 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %72 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u86 = getelementptr inbounds %struct.compiler, %struct.compiler* %72, i32 0, i32 7
  %73 = load %struct.compiler_unit*, %struct.compiler_unit** %u86, align 8
  %u_consts87 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %73, i32 0, i32 4
  %74 = load %struct._object*, %struct._object** %u_consts87, align 8
  %75 = load %struct._object*, %struct._object** %names4, align 8
  %call88 = call i32 @compiler_addop_o(%struct.compiler* %71, i32 100, %struct._object* %74, %struct._object* %75)
  %tobool89 = icmp ne i32 %call88, 0
  br i1 %tobool89, label %if.end.91, label %if.then.90

if.then.90:                                       ; preds = %do.end.85
  store i32 0, i32* %retval
  br label %return

if.end.91:                                        ; preds = %do.end.85
  br label %do.body.92

do.body.92:                                       ; preds = %if.end.91
  %76 = load %struct._object*, %struct._object** %names4, align 8
  store %struct._object* %76, %struct._object** %_py_decref_tmp93, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  %ob_refcnt94 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0
  %78 = load i64, i64* %ob_refcnt94, align 8
  %dec95 = add i64 %78, -1
  store i64 %dec95, i64* %ob_refcnt94, align 8
  %cmp96 = icmp ne i64 %dec95, 0
  br i1 %cmp96, label %if.then.98, label %if.else.99

if.then.98:                                       ; preds = %do.body.92
  br label %if.end.102

if.else.99:                                       ; preds = %do.body.92
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  %ob_type100 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type100, align 8
  %tp_dealloc101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc101, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  call void %81(%struct._object* %82)
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.99, %if.then.98
  br label %do.end.103

do.end.103:                                       ; preds = %if.end.102
  %83 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v104 = getelementptr inbounds %struct._stmt, %struct._stmt* %83, i32 0, i32 1
  %ImportFrom105 = bitcast %union.anon.35* %v104 to %struct.anon.50*
  %module106 = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom105, i32 0, i32 0
  %84 = load %struct._object*, %struct._object** %module106, align 8
  %tobool107 = icmp ne %struct._object* %84, null
  br i1 %tobool107, label %if.then.108, label %if.else.117

if.then.108:                                      ; preds = %do.end.103
  %85 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %86 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u109 = getelementptr inbounds %struct.compiler, %struct.compiler* %86, i32 0, i32 7
  %87 = load %struct.compiler_unit*, %struct.compiler_unit** %u109, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %87, i32 0, i32 5
  %88 = load %struct._object*, %struct._object** %u_names, align 8
  %89 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v110 = getelementptr inbounds %struct._stmt, %struct._stmt* %89, i32 0, i32 1
  %ImportFrom111 = bitcast %union.anon.35* %v110 to %struct.anon.50*
  %module112 = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom111, i32 0, i32 0
  %90 = load %struct._object*, %struct._object** %module112, align 8
  %call113 = call i32 @compiler_addop_name(%struct.compiler* %85, i32 108, %struct._object* %88, %struct._object* %90)
  %tobool114 = icmp ne i32 %call113, 0
  br i1 %tobool114, label %if.end.116, label %if.then.115

if.then.115:                                      ; preds = %if.then.108
  store i32 0, i32* %retval
  br label %return

if.end.116:                                       ; preds = %if.then.108
  br label %if.end.124

if.else.117:                                      ; preds = %do.end.103
  %91 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %92 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u118 = getelementptr inbounds %struct.compiler, %struct.compiler* %92, i32 0, i32 7
  %93 = load %struct.compiler_unit*, %struct.compiler_unit** %u118, align 8
  %u_names119 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %93, i32 0, i32 5
  %94 = load %struct._object*, %struct._object** %u_names119, align 8
  %95 = load %struct._object*, %struct._object** @compiler_from_import.empty_string, align 8
  %call120 = call i32 @compiler_addop_name(%struct.compiler* %91, i32 108, %struct._object* %94, %struct._object* %95)
  %tobool121 = icmp ne i32 %call120, 0
  br i1 %tobool121, label %if.end.123, label %if.then.122

if.then.122:                                      ; preds = %if.else.117
  store i32 0, i32* %retval
  br label %return

if.end.123:                                       ; preds = %if.else.117
  br label %if.end.124

if.end.124:                                       ; preds = %if.end.123, %if.end.116
  store i64 0, i64* %i, align 8
  br label %for.cond.125

for.cond.125:                                     ; preds = %for.inc.275, %if.end.124
  %96 = load i64, i64* %i, align 8
  %97 = load i64, i64* %n, align 8
  %cmp126 = icmp slt i64 %96, %97
  br i1 %cmp126, label %for.body.128, label %for.end.277

for.body.128:                                     ; preds = %for.cond.125
  %98 = load i64, i64* %i, align 8
  %99 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v130 = getelementptr inbounds %struct._stmt, %struct._stmt* %99, i32 0, i32 1
  %ImportFrom131 = bitcast %union.anon.35* %v130 to %struct.anon.50*
  %names132 = getelementptr inbounds %struct.anon.50, %struct.anon.50* %ImportFrom131, i32 0, i32 1
  %100 = load %struct.asdl_seq*, %struct.asdl_seq** %names132, align 8
  %elements133 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %100, i32 0, i32 1
  %arrayidx134 = getelementptr [1 x i8*], [1 x i8*]* %elements133, i32 0, i64 %98
  %101 = load i8*, i8** %arrayidx134, align 8
  %102 = bitcast i8* %101 to %struct._alias*
  store %struct._alias* %102, %struct._alias** %alias129, align 8
  %103 = load i64, i64* %i, align 8
  %cmp135 = icmp eq i64 %103, 0
  br i1 %cmp135, label %land.lhs.true.137, label %if.end.246

land.lhs.true.137:                                ; preds = %for.body.128
  %104 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name138 = getelementptr inbounds %struct._alias, %struct._alias* %104, i32 0, i32 0
  %105 = load %struct._object*, %struct._object** %name138, align 8
  %106 = bitcast %struct._object* %105 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %106, i32 0, i32 3
  %107 = bitcast %struct.anon* %state to i32*
  %bf.load = load i32, i32* %107, align 4
  %bf.lshr = lshr i32 %bf.load, 2
  %bf.clear = and i32 %bf.lshr, 7
  %cmp139 = icmp eq i32 %bf.clear, 1
  br i1 %cmp139, label %cond.true.141, label %cond.false.168

cond.true.141:                                    ; preds = %land.lhs.true.137
  %108 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name142 = getelementptr inbounds %struct._alias, %struct._alias* %108, i32 0, i32 0
  %109 = load %struct._object*, %struct._object** %name142, align 8
  %110 = bitcast %struct._object* %109 to %struct.PyASCIIObject*
  %state143 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %110, i32 0, i32 3
  %111 = bitcast %struct.anon* %state143 to i32*
  %bf.load144 = load i32, i32* %111, align 4
  %bf.lshr145 = lshr i32 %bf.load144, 5
  %bf.clear146 = and i32 %bf.lshr145, 1
  %tobool147 = icmp ne i32 %bf.clear146, 0
  br i1 %tobool147, label %cond.true.148, label %cond.false.162

cond.true.148:                                    ; preds = %cond.true.141
  %112 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name149 = getelementptr inbounds %struct._alias, %struct._alias* %112, i32 0, i32 0
  %113 = load %struct._object*, %struct._object** %name149, align 8
  %114 = bitcast %struct._object* %113 to %struct.PyASCIIObject*
  %state150 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %114, i32 0, i32 3
  %115 = bitcast %struct.anon* %state150 to i32*
  %bf.load151 = load i32, i32* %115, align 4
  %bf.lshr152 = lshr i32 %bf.load151, 6
  %bf.clear153 = and i32 %bf.lshr152, 1
  %tobool154 = icmp ne i32 %bf.clear153, 0
  br i1 %tobool154, label %cond.true.155, label %cond.false.157

cond.true.155:                                    ; preds = %cond.true.148
  %116 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name156 = getelementptr inbounds %struct._alias, %struct._alias* %116, i32 0, i32 0
  %117 = load %struct._object*, %struct._object** %name156, align 8
  %118 = bitcast %struct._object* %117 to %struct.PyASCIIObject*
  %add.ptr = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %118, i64 1
  %119 = bitcast %struct.PyASCIIObject* %add.ptr to i8*
  br label %cond.end.160

cond.false.157:                                   ; preds = %cond.true.148
  %120 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name158 = getelementptr inbounds %struct._alias, %struct._alias* %120, i32 0, i32 0
  %121 = load %struct._object*, %struct._object** %name158, align 8
  %122 = bitcast %struct._object* %121 to %struct.PyCompactUnicodeObject*
  %add.ptr159 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %122, i64 1
  %123 = bitcast %struct.PyCompactUnicodeObject* %add.ptr159 to i8*
  br label %cond.end.160

cond.end.160:                                     ; preds = %cond.false.157, %cond.true.155
  %cond161 = phi i8* [ %119, %cond.true.155 ], [ %123, %cond.false.157 ]
  br label %cond.end.164

cond.false.162:                                   ; preds = %cond.true.141
  %124 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name163 = getelementptr inbounds %struct._alias, %struct._alias* %124, i32 0, i32 0
  %125 = load %struct._object*, %struct._object** %name163, align 8
  %126 = bitcast %struct._object* %125 to %struct.PyUnicodeObject*
  %data = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %126, i32 0, i32 1
  %any = bitcast %union.anon* %data to i8**
  %127 = load i8*, i8** %any, align 8
  br label %cond.end.164

cond.end.164:                                     ; preds = %cond.false.162, %cond.end.160
  %cond165 = phi i8* [ %cond161, %cond.end.160 ], [ %127, %cond.false.162 ]
  %arrayidx166 = getelementptr i8, i8* %cond165, i64 0
  %128 = load i8, i8* %arrayidx166, align 1
  %conv167 = zext i8 %128 to i32
  br label %cond.end.237

cond.false.168:                                   ; preds = %land.lhs.true.137
  %129 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name169 = getelementptr inbounds %struct._alias, %struct._alias* %129, i32 0, i32 0
  %130 = load %struct._object*, %struct._object** %name169, align 8
  %131 = bitcast %struct._object* %130 to %struct.PyASCIIObject*
  %state170 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %131, i32 0, i32 3
  %132 = bitcast %struct.anon* %state170 to i32*
  %bf.load171 = load i32, i32* %132, align 4
  %bf.lshr172 = lshr i32 %bf.load171, 2
  %bf.clear173 = and i32 %bf.lshr172, 7
  %cmp174 = icmp eq i32 %bf.clear173, 2
  br i1 %cmp174, label %cond.true.176, label %cond.false.206

cond.true.176:                                    ; preds = %cond.false.168
  %133 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name177 = getelementptr inbounds %struct._alias, %struct._alias* %133, i32 0, i32 0
  %134 = load %struct._object*, %struct._object** %name177, align 8
  %135 = bitcast %struct._object* %134 to %struct.PyASCIIObject*
  %state178 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %135, i32 0, i32 3
  %136 = bitcast %struct.anon* %state178 to i32*
  %bf.load179 = load i32, i32* %136, align 4
  %bf.lshr180 = lshr i32 %bf.load179, 5
  %bf.clear181 = and i32 %bf.lshr180, 1
  %tobool182 = icmp ne i32 %bf.clear181, 0
  br i1 %tobool182, label %cond.true.183, label %cond.false.198

cond.true.183:                                    ; preds = %cond.true.176
  %137 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name184 = getelementptr inbounds %struct._alias, %struct._alias* %137, i32 0, i32 0
  %138 = load %struct._object*, %struct._object** %name184, align 8
  %139 = bitcast %struct._object* %138 to %struct.PyASCIIObject*
  %state185 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %139, i32 0, i32 3
  %140 = bitcast %struct.anon* %state185 to i32*
  %bf.load186 = load i32, i32* %140, align 4
  %bf.lshr187 = lshr i32 %bf.load186, 6
  %bf.clear188 = and i32 %bf.lshr187, 1
  %tobool189 = icmp ne i32 %bf.clear188, 0
  br i1 %tobool189, label %cond.true.190, label %cond.false.193

cond.true.190:                                    ; preds = %cond.true.183
  %141 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name191 = getelementptr inbounds %struct._alias, %struct._alias* %141, i32 0, i32 0
  %142 = load %struct._object*, %struct._object** %name191, align 8
  %143 = bitcast %struct._object* %142 to %struct.PyASCIIObject*
  %add.ptr192 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %143, i64 1
  %144 = bitcast %struct.PyASCIIObject* %add.ptr192 to i8*
  br label %cond.end.196

cond.false.193:                                   ; preds = %cond.true.183
  %145 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name194 = getelementptr inbounds %struct._alias, %struct._alias* %145, i32 0, i32 0
  %146 = load %struct._object*, %struct._object** %name194, align 8
  %147 = bitcast %struct._object* %146 to %struct.PyCompactUnicodeObject*
  %add.ptr195 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %147, i64 1
  %148 = bitcast %struct.PyCompactUnicodeObject* %add.ptr195 to i8*
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.false.193, %cond.true.190
  %cond197 = phi i8* [ %144, %cond.true.190 ], [ %148, %cond.false.193 ]
  br label %cond.end.202

cond.false.198:                                   ; preds = %cond.true.176
  %149 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name199 = getelementptr inbounds %struct._alias, %struct._alias* %149, i32 0, i32 0
  %150 = load %struct._object*, %struct._object** %name199, align 8
  %151 = bitcast %struct._object* %150 to %struct.PyUnicodeObject*
  %data200 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %151, i32 0, i32 1
  %any201 = bitcast %union.anon* %data200 to i8**
  %152 = load i8*, i8** %any201, align 8
  br label %cond.end.202

cond.end.202:                                     ; preds = %cond.false.198, %cond.end.196
  %cond203 = phi i8* [ %cond197, %cond.end.196 ], [ %152, %cond.false.198 ]
  %153 = bitcast i8* %cond203 to i16*
  %arrayidx204 = getelementptr i16, i16* %153, i64 0
  %154 = load i16, i16* %arrayidx204, align 2
  %conv205 = zext i16 %154 to i32
  br label %cond.end.235

cond.false.206:                                   ; preds = %cond.false.168
  %155 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name207 = getelementptr inbounds %struct._alias, %struct._alias* %155, i32 0, i32 0
  %156 = load %struct._object*, %struct._object** %name207, align 8
  %157 = bitcast %struct._object* %156 to %struct.PyASCIIObject*
  %state208 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %157, i32 0, i32 3
  %158 = bitcast %struct.anon* %state208 to i32*
  %bf.load209 = load i32, i32* %158, align 4
  %bf.lshr210 = lshr i32 %bf.load209, 5
  %bf.clear211 = and i32 %bf.lshr210, 1
  %tobool212 = icmp ne i32 %bf.clear211, 0
  br i1 %tobool212, label %cond.true.213, label %cond.false.228

cond.true.213:                                    ; preds = %cond.false.206
  %159 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name214 = getelementptr inbounds %struct._alias, %struct._alias* %159, i32 0, i32 0
  %160 = load %struct._object*, %struct._object** %name214, align 8
  %161 = bitcast %struct._object* %160 to %struct.PyASCIIObject*
  %state215 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %161, i32 0, i32 3
  %162 = bitcast %struct.anon* %state215 to i32*
  %bf.load216 = load i32, i32* %162, align 4
  %bf.lshr217 = lshr i32 %bf.load216, 6
  %bf.clear218 = and i32 %bf.lshr217, 1
  %tobool219 = icmp ne i32 %bf.clear218, 0
  br i1 %tobool219, label %cond.true.220, label %cond.false.223

cond.true.220:                                    ; preds = %cond.true.213
  %163 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name221 = getelementptr inbounds %struct._alias, %struct._alias* %163, i32 0, i32 0
  %164 = load %struct._object*, %struct._object** %name221, align 8
  %165 = bitcast %struct._object* %164 to %struct.PyASCIIObject*
  %add.ptr222 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %165, i64 1
  %166 = bitcast %struct.PyASCIIObject* %add.ptr222 to i8*
  br label %cond.end.226

cond.false.223:                                   ; preds = %cond.true.213
  %167 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name224 = getelementptr inbounds %struct._alias, %struct._alias* %167, i32 0, i32 0
  %168 = load %struct._object*, %struct._object** %name224, align 8
  %169 = bitcast %struct._object* %168 to %struct.PyCompactUnicodeObject*
  %add.ptr225 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %169, i64 1
  %170 = bitcast %struct.PyCompactUnicodeObject* %add.ptr225 to i8*
  br label %cond.end.226

cond.end.226:                                     ; preds = %cond.false.223, %cond.true.220
  %cond227 = phi i8* [ %166, %cond.true.220 ], [ %170, %cond.false.223 ]
  br label %cond.end.232

cond.false.228:                                   ; preds = %cond.false.206
  %171 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name229 = getelementptr inbounds %struct._alias, %struct._alias* %171, i32 0, i32 0
  %172 = load %struct._object*, %struct._object** %name229, align 8
  %173 = bitcast %struct._object* %172 to %struct.PyUnicodeObject*
  %data230 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %173, i32 0, i32 1
  %any231 = bitcast %union.anon* %data230 to i8**
  %174 = load i8*, i8** %any231, align 8
  br label %cond.end.232

cond.end.232:                                     ; preds = %cond.false.228, %cond.end.226
  %cond233 = phi i8* [ %cond227, %cond.end.226 ], [ %174, %cond.false.228 ]
  %175 = bitcast i8* %cond233 to i32*
  %arrayidx234 = getelementptr i32, i32* %175, i64 0
  %176 = load i32, i32* %arrayidx234, align 4
  br label %cond.end.235

cond.end.235:                                     ; preds = %cond.end.232, %cond.end.202
  %cond236 = phi i32 [ %conv205, %cond.end.202 ], [ %176, %cond.end.232 ]
  br label %cond.end.237

cond.end.237:                                     ; preds = %cond.end.235, %cond.end.164
  %cond238 = phi i32 [ %conv167, %cond.end.164 ], [ %cond236, %cond.end.235 ]
  %cmp239 = icmp eq i32 %cond238, 42
  br i1 %cmp239, label %if.then.241, label %if.end.246

if.then.241:                                      ; preds = %cond.end.237
  %177 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call242 = call i32 @compiler_addop(%struct.compiler* %177, i32 84)
  %tobool243 = icmp ne i32 %call242, 0
  br i1 %tobool243, label %if.end.245, label %if.then.244

if.then.244:                                      ; preds = %if.then.241
  store i32 0, i32* %retval
  br label %return

if.end.245:                                       ; preds = %if.then.241
  store i32 1, i32* %retval
  br label %return

if.end.246:                                       ; preds = %cond.end.237, %for.body.128
  %178 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %179 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u247 = getelementptr inbounds %struct.compiler, %struct.compiler* %179, i32 0, i32 7
  %180 = load %struct.compiler_unit*, %struct.compiler_unit** %u247, align 8
  %u_names248 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %180, i32 0, i32 5
  %181 = load %struct._object*, %struct._object** %u_names248, align 8
  %182 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name249 = getelementptr inbounds %struct._alias, %struct._alias* %182, i32 0, i32 0
  %183 = load %struct._object*, %struct._object** %name249, align 8
  %call250 = call i32 @compiler_addop_name(%struct.compiler* %178, i32 109, %struct._object* %181, %struct._object* %183)
  %tobool251 = icmp ne i32 %call250, 0
  br i1 %tobool251, label %if.end.253, label %if.then.252

if.then.252:                                      ; preds = %if.end.246
  store i32 0, i32* %retval
  br label %return

if.end.253:                                       ; preds = %if.end.246
  %184 = load %struct._alias*, %struct._alias** %alias129, align 8
  %name254 = getelementptr inbounds %struct._alias, %struct._alias* %184, i32 0, i32 0
  %185 = load %struct._object*, %struct._object** %name254, align 8
  store %struct._object* %185, %struct._object** %store_name, align 8
  %186 = load %struct._alias*, %struct._alias** %alias129, align 8
  %asname = getelementptr inbounds %struct._alias, %struct._alias* %186, i32 0, i32 1
  %187 = load %struct._object*, %struct._object** %asname, align 8
  %tobool255 = icmp ne %struct._object* %187, null
  br i1 %tobool255, label %if.then.256, label %if.end.258

if.then.256:                                      ; preds = %if.end.253
  %188 = load %struct._alias*, %struct._alias** %alias129, align 8
  %asname257 = getelementptr inbounds %struct._alias, %struct._alias* %188, i32 0, i32 1
  %189 = load %struct._object*, %struct._object** %asname257, align 8
  store %struct._object* %189, %struct._object** %store_name, align 8
  br label %if.end.258

if.end.258:                                       ; preds = %if.then.256, %if.end.253
  %190 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %191 = load %struct._object*, %struct._object** %store_name, align 8
  %call259 = call i32 @compiler_nameop(%struct.compiler* %190, %struct._object* %191, i32 2)
  %tobool260 = icmp ne i32 %call259, 0
  br i1 %tobool260, label %if.end.274, label %if.then.261

if.then.261:                                      ; preds = %if.end.258
  br label %do.body.262

do.body.262:                                      ; preds = %if.then.261
  %192 = load %struct._object*, %struct._object** %names4, align 8
  store %struct._object* %192, %struct._object** %_py_decref_tmp263, align 8
  %193 = load %struct._object*, %struct._object** %_py_decref_tmp263, align 8
  %ob_refcnt264 = getelementptr inbounds %struct._object, %struct._object* %193, i32 0, i32 0
  %194 = load i64, i64* %ob_refcnt264, align 8
  %dec265 = add i64 %194, -1
  store i64 %dec265, i64* %ob_refcnt264, align 8
  %cmp266 = icmp ne i64 %dec265, 0
  br i1 %cmp266, label %if.then.268, label %if.else.269

if.then.268:                                      ; preds = %do.body.262
  br label %if.end.272

if.else.269:                                      ; preds = %do.body.262
  %195 = load %struct._object*, %struct._object** %_py_decref_tmp263, align 8
  %ob_type270 = getelementptr inbounds %struct._object, %struct._object* %195, i32 0, i32 1
  %196 = load %struct._typeobject*, %struct._typeobject** %ob_type270, align 8
  %tp_dealloc271 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %196, i32 0, i32 4
  %197 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc271, align 8
  %198 = load %struct._object*, %struct._object** %_py_decref_tmp263, align 8
  call void %197(%struct._object* %198)
  br label %if.end.272

if.end.272:                                       ; preds = %if.else.269, %if.then.268
  br label %do.end.273

do.end.273:                                       ; preds = %if.end.272
  store i32 0, i32* %retval
  br label %return

if.end.274:                                       ; preds = %if.end.258
  br label %for.inc.275

for.inc.275:                                      ; preds = %if.end.274
  %199 = load i64, i64* %i, align 8
  %inc276 = add i64 %199, 1
  store i64 %inc276, i64* %i, align 8
  br label %for.cond.125

for.end.277:                                      ; preds = %for.cond.125
  %200 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call278 = call i32 @compiler_addop(%struct.compiler* %200, i32 1)
  %tobool279 = icmp ne i32 %call278, 0
  br i1 %tobool279, label %if.end.281, label %if.then.280

if.then.280:                                      ; preds = %for.end.277
  store i32 0, i32* %retval
  br label %return

if.end.281:                                       ; preds = %for.end.277
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.281, %if.then.280, %do.end.273, %if.then.252, %if.end.245, %if.then.244, %if.then.122, %if.then.115, %if.then.90, %if.then.72, %do.end.67, %do.end, %if.then.10, %if.then.7
  %201 = load i32, i32* %retval
  ret i32 %201
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_in_loop(%struct.compiler* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %i = alloca i32, align 4
  %u = alloca %struct.compiler_unit*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  store %struct.compiler_unit* %1, %struct.compiler_unit** %u, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_nfblocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %3, i32 0, i32 14
  %4 = load i32, i32* %u_nfblocks, align 4
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_fblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %6, i32 0, i32 15
  %arrayidx = getelementptr [20 x %struct.fblockinfo], [20 x %struct.fblockinfo]* %u_fblock, i32 0, i64 %idxprom
  %fb_type = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %arrayidx, i32 0, i32 0
  %7 = load i32, i32* %fb_type, align 4
  %cmp2 = icmp eq i32 %7, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_continue(%struct.compiler* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %i = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_nfblocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 14
  %2 = load i32, i32* %u_nfblocks, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call i32 @compiler_error(%struct.compiler* %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @compiler_continue.LOOP_ERROR_MSG, i32 0, i32 0))
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %4, i32 0, i32 7
  %5 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_nfblocks2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %5, i32 0, i32 14
  %6 = load i32, i32* %u_nfblocks2, align 4
  %sub = sub i32 %6, 1
  store i32 %sub, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u3 = getelementptr inbounds %struct.compiler, %struct.compiler* %8, i32 0, i32 7
  %9 = load %struct.compiler_unit*, %struct.compiler_unit** %u3, align 8
  %u_fblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %9, i32 0, i32 15
  %arrayidx = getelementptr [20 x %struct.fblockinfo], [20 x %struct.fblockinfo]* %u_fblock, i32 0, i64 %idxprom
  %fb_type = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %arrayidx, i32 0, i32 0
  %10 = load i32, i32* %fb_type, align 4
  switch i32 %10, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.12
    i32 2, label %sw.bb.12
    i32 3, label %sw.bb.41
  ]

sw.bb:                                            ; preds = %if.end
  %11 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %12 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %12 to i64
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u5 = getelementptr inbounds %struct.compiler, %struct.compiler* %13, i32 0, i32 7
  %14 = load %struct.compiler_unit*, %struct.compiler_unit** %u5, align 8
  %u_fblock6 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %14, i32 0, i32 15
  %arrayidx7 = getelementptr [20 x %struct.fblockinfo], [20 x %struct.fblockinfo]* %u_fblock6, i32 0, i64 %idxprom4
  %fb_block = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %arrayidx7, i32 0, i32 1
  %15 = load %struct.basicblock_*, %struct.basicblock_** %fb_block, align 8
  %call8 = call i32 @compiler_addop_j(%struct.compiler* %11, i32 113, %struct.basicblock_* %15, i32 1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %sw.bb
  br label %sw.epilog

sw.bb.12:                                         ; preds = %if.end, %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end.27, %sw.bb.12
  %16 = load i32, i32* %i, align 4
  %dec = add i32 %16, -1
  store i32 %dec, i32* %i, align 4
  %cmp = icmp sge i32 %dec, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %17 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %17 to i64
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u14 = getelementptr inbounds %struct.compiler, %struct.compiler* %18, i32 0, i32 7
  %19 = load %struct.compiler_unit*, %struct.compiler_unit** %u14, align 8
  %u_fblock15 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %19, i32 0, i32 15
  %arrayidx16 = getelementptr [20 x %struct.fblockinfo], [20 x %struct.fblockinfo]* %u_fblock15, i32 0, i64 %idxprom13
  %fb_type17 = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %arrayidx16, i32 0, i32 0
  %20 = load i32, i32* %fb_type17, align 4
  %cmp18 = icmp ne i32 %20, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %21 = phi i1 [ false, %while.cond ], [ %cmp18, %land.rhs ]
  br i1 %21, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %22 = load i32, i32* %i, align 4
  %idxprom19 = sext i32 %22 to i64
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u20 = getelementptr inbounds %struct.compiler, %struct.compiler* %23, i32 0, i32 7
  %24 = load %struct.compiler_unit*, %struct.compiler_unit** %u20, align 8
  %u_fblock21 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %24, i32 0, i32 15
  %arrayidx22 = getelementptr [20 x %struct.fblockinfo], [20 x %struct.fblockinfo]* %u_fblock21, i32 0, i64 %idxprom19
  %fb_type23 = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %arrayidx22, i32 0, i32 0
  %25 = load i32, i32* %fb_type23, align 4
  %cmp24 = icmp eq i32 %25, 3
  br i1 %cmp24, label %if.then.25, label %if.end.27

if.then.25:                                       ; preds = %while.body
  %26 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call26 = call i32 @compiler_error(%struct.compiler* %26, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @compiler_continue.IN_FINALLY_ERROR_MSG, i32 0, i32 0))
  store i32 %call26, i32* %retval
  br label %return

if.end.27:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %land.end
  %27 = load i32, i32* %i, align 4
  %cmp28 = icmp eq i32 %27, -1
  br i1 %cmp28, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %while.end
  %28 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call30 = call i32 @compiler_error(%struct.compiler* %28, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @compiler_continue.LOOP_ERROR_MSG, i32 0, i32 0))
  store i32 %call30, i32* %retval
  br label %return

if.end.31:                                        ; preds = %while.end
  %29 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %30 to i64
  %31 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u33 = getelementptr inbounds %struct.compiler, %struct.compiler* %31, i32 0, i32 7
  %32 = load %struct.compiler_unit*, %struct.compiler_unit** %u33, align 8
  %u_fblock34 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %32, i32 0, i32 15
  %arrayidx35 = getelementptr [20 x %struct.fblockinfo], [20 x %struct.fblockinfo]* %u_fblock34, i32 0, i64 %idxprom32
  %fb_block36 = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %arrayidx35, i32 0, i32 1
  %33 = load %struct.basicblock_*, %struct.basicblock_** %fb_block36, align 8
  %call37 = call i32 @compiler_addop_j(%struct.compiler* %29, i32 119, %struct.basicblock_* %33, i32 1)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.end.31
  store i32 0, i32* %retval
  br label %return

if.end.40:                                        ; preds = %if.end.31
  br label %sw.epilog

sw.bb.41:                                         ; preds = %if.end
  %34 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call42 = call i32 @compiler_error(%struct.compiler* %34, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @compiler_continue.IN_FINALLY_ERROR_MSG, i32 0, i32 0))
  store i32 %call42, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end, %if.end.40, %if.end.11
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb.41, %if.then.39, %if.then.29, %if.then.25, %if.then.10, %if.then
  %35 = load i32, i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_with(%struct.compiler* %c, %struct._stmt* %s, i32 %pos) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %pos.addr = alloca i32, align 4
  %block = alloca %struct.basicblock_*, align 8
  %finally = alloca %struct.basicblock_*, align 8
  %item = alloca %struct._withitem*, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load i32, i32* %pos.addr, align 4
  %idxprom = sext i32 %0 to i64
  %1 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %1, i32 0, i32 1
  %With = bitcast %union.anon.35* %v to %struct.anon.45*
  %items = getelementptr inbounds %struct.anon.45, %struct.anon.45* %With, i32 0, i32 0
  %2 = load %struct.asdl_seq*, %struct.asdl_seq** %items, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %2, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  %4 = bitcast i8* %3 to %struct._withitem*
  store %struct._withitem* %4, %struct._withitem** %item, align 8
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %5)
  store %struct.basicblock_* %call, %struct.basicblock_** %block, align 8
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call1 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %6)
  store %struct.basicblock_* %call1, %struct.basicblock_** %finally, align 8
  %7 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %tobool = icmp ne %struct.basicblock_* %7, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct.basicblock_*, %struct.basicblock_** %finally, align 8
  %tobool2 = icmp ne %struct.basicblock_* %8, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %10 = load %struct._withitem*, %struct._withitem** %item, align 8
  %context_expr = getelementptr inbounds %struct._withitem, %struct._withitem* %10, i32 0, i32 0
  %11 = load %struct._expr*, %struct._expr** %context_expr, align 8
  %call3 = call i32 @compiler_visit_expr(%struct.compiler* %9, %struct._expr* %11)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %13 = load %struct.basicblock_*, %struct.basicblock_** %finally, align 8
  %call7 = call i32 @compiler_addop_j(%struct.compiler* %12, i32 143, %struct.basicblock_* %13, i32 0)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.6
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.6
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %15 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %call11 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %14, %struct.basicblock_* %15)
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %call12 = call i32 @compiler_push_fblock(%struct.compiler* %16, i32 2, %struct.basicblock_* %17)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %if.end.10
  store i32 0, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.10
  %18 = load %struct._withitem*, %struct._withitem** %item, align 8
  %optional_vars = getelementptr inbounds %struct._withitem, %struct._withitem* %18, i32 0, i32 1
  %19 = load %struct._expr*, %struct._expr** %optional_vars, align 8
  %tobool16 = icmp ne %struct._expr* %19, null
  br i1 %tobool16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.end.15
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %21 = load %struct._withitem*, %struct._withitem** %item, align 8
  %optional_vars18 = getelementptr inbounds %struct._withitem, %struct._withitem* %21, i32 0, i32 1
  %22 = load %struct._expr*, %struct._expr** %optional_vars18, align 8
  %call19 = call i32 @compiler_visit_expr(%struct.compiler* %20, %struct._expr* %22)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %if.then.17
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.then.17
  br label %if.end.27

if.else:                                          ; preds = %if.end.15
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call23 = call i32 @compiler_addop(%struct.compiler* %23, i32 1)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.else
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.22
  %24 = load i32, i32* %pos.addr, align 4
  %inc = add i32 %24, 1
  store i32 %inc, i32* %pos.addr, align 4
  %25 = load i32, i32* %pos.addr, align 4
  %conv = sext i32 %25 to i64
  %26 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v28 = getelementptr inbounds %struct._stmt, %struct._stmt* %26, i32 0, i32 1
  %With29 = bitcast %union.anon.35* %v28 to %struct.anon.45*
  %items30 = getelementptr inbounds %struct.anon.45, %struct.anon.45* %With29, i32 0, i32 0
  %27 = load %struct.asdl_seq*, %struct.asdl_seq** %items30, align 8
  %cmp = icmp eq %struct.asdl_seq* %27, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.27
  br label %cond.end

cond.false:                                       ; preds = %if.end.27
  %28 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v32 = getelementptr inbounds %struct._stmt, %struct._stmt* %28, i32 0, i32 1
  %With33 = bitcast %union.anon.35* %v32 to %struct.anon.45*
  %items34 = getelementptr inbounds %struct.anon.45, %struct.anon.45* %With33, i32 0, i32 0
  %29 = load %struct.asdl_seq*, %struct.asdl_seq** %items34, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %29, i32 0, i32 0
  %30 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %30, %cond.false ]
  %cmp35 = icmp eq i64 %conv, %cond
  br i1 %cmp35, label %if.then.37, label %if.else.58

if.then.37:                                       ; preds = %cond.end
  %31 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v38 = getelementptr inbounds %struct._stmt, %struct._stmt* %31, i32 0, i32 1
  %With39 = bitcast %union.anon.35* %v38 to %struct.anon.45*
  %body = getelementptr inbounds %struct.anon.45, %struct.anon.45* %With39, i32 0, i32 1
  %32 = load %struct.asdl_seq*, %struct.asdl_seq** %body, align 8
  store %struct.asdl_seq* %32, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.37
  %33 = load i32, i32* %_i, align 4
  %conv40 = sext i32 %33 to i64
  %34 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp41 = icmp eq %struct.asdl_seq* %34, null
  br i1 %cmp41, label %cond.true.43, label %cond.false.44

cond.true.43:                                     ; preds = %for.cond
  br label %cond.end.46

cond.false.44:                                    ; preds = %for.cond
  %35 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size45 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %35, i32 0, i32 0
  %36 = load i64, i64* %size45, align 8
  br label %cond.end.46

cond.end.46:                                      ; preds = %cond.false.44, %cond.true.43
  %cond47 = phi i64 [ 0, %cond.true.43 ], [ %36, %cond.false.44 ]
  %cmp48 = icmp slt i64 %conv40, %cond47
  br i1 %cmp48, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end.46
  %37 = load i32, i32* %_i, align 4
  %idxprom50 = sext i32 %37 to i64
  %38 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements51 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %38, i32 0, i32 1
  %arrayidx52 = getelementptr [1 x i8*], [1 x i8*]* %elements51, i32 0, i64 %idxprom50
  %39 = load i8*, i8** %arrayidx52, align 8
  %40 = bitcast i8* %39 to %struct._stmt*
  store %struct._stmt* %40, %struct._stmt** %elt, align 8
  %41 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %42 = load %struct._stmt*, %struct._stmt** %elt, align 8
  %call53 = call i32 @compiler_visit_stmt(%struct.compiler* %41, %struct._stmt* %42)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.56:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.56
  %43 = load i32, i32* %_i, align 4
  %inc57 = add i32 %43, 1
  store i32 %inc57, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end.46
  br label %if.end.63

if.else.58:                                       ; preds = %cond.end
  %44 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %45 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %46 = load i32, i32* %pos.addr, align 4
  %call59 = call i32 @compiler_with(%struct.compiler* %44, %struct._stmt* %45, i32 %46)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.end.62, label %if.then.61

if.then.61:                                       ; preds = %if.else.58
  store i32 0, i32* %retval
  br label %return

if.end.62:                                        ; preds = %if.else.58
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %for.end
  %47 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call64 = call i32 @compiler_addop(%struct.compiler* %47, i32 87)
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.end.67, label %if.then.66

if.then.66:                                       ; preds = %if.end.63
  store i32 0, i32* %retval
  br label %return

if.end.67:                                        ; preds = %if.end.63
  %48 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %49 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  call void @compiler_pop_fblock(%struct.compiler* %48, i32 2, %struct.basicblock_* %49)
  %50 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %51 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %51, i32 0, i32 7
  %52 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %52, i32 0, i32 4
  %53 = load %struct._object*, %struct._object** %u_consts, align 8
  %call68 = call i32 @compiler_addop_o(%struct.compiler* %50, i32 100, %struct._object* %53, %struct._object* @_Py_NoneStruct)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end.71, label %if.then.70

if.then.70:                                       ; preds = %if.end.67
  store i32 0, i32* %retval
  br label %return

if.end.71:                                        ; preds = %if.end.67
  %54 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %55 = load %struct.basicblock_*, %struct.basicblock_** %finally, align 8
  %call72 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %54, %struct.basicblock_* %55)
  %56 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %57 = load %struct.basicblock_*, %struct.basicblock_** %finally, align 8
  %call73 = call i32 @compiler_push_fblock(%struct.compiler* %56, i32 3, %struct.basicblock_* %57)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end.76, label %if.then.75

if.then.75:                                       ; preds = %if.end.71
  store i32 0, i32* %retval
  br label %return

if.end.76:                                        ; preds = %if.end.71
  %58 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call77 = call i32 @compiler_addop(%struct.compiler* %58, i32 81)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.end.80, label %if.then.79

if.then.79:                                       ; preds = %if.end.76
  store i32 0, i32* %retval
  br label %return

if.end.80:                                        ; preds = %if.end.76
  %59 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call81 = call i32 @compiler_addop(%struct.compiler* %59, i32 88)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.end.84, label %if.then.83

if.then.83:                                       ; preds = %if.end.80
  store i32 0, i32* %retval
  br label %return

if.end.84:                                        ; preds = %if.end.80
  %60 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %61 = load %struct.basicblock_*, %struct.basicblock_** %finally, align 8
  call void @compiler_pop_fblock(%struct.compiler* %60, i32 3, %struct.basicblock_* %61)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.84, %if.then.83, %if.then.79, %if.then.75, %if.then.70, %if.then.66, %if.then.61, %if.then.55, %if.then.25, %if.then.21, %if.then.14, %if.then.9, %if.then.5, %if.then
  %62 = load i32, i32* %retval
  ret i32 %62
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_decorators(%struct.compiler* %c, %struct.asdl_seq* %decos) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %decos.addr = alloca %struct.asdl_seq*, align 8
  %i = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.asdl_seq* %decos, %struct.asdl_seq** %decos.addr, align 8
  %0 = load %struct.asdl_seq*, %struct.asdl_seq** %decos.addr, align 8
  %tobool = icmp ne %struct.asdl_seq* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %conv = sext i32 %1 to i64
  %2 = load %struct.asdl_seq*, %struct.asdl_seq** %decos.addr, align 8
  %cmp = icmp eq %struct.asdl_seq* %2, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %decos.addr, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %3, i32 0, i32 0
  %4 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %4, %cond.false ]
  %cmp2 = icmp slt i64 %conv, %cond
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %decos.addr, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %7, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %8 = load i8*, i8** %arrayidx, align 8
  %9 = bitcast i8* %8 to %struct._expr*
  %call = call i32 @compiler_visit_expr(%struct.compiler* %5, %struct._expr* %9)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.6
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.5, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_kwonlydefaults(%struct.compiler* %c, %struct.asdl_seq* %kwonlyargs, %struct.asdl_seq* %kw_defaults) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %kwonlyargs.addr = alloca %struct.asdl_seq*, align 8
  %kw_defaults.addr = alloca %struct.asdl_seq*, align 8
  %i = alloca i32, align 4
  %default_count = alloca i32, align 4
  %arg = alloca %struct._arg*, align 8
  %default_ = alloca %struct._expr*, align 8
  %mangled = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.asdl_seq* %kwonlyargs, %struct.asdl_seq** %kwonlyargs.addr, align 8
  store %struct.asdl_seq* %kw_defaults, %struct.asdl_seq** %kw_defaults.addr, align 8
  store i32 0, i32* %default_count, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs.addr, align 8
  %cmp = icmp eq %struct.asdl_seq* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %2 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs.addr, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %2, i32 0, i32 0
  %3 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %3, %cond.false ]
  %cmp2 = icmp slt i64 %conv, %cond
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs.addr, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %5, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %6 = load i8*, i8** %arrayidx, align 8
  %7 = bitcast i8* %6 to %struct._arg*
  store %struct._arg* %7, %struct._arg** %arg, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom4 = sext i32 %8 to i64
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %kw_defaults.addr, align 8
  %elements5 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %9, i32 0, i32 1
  %arrayidx6 = getelementptr [1 x i8*], [1 x i8*]* %elements5, i32 0, i64 %idxprom4
  %10 = load i8*, i8** %arrayidx6, align 8
  %11 = bitcast i8* %10 to %struct._expr*
  store %struct._expr* %11, %struct._expr** %default_, align 8
  %12 = load %struct._expr*, %struct._expr** %default_, align 8
  %tobool = icmp ne %struct._expr* %12, null
  br i1 %tobool, label %if.then, label %if.end.23

if.then:                                          ; preds = %for.body
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %13, i32 0, i32 7
  %14 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %14, i32 0, i32 9
  %15 = load %struct._object*, %struct._object** %u_private, align 8
  %16 = load %struct._arg*, %struct._arg** %arg, align 8
  %arg7 = getelementptr inbounds %struct._arg, %struct._arg* %16, i32 0, i32 0
  %17 = load %struct._object*, %struct._object** %arg7, align 8
  %call = call %struct._object* @_Py_Mangle(%struct._object* %15, %struct._object* %17)
  store %struct._object* %call, %struct._object** %mangled, align 8
  %18 = load %struct._object*, %struct._object** %mangled, align 8
  %tobool8 = icmp ne %struct._object* %18, null
  br i1 %tobool8, label %if.end, label %if.then.9

if.then.9:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u10 = getelementptr inbounds %struct.compiler, %struct.compiler* %20, i32 0, i32 7
  %21 = load %struct.compiler_unit*, %struct.compiler_unit** %u10, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %21, i32 0, i32 4
  %22 = load %struct._object*, %struct._object** %u_consts, align 8
  %23 = load %struct._object*, %struct._object** %mangled, align 8
  %call11 = call i32 @compiler_addop_o(%struct.compiler* %19, i32 100, %struct._object* %22, %struct._object* %23)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.14
  %24 = load %struct._object*, %struct._object** %mangled, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %26, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp15 = icmp ne i64 %dec, 0
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body
  br label %if.end.18

if.else:                                          ; preds = %do.body
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %29(%struct._object* %30)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.18
  %31 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %32 = load %struct._expr*, %struct._expr** %default_, align 8
  %call19 = call i32 @compiler_visit_expr(%struct.compiler* %31, %struct._expr* %32)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %do.end
  %33 = load i32, i32* %default_count, align 4
  %inc = add i32 %33, 1
  store i32 %inc, i32* %default_count, align 4
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.23
  %34 = load i32, i32* %i, align 4
  %inc24 = add i32 %34, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  %35 = load i32, i32* %default_count, align 4
  store i32 %35, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.21, %if.then.13, %if.then.9
  %36 = load i32, i32* %retval
  ret i32 %36
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_annotations(%struct.compiler* %c, %struct._arguments* %args, %struct._expr* %returns) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %args.addr = alloca %struct._arguments*, align 8
  %returns.addr = alloca %struct._expr*, align 8
  %names = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %elt = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %s = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp80 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._arguments* %args, %struct._arguments** %args.addr, align 8
  store %struct._expr* %returns, %struct._expr** %returns.addr, align 8
  %call = call %struct._object* @PyList_New(i64 0)
  store %struct._object* %call, %struct._object** %names, align 8
  %0 = load %struct._object*, %struct._object** %names, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %2 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %args1 = getelementptr inbounds %struct._arguments, %struct._arguments* %2, i32 0, i32 0
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %args1, align 8
  %4 = load %struct._object*, %struct._object** %names, align 8
  %call2 = call i32 @compiler_visit_argannotations(%struct.compiler* %1, %struct.asdl_seq* %3, %struct._object* %4)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  br label %error

if.end.5:                                         ; preds = %if.end
  %5 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %vararg = getelementptr inbounds %struct._arguments, %struct._arguments* %5, i32 0, i32 1
  %6 = load %struct._arg*, %struct._arg** %vararg, align 8
  %tobool6 = icmp ne %struct._arg* %6, null
  br i1 %tobool6, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end.5
  %7 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %vararg7 = getelementptr inbounds %struct._arguments, %struct._arguments* %7, i32 0, i32 1
  %8 = load %struct._arg*, %struct._arg** %vararg7, align 8
  %annotation = getelementptr inbounds %struct._arg, %struct._arg* %8, i32 0, i32 1
  %9 = load %struct._expr*, %struct._expr** %annotation, align 8
  %tobool8 = icmp ne %struct._expr* %9, null
  br i1 %tobool8, label %land.lhs.true.9, label %if.end.16

land.lhs.true.9:                                  ; preds = %land.lhs.true
  %10 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %11 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %vararg10 = getelementptr inbounds %struct._arguments, %struct._arguments* %11, i32 0, i32 1
  %12 = load %struct._arg*, %struct._arg** %vararg10, align 8
  %arg = getelementptr inbounds %struct._arg, %struct._arg* %12, i32 0, i32 0
  %13 = load %struct._object*, %struct._object** %arg, align 8
  %14 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %vararg11 = getelementptr inbounds %struct._arguments, %struct._arguments* %14, i32 0, i32 1
  %15 = load %struct._arg*, %struct._arg** %vararg11, align 8
  %annotation12 = getelementptr inbounds %struct._arg, %struct._arg* %15, i32 0, i32 1
  %16 = load %struct._expr*, %struct._expr** %annotation12, align 8
  %17 = load %struct._object*, %struct._object** %names, align 8
  %call13 = call i32 @compiler_visit_argannotation(%struct.compiler* %10, %struct._object* %13, %struct._expr* %16, %struct._object* %17)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %land.lhs.true.9
  br label %error

if.end.16:                                        ; preds = %land.lhs.true.9, %land.lhs.true, %if.end.5
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %19 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %kwonlyargs = getelementptr inbounds %struct._arguments, %struct._arguments* %19, i32 0, i32 2
  %20 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs, align 8
  %21 = load %struct._object*, %struct._object** %names, align 8
  %call17 = call i32 @compiler_visit_argannotations(%struct.compiler* %18, %struct.asdl_seq* %20, %struct._object* %21)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  br label %error

if.end.20:                                        ; preds = %if.end.16
  %22 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %kwarg = getelementptr inbounds %struct._arguments, %struct._arguments* %22, i32 0, i32 4
  %23 = load %struct._arg*, %struct._arg** %kwarg, align 8
  %tobool21 = icmp ne %struct._arg* %23, null
  br i1 %tobool21, label %land.lhs.true.22, label %if.end.34

land.lhs.true.22:                                 ; preds = %if.end.20
  %24 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %kwarg23 = getelementptr inbounds %struct._arguments, %struct._arguments* %24, i32 0, i32 4
  %25 = load %struct._arg*, %struct._arg** %kwarg23, align 8
  %annotation24 = getelementptr inbounds %struct._arg, %struct._arg* %25, i32 0, i32 1
  %26 = load %struct._expr*, %struct._expr** %annotation24, align 8
  %tobool25 = icmp ne %struct._expr* %26, null
  br i1 %tobool25, label %land.lhs.true.26, label %if.end.34

land.lhs.true.26:                                 ; preds = %land.lhs.true.22
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %28 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %kwarg27 = getelementptr inbounds %struct._arguments, %struct._arguments* %28, i32 0, i32 4
  %29 = load %struct._arg*, %struct._arg** %kwarg27, align 8
  %arg28 = getelementptr inbounds %struct._arg, %struct._arg* %29, i32 0, i32 0
  %30 = load %struct._object*, %struct._object** %arg28, align 8
  %31 = load %struct._arguments*, %struct._arguments** %args.addr, align 8
  %kwarg29 = getelementptr inbounds %struct._arguments, %struct._arguments* %31, i32 0, i32 4
  %32 = load %struct._arg*, %struct._arg** %kwarg29, align 8
  %annotation30 = getelementptr inbounds %struct._arg, %struct._arg* %32, i32 0, i32 1
  %33 = load %struct._expr*, %struct._expr** %annotation30, align 8
  %34 = load %struct._object*, %struct._object** %names, align 8
  %call31 = call i32 @compiler_visit_argannotation(%struct.compiler* %27, %struct._object* %30, %struct._expr* %33, %struct._object* %34)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %land.lhs.true.26
  br label %error

if.end.34:                                        ; preds = %land.lhs.true.26, %land.lhs.true.22, %if.end.20
  %35 = load %struct._object*, %struct._object** @compiler_visit_annotations.return_str, align 8
  %tobool35 = icmp ne %struct._object* %35, null
  br i1 %tobool35, label %if.end.41, label %if.then.36

if.then.36:                                       ; preds = %if.end.34
  %call37 = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0))
  store %struct._object* %call37, %struct._object** @compiler_visit_annotations.return_str, align 8
  %36 = load %struct._object*, %struct._object** @compiler_visit_annotations.return_str, align 8
  %tobool38 = icmp ne %struct._object* %36, null
  br i1 %tobool38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.then.36
  br label %error

if.end.40:                                        ; preds = %if.then.36
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.34
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %38 = load %struct._object*, %struct._object** @compiler_visit_annotations.return_str, align 8
  %39 = load %struct._expr*, %struct._expr** %returns.addr, align 8
  %40 = load %struct._object*, %struct._object** %names, align 8
  %call42 = call i32 @compiler_visit_argannotation(%struct.compiler* %37, %struct._object* %38, %struct._expr* %39, %struct._object* %40)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.41
  br label %error

if.end.45:                                        ; preds = %if.end.41
  %41 = load %struct._object*, %struct._object** %names, align 8
  %42 = bitcast %struct._object* %41 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %42, i32 0, i32 1
  %43 = load i64, i64* %ob_size, align 8
  store i64 %43, i64* %len, align 8
  %44 = load i64, i64* %len, align 8
  %cmp = icmp sgt i64 %44, 65534
  br i1 %cmp, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.end.45
  %45 = load %struct._object*, %struct._object** @PyExc_SyntaxError, align 8
  call void @PyErr_SetString(%struct._object* %45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i32 0, i32 0))
  br label %error

if.end.47:                                        ; preds = %if.end.45
  %46 = load i64, i64* %len, align 8
  %tobool48 = icmp ne i64 %46, 0
  br i1 %tobool48, label %if.then.49, label %if.end.67

if.then.49:                                       ; preds = %if.end.47
  %47 = load i64, i64* %len, align 8
  %call50 = call %struct._object* @PyTuple_New(i64 %47)
  store %struct._object* %call50, %struct._object** %s, align 8
  %48 = load %struct._object*, %struct._object** %s, align 8
  %tobool51 = icmp ne %struct._object* %48, null
  br i1 %tobool51, label %if.end.53, label %if.then.52

if.then.52:                                       ; preds = %if.then.49
  br label %error

if.end.53:                                        ; preds = %if.then.49
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.53
  %49 = load i64, i64* %i, align 8
  %50 = load i64, i64* %len, align 8
  %cmp54 = icmp slt i64 %49, %50
  br i1 %cmp54, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %51 = load i64, i64* %i, align 8
  %52 = load %struct._object*, %struct._object** %names, align 8
  %53 = bitcast %struct._object* %52 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %53, i32 0, i32 1
  %54 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %54, i64 %51
  %55 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %55, %struct._object** %elt, align 8
  %56 = load %struct._object*, %struct._object** %elt, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %57, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %58 = load %struct._object*, %struct._object** %elt, align 8
  %59 = load i64, i64* %i, align 8
  %60 = load %struct._object*, %struct._object** %s, align 8
  %61 = bitcast %struct._object* %60 to %struct.PyTupleObject*
  %ob_item55 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %61, i32 0, i32 1
  %arrayidx56 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item55, i32 0, i64 %59
  store %struct._object* %58, %struct._object** %arrayidx56, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %62 = load i64, i64* %i, align 8
  %inc57 = add i64 %62, 1
  store i64 %inc57, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %63 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %64 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %64, i32 0, i32 7
  %65 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %65, i32 0, i32 4
  %66 = load %struct._object*, %struct._object** %u_consts, align 8
  %67 = load %struct._object*, %struct._object** %s, align 8
  %call58 = call i32 @compiler_addop_o(%struct.compiler* %63, i32 100, %struct._object* %66, %struct._object* %67)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.61:                                        ; preds = %for.end
  br label %do.body

do.body:                                          ; preds = %if.end.61
  %68 = load %struct._object*, %struct._object** %s, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt62 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt62, align 8
  %dec = add i64 %70, -1
  store i64 %dec, i64* %ob_refcnt62, align 8
  %cmp63 = icmp ne i64 %dec, 0
  br i1 %cmp63, label %if.then.64, label %if.else

if.then.64:                                       ; preds = %do.body
  br label %if.end.65

if.else:                                          ; preds = %do.body
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %73(%struct._object* %74)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else, %if.then.64
  br label %do.end

do.end:                                           ; preds = %if.end.65
  %75 = load i64, i64* %len, align 8
  %inc66 = add i64 %75, 1
  store i64 %inc66, i64* %len, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %do.end, %if.end.47
  br label %do.body.68

do.body.68:                                       ; preds = %if.end.67
  %76 = load %struct._object*, %struct._object** %names, align 8
  store %struct._object* %76, %struct._object** %_py_decref_tmp69, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0
  %78 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %78, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.68
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.68
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %81(%struct._object* %82)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  %83 = load i64, i64* %len, align 8
  %conv = trunc i64 %83 to i32
  store i32 %conv, i32* %retval
  br label %return

error:                                            ; preds = %if.then.52, %if.then.46, %if.then.44, %if.then.39, %if.then.33, %if.then.19, %if.then.15, %if.then.4
  br label %do.body.79

do.body.79:                                       ; preds = %error
  %84 = load %struct._object*, %struct._object** %names, align 8
  store %struct._object* %84, %struct._object** %_py_decref_tmp80, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  %ob_refcnt81 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 0
  %86 = load i64, i64* %ob_refcnt81, align 8
  %dec82 = add i64 %86, -1
  store i64 %dec82, i64* %ob_refcnt81, align 8
  %cmp83 = icmp ne i64 %dec82, 0
  br i1 %cmp83, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.79
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.79
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 4
  %89 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  call void %89(%struct._object* %90)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.90, %do.end.78, %if.then.60, %if.then
  %91 = load i32, i32* %retval
  ret i32 %91
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_make_closure(%struct.compiler* %c, %struct.PyCodeObject* %co, i64 %args, %struct._object* %qualname) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %co.addr = alloca %struct.PyCodeObject*, align 8
  %args.addr = alloca i64, align 8
  %qualname.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %free = alloca i64, align 8
  %name = alloca %struct._object*, align 8
  %arg = alloca i32, align 4
  %reftype = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.PyCodeObject* %co, %struct.PyCodeObject** %co.addr, align 8
  store i64 %args, i64* %args.addr, align 8
  store %struct._object* %qualname, %struct._object** %qualname.addr, align 8
  %0 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_freevars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %0, i32 0, i32 10
  %1 = load %struct._object*, %struct._object** %co_freevars, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  store i64 %3, i64* %free, align 8
  %4 = load %struct._object*, %struct._object** %qualname.addr, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_name = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %5, i32 0, i32 14
  %6 = load %struct._object*, %struct._object** %co_name, align 8
  store %struct._object* %6, %struct._object** %qualname.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i64, i64* %free, align 8
  %cmp1 = icmp eq i64 %7, 0
  br i1 %cmp1, label %if.then.2, label %if.end.15

if.then.2:                                        ; preds = %if.end
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %9, i32 0, i32 7
  %10 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %10, i32 0, i32 4
  %11 = load %struct._object*, %struct._object** %u_consts, align 8
  %12 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %13 = bitcast %struct.PyCodeObject* %12 to %struct._object*
  %call = call i32 @compiler_addop_o(%struct.compiler* %8, i32 100, %struct._object* %11, %struct._object* %13)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.then.2
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.then.2
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %15 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u5 = getelementptr inbounds %struct.compiler, %struct.compiler* %15, i32 0, i32 7
  %16 = load %struct.compiler_unit*, %struct.compiler_unit** %u5, align 8
  %u_consts6 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %16, i32 0, i32 4
  %17 = load %struct._object*, %struct._object** %u_consts6, align 8
  %18 = load %struct._object*, %struct._object** %qualname.addr, align 8
  %call7 = call i32 @compiler_addop_o(%struct.compiler* %14, i32 100, %struct._object* %17, %struct._object* %18)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %20 = load i64, i64* %args.addr, align 8
  %call11 = call i32 @compiler_addop_i(%struct.compiler* %19, i32 132, i64 %20)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.end.10
  store i32 0, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.10
  store i32 1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.15
  %21 = load i64, i64* %i, align 8
  %22 = load i64, i64* %free, align 8
  %cmp16 = icmp slt i64 %21, %22
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i64, i64* %i, align 8
  %24 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_freevars17 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %24, i32 0, i32 10
  %25 = load %struct._object*, %struct._object** %co_freevars17, align 8
  %26 = bitcast %struct._object* %25 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %26, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %23
  %27 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %27, %struct._object** %name, align 8
  %28 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %29 = load %struct._object*, %struct._object** %name, align 8
  %call18 = call i32 @get_ref_type(%struct.compiler* %28, %struct._object* %29)
  store i32 %call18, i32* %reftype, align 4
  %30 = load i32, i32* %reftype, align 4
  %cmp19 = icmp eq i32 %30, 5
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %for.body
  %31 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u21 = getelementptr inbounds %struct.compiler, %struct.compiler* %31, i32 0, i32 7
  %32 = load %struct.compiler_unit*, %struct.compiler_unit** %u21, align 8
  %u_cellvars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %32, i32 0, i32 7
  %33 = load %struct._object*, %struct._object** %u_cellvars, align 8
  %34 = load %struct._object*, %struct._object** %name, align 8
  %call22 = call i32 @compiler_lookup_arg(%struct._object* %33, %struct._object* %34)
  store i32 %call22, i32* %arg, align 4
  br label %if.end.25

if.else:                                          ; preds = %for.body
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u23 = getelementptr inbounds %struct.compiler, %struct.compiler* %35, i32 0, i32 7
  %36 = load %struct.compiler_unit*, %struct.compiler_unit** %u23, align 8
  %u_freevars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %36, i32 0, i32 8
  %37 = load %struct._object*, %struct._object** %u_freevars, align 8
  %38 = load %struct._object*, %struct._object** %name, align 8
  %call24 = call i32 @compiler_lookup_arg(%struct._object* %37, %struct._object* %38)
  store i32 %call24, i32* %arg, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.20
  %39 = load i32, i32* %arg, align 4
  %cmp26 = icmp eq i32 %39, -1
  br i1 %cmp26, label %if.then.27, label %if.end.37

if.then.27:                                       ; preds = %if.end.25
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %41 = load %struct._object*, %struct._object** %name, align 8
  %call28 = call %struct._object* @PyObject_Repr(%struct._object* %41)
  %call29 = call i8* @PyUnicode_AsUTF8(%struct._object* %call28)
  %42 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u30 = getelementptr inbounds %struct.compiler, %struct.compiler* %42, i32 0, i32 7
  %43 = load %struct.compiler_unit*, %struct.compiler_unit** %u30, align 8
  %u_name = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %43, i32 0, i32 1
  %44 = load %struct._object*, %struct._object** %u_name, align 8
  %45 = bitcast %struct._object* %44 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %45, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %46 = load i32, i32* %reftype, align 4
  %47 = load i32, i32* %arg, align 4
  %48 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_name31 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %48, i32 0, i32 14
  %49 = load %struct._object*, %struct._object** %co_name31, align 8
  %call32 = call i8* @PyUnicode_AsUTF8(%struct._object* %49)
  %50 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_freevars33 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %50, i32 0, i32 10
  %51 = load %struct._object*, %struct._object** %co_freevars33, align 8
  %call34 = call %struct._object* @PyObject_Repr(%struct._object* %51)
  %call35 = call i8* @PyUnicode_AsUTF8(%struct._object* %call34)
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.19, i32 0, i32 0), i8* %call29, i8* %arraydecay, i32 %46, i32 %47, i8* %call32, i8* %call35)
  call void @Py_FatalError(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0)) #6
  unreachable

if.end.37:                                        ; preds = %if.end.25
  %52 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %53 = load i32, i32* %arg, align 4
  %conv = sext i32 %53 to i64
  %call38 = call i32 @compiler_addop_i(%struct.compiler* %52, i32 135, i64 %conv)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.end.41, label %if.then.40

if.then.40:                                       ; preds = %if.end.37
  store i32 0, i32* %retval
  br label %return

if.end.41:                                        ; preds = %if.end.37
  br label %for.inc

for.inc:                                          ; preds = %if.end.41
  %54 = load i64, i64* %i, align 8
  %inc = add i64 %54, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %56 = load i64, i64* %free, align 8
  %call42 = call i32 @compiler_addop_i(%struct.compiler* %55, i32 102, i64 %56)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %for.end
  %57 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %58 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u46 = getelementptr inbounds %struct.compiler, %struct.compiler* %58, i32 0, i32 7
  %59 = load %struct.compiler_unit*, %struct.compiler_unit** %u46, align 8
  %u_consts47 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %59, i32 0, i32 4
  %60 = load %struct._object*, %struct._object** %u_consts47, align 8
  %61 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %62 = bitcast %struct.PyCodeObject* %61 to %struct._object*
  %call48 = call i32 @compiler_addop_o(%struct.compiler* %57, i32 100, %struct._object* %60, %struct._object* %62)
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %if.end.45
  store i32 0, i32* %retval
  br label %return

if.end.51:                                        ; preds = %if.end.45
  %63 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %64 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u52 = getelementptr inbounds %struct.compiler, %struct.compiler* %64, i32 0, i32 7
  %65 = load %struct.compiler_unit*, %struct.compiler_unit** %u52, align 8
  %u_consts53 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %65, i32 0, i32 4
  %66 = load %struct._object*, %struct._object** %u_consts53, align 8
  %67 = load %struct._object*, %struct._object** %qualname.addr, align 8
  %call54 = call i32 @compiler_addop_o(%struct.compiler* %63, i32 100, %struct._object* %66, %struct._object* %67)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end.57, label %if.then.56

if.then.56:                                       ; preds = %if.end.51
  store i32 0, i32* %retval
  br label %return

if.end.57:                                        ; preds = %if.end.51
  %68 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %69 = load i64, i64* %args.addr, align 8
  %call58 = call i32 @compiler_addop_i(%struct.compiler* %68, i32 134, i64 %69)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %if.end.57
  store i32 0, i32* %retval
  br label %return

if.end.61:                                        ; preds = %if.end.57
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.61, %if.then.60, %if.then.56, %if.then.50, %if.then.44, %if.then.40, %if.end.14, %if.then.13, %if.then.9, %if.then.3
  %70 = load i32, i32* %retval
  ret i32 %70
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_argannotations(%struct.compiler* %c, %struct.asdl_seq* %args, %struct._object* %names) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %args.addr = alloca %struct.asdl_seq*, align 8
  %names.addr = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %error = alloca i32, align 4
  %arg = alloca %struct._arg*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.asdl_seq* %args, %struct.asdl_seq** %args.addr, align 8
  store %struct._object* %names, %struct._object** %names.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %args.addr, align 8
  %cmp = icmp eq %struct.asdl_seq* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %2 = load %struct.asdl_seq*, %struct.asdl_seq** %args.addr, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %2, i32 0, i32 0
  %3 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %3, %cond.false ]
  %cmp2 = icmp slt i64 %conv, %cond
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %args.addr, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %5, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %6 = load i8*, i8** %arrayidx, align 8
  %7 = bitcast i8* %6 to %struct._arg*
  store %struct._arg* %7, %struct._arg** %arg, align 8
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %9 = load %struct._arg*, %struct._arg** %arg, align 8
  %arg4 = getelementptr inbounds %struct._arg, %struct._arg* %9, i32 0, i32 0
  %10 = load %struct._object*, %struct._object** %arg4, align 8
  %11 = load %struct._arg*, %struct._arg** %arg, align 8
  %annotation = getelementptr inbounds %struct._arg, %struct._arg* %11, i32 0, i32 1
  %12 = load %struct._expr*, %struct._expr** %annotation, align 8
  %13 = load %struct._object*, %struct._object** %names.addr, align 8
  %call = call i32 @compiler_visit_argannotation(%struct.compiler* %8, %struct._object* %10, %struct._expr* %12, %struct._object* %13)
  store i32 %call, i32* %error, align 4
  %14 = load i32, i32* %error, align 4
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %15 = load i32, i32* %error, align 4
  store i32 %15, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4
  %inc = add i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_argannotation(%struct.compiler* %c, %struct._object* %id, %struct._expr* %annotation, %struct._object* %names) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %id.addr = alloca %struct._object*, align 8
  %annotation.addr = alloca %struct._expr*, align 8
  %names.addr = alloca %struct._object*, align 8
  %mangled = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp14 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._object* %id, %struct._object** %id.addr, align 8
  store %struct._expr* %annotation, %struct._expr** %annotation.addr, align 8
  store %struct._object* %names, %struct._object** %names.addr, align 8
  %0 = load %struct._expr*, %struct._expr** %annotation.addr, align 8
  %tobool = icmp ne %struct._expr* %0, null
  br i1 %tobool, label %if.then, label %if.end.24

if.then:                                          ; preds = %entry
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %2 = load %struct._expr*, %struct._expr** %annotation.addr, align 8
  %call = call i32 @compiler_visit_expr(%struct.compiler* %1, %struct._expr* %2)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %3, i32 0, i32 7
  %4 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %4, i32 0, i32 9
  %5 = load %struct._object*, %struct._object** %u_private, align 8
  %6 = load %struct._object*, %struct._object** %id.addr, align 8
  %call3 = call %struct._object* @_Py_Mangle(%struct._object* %5, %struct._object* %6)
  store %struct._object* %call3, %struct._object** %mangled, align 8
  %7 = load %struct._object*, %struct._object** %mangled, align 8
  %tobool4 = icmp ne %struct._object* %7, null
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %names.addr, align 8
  %9 = load %struct._object*, %struct._object** %mangled, align 8
  %call7 = call i32 @PyList_Append(%struct._object* %8, %struct._object* %9)
  %cmp = icmp slt i32 %call7, 0
  br i1 %cmp, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %if.end.6
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %10 = load %struct._object*, %struct._object** %mangled, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.6
  br label %do.body.13

do.body.13:                                       ; preds = %if.end.12
  %17 = load %struct._object*, %struct._object** %mangled, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp14, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt15, align 8
  %dec16 = add i64 %19, -1
  store i64 %dec16, i64* %ob_refcnt15, align 8
  %cmp17 = icmp ne i64 %dec16, 0
  br i1 %cmp17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %do.body.13
  br label %if.end.22

if.else.19:                                       ; preds = %do.body.13
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc21, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  call void %22(%struct._object* %23)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.18
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  br label %if.end.24

if.end.24:                                        ; preds = %do.end.23, %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.24, %do.end, %if.then.5, %if.then.2
  %24 = load i32, i32* %retval
  ret i32 %24
}

declare %struct._object* @PyTuple_New(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @get_ref_type(%struct.compiler* %c, %struct._object* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %name.addr = alloca %struct._object*, align 8
  %scope = alloca i32, align 4
  %buf = alloca [350 x i8], align 16
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_scope_type = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 3
  %2 = load i32, i32* %u_scope_type, align 4
  %cmp = icmp eq i32 %2, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 5, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %4, i32 0, i32 7
  %5 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %5, i32 0, i32 0
  %6 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %7 = load %struct._object*, %struct._object** %name.addr, align 8
  %call2 = call i32 @PyST_GetScope(%struct._symtable_entry* %6, %struct._object* %7)
  store i32 %call2, i32* %scope, align 4
  %8 = load i32, i32* %scope, align 4
  %cmp3 = icmp eq i32 %8, 0
  br i1 %cmp3, label %if.then.4, label %if.end.25

if.then.4:                                        ; preds = %if.end
  %arraydecay = getelementptr inbounds [350 x i8], [350 x i8]* %buf, i32 0, i32 0
  %9 = load %struct._object*, %struct._object** %name.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %10, i32 0, i32 2
  %arraydecay5 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %11 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u6 = getelementptr inbounds %struct.compiler, %struct.compiler* %11, i32 0, i32 7
  %12 = load %struct.compiler_unit*, %struct.compiler_unit** %u6, align 8
  %u_name = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %12, i32 0, i32 1
  %13 = load %struct._object*, %struct._object** %u_name, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyBytesObject*
  %ob_sval7 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %14, i32 0, i32 2
  %arraydecay8 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval7, i32 0, i32 0
  %15 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u9 = getelementptr inbounds %struct.compiler, %struct.compiler* %15, i32 0, i32 7
  %16 = load %struct.compiler_unit*, %struct.compiler_unit** %u9, align 8
  %u_ste10 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %16, i32 0, i32 0
  %17 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste10, align 8
  %ste_id = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %17, i32 0, i32 1
  %18 = load %struct._object*, %struct._object** %ste_id, align 8
  %call11 = call %struct._object* @PyObject_Repr(%struct._object* %18)
  %call12 = call i8* @PyUnicode_AsUTF8(%struct._object* %call11)
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u13 = getelementptr inbounds %struct.compiler, %struct.compiler* %19, i32 0, i32 7
  %20 = load %struct.compiler_unit*, %struct.compiler_unit** %u13, align 8
  %u_ste14 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %20, i32 0, i32 0
  %21 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste14, align 8
  %ste_symbols = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %21, i32 0, i32 2
  %22 = load %struct._object*, %struct._object** %ste_symbols, align 8
  %call15 = call %struct._object* @PyObject_Repr(%struct._object* %22)
  %call16 = call i8* @PyUnicode_AsUTF8(%struct._object* %call15)
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u17 = getelementptr inbounds %struct.compiler, %struct.compiler* %23, i32 0, i32 7
  %24 = load %struct.compiler_unit*, %struct.compiler_unit** %u17, align 8
  %u_varnames = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %24, i32 0, i32 6
  %25 = load %struct._object*, %struct._object** %u_varnames, align 8
  %call18 = call %struct._object* @PyObject_Repr(%struct._object* %25)
  %call19 = call i8* @PyUnicode_AsUTF8(%struct._object* %call18)
  %26 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u20 = getelementptr inbounds %struct.compiler, %struct.compiler* %26, i32 0, i32 7
  %27 = load %struct.compiler_unit*, %struct.compiler_unit** %u20, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %27, i32 0, i32 5
  %28 = load %struct._object*, %struct._object** %u_names, align 8
  %call21 = call %struct._object* @PyObject_Repr(%struct._object* %28)
  %call22 = call i8* @PyUnicode_AsUTF8(%struct._object* %call21)
  %call23 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %arraydecay, i64 350, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.21, i32 0, i32 0), i8* %arraydecay5, i8* %arraydecay8, i8* %call12, i8* %call16, i8* %call19, i8* %call22)
  %arraydecay24 = getelementptr inbounds [350 x i8], [350 x i8]* %buf, i32 0, i32 0
  call void @Py_FatalError(i8* %arraydecay24) #6
  unreachable

if.end.25:                                        ; preds = %if.end
  %29 = load i32, i32* %scope, align 4
  store i32 %29, i32* %retval
  br label %return

return:                                           ; preds = %if.end.25, %if.then
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_lookup_arg(%struct._object* %dict, %struct._object* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %dict.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %k = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %name.addr, align 8
  %1 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %call = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %0, %struct._typeobject* %2)
  store %struct._object* %call, %struct._object** %k, align 8
  %3 = load %struct._object*, %struct._object** %k, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %dict.addr, align 8
  %5 = load %struct._object*, %struct._object** %k, align 8
  %call1 = call %struct._object* @PyDict_GetItem(%struct._object* %4, %struct._object* %5)
  store %struct._object* %call1, %struct._object** %v, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %k, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %13 = load %struct._object*, %struct._object** %v, align 8
  %cmp6 = icmp eq %struct._object* %13, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %do.end
  %14 = load %struct._object*, %struct._object** %v, align 8
  %call9 = call i64 @PyLong_AsLong(%struct._object* %14)
  %conv = trunc i64 %call9 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.7, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare i8* @PyUnicode_AsUTF8(%struct._object*) #1

declare %struct._object* @PyObject_Repr(%struct._object*) #1

declare i32 @PyUnicode_CompareWithASCIIString(%struct._object*, i8*) #1

declare i32 @PyOS_snprintf(i8*, i64, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @compiler_call_helper(%struct.compiler* %c, i64 %n, %struct.asdl_seq* %args, %struct.asdl_seq* %keywords, %struct._expr* %starargs, %struct._expr* %kwargs) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %n.addr = alloca i64, align 8
  %args.addr = alloca %struct.asdl_seq*, align 8
  %keywords.addr = alloca %struct.asdl_seq*, align 8
  %starargs.addr = alloca %struct._expr*, align 8
  %kwargs.addr = alloca %struct._expr*, align 8
  %code = alloca i32, align 4
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._expr*, align 8
  %_i12 = alloca i32, align 4
  %seq13 = alloca %struct.asdl_seq*, align 8
  %elt26 = alloca %struct._keyword*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store %struct.asdl_seq* %args, %struct.asdl_seq** %args.addr, align 8
  store %struct.asdl_seq* %keywords, %struct.asdl_seq** %keywords.addr, align 8
  store %struct._expr* %starargs, %struct._expr** %starargs.addr, align 8
  store %struct._expr* %kwargs, %struct._expr** %kwargs.addr, align 8
  store i32 0, i32* %code, align 4
  %0 = load %struct.asdl_seq*, %struct.asdl_seq** %args.addr, align 8
  %cmp = icmp eq %struct.asdl_seq* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %args.addr, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %1, i32 0, i32 0
  %2 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %2, %cond.false ]
  %3 = load i64, i64* %n.addr, align 8
  %add = add i64 %3, %cond
  store i64 %add, i64* %n.addr, align 8
  %4 = load %struct.asdl_seq*, %struct.asdl_seq** %args.addr, align 8
  store %struct.asdl_seq* %4, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %_i, align 4
  %conv = sext i32 %5 to i64
  %6 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp1 = icmp eq %struct.asdl_seq* %6, null
  br i1 %cmp1, label %cond.true.3, label %cond.false.4

cond.true.3:                                      ; preds = %for.cond
  br label %cond.end.6

cond.false.4:                                     ; preds = %for.cond
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size5 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %7, i32 0, i32 0
  %8 = load i64, i64* %size5, align 8
  br label %cond.end.6

cond.end.6:                                       ; preds = %cond.false.4, %cond.true.3
  %cond7 = phi i64 [ 0, %cond.true.3 ], [ %8, %cond.false.4 ]
  %cmp8 = icmp slt i64 %conv, %cond7
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end.6
  %9 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %10, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %11 = load i8*, i8** %arrayidx, align 8
  %12 = bitcast i8* %11 to %struct._expr*
  store %struct._expr* %12, %struct._expr** %elt, align 8
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %14 = load %struct._expr*, %struct._expr** %elt, align 8
  %call = call i32 @compiler_visit_expr(%struct.compiler* %13, %struct._expr* %14)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i32, i32* %_i, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end.6
  %16 = load %struct.asdl_seq*, %struct.asdl_seq** %keywords.addr, align 8
  %tobool10 = icmp ne %struct.asdl_seq* %16, null
  br i1 %tobool10, label %if.then.11, label %if.end.44

if.then.11:                                       ; preds = %for.end
  %17 = load %struct.asdl_seq*, %struct.asdl_seq** %keywords.addr, align 8
  store %struct.asdl_seq* %17, %struct.asdl_seq** %seq13, align 8
  store i32 0, i32* %_i12, align 4
  br label %for.cond.14

for.cond.14:                                      ; preds = %for.inc.34, %if.then.11
  %18 = load i32, i32* %_i12, align 4
  %conv15 = sext i32 %18 to i64
  %19 = load %struct.asdl_seq*, %struct.asdl_seq** %seq13, align 8
  %cmp16 = icmp eq %struct.asdl_seq* %19, null
  br i1 %cmp16, label %cond.true.18, label %cond.false.19

cond.true.18:                                     ; preds = %for.cond.14
  br label %cond.end.21

cond.false.19:                                    ; preds = %for.cond.14
  %20 = load %struct.asdl_seq*, %struct.asdl_seq** %seq13, align 8
  %size20 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %20, i32 0, i32 0
  %21 = load i64, i64* %size20, align 8
  br label %cond.end.21

cond.end.21:                                      ; preds = %cond.false.19, %cond.true.18
  %cond22 = phi i64 [ 0, %cond.true.18 ], [ %21, %cond.false.19 ]
  %cmp23 = icmp slt i64 %conv15, %cond22
  br i1 %cmp23, label %for.body.25, label %for.end.36

for.body.25:                                      ; preds = %cond.end.21
  %22 = load i32, i32* %_i12, align 4
  %idxprom27 = sext i32 %22 to i64
  %23 = load %struct.asdl_seq*, %struct.asdl_seq** %seq13, align 8
  %elements28 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %23, i32 0, i32 1
  %arrayidx29 = getelementptr [1 x i8*], [1 x i8*]* %elements28, i32 0, i64 %idxprom27
  %24 = load i8*, i8** %arrayidx29, align 8
  %25 = bitcast i8* %24 to %struct._keyword*
  store %struct._keyword* %25, %struct._keyword** %elt26, align 8
  %26 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %27 = load %struct._keyword*, %struct._keyword** %elt26, align 8
  %call30 = call i32 @compiler_visit_keyword(%struct.compiler* %26, %struct._keyword* %27)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %for.body.25
  store i32 0, i32* %retval
  br label %return

if.end.33:                                        ; preds = %for.body.25
  br label %for.inc.34

for.inc.34:                                       ; preds = %if.end.33
  %28 = load i32, i32* %_i12, align 4
  %inc35 = add i32 %28, 1
  store i32 %inc35, i32* %_i12, align 4
  br label %for.cond.14

for.end.36:                                       ; preds = %cond.end.21
  %29 = load %struct.asdl_seq*, %struct.asdl_seq** %keywords.addr, align 8
  %cmp37 = icmp eq %struct.asdl_seq* %29, null
  br i1 %cmp37, label %cond.true.39, label %cond.false.40

cond.true.39:                                     ; preds = %for.end.36
  br label %cond.end.42

cond.false.40:                                    ; preds = %for.end.36
  %30 = load %struct.asdl_seq*, %struct.asdl_seq** %keywords.addr, align 8
  %size41 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %30, i32 0, i32 0
  %31 = load i64, i64* %size41, align 8
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.false.40, %cond.true.39
  %cond43 = phi i64 [ 0, %cond.true.39 ], [ %31, %cond.false.40 ]
  %shl = shl i64 %cond43, 8
  %32 = load i64, i64* %n.addr, align 8
  %or = or i64 %32, %shl
  store i64 %or, i64* %n.addr, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %cond.end.42, %for.end
  %33 = load %struct._expr*, %struct._expr** %starargs.addr, align 8
  %tobool45 = icmp ne %struct._expr* %33, null
  br i1 %tobool45, label %if.then.46, label %if.end.52

if.then.46:                                       ; preds = %if.end.44
  %34 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %35 = load %struct._expr*, %struct._expr** %starargs.addr, align 8
  %call47 = call i32 @compiler_visit_expr(%struct.compiler* %34, %struct._expr* %35)
  %tobool48 = icmp ne i32 %call47, 0
  br i1 %tobool48, label %if.end.50, label %if.then.49

if.then.49:                                       ; preds = %if.then.46
  store i32 0, i32* %retval
  br label %return

if.end.50:                                        ; preds = %if.then.46
  %36 = load i32, i32* %code, align 4
  %or51 = or i32 %36, 1
  store i32 %or51, i32* %code, align 4
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.50, %if.end.44
  %37 = load %struct._expr*, %struct._expr** %kwargs.addr, align 8
  %tobool53 = icmp ne %struct._expr* %37, null
  br i1 %tobool53, label %if.then.54, label %if.end.60

if.then.54:                                       ; preds = %if.end.52
  %38 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %39 = load %struct._expr*, %struct._expr** %kwargs.addr, align 8
  %call55 = call i32 @compiler_visit_expr(%struct.compiler* %38, %struct._expr* %39)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end.58, label %if.then.57

if.then.57:                                       ; preds = %if.then.54
  store i32 0, i32* %retval
  br label %return

if.end.58:                                        ; preds = %if.then.54
  %40 = load i32, i32* %code, align 4
  %or59 = or i32 %40, 2
  store i32 %or59, i32* %code, align 4
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.58, %if.end.52
  %41 = load i32, i32* %code, align 4
  switch i32 %41, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.65
    i32 2, label %sw.bb.70
    i32 3, label %sw.bb.75
  ]

sw.bb:                                            ; preds = %if.end.60
  %42 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %43 = load i64, i64* %n.addr, align 8
  %call61 = call i32 @compiler_addop_i(%struct.compiler* %42, i32 131, i64 %43)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.end.64, label %if.then.63

if.then.63:                                       ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end.64:                                        ; preds = %sw.bb
  br label %sw.epilog

sw.bb.65:                                         ; preds = %if.end.60
  %44 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %45 = load i64, i64* %n.addr, align 8
  %call66 = call i32 @compiler_addop_i(%struct.compiler* %44, i32 140, i64 %45)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.end.69, label %if.then.68

if.then.68:                                       ; preds = %sw.bb.65
  store i32 0, i32* %retval
  br label %return

if.end.69:                                        ; preds = %sw.bb.65
  br label %sw.epilog

sw.bb.70:                                         ; preds = %if.end.60
  %46 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %47 = load i64, i64* %n.addr, align 8
  %call71 = call i32 @compiler_addop_i(%struct.compiler* %46, i32 141, i64 %47)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %sw.bb.70
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %sw.bb.70
  br label %sw.epilog

sw.bb.75:                                         ; preds = %if.end.60
  %48 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %49 = load i64, i64* %n.addr, align 8
  %call76 = call i32 @compiler_addop_i(%struct.compiler* %48, i32 142, i64 %49)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.end.79, label %if.then.78

if.then.78:                                       ; preds = %sw.bb.75
  store i32 0, i32* %retval
  br label %return

if.end.79:                                        ; preds = %sw.bb.75
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.60, %if.end.79, %if.end.74, %if.end.69, %if.end.64
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then.78, %if.then.73, %if.then.68, %if.then.63, %if.then.57, %if.then.49, %if.then.32, %if.then
  %50 = load i32, i32* %retval
  ret i32 %50
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_keyword(%struct.compiler* %c, %struct._keyword* %k) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %k.addr = alloca %struct._keyword*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._keyword* %k, %struct._keyword** %k.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %1, i32 0, i32 7
  %2 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %2, i32 0, i32 4
  %3 = load %struct._object*, %struct._object** %u_consts, align 8
  %4 = load %struct._keyword*, %struct._keyword** %k.addr, align 8
  %arg = getelementptr inbounds %struct._keyword, %struct._keyword* %4, i32 0, i32 0
  %5 = load %struct._object*, %struct._object** %arg, align 8
  %call = call i32 @compiler_addop_o(%struct.compiler* %0, i32 100, %struct._object* %3, %struct._object* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %7 = load %struct._keyword*, %struct._keyword** %k.addr, align 8
  %value = getelementptr inbounds %struct._keyword, %struct._keyword* %7, i32 0, i32 1
  %8 = load %struct._expr*, %struct._expr** %value, align 8
  %call1 = call i32 @compiler_visit_expr(%struct.compiler* %6, %struct._expr* %8)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

declare %struct._object* @PyErr_ProgramTextObject(%struct._object*, i32) #1

declare %struct._object* @Py_BuildValue(i8*, ...) #1

declare void @PyErr_SetObject(%struct._object*, %struct._object*) #1

declare %struct._expr* @_Py_Attribute(%struct._expr*, %struct._object*, i32, i32, i32, %struct._arena*) #1

; Function Attrs: nounwind uwtable
define internal i32 @inplace_binop(%struct.compiler* %c, i32 %op) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %op.addr = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.3
    i32 5, label %sw.bb.4
    i32 6, label %sw.bb.5
    i32 7, label %sw.bb.6
    i32 8, label %sw.bb.7
    i32 9, label %sw.bb.8
    i32 10, label %sw.bb.9
    i32 11, label %sw.bb.10
    i32 12, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %entry
  store i32 55, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i32 56, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i32 57, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i32 29, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i32 59, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i32 67, i32* %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i32 75, i32* %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i32 76, i32* %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i32 79, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i32 78, i32* %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i32 77, i32* %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i32 28, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %2 = load i32, i32* %op.addr, align 4
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %1, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.28, i32 0, i32 0), i32 %2)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %3 = load i32, i32* %retval
  ret i32 %3
}

declare %struct._expr* @_Py_Subscript(%struct._expr*, %struct._slice*, i32, i32, i32, %struct._arena*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compiler_addop_j(%struct.compiler* %c, i32 %opcode, %struct.basicblock_* %b, i32 %absolute) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %opcode.addr = alloca i32, align 4
  %b.addr = alloca %struct.basicblock_*, align 8
  %absolute.addr = alloca i32, align 4
  %i = alloca %struct.instr*, align 8
  %off = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  store %struct.basicblock_* %b, %struct.basicblock_** %b.addr, align 8
  store i32 %absolute, i32* %absolute.addr, align 4
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %1, i32 0, i32 7
  %2 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %2, i32 0, i32 13
  %3 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock, align 8
  %call = call i32 @compiler_next_instr(%struct.compiler* %0, %struct.basicblock_* %3)
  store i32 %call, i32* %off, align 4
  %4 = load i32, i32* %off, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %off, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %6, i32 0, i32 7
  %7 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_curblock2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %7, i32 0, i32 13
  %8 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock2, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %8, i32 0, i32 3
  %9 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx = getelementptr %struct.instr, %struct.instr* %9, i64 %idxprom
  store %struct.instr* %arrayidx, %struct.instr** %i, align 8
  %10 = load i32, i32* %opcode.addr, align 4
  %conv = trunc i32 %10 to i8
  %11 = load %struct.instr*, %struct.instr** %i, align 8
  %i_opcode = getelementptr inbounds %struct.instr, %struct.instr* %11, i32 0, i32 1
  store i8 %conv, i8* %i_opcode, align 1
  %12 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %13 = load %struct.instr*, %struct.instr** %i, align 8
  %i_target = getelementptr inbounds %struct.instr, %struct.instr* %13, i32 0, i32 3
  store %struct.basicblock_* %12, %struct.basicblock_** %i_target, align 8
  %14 = load %struct.instr*, %struct.instr** %i, align 8
  %15 = bitcast %struct.instr* %14 to i8*
  %bf.load = load i8, i8* %15, align 8
  %bf.clear = and i8 %bf.load, -5
  %bf.set = or i8 %bf.clear, 4
  store i8 %bf.set, i8* %15, align 8
  %16 = load i32, i32* %absolute.addr, align 4
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %17 = load %struct.instr*, %struct.instr** %i, align 8
  %18 = bitcast %struct.instr* %17 to i8*
  %bf.load4 = load i8, i8* %18, align 8
  %bf.clear5 = and i8 %bf.load4, -2
  %bf.set6 = or i8 %bf.clear5, 1
  store i8 %bf.set6, i8* %18, align 8
  br label %if.end.10

if.else:                                          ; preds = %if.end
  %19 = load %struct.instr*, %struct.instr** %i, align 8
  %20 = bitcast %struct.instr* %19 to i8*
  %bf.load7 = load i8, i8* %20, align 8
  %bf.clear8 = and i8 %bf.load7, -3
  %bf.set9 = or i8 %bf.clear8, 2
  store i8 %bf.set9, i8* %20, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.3
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %22 = load i32, i32* %off, align 4
  call void @compiler_set_lineno(%struct.compiler* %21, i32 %22)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_push_fblock(%struct.compiler* %c, i32 %t, %struct.basicblock_* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %t.addr = alloca i32, align 4
  %b.addr = alloca %struct.basicblock_*, align 8
  %f = alloca %struct.fblockinfo*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %t, i32* %t.addr, align 4
  store %struct.basicblock_* %b, %struct.basicblock_** %b.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_nfblocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 14
  %2 = load i32, i32* %u_nfblocks, align 4
  %cmp = icmp sge i32 %2, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.29, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %4, i32 0, i32 7
  %5 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_nfblocks2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %5, i32 0, i32 14
  %6 = load i32, i32* %u_nfblocks2, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %u_nfblocks2, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u3 = getelementptr inbounds %struct.compiler, %struct.compiler* %7, i32 0, i32 7
  %8 = load %struct.compiler_unit*, %struct.compiler_unit** %u3, align 8
  %u_fblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %8, i32 0, i32 15
  %arrayidx = getelementptr [20 x %struct.fblockinfo], [20 x %struct.fblockinfo]* %u_fblock, i32 0, i64 %idxprom
  store %struct.fblockinfo* %arrayidx, %struct.fblockinfo** %f, align 8
  %9 = load i32, i32* %t.addr, align 4
  %10 = load %struct.fblockinfo*, %struct.fblockinfo** %f, align 8
  %fb_type = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %10, i32 0, i32 0
  store i32 %9, i32* %fb_type, align 4
  %11 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %12 = load %struct.fblockinfo*, %struct.fblockinfo** %f, align 8
  %fb_block = getelementptr inbounds %struct.fblockinfo, %struct.fblockinfo* %12, i32 0, i32 1
  store %struct.basicblock_* %11, %struct.basicblock_** %fb_block, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %c, %struct.basicblock_* %block) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %block.addr = alloca %struct.basicblock_*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.basicblock_* %block, %struct.basicblock_** %block.addr, align 8
  %0 = load %struct.basicblock_*, %struct.basicblock_** %block.addr, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %1, i32 0, i32 7
  %2 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %2, i32 0, i32 13
  %3 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock, align 8
  %b_next = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %3, i32 0, i32 4
  store %struct.basicblock_* %0, %struct.basicblock_** %b_next, align 8
  %4 = load %struct.basicblock_*, %struct.basicblock_** %block.addr, align 8
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %5, i32 0, i32 7
  %6 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_curblock2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %6, i32 0, i32 13
  store %struct.basicblock_* %4, %struct.basicblock_** %u_curblock2, align 8
  %7 = load %struct.basicblock_*, %struct.basicblock_** %block.addr, align 8
  ret %struct.basicblock_* %7
}

; Function Attrs: nounwind uwtable
define internal void @compiler_pop_fblock(%struct.compiler* %c, i32 %t, %struct.basicblock_* %b) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %t.addr = alloca i32, align 4
  %b.addr = alloca %struct.basicblock_*, align 8
  %u = alloca %struct.compiler_unit*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %t, i32* %t.addr, align 4
  store %struct.basicblock_* %b, %struct.basicblock_** %b.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  store %struct.compiler_unit* %1, %struct.compiler_unit** %u, align 8
  %2 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_nfblocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %2, i32 0, i32 14
  %3 = load i32, i32* %u_nfblocks, align 4
  %dec = add i32 %3, -1
  store i32 %dec, i32* %u_nfblocks, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @expr_constant(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %id = alloca i8*, align 8
  %o = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %kind = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0
  %1 = load i32, i32* %kind, align 4
  switch i32 %1, label %sw.default [
    i32 20, label %sw.bb
    i32 16, label %sw.bb.1
    i32 17, label %sw.bb.2
    i32 24, label %sw.bb.5
    i32 19, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 1
  %Num = bitcast %union.anon.4* %v to %struct.anon.20*
  %n = getelementptr inbounds %struct.anon.20, %struct.anon.20* %Num, i32 0, i32 0
  %3 = load %struct._object*, %struct._object** %n, align 8
  %call = call i32 @PyObject_IsTrue(%struct._object* %3)
  store i32 %call, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  %4 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v3 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 1
  %Str = bitcast %union.anon.4* %v3 to %struct.anon.21*
  %s = getelementptr inbounds %struct.anon.21, %struct.anon.21* %Str, i32 0, i32 0
  %5 = load %struct._object*, %struct._object** %s, align 8
  %call4 = call i32 @PyObject_IsTrue(%struct._object* %5)
  store i32 %call4, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  %6 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v6 = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 1
  %Name = bitcast %union.anon.4* %v6 to %struct.anon.31*
  %id7 = getelementptr inbounds %struct.anon.31, %struct.anon.31* %Name, i32 0, i32 0
  %7 = load %struct._object*, %struct._object** %id7, align 8
  %call8 = call i8* @PyUnicode_AsUTF8(%struct._object* %7)
  store i8* %call8, i8** %id, align 8
  %8 = load i8*, i8** %id, align 8
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.5
  %9 = load i8*, i8** %id, align 8
  %call9 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0)) #8
  %cmp = icmp eq i32 %call9, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_optimize = getelementptr inbounds %struct.compiler, %struct.compiler* %10, i32 0, i32 4
  %11 = load i32, i32* %c_optimize, align 4
  %tobool10 = icmp ne i32 %11, 0
  %lnot = xor i1 %tobool10, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.bb.5
  store i32 -1, i32* %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  %12 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v12 = getelementptr inbounds %struct._expr, %struct._expr* %12, i32 0, i32 1
  %NameConstant = bitcast %union.anon.4* %v12 to %struct.anon.23*
  %value = getelementptr inbounds %struct.anon.23, %struct.anon.23* %NameConstant, i32 0, i32 0
  %13 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %13, %struct._object** %o, align 8
  %14 = load %struct._object*, %struct._object** %o, align 8
  %cmp13 = icmp eq %struct._object* %14, @_Py_NoneStruct
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %sw.bb.11
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %sw.bb.11
  %15 = load %struct._object*, %struct._object** %o, align 8
  %cmp15 = icmp eq %struct._object* %15, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %if.else
  store i32 1, i32* %retval
  br label %return

if.else.17:                                       ; preds = %if.else
  %16 = load %struct._object*, %struct._object** %o, align 8
  %cmp18 = icmp eq %struct._object* %16, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.else.17
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.else.17
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21
  br label %sw.default

sw.default:                                       ; preds = %entry, %if.end.22
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %if.then.19, %if.then.16, %if.then.14, %if.end, %if.then, %sw.bb.2, %sw.bb.1, %sw.bb
  %17 = load i32, i32* %retval
  ret i32 %17
}

declare i32 @PyObject_IsTrue(%struct._object*) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #5

; Function Attrs: nounwind uwtable
define internal i32 @compiler_try_finally(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %body = alloca %struct.basicblock_*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._stmt*, align 8
  %_i53 = alloca i32, align 4
  %seq54 = alloca %struct.asdl_seq*, align 8
  %elt69 = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %body, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call1 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %1)
  store %struct.basicblock_* %call1, %struct.basicblock_** %end, align 8
  %2 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  %cmp = icmp eq %struct.basicblock_* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp2 = icmp eq %struct.basicblock_* %3, null
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %5 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call3 = call i32 @compiler_addop_j(%struct.compiler* %4, i32 122, %struct.basicblock_* %5, i32 0)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %7 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  %call6 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %6, %struct.basicblock_* %7)
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %9 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  %call7 = call i32 @compiler_push_fblock(%struct.compiler* %8, i32 2, %struct.basicblock_* %9)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.5
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  %10 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %10, i32 0, i32 1
  %Try = bitcast %union.anon.35* %v to %struct.anon.47*
  %handlers = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try, i32 0, i32 1
  %11 = load %struct.asdl_seq*, %struct.asdl_seq** %handlers, align 8
  %tobool11 = icmp ne %struct.asdl_seq* %11, null
  br i1 %tobool11, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.10
  %12 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v12 = getelementptr inbounds %struct._stmt, %struct._stmt* %12, i32 0, i32 1
  %Try13 = bitcast %union.anon.35* %v12 to %struct.anon.47*
  %handlers14 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try13, i32 0, i32 1
  %13 = load %struct.asdl_seq*, %struct.asdl_seq** %handlers14, align 8
  %cmp15 = icmp eq %struct.asdl_seq* %13, null
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br i1 false, label %if.then.20, label %if.else

cond.false:                                       ; preds = %land.lhs.true
  %14 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v16 = getelementptr inbounds %struct._stmt, %struct._stmt* %14, i32 0, i32 1
  %Try17 = bitcast %union.anon.35* %v16 to %struct.anon.47*
  %handlers18 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try17, i32 0, i32 1
  %15 = load %struct.asdl_seq*, %struct.asdl_seq** %handlers18, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %15, i32 0, i32 0
  %16 = load i64, i64* %size, align 8
  %tobool19 = icmp ne i64 %16, 0
  br i1 %tobool19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %cond.false, %cond.true
  %17 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %18 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %call21 = call i32 @compiler_try_except(%struct.compiler* %17, %struct._stmt* %18)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.end.24, label %if.then.23

if.then.23:                                       ; preds = %if.then.20
  store i32 0, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.20
  br label %if.end.39

if.else:                                          ; preds = %cond.false, %cond.true, %if.end.10
  %19 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v25 = getelementptr inbounds %struct._stmt, %struct._stmt* %19, i32 0, i32 1
  %Try26 = bitcast %union.anon.35* %v25 to %struct.anon.47*
  %body27 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try26, i32 0, i32 0
  %20 = load %struct.asdl_seq*, %struct.asdl_seq** %body27, align 8
  store %struct.asdl_seq* %20, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %21 = load i32, i32* %_i, align 4
  %conv = sext i32 %21 to i64
  %22 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp28 = icmp eq %struct.asdl_seq* %22, null
  br i1 %cmp28, label %cond.true.30, label %cond.false.31

cond.true.30:                                     ; preds = %for.cond
  br label %cond.end

cond.false.31:                                    ; preds = %for.cond
  %23 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size32 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %23, i32 0, i32 0
  %24 = load i64, i64* %size32, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false.31, %cond.true.30
  %cond = phi i64 [ 0, %cond.true.30 ], [ %24, %cond.false.31 ]
  %cmp33 = icmp slt i64 %conv, %cond
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %25 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %25 to i64
  %26 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %26, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %27 = load i8*, i8** %arrayidx, align 8
  %28 = bitcast i8* %27 to %struct._stmt*
  store %struct._stmt* %28, %struct._stmt** %elt, align 8
  %29 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %30 = load %struct._stmt*, %struct._stmt** %elt, align 8
  %call35 = call i32 @compiler_visit_stmt(%struct.compiler* %29, %struct._stmt* %30)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.end.38, label %if.then.37

if.then.37:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.38:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.38
  %31 = load i32, i32* %_i, align 4
  %inc = add i32 %31, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  br label %if.end.39

if.end.39:                                        ; preds = %for.end, %if.end.24
  %32 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call40 = call i32 @compiler_addop(%struct.compiler* %32, i32 87)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %if.end.39
  store i32 0, i32* %retval
  br label %return

if.end.43:                                        ; preds = %if.end.39
  %33 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %34 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  call void @compiler_pop_fblock(%struct.compiler* %33, i32 2, %struct.basicblock_* %34)
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %36 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %36, i32 0, i32 7
  %37 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %37, i32 0, i32 4
  %38 = load %struct._object*, %struct._object** %u_consts, align 8
  %call44 = call i32 @compiler_addop_o(%struct.compiler* %35, i32 100, %struct._object* %38, %struct._object* @_Py_NoneStruct)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %if.end.43
  store i32 0, i32* %retval
  br label %return

if.end.47:                                        ; preds = %if.end.43
  %39 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %40 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call48 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %39, %struct.basicblock_* %40)
  %41 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %42 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call49 = call i32 @compiler_push_fblock(%struct.compiler* %41, i32 3, %struct.basicblock_* %42)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %if.end.47
  store i32 0, i32* %retval
  br label %return

if.end.52:                                        ; preds = %if.end.47
  %43 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v55 = getelementptr inbounds %struct._stmt, %struct._stmt* %43, i32 0, i32 1
  %Try56 = bitcast %union.anon.35* %v55 to %struct.anon.47*
  %finalbody = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try56, i32 0, i32 3
  %44 = load %struct.asdl_seq*, %struct.asdl_seq** %finalbody, align 8
  store %struct.asdl_seq* %44, %struct.asdl_seq** %seq54, align 8
  store i32 0, i32* %_i53, align 4
  br label %for.cond.57

for.cond.57:                                      ; preds = %for.inc.77, %if.end.52
  %45 = load i32, i32* %_i53, align 4
  %conv58 = sext i32 %45 to i64
  %46 = load %struct.asdl_seq*, %struct.asdl_seq** %seq54, align 8
  %cmp59 = icmp eq %struct.asdl_seq* %46, null
  br i1 %cmp59, label %cond.true.61, label %cond.false.62

cond.true.61:                                     ; preds = %for.cond.57
  br label %cond.end.64

cond.false.62:                                    ; preds = %for.cond.57
  %47 = load %struct.asdl_seq*, %struct.asdl_seq** %seq54, align 8
  %size63 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %47, i32 0, i32 0
  %48 = load i64, i64* %size63, align 8
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.62, %cond.true.61
  %cond65 = phi i64 [ 0, %cond.true.61 ], [ %48, %cond.false.62 ]
  %cmp66 = icmp slt i64 %conv58, %cond65
  br i1 %cmp66, label %for.body.68, label %for.end.79

for.body.68:                                      ; preds = %cond.end.64
  %49 = load i32, i32* %_i53, align 4
  %idxprom70 = sext i32 %49 to i64
  %50 = load %struct.asdl_seq*, %struct.asdl_seq** %seq54, align 8
  %elements71 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %50, i32 0, i32 1
  %arrayidx72 = getelementptr [1 x i8*], [1 x i8*]* %elements71, i32 0, i64 %idxprom70
  %51 = load i8*, i8** %arrayidx72, align 8
  %52 = bitcast i8* %51 to %struct._stmt*
  store %struct._stmt* %52, %struct._stmt** %elt69, align 8
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %54 = load %struct._stmt*, %struct._stmt** %elt69, align 8
  %call73 = call i32 @compiler_visit_stmt(%struct.compiler* %53, %struct._stmt* %54)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.end.76, label %if.then.75

if.then.75:                                       ; preds = %for.body.68
  store i32 0, i32* %retval
  br label %return

if.end.76:                                        ; preds = %for.body.68
  br label %for.inc.77

for.inc.77:                                       ; preds = %if.end.76
  %55 = load i32, i32* %_i53, align 4
  %inc78 = add i32 %55, 1
  store i32 %inc78, i32* %_i53, align 4
  br label %for.cond.57

for.end.79:                                       ; preds = %cond.end.64
  %56 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call80 = call i32 @compiler_addop(%struct.compiler* %56, i32 88)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %if.end.83, label %if.then.82

if.then.82:                                       ; preds = %for.end.79
  store i32 0, i32* %retval
  br label %return

if.end.83:                                        ; preds = %for.end.79
  %57 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %58 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  call void @compiler_pop_fblock(%struct.compiler* %57, i32 3, %struct.basicblock_* %58)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.83, %if.then.82, %if.then.75, %if.then.51, %if.then.46, %if.then.42, %if.then.37, %if.then.23, %if.then.9, %if.then.4, %if.then
  %59 = load i32, i32* %retval
  ret i32 %59
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_try_except(%struct.compiler* %c, %struct._stmt* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._stmt*, align 8
  %body = alloca %struct.basicblock_*, align 8
  %orelse = alloca %struct.basicblock_*, align 8
  %except = alloca %struct.basicblock_*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._stmt*, align 8
  %handler = alloca %struct._excepthandler*, align 8
  %cleanup_end = alloca %struct.basicblock_*, align 8
  %cleanup_body = alloca %struct.basicblock_*, align 8
  %_i127 = alloca i32, align 4
  %seq128 = alloca %struct.asdl_seq*, align 8
  %elt144 = alloca %struct._stmt*, align 8
  %cleanup_body191 = alloca %struct.basicblock_*, align 8
  %_i209 = alloca i32, align 4
  %seq210 = alloca %struct.asdl_seq*, align 8
  %elt226 = alloca %struct._stmt*, align 8
  %_i255 = alloca i32, align 4
  %seq256 = alloca %struct.asdl_seq*, align 8
  %elt272 = alloca %struct._stmt*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._stmt* %s, %struct._stmt** %s.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %body, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call1 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %1)
  store %struct.basicblock_* %call1, %struct.basicblock_** %except, align 8
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call2 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %2)
  store %struct.basicblock_* %call2, %struct.basicblock_** %orelse, align 8
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call3 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %3)
  store %struct.basicblock_* %call3, %struct.basicblock_** %end, align 8
  %4 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  %cmp = icmp eq %struct.basicblock_* %4, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.basicblock_*, %struct.basicblock_** %except, align 8
  %cmp4 = icmp eq %struct.basicblock_* %5, null
  br i1 %cmp4, label %if.then, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %6 = load %struct.basicblock_*, %struct.basicblock_** %orelse, align 8
  %cmp6 = icmp eq %struct.basicblock_* %6, null
  br i1 %cmp6, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false.5
  %7 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp8 = icmp eq %struct.basicblock_* %7, null
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.7, %lor.lhs.false.5, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.7
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %9 = load %struct.basicblock_*, %struct.basicblock_** %except, align 8
  %call9 = call i32 @compiler_addop_j(%struct.compiler* %8, i32 121, %struct.basicblock_* %9, i32 0)
  %tobool = icmp ne i32 %call9, 0
  br i1 %tobool, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %10 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %11 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  %call12 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %10, %struct.basicblock_* %11)
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %13 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  %call13 = call i32 @compiler_push_fblock(%struct.compiler* %12, i32 1, %struct.basicblock_* %13)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.11
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.11
  %14 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v = getelementptr inbounds %struct._stmt, %struct._stmt* %14, i32 0, i32 1
  %Try = bitcast %union.anon.35* %v to %struct.anon.47*
  %body17 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try, i32 0, i32 0
  %15 = load %struct.asdl_seq*, %struct.asdl_seq** %body17, align 8
  store %struct.asdl_seq* %15, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.16
  %16 = load i32, i32* %_i, align 4
  %conv = sext i32 %16 to i64
  %17 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp18 = icmp eq %struct.asdl_seq* %17, null
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %18 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %18, i32 0, i32 0
  %19 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %19, %cond.false ]
  %cmp20 = icmp slt i64 %conv, %cond
  br i1 %cmp20, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %20 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %20 to i64
  %21 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %21, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %22 = load i8*, i8** %arrayidx, align 8
  %23 = bitcast i8* %22 to %struct._stmt*
  store %struct._stmt* %23, %struct._stmt** %elt, align 8
  %24 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %25 = load %struct._stmt*, %struct._stmt** %elt, align 8
  %call22 = call i32 @compiler_visit_stmt(%struct.compiler* %24, %struct._stmt* %25)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.25
  %26 = load i32, i32* %_i, align 4
  %inc = add i32 %26, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call26 = call i32 @compiler_addop(%struct.compiler* %27, i32 87)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %for.end
  %28 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %29 = load %struct.basicblock_*, %struct.basicblock_** %body, align 8
  call void @compiler_pop_fblock(%struct.compiler* %28, i32 1, %struct.basicblock_* %29)
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %31 = load %struct.basicblock_*, %struct.basicblock_** %orelse, align 8
  %call30 = call i32 @compiler_addop_j(%struct.compiler* %30, i32 110, %struct.basicblock_* %31, i32 0)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %if.end.29
  store i32 0, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end.29
  %32 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v34 = getelementptr inbounds %struct._stmt, %struct._stmt* %32, i32 0, i32 1
  %Try35 = bitcast %union.anon.35* %v34 to %struct.anon.47*
  %handlers = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try35, i32 0, i32 1
  %33 = load %struct.asdl_seq*, %struct.asdl_seq** %handlers, align 8
  %cmp36 = icmp eq %struct.asdl_seq* %33, null
  br i1 %cmp36, label %cond.true.38, label %cond.false.39

cond.true.38:                                     ; preds = %if.end.33
  br label %cond.end.44

cond.false.39:                                    ; preds = %if.end.33
  %34 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v40 = getelementptr inbounds %struct._stmt, %struct._stmt* %34, i32 0, i32 1
  %Try41 = bitcast %union.anon.35* %v40 to %struct.anon.47*
  %handlers42 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try41, i32 0, i32 1
  %35 = load %struct.asdl_seq*, %struct.asdl_seq** %handlers42, align 8
  %size43 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %35, i32 0, i32 0
  %36 = load i64, i64* %size43, align 8
  br label %cond.end.44

cond.end.44:                                      ; preds = %cond.false.39, %cond.true.38
  %cond45 = phi i64 [ 0, %cond.true.38 ], [ %36, %cond.false.39 ]
  store i64 %cond45, i64* %n, align 8
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %38 = load %struct.basicblock_*, %struct.basicblock_** %except, align 8
  %call46 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %37, %struct.basicblock_* %38)
  store i64 0, i64* %i, align 8
  br label %for.cond.47

for.cond.47:                                      ; preds = %for.inc.247, %cond.end.44
  %39 = load i64, i64* %i, align 8
  %40 = load i64, i64* %n, align 8
  %cmp48 = icmp slt i64 %39, %40
  br i1 %cmp48, label %for.body.50, label %for.end.249

for.body.50:                                      ; preds = %for.cond.47
  %41 = load i64, i64* %i, align 8
  %42 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v51 = getelementptr inbounds %struct._stmt, %struct._stmt* %42, i32 0, i32 1
  %Try52 = bitcast %union.anon.35* %v51 to %struct.anon.47*
  %handlers53 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try52, i32 0, i32 1
  %43 = load %struct.asdl_seq*, %struct.asdl_seq** %handlers53, align 8
  %elements54 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %43, i32 0, i32 1
  %arrayidx55 = getelementptr [1 x i8*], [1 x i8*]* %elements54, i32 0, i64 %41
  %44 = load i8*, i8** %arrayidx55, align 8
  %45 = bitcast i8* %44 to %struct._excepthandler*
  store %struct._excepthandler* %45, %struct._excepthandler** %handler, align 8
  %46 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v56 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %46, i32 0, i32 1
  %ExceptHandler = bitcast %union.anon.54* %v56 to %struct.anon.55*
  %type = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler, i32 0, i32 0
  %47 = load %struct._expr*, %struct._expr** %type, align 8
  %tobool57 = icmp ne %struct._expr* %47, null
  br i1 %tobool57, label %if.end.62, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body.50
  %48 = load i64, i64* %i, align 8
  %49 = load i64, i64* %n, align 8
  %sub = sub i64 %49, 1
  %cmp58 = icmp slt i64 %48, %sub
  br i1 %cmp58, label %if.then.60, label %if.end.62

if.then.60:                                       ; preds = %land.lhs.true
  %50 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call61 = call i32 @compiler_error(%struct.compiler* %50, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.31, i32 0, i32 0))
  store i32 %call61, i32* %retval
  br label %return

if.end.62:                                        ; preds = %land.lhs.true, %for.body.50
  %51 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %51, i32 0, i32 7
  %52 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_lineno_set = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %52, i32 0, i32 19
  store i32 0, i32* %u_lineno_set, align 4
  %53 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %lineno = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %53, i32 0, i32 2
  %54 = load i32, i32* %lineno, align 4
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u63 = getelementptr inbounds %struct.compiler, %struct.compiler* %55, i32 0, i32 7
  %56 = load %struct.compiler_unit*, %struct.compiler_unit** %u63, align 8
  %u_lineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %56, i32 0, i32 17
  store i32 %54, i32* %u_lineno, align 4
  %57 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %col_offset = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %57, i32 0, i32 3
  %58 = load i32, i32* %col_offset, align 4
  %59 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u64 = getelementptr inbounds %struct.compiler, %struct.compiler* %59, i32 0, i32 7
  %60 = load %struct.compiler_unit*, %struct.compiler_unit** %u64, align 8
  %u_col_offset = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %60, i32 0, i32 18
  store i32 %58, i32* %u_col_offset, align 4
  %61 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call65 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %61)
  store %struct.basicblock_* %call65, %struct.basicblock_** %except, align 8
  %62 = load %struct.basicblock_*, %struct.basicblock_** %except, align 8
  %cmp66 = icmp eq %struct.basicblock_* %62, null
  br i1 %cmp66, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.end.62
  store i32 0, i32* %retval
  br label %return

if.end.69:                                        ; preds = %if.end.62
  %63 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v70 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %63, i32 0, i32 1
  %ExceptHandler71 = bitcast %union.anon.54* %v70 to %struct.anon.55*
  %type72 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler71, i32 0, i32 0
  %64 = load %struct._expr*, %struct._expr** %type72, align 8
  %tobool73 = icmp ne %struct._expr* %64, null
  br i1 %tobool73, label %if.then.74, label %if.end.94

if.then.74:                                       ; preds = %if.end.69
  %65 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call75 = call i32 @compiler_addop(%struct.compiler* %65, i32 4)
  %tobool76 = icmp ne i32 %call75, 0
  br i1 %tobool76, label %if.end.78, label %if.then.77

if.then.77:                                       ; preds = %if.then.74
  store i32 0, i32* %retval
  br label %return

if.end.78:                                        ; preds = %if.then.74
  %66 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %67 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v79 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %67, i32 0, i32 1
  %ExceptHandler80 = bitcast %union.anon.54* %v79 to %struct.anon.55*
  %type81 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler80, i32 0, i32 0
  %68 = load %struct._expr*, %struct._expr** %type81, align 8
  %call82 = call i32 @compiler_visit_expr(%struct.compiler* %66, %struct._expr* %68)
  %tobool83 = icmp ne i32 %call82, 0
  br i1 %tobool83, label %if.end.85, label %if.then.84

if.then.84:                                       ; preds = %if.end.78
  store i32 0, i32* %retval
  br label %return

if.end.85:                                        ; preds = %if.end.78
  %69 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call86 = call i32 @compiler_addop_i(%struct.compiler* %69, i32 107, i64 10)
  %tobool87 = icmp ne i32 %call86, 0
  br i1 %tobool87, label %if.end.89, label %if.then.88

if.then.88:                                       ; preds = %if.end.85
  store i32 0, i32* %retval
  br label %return

if.end.89:                                        ; preds = %if.end.85
  %70 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %71 = load %struct.basicblock_*, %struct.basicblock_** %except, align 8
  %call90 = call i32 @compiler_addop_j(%struct.compiler* %70, i32 114, %struct.basicblock_* %71, i32 1)
  %tobool91 = icmp ne i32 %call90, 0
  br i1 %tobool91, label %if.end.93, label %if.then.92

if.then.92:                                       ; preds = %if.end.89
  store i32 0, i32* %retval
  br label %return

if.end.93:                                        ; preds = %if.end.89
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.end.69
  %72 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call95 = call i32 @compiler_addop(%struct.compiler* %72, i32 1)
  %tobool96 = icmp ne i32 %call95, 0
  br i1 %tobool96, label %if.end.98, label %if.then.97

if.then.97:                                       ; preds = %if.end.94
  store i32 0, i32* %retval
  br label %return

if.end.98:                                        ; preds = %if.end.94
  %73 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v99 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %73, i32 0, i32 1
  %ExceptHandler100 = bitcast %union.anon.54* %v99 to %struct.anon.55*
  %name = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler100, i32 0, i32 1
  %74 = load %struct._object*, %struct._object** %name, align 8
  %tobool101 = icmp ne %struct._object* %74, null
  br i1 %tobool101, label %if.then.102, label %if.else

if.then.102:                                      ; preds = %if.end.98
  %75 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call103 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %75)
  store %struct.basicblock_* %call103, %struct.basicblock_** %cleanup_end, align 8
  %76 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call104 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %76)
  store %struct.basicblock_* %call104, %struct.basicblock_** %cleanup_body, align 8
  %77 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_end, align 8
  %tobool105 = icmp ne %struct.basicblock_* %77, null
  br i1 %tobool105, label %if.end.109, label %lor.lhs.false.106

lor.lhs.false.106:                                ; preds = %if.then.102
  %78 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body, align 8
  %tobool107 = icmp ne %struct.basicblock_* %78, null
  br i1 %tobool107, label %if.end.109, label %if.then.108

if.then.108:                                      ; preds = %lor.lhs.false.106
  store i32 0, i32* %retval
  br label %return

if.end.109:                                       ; preds = %lor.lhs.false.106, %if.then.102
  %79 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %80 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v110 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %80, i32 0, i32 1
  %ExceptHandler111 = bitcast %union.anon.54* %v110 to %struct.anon.55*
  %name112 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler111, i32 0, i32 1
  %81 = load %struct._object*, %struct._object** %name112, align 8
  %call113 = call i32 @compiler_nameop(%struct.compiler* %79, %struct._object* %81, i32 2)
  %82 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call114 = call i32 @compiler_addop(%struct.compiler* %82, i32 1)
  %tobool115 = icmp ne i32 %call114, 0
  br i1 %tobool115, label %if.end.117, label %if.then.116

if.then.116:                                      ; preds = %if.end.109
  store i32 0, i32* %retval
  br label %return

if.end.117:                                       ; preds = %if.end.109
  %83 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %84 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_end, align 8
  %call118 = call i32 @compiler_addop_j(%struct.compiler* %83, i32 122, %struct.basicblock_* %84, i32 0)
  %tobool119 = icmp ne i32 %call118, 0
  br i1 %tobool119, label %if.end.121, label %if.then.120

if.then.120:                                      ; preds = %if.end.117
  store i32 0, i32* %retval
  br label %return

if.end.121:                                       ; preds = %if.end.117
  %85 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %86 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body, align 8
  %call122 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %85, %struct.basicblock_* %86)
  %87 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %88 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body, align 8
  %call123 = call i32 @compiler_push_fblock(%struct.compiler* %87, i32 2, %struct.basicblock_* %88)
  %tobool124 = icmp ne i32 %call123, 0
  br i1 %tobool124, label %if.end.126, label %if.then.125

if.then.125:                                      ; preds = %if.end.121
  store i32 0, i32* %retval
  br label %return

if.end.126:                                       ; preds = %if.end.121
  %89 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v129 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %89, i32 0, i32 1
  %ExceptHandler130 = bitcast %union.anon.54* %v129 to %struct.anon.55*
  %body131 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler130, i32 0, i32 2
  %90 = load %struct.asdl_seq*, %struct.asdl_seq** %body131, align 8
  store %struct.asdl_seq* %90, %struct.asdl_seq** %seq128, align 8
  store i32 0, i32* %_i127, align 4
  br label %for.cond.132

for.cond.132:                                     ; preds = %for.inc.152, %if.end.126
  %91 = load i32, i32* %_i127, align 4
  %conv133 = sext i32 %91 to i64
  %92 = load %struct.asdl_seq*, %struct.asdl_seq** %seq128, align 8
  %cmp134 = icmp eq %struct.asdl_seq* %92, null
  br i1 %cmp134, label %cond.true.136, label %cond.false.137

cond.true.136:                                    ; preds = %for.cond.132
  br label %cond.end.139

cond.false.137:                                   ; preds = %for.cond.132
  %93 = load %struct.asdl_seq*, %struct.asdl_seq** %seq128, align 8
  %size138 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %93, i32 0, i32 0
  %94 = load i64, i64* %size138, align 8
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.137, %cond.true.136
  %cond140 = phi i64 [ 0, %cond.true.136 ], [ %94, %cond.false.137 ]
  %cmp141 = icmp slt i64 %conv133, %cond140
  br i1 %cmp141, label %for.body.143, label %for.end.154

for.body.143:                                     ; preds = %cond.end.139
  %95 = load i32, i32* %_i127, align 4
  %idxprom145 = sext i32 %95 to i64
  %96 = load %struct.asdl_seq*, %struct.asdl_seq** %seq128, align 8
  %elements146 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %96, i32 0, i32 1
  %arrayidx147 = getelementptr [1 x i8*], [1 x i8*]* %elements146, i32 0, i64 %idxprom145
  %97 = load i8*, i8** %arrayidx147, align 8
  %98 = bitcast i8* %97 to %struct._stmt*
  store %struct._stmt* %98, %struct._stmt** %elt144, align 8
  %99 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %100 = load %struct._stmt*, %struct._stmt** %elt144, align 8
  %call148 = call i32 @compiler_visit_stmt(%struct.compiler* %99, %struct._stmt* %100)
  %tobool149 = icmp ne i32 %call148, 0
  br i1 %tobool149, label %if.end.151, label %if.then.150

if.then.150:                                      ; preds = %for.body.143
  store i32 0, i32* %retval
  br label %return

if.end.151:                                       ; preds = %for.body.143
  br label %for.inc.152

for.inc.152:                                      ; preds = %if.end.151
  %101 = load i32, i32* %_i127, align 4
  %inc153 = add i32 %101, 1
  store i32 %inc153, i32* %_i127, align 4
  br label %for.cond.132

for.end.154:                                      ; preds = %cond.end.139
  %102 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call155 = call i32 @compiler_addop(%struct.compiler* %102, i32 87)
  %tobool156 = icmp ne i32 %call155, 0
  br i1 %tobool156, label %if.end.158, label %if.then.157

if.then.157:                                      ; preds = %for.end.154
  store i32 0, i32* %retval
  br label %return

if.end.158:                                       ; preds = %for.end.154
  %103 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call159 = call i32 @compiler_addop(%struct.compiler* %103, i32 89)
  %tobool160 = icmp ne i32 %call159, 0
  br i1 %tobool160, label %if.end.162, label %if.then.161

if.then.161:                                      ; preds = %if.end.158
  store i32 0, i32* %retval
  br label %return

if.end.162:                                       ; preds = %if.end.158
  %104 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %105 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body, align 8
  call void @compiler_pop_fblock(%struct.compiler* %104, i32 2, %struct.basicblock_* %105)
  %106 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %107 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u163 = getelementptr inbounds %struct.compiler, %struct.compiler* %107, i32 0, i32 7
  %108 = load %struct.compiler_unit*, %struct.compiler_unit** %u163, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %108, i32 0, i32 4
  %109 = load %struct._object*, %struct._object** %u_consts, align 8
  %call164 = call i32 @compiler_addop_o(%struct.compiler* %106, i32 100, %struct._object* %109, %struct._object* @_Py_NoneStruct)
  %tobool165 = icmp ne i32 %call164, 0
  br i1 %tobool165, label %if.end.167, label %if.then.166

if.then.166:                                      ; preds = %if.end.162
  store i32 0, i32* %retval
  br label %return

if.end.167:                                       ; preds = %if.end.162
  %110 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %111 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_end, align 8
  %call168 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %110, %struct.basicblock_* %111)
  %112 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %113 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_end, align 8
  %call169 = call i32 @compiler_push_fblock(%struct.compiler* %112, i32 3, %struct.basicblock_* %113)
  %tobool170 = icmp ne i32 %call169, 0
  br i1 %tobool170, label %if.end.172, label %if.then.171

if.then.171:                                      ; preds = %if.end.167
  store i32 0, i32* %retval
  br label %return

if.end.172:                                       ; preds = %if.end.167
  %114 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %115 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u173 = getelementptr inbounds %struct.compiler, %struct.compiler* %115, i32 0, i32 7
  %116 = load %struct.compiler_unit*, %struct.compiler_unit** %u173, align 8
  %u_consts174 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %116, i32 0, i32 4
  %117 = load %struct._object*, %struct._object** %u_consts174, align 8
  %call175 = call i32 @compiler_addop_o(%struct.compiler* %114, i32 100, %struct._object* %117, %struct._object* @_Py_NoneStruct)
  %tobool176 = icmp ne i32 %call175, 0
  br i1 %tobool176, label %if.end.178, label %if.then.177

if.then.177:                                      ; preds = %if.end.172
  store i32 0, i32* %retval
  br label %return

if.end.178:                                       ; preds = %if.end.172
  %118 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %119 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v179 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %119, i32 0, i32 1
  %ExceptHandler180 = bitcast %union.anon.54* %v179 to %struct.anon.55*
  %name181 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler180, i32 0, i32 1
  %120 = load %struct._object*, %struct._object** %name181, align 8
  %call182 = call i32 @compiler_nameop(%struct.compiler* %118, %struct._object* %120, i32 2)
  %121 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %122 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v183 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %122, i32 0, i32 1
  %ExceptHandler184 = bitcast %union.anon.54* %v183 to %struct.anon.55*
  %name185 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler184, i32 0, i32 1
  %123 = load %struct._object*, %struct._object** %name185, align 8
  %call186 = call i32 @compiler_nameop(%struct.compiler* %121, %struct._object* %123, i32 3)
  %124 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call187 = call i32 @compiler_addop(%struct.compiler* %124, i32 88)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end.190, label %if.then.189

if.then.189:                                      ; preds = %if.end.178
  store i32 0, i32* %retval
  br label %return

if.end.190:                                       ; preds = %if.end.178
  %125 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %126 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_end, align 8
  call void @compiler_pop_fblock(%struct.compiler* %125, i32 3, %struct.basicblock_* %126)
  br label %if.end.241

if.else:                                          ; preds = %if.end.98
  %127 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call192 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %127)
  store %struct.basicblock_* %call192, %struct.basicblock_** %cleanup_body191, align 8
  %128 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body191, align 8
  %tobool193 = icmp ne %struct.basicblock_* %128, null
  br i1 %tobool193, label %if.end.195, label %if.then.194

if.then.194:                                      ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.195:                                       ; preds = %if.else
  %129 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call196 = call i32 @compiler_addop(%struct.compiler* %129, i32 1)
  %tobool197 = icmp ne i32 %call196, 0
  br i1 %tobool197, label %if.end.199, label %if.then.198

if.then.198:                                      ; preds = %if.end.195
  store i32 0, i32* %retval
  br label %return

if.end.199:                                       ; preds = %if.end.195
  %130 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call200 = call i32 @compiler_addop(%struct.compiler* %130, i32 1)
  %tobool201 = icmp ne i32 %call200, 0
  br i1 %tobool201, label %if.end.203, label %if.then.202

if.then.202:                                      ; preds = %if.end.199
  store i32 0, i32* %retval
  br label %return

if.end.203:                                       ; preds = %if.end.199
  %131 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %132 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body191, align 8
  %call204 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %131, %struct.basicblock_* %132)
  %133 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %134 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body191, align 8
  %call205 = call i32 @compiler_push_fblock(%struct.compiler* %133, i32 2, %struct.basicblock_* %134)
  %tobool206 = icmp ne i32 %call205, 0
  br i1 %tobool206, label %if.end.208, label %if.then.207

if.then.207:                                      ; preds = %if.end.203
  store i32 0, i32* %retval
  br label %return

if.end.208:                                       ; preds = %if.end.203
  %135 = load %struct._excepthandler*, %struct._excepthandler** %handler, align 8
  %v211 = getelementptr inbounds %struct._excepthandler, %struct._excepthandler* %135, i32 0, i32 1
  %ExceptHandler212 = bitcast %union.anon.54* %v211 to %struct.anon.55*
  %body213 = getelementptr inbounds %struct.anon.55, %struct.anon.55* %ExceptHandler212, i32 0, i32 2
  %136 = load %struct.asdl_seq*, %struct.asdl_seq** %body213, align 8
  store %struct.asdl_seq* %136, %struct.asdl_seq** %seq210, align 8
  store i32 0, i32* %_i209, align 4
  br label %for.cond.214

for.cond.214:                                     ; preds = %for.inc.234, %if.end.208
  %137 = load i32, i32* %_i209, align 4
  %conv215 = sext i32 %137 to i64
  %138 = load %struct.asdl_seq*, %struct.asdl_seq** %seq210, align 8
  %cmp216 = icmp eq %struct.asdl_seq* %138, null
  br i1 %cmp216, label %cond.true.218, label %cond.false.219

cond.true.218:                                    ; preds = %for.cond.214
  br label %cond.end.221

cond.false.219:                                   ; preds = %for.cond.214
  %139 = load %struct.asdl_seq*, %struct.asdl_seq** %seq210, align 8
  %size220 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %139, i32 0, i32 0
  %140 = load i64, i64* %size220, align 8
  br label %cond.end.221

cond.end.221:                                     ; preds = %cond.false.219, %cond.true.218
  %cond222 = phi i64 [ 0, %cond.true.218 ], [ %140, %cond.false.219 ]
  %cmp223 = icmp slt i64 %conv215, %cond222
  br i1 %cmp223, label %for.body.225, label %for.end.236

for.body.225:                                     ; preds = %cond.end.221
  %141 = load i32, i32* %_i209, align 4
  %idxprom227 = sext i32 %141 to i64
  %142 = load %struct.asdl_seq*, %struct.asdl_seq** %seq210, align 8
  %elements228 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %142, i32 0, i32 1
  %arrayidx229 = getelementptr [1 x i8*], [1 x i8*]* %elements228, i32 0, i64 %idxprom227
  %143 = load i8*, i8** %arrayidx229, align 8
  %144 = bitcast i8* %143 to %struct._stmt*
  store %struct._stmt* %144, %struct._stmt** %elt226, align 8
  %145 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %146 = load %struct._stmt*, %struct._stmt** %elt226, align 8
  %call230 = call i32 @compiler_visit_stmt(%struct.compiler* %145, %struct._stmt* %146)
  %tobool231 = icmp ne i32 %call230, 0
  br i1 %tobool231, label %if.end.233, label %if.then.232

if.then.232:                                      ; preds = %for.body.225
  store i32 0, i32* %retval
  br label %return

if.end.233:                                       ; preds = %for.body.225
  br label %for.inc.234

for.inc.234:                                      ; preds = %if.end.233
  %147 = load i32, i32* %_i209, align 4
  %inc235 = add i32 %147, 1
  store i32 %inc235, i32* %_i209, align 4
  br label %for.cond.214

for.end.236:                                      ; preds = %cond.end.221
  %148 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call237 = call i32 @compiler_addop(%struct.compiler* %148, i32 89)
  %tobool238 = icmp ne i32 %call237, 0
  br i1 %tobool238, label %if.end.240, label %if.then.239

if.then.239:                                      ; preds = %for.end.236
  store i32 0, i32* %retval
  br label %return

if.end.240:                                       ; preds = %for.end.236
  %149 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %150 = load %struct.basicblock_*, %struct.basicblock_** %cleanup_body191, align 8
  call void @compiler_pop_fblock(%struct.compiler* %149, i32 2, %struct.basicblock_* %150)
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.240, %if.end.190
  %151 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %152 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call242 = call i32 @compiler_addop_j(%struct.compiler* %151, i32 110, %struct.basicblock_* %152, i32 0)
  %tobool243 = icmp ne i32 %call242, 0
  br i1 %tobool243, label %if.end.245, label %if.then.244

if.then.244:                                      ; preds = %if.end.241
  store i32 0, i32* %retval
  br label %return

if.end.245:                                       ; preds = %if.end.241
  %153 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %154 = load %struct.basicblock_*, %struct.basicblock_** %except, align 8
  %call246 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %153, %struct.basicblock_* %154)
  br label %for.inc.247

for.inc.247:                                      ; preds = %if.end.245
  %155 = load i64, i64* %i, align 8
  %inc248 = add i64 %155, 1
  store i64 %inc248, i64* %i, align 8
  br label %for.cond.47

for.end.249:                                      ; preds = %for.cond.47
  %156 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call250 = call i32 @compiler_addop(%struct.compiler* %156, i32 88)
  %tobool251 = icmp ne i32 %call250, 0
  br i1 %tobool251, label %if.end.253, label %if.then.252

if.then.252:                                      ; preds = %for.end.249
  store i32 0, i32* %retval
  br label %return

if.end.253:                                       ; preds = %for.end.249
  %157 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %158 = load %struct.basicblock_*, %struct.basicblock_** %orelse, align 8
  %call254 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %157, %struct.basicblock_* %158)
  %159 = load %struct._stmt*, %struct._stmt** %s.addr, align 8
  %v257 = getelementptr inbounds %struct._stmt, %struct._stmt* %159, i32 0, i32 1
  %Try258 = bitcast %union.anon.35* %v257 to %struct.anon.47*
  %orelse259 = getelementptr inbounds %struct.anon.47, %struct.anon.47* %Try258, i32 0, i32 2
  %160 = load %struct.asdl_seq*, %struct.asdl_seq** %orelse259, align 8
  store %struct.asdl_seq* %160, %struct.asdl_seq** %seq256, align 8
  store i32 0, i32* %_i255, align 4
  br label %for.cond.260

for.cond.260:                                     ; preds = %for.inc.280, %if.end.253
  %161 = load i32, i32* %_i255, align 4
  %conv261 = sext i32 %161 to i64
  %162 = load %struct.asdl_seq*, %struct.asdl_seq** %seq256, align 8
  %cmp262 = icmp eq %struct.asdl_seq* %162, null
  br i1 %cmp262, label %cond.true.264, label %cond.false.265

cond.true.264:                                    ; preds = %for.cond.260
  br label %cond.end.267

cond.false.265:                                   ; preds = %for.cond.260
  %163 = load %struct.asdl_seq*, %struct.asdl_seq** %seq256, align 8
  %size266 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %163, i32 0, i32 0
  %164 = load i64, i64* %size266, align 8
  br label %cond.end.267

cond.end.267:                                     ; preds = %cond.false.265, %cond.true.264
  %cond268 = phi i64 [ 0, %cond.true.264 ], [ %164, %cond.false.265 ]
  %cmp269 = icmp slt i64 %conv261, %cond268
  br i1 %cmp269, label %for.body.271, label %for.end.282

for.body.271:                                     ; preds = %cond.end.267
  %165 = load i32, i32* %_i255, align 4
  %idxprom273 = sext i32 %165 to i64
  %166 = load %struct.asdl_seq*, %struct.asdl_seq** %seq256, align 8
  %elements274 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %166, i32 0, i32 1
  %arrayidx275 = getelementptr [1 x i8*], [1 x i8*]* %elements274, i32 0, i64 %idxprom273
  %167 = load i8*, i8** %arrayidx275, align 8
  %168 = bitcast i8* %167 to %struct._stmt*
  store %struct._stmt* %168, %struct._stmt** %elt272, align 8
  %169 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %170 = load %struct._stmt*, %struct._stmt** %elt272, align 8
  %call276 = call i32 @compiler_visit_stmt(%struct.compiler* %169, %struct._stmt* %170)
  %tobool277 = icmp ne i32 %call276, 0
  br i1 %tobool277, label %if.end.279, label %if.then.278

if.then.278:                                      ; preds = %for.body.271
  store i32 0, i32* %retval
  br label %return

if.end.279:                                       ; preds = %for.body.271
  br label %for.inc.280

for.inc.280:                                      ; preds = %if.end.279
  %171 = load i32, i32* %_i255, align 4
  %inc281 = add i32 %171, 1
  store i32 %inc281, i32* %_i255, align 4
  br label %for.cond.260

for.end.282:                                      ; preds = %cond.end.267
  %172 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %173 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call283 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %172, %struct.basicblock_* %173)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.282, %if.then.278, %if.then.252, %if.then.244, %if.then.239, %if.then.232, %if.then.207, %if.then.202, %if.then.198, %if.then.194, %if.then.189, %if.then.177, %if.then.171, %if.then.166, %if.then.161, %if.then.157, %if.then.150, %if.then.125, %if.then.120, %if.then.116, %if.then.108, %if.then.97, %if.then.92, %if.then.88, %if.then.84, %if.then.77, %if.then.68, %if.then.60, %if.then.32, %if.then.28, %if.then.24, %if.then.15, %if.then.10, %if.then
  %174 = load i32, i32* %retval
  ret i32 %174
}

declare %struct._object* @PyUnicode_FromString(i8*) #1

declare i32 @PyErr_WarnExplicitObject(%struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compiler_addop_name(%struct.compiler* %c, i32 %opcode, %struct._object* %dict, %struct._object* %o) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %opcode.addr = alloca i32, align 4
  %dict.addr = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %arg = alloca i64, align 8
  %mangled = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %opcode, i32* %opcode.addr, align 4
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_private = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 9
  %2 = load %struct._object*, %struct._object** %u_private, align 8
  %3 = load %struct._object*, %struct._object** %o.addr, align 8
  %call = call %struct._object* @_Py_Mangle(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call, %struct._object** %mangled, align 8
  %4 = load %struct._object*, %struct._object** %mangled, align 8
  %tobool = icmp ne %struct._object* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %6 = load %struct._object*, %struct._object** %dict.addr, align 8
  %7 = load %struct._object*, %struct._object** %mangled, align 8
  %call1 = call i64 @compiler_add_o(%struct.compiler* %5, %struct._object* %6, %struct._object* %7)
  store i64 %call1, i64* %arg, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %mangled, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end.3

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end.3
  %15 = load i64, i64* %arg, align 8
  %cmp4 = icmp slt i64 %15, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %do.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %do.end
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load i32, i32* %opcode.addr, align 4
  %18 = load i64, i64* %arg, align 8
  %call7 = call i32 @compiler_addop_i(%struct.compiler* %16, i32 %17, i64 %18)
  store i32 %call7, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_import_as(%struct.compiler* %c, %struct._object* %name, %struct._object* %asname) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %name.addr = alloca %struct._object*, align 8
  %asname.addr = alloca %struct._object*, align 8
  %dot = alloca i64, align 8
  %pos = alloca i64, align 8
  %attr = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._object* %asname, %struct._object** %asname.addr, align 8
  %0 = load %struct._object*, %struct._object** %name.addr, align 8
  %1 = load %struct._object*, %struct._object** %name.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %2, i32 0, i32 1
  %3 = load i64, i64* %length, align 8
  %call = call i64 @PyUnicode_FindChar(%struct._object* %0, i32 46, i64 0, i64 %3, i32 1)
  store i64 %call, i64* %dot, align 8
  %4 = load i64, i64* %dot, align 8
  %cmp = icmp eq i64 %4, -2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %dot, align 8
  %cmp1 = icmp ne i64 %5, -1
  br i1 %cmp1, label %if.then.2, label %if.end.22

if.then.2:                                        ; preds = %if.end
  %6 = load i64, i64* %dot, align 8
  %add = add i64 %6, 1
  store i64 %add, i64* %pos, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end, %if.then.2
  %7 = load i64, i64* %dot, align 8
  %cmp3 = icmp ne i64 %7, -1
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct._object*, %struct._object** %name.addr, align 8
  %9 = load i64, i64* %pos, align 8
  %10 = load %struct._object*, %struct._object** %name.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyASCIIObject*
  %length4 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %11, i32 0, i32 1
  %12 = load i64, i64* %length4, align 8
  %call5 = call i64 @PyUnicode_FindChar(%struct._object* %8, i32 46, i64 %9, i64 %12, i32 1)
  store i64 %call5, i64* %dot, align 8
  %13 = load i64, i64* %dot, align 8
  %cmp6 = icmp eq i64 %13, -2
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %while.body
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %while.body
  %14 = load %struct._object*, %struct._object** %name.addr, align 8
  %15 = load i64, i64* %pos, align 8
  %16 = load i64, i64* %dot, align 8
  %cmp9 = icmp ne i64 %16, -1
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.8
  %17 = load i64, i64* %dot, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.8
  %18 = load %struct._object*, %struct._object** %name.addr, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyASCIIObject*
  %length10 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %19, i32 0, i32 1
  %20 = load i64, i64* %length10, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ %20, %cond.false ]
  %call11 = call %struct._object* @PyUnicode_Substring(%struct._object* %14, i64 %15, i64 %cond)
  store %struct._object* %call11, %struct._object** %attr, align 8
  %21 = load %struct._object*, %struct._object** %attr, align 8
  %tobool = icmp ne %struct._object* %21, null
  br i1 %tobool, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %cond.end
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %cond.end
  %22 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %23, i32 0, i32 7
  %24 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %24, i32 0, i32 5
  %25 = load %struct._object*, %struct._object** %u_names, align 8
  %26 = load %struct._object*, %struct._object** %attr, align 8
  %call14 = call i32 @compiler_addop_o(%struct.compiler* %22, i32 106, %struct._object* %25, %struct._object* %26)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.13
  br label %do.body

do.body:                                          ; preds = %if.end.17
  %27 = load %struct._object*, %struct._object** %attr, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %29, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp18 = icmp ne i64 %dec, 0
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %do.body
  br label %if.end.20

if.else:                                          ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %32(%struct._object* %33)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.19
  br label %do.end

do.end:                                           ; preds = %if.end.20
  %34 = load i64, i64* %dot, align 8
  %add21 = add i64 %34, 1
  store i64 %add21, i64* %pos, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.22

if.end.22:                                        ; preds = %while.end, %if.end
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %36 = load %struct._object*, %struct._object** %asname.addr, align 8
  %call23 = call i32 @compiler_nameop(%struct.compiler* %35, %struct._object* %36, i32 2)
  store i32 %call23, i32* %retval
  br label %return

return:                                           ; preds = %if.end.22, %if.then.16, %if.then.12, %if.then.7, %if.then
  %37 = load i32, i32* %retval
  ret i32 %37
}

declare %struct._object* @PyUnicode_Substring(%struct._object*, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @compiler_boolop(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %jumpi = alloca i32, align 4
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %s = alloca %struct.asdl_seq*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 1
  %BoolOp = bitcast %union.anon.4* %v to %struct.anon.5*
  %op = getelementptr inbounds %struct.anon.5, %struct.anon.5* %BoolOp, i32 0, i32 0
  %1 = load i32, i32* %op, align 4
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 111, i32* %jumpi, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 112, i32* %jumpi, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %2)
  store %struct.basicblock_* %call, %struct.basicblock_** %end, align 8
  %3 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp1 = icmp eq %struct.basicblock_* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v4 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 1
  %BoolOp5 = bitcast %union.anon.4* %v4 to %struct.anon.5*
  %values = getelementptr inbounds %struct.anon.5, %struct.anon.5* %BoolOp5, i32 0, i32 1
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %values, align 8
  store %struct.asdl_seq* %5, %struct.asdl_seq** %s, align 8
  %6 = load %struct.asdl_seq*, %struct.asdl_seq** %s, align 8
  %cmp6 = icmp eq %struct.asdl_seq* %6, null
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.3
  br label %cond.end

cond.false:                                       ; preds = %if.end.3
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %s, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %7, i32 0, i32 0
  %8 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %8, %cond.false ]
  %sub = sub i64 %cond, 1
  store i64 %sub, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %9 = load i64, i64* %i, align 8
  %10 = load i64, i64* %n, align 8
  %cmp7 = icmp slt i64 %9, %10
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %12 = load i64, i64* %i, align 8
  %13 = load %struct.asdl_seq*, %struct.asdl_seq** %s, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %13, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %12
  %14 = load i8*, i8** %arrayidx, align 8
  %15 = bitcast i8* %14 to %struct._expr*
  %call8 = call i32 @compiler_visit_expr(%struct.compiler* %11, %struct._expr* %15)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %for.body
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load i32, i32* %jumpi, align 4
  %18 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call11 = call i32 @compiler_addop_j(%struct.compiler* %16, i32 %17, %struct.basicblock_* %18, i32 1)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.end.10
  store i32 0, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.10
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %19 = load i64, i64* %i, align 8
  %inc = add i64 %19, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %21 = load i64, i64* %n, align 8
  %22 = load %struct.asdl_seq*, %struct.asdl_seq** %s, align 8
  %elements15 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %22, i32 0, i32 1
  %arrayidx16 = getelementptr [1 x i8*], [1 x i8*]* %elements15, i32 0, i64 %21
  %23 = load i8*, i8** %arrayidx16, align 8
  %24 = bitcast i8* %23 to %struct._expr*
  %call17 = call i32 @compiler_visit_expr(%struct.compiler* %20, %struct._expr* %24)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %for.end
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %26 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call21 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %25, %struct.basicblock_* %26)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.20, %if.then.19, %if.then.13, %if.then.9, %if.then.2
  %27 = load i32, i32* %retval
  ret i32 %27
}

; Function Attrs: nounwind uwtable
define internal i32 @binop(%struct.compiler* %c, i32 %op) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %op.addr = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.3
    i32 5, label %sw.bb.4
    i32 6, label %sw.bb.5
    i32 7, label %sw.bb.6
    i32 8, label %sw.bb.7
    i32 9, label %sw.bb.8
    i32 10, label %sw.bb.9
    i32 11, label %sw.bb.10
    i32 12, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %entry
  store i32 23, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i32 24, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i32 20, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i32 27, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i32 22, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i32 19, i32* %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i32 62, i32* %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i32 63, i32* %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i32 66, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i32 65, i32* %retval
  br label %return

sw.bb.10:                                         ; preds = %entry
  store i32 64, i32* %retval
  br label %return

sw.bb.11:                                         ; preds = %entry
  store i32 26, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %2 = load i32, i32* %op.addr, align 4
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.42, i32 0, i32 0), i32 %2)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.11, %sw.bb.10, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @unaryop(i32 %op) #0 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca i32, align 4
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry
  store i32 15, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i32 12, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i32 10, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i32 11, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %2 = load i32, i32* %op.addr, align 4
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.43, i32 0, i32 0), i32 %2)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_lambda(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %qualname = alloca %struct._object*, align 8
  %kw_default_count = alloca i32, align 4
  %arglength = alloca i64, align 8
  %args = alloca %struct._arguments*, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt = alloca %struct._expr*, align 8
  %res = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  store i32 0, i32* %kw_default_count, align 4
  %0 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 1
  %Lambda = bitcast %union.anon.4* %v to %struct.anon.8*
  %args1 = getelementptr inbounds %struct.anon.8, %struct.anon.8* %Lambda, i32 0, i32 0
  %1 = load %struct._arguments*, %struct._arguments** %args1, align 8
  store %struct._arguments* %1, %struct._arguments** %args, align 8
  %2 = load %struct._object*, %struct._object** @compiler_lambda.name, align 8
  %tobool = icmp ne %struct._object* %2, null
  br i1 %tobool, label %if.end.4, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @compiler_lambda.name, align 8
  %3 = load %struct._object*, %struct._object** @compiler_lambda.name, align 8
  %tobool2 = icmp ne %struct._object* %3, null
  br i1 %tobool2, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %4 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults = getelementptr inbounds %struct._arguments, %struct._arguments* %4, i32 0, i32 5
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults, align 8
  %tobool5 = icmp ne %struct.asdl_seq* %5, null
  br i1 %tobool5, label %if.then.6, label %if.end.15

if.then.6:                                        ; preds = %if.end.4
  %6 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults7 = getelementptr inbounds %struct._arguments, %struct._arguments* %6, i32 0, i32 5
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults7, align 8
  store %struct.asdl_seq* %7, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.6
  %8 = load i32, i32* %_i, align 4
  %conv = sext i32 %8 to i64
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp = icmp eq %struct.asdl_seq* %9, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %10 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %10, i32 0, i32 0
  %11 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %11, %cond.false ]
  %cmp9 = icmp slt i64 %conv, %cond
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end
  %12 = load i32, i32* %_i, align 4
  %idxprom = sext i32 %12 to i64
  %13 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %13, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %14 = load i8*, i8** %arrayidx, align 8
  %15 = bitcast i8* %14 to %struct._expr*
  store %struct._expr* %15, %struct._expr** %elt, align 8
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load %struct._expr*, %struct._expr** %elt, align 8
  %call11 = call i32 @compiler_visit_expr(%struct.compiler* %16, %struct._expr* %17)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.14:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %18 = load i32, i32* %_i, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %_i, align 4
  br label %for.cond

for.end:                                          ; preds = %cond.end
  br label %if.end.15

if.end.15:                                        ; preds = %for.end, %if.end.4
  %19 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs = getelementptr inbounds %struct._arguments, %struct._arguments* %19, i32 0, i32 2
  %20 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs, align 8
  %tobool16 = icmp ne %struct.asdl_seq* %20, null
  br i1 %tobool16, label %if.then.17, label %if.end.24

if.then.17:                                       ; preds = %if.end.15
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %22 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs18 = getelementptr inbounds %struct._arguments, %struct._arguments* %22, i32 0, i32 2
  %23 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs18, align 8
  %24 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kw_defaults = getelementptr inbounds %struct._arguments, %struct._arguments* %24, i32 0, i32 3
  %25 = load %struct.asdl_seq*, %struct.asdl_seq** %kw_defaults, align 8
  %call19 = call i32 @compiler_visit_kwonlydefaults(%struct.compiler* %21, %struct.asdl_seq* %23, %struct.asdl_seq* %25)
  store i32 %call19, i32* %res, align 4
  %26 = load i32, i32* %res, align 4
  %cmp20 = icmp slt i32 %26, 0
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.17
  store i32 0, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.then.17
  %27 = load i32, i32* %res, align 4
  store i32 %27, i32* %kw_default_count, align 4
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.15
  %28 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %29 = load %struct._object*, %struct._object** @compiler_lambda.name, align 8
  %30 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %31 = bitcast %struct._expr* %30 to i8*
  %32 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %lineno = getelementptr inbounds %struct._expr, %struct._expr* %32, i32 0, i32 2
  %33 = load i32, i32* %lineno, align 4
  %call25 = call i32 @compiler_enter_scope(%struct.compiler* %28, %struct._object* %29, i32 3, i8* %31, i32 %33)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.end.24
  store i32 0, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  %34 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %35 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %35, i32 0, i32 7
  %36 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %36, i32 0, i32 4
  %37 = load %struct._object*, %struct._object** %u_consts, align 8
  %call29 = call i64 @compiler_add_o(%struct.compiler* %34, %struct._object* %37, %struct._object* @_Py_NoneStruct)
  %cmp30 = icmp slt i64 %call29, 0
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.28
  store i32 0, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end.28
  %38 = load %struct._arguments*, %struct._arguments** %args, align 8
  %args34 = getelementptr inbounds %struct._arguments, %struct._arguments* %38, i32 0, i32 0
  %39 = load %struct.asdl_seq*, %struct.asdl_seq** %args34, align 8
  %cmp35 = icmp eq %struct.asdl_seq* %39, null
  br i1 %cmp35, label %cond.true.37, label %cond.false.38

cond.true.37:                                     ; preds = %if.end.33
  br label %cond.end.41

cond.false.38:                                    ; preds = %if.end.33
  %40 = load %struct._arguments*, %struct._arguments** %args, align 8
  %args39 = getelementptr inbounds %struct._arguments, %struct._arguments* %40, i32 0, i32 0
  %41 = load %struct.asdl_seq*, %struct.asdl_seq** %args39, align 8
  %size40 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %41, i32 0, i32 0
  %42 = load i64, i64* %size40, align 8
  br label %cond.end.41

cond.end.41:                                      ; preds = %cond.false.38, %cond.true.37
  %cond42 = phi i64 [ 0, %cond.true.37 ], [ %42, %cond.false.38 ]
  %43 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u43 = getelementptr inbounds %struct.compiler, %struct.compiler* %43, i32 0, i32 7
  %44 = load %struct.compiler_unit*, %struct.compiler_unit** %u43, align 8
  %u_argcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %44, i32 0, i32 10
  store i64 %cond42, i64* %u_argcount, align 8
  %45 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs44 = getelementptr inbounds %struct._arguments, %struct._arguments* %45, i32 0, i32 2
  %46 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs44, align 8
  %cmp45 = icmp eq %struct.asdl_seq* %46, null
  br i1 %cmp45, label %cond.true.47, label %cond.false.48

cond.true.47:                                     ; preds = %cond.end.41
  br label %cond.end.51

cond.false.48:                                    ; preds = %cond.end.41
  %47 = load %struct._arguments*, %struct._arguments** %args, align 8
  %kwonlyargs49 = getelementptr inbounds %struct._arguments, %struct._arguments* %47, i32 0, i32 2
  %48 = load %struct.asdl_seq*, %struct.asdl_seq** %kwonlyargs49, align 8
  %size50 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %48, i32 0, i32 0
  %49 = load i64, i64* %size50, align 8
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.48, %cond.true.47
  %cond52 = phi i64 [ 0, %cond.true.47 ], [ %49, %cond.false.48 ]
  %50 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u53 = getelementptr inbounds %struct.compiler, %struct.compiler* %50, i32 0, i32 7
  %51 = load %struct.compiler_unit*, %struct.compiler_unit** %u53, align 8
  %u_kwonlyargcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %51, i32 0, i32 11
  store i64 %cond52, i64* %u_kwonlyargcount, align 8
  %52 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %53 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v54 = getelementptr inbounds %struct._expr, %struct._expr* %53, i32 0, i32 1
  %Lambda55 = bitcast %union.anon.4* %v54 to %struct.anon.8*
  %body = getelementptr inbounds %struct.anon.8, %struct.anon.8* %Lambda55, i32 0, i32 1
  %54 = load %struct._expr*, %struct._expr** %body, align 8
  %call56 = call i32 @compiler_visit_expr(%struct.compiler* %52, %struct._expr* %54)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.end.59, label %if.then.58

if.then.58:                                       ; preds = %cond.end.51
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %55)
  store i32 0, i32* %retval
  br label %return

if.end.59:                                        ; preds = %cond.end.51
  %56 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u60 = getelementptr inbounds %struct.compiler, %struct.compiler* %56, i32 0, i32 7
  %57 = load %struct.compiler_unit*, %struct.compiler_unit** %u60, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %57, i32 0, i32 0
  %58 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  %ste_generator = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %58, i32 0, i32 10
  %bf.load = load i8, i8* %ste_generator, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool61 = icmp ne i32 %bf.cast, 0
  br i1 %tobool61, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %if.end.59
  %59 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call63 = call i32 @compiler_addop(%struct.compiler* %59, i32 1)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end.66, label %if.then.65

if.then.65:                                       ; preds = %if.then.62
  %60 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %60)
  store i32 0, i32* %retval
  br label %return

if.end.66:                                        ; preds = %if.then.62
  br label %if.end.71

if.else:                                          ; preds = %if.end.59
  %61 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call67 = call i32 @compiler_addop(%struct.compiler* %61, i32 83)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end.70, label %if.then.69

if.then.69:                                       ; preds = %if.else
  %62 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %62)
  store i32 0, i32* %retval
  br label %return

if.end.70:                                        ; preds = %if.else
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.66
  %63 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call72 = call %struct.PyCodeObject* @assemble(%struct.compiler* %63, i32 1)
  store %struct.PyCodeObject* %call72, %struct.PyCodeObject** %co, align 8
  %64 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u73 = getelementptr inbounds %struct.compiler, %struct.compiler* %64, i32 0, i32 7
  %65 = load %struct.compiler_unit*, %struct.compiler_unit** %u73, align 8
  %u_qualname = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %65, i32 0, i32 2
  %66 = load %struct._object*, %struct._object** %u_qualname, align 8
  store %struct._object* %66, %struct._object** %qualname, align 8
  %67 = load %struct._object*, %struct._object** %qualname, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt, align 8
  %inc74 = add i64 %68, 1
  store i64 %inc74, i64* %ob_refcnt, align 8
  %69 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %69)
  %70 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %cmp75 = icmp eq %struct.PyCodeObject* %70, null
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.end.71
  store i32 0, i32* %retval
  br label %return

if.end.78:                                        ; preds = %if.end.71
  %71 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults79 = getelementptr inbounds %struct._arguments, %struct._arguments* %71, i32 0, i32 5
  %72 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults79, align 8
  %cmp80 = icmp eq %struct.asdl_seq* %72, null
  br i1 %cmp80, label %cond.true.82, label %cond.false.83

cond.true.82:                                     ; preds = %if.end.78
  br label %cond.end.86

cond.false.83:                                    ; preds = %if.end.78
  %73 = load %struct._arguments*, %struct._arguments** %args, align 8
  %defaults84 = getelementptr inbounds %struct._arguments, %struct._arguments* %73, i32 0, i32 5
  %74 = load %struct.asdl_seq*, %struct.asdl_seq** %defaults84, align 8
  %size85 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %74, i32 0, i32 0
  %75 = load i64, i64* %size85, align 8
  br label %cond.end.86

cond.end.86:                                      ; preds = %cond.false.83, %cond.true.82
  %cond87 = phi i64 [ 0, %cond.true.82 ], [ %75, %cond.false.83 ]
  store i64 %cond87, i64* %arglength, align 8
  %76 = load i32, i32* %kw_default_count, align 4
  %shl = shl i32 %76, 8
  %conv88 = sext i32 %shl to i64
  %77 = load i64, i64* %arglength, align 8
  %or = or i64 %77, %conv88
  store i64 %or, i64* %arglength, align 8
  %78 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %79 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %80 = load i64, i64* %arglength, align 8
  %81 = load %struct._object*, %struct._object** %qualname, align 8
  %call89 = call i32 @compiler_make_closure(%struct.compiler* %78, %struct.PyCodeObject* %79, i64 %80, %struct._object* %81)
  br label %do.body

do.body:                                          ; preds = %cond.end.86
  %82 = load %struct._object*, %struct._object** %qualname, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt90 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt90, align 8
  %dec = add i64 %84, -1
  store i64 %dec, i64* %ob_refcnt90, align 8
  %cmp91 = icmp ne i64 %dec, 0
  br i1 %cmp91, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %do.body
  br label %if.end.95

if.else.94:                                       ; preds = %do.body
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %87(%struct._object* %88)
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.94, %if.then.93
  br label %do.end

do.end:                                           ; preds = %if.end.95
  br label %do.body.96

do.body.96:                                       ; preds = %do.end
  %89 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %90 = bitcast %struct.PyCodeObject* %89 to %struct._object*
  store %struct._object* %90, %struct._object** %_py_decref_tmp97, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 0
  %92 = load i64, i64* %ob_refcnt98, align 8
  %dec99 = add i64 %92, -1
  store i64 %dec99, i64* %ob_refcnt98, align 8
  %cmp100 = icmp ne i64 %dec99, 0
  br i1 %cmp100, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %do.body.96
  br label %if.end.106

if.else.103:                                      ; preds = %do.body.96
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 1
  %94 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 4
  %95 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  call void %95(%struct._object* %96)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.107, %if.then.77, %if.then.69, %if.then.65, %if.then.58, %if.then.32, %if.then.27, %if.then.22, %if.then.13, %if.then.3
  %97 = load i32, i32* %retval
  ret i32 %97
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_ifexp(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %end = alloca %struct.basicblock_*, align 8
  %next = alloca %struct.basicblock_*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %end, align 8
  %1 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp = icmp eq %struct.basicblock_* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call1 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %2)
  store %struct.basicblock_* %call1, %struct.basicblock_** %next, align 8
  %3 = load %struct.basicblock_*, %struct.basicblock_** %next, align 8
  %cmp2 = icmp eq %struct.basicblock_* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %IfExp = bitcast %union.anon.4* %v to %struct.anon.9*
  %test = getelementptr inbounds %struct.anon.9, %struct.anon.9* %IfExp, i32 0, i32 0
  %6 = load %struct._expr*, %struct._expr** %test, align 8
  %call5 = call i32 @compiler_visit_expr(%struct.compiler* %4, %struct._expr* %6)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %8 = load %struct.basicblock_*, %struct.basicblock_** %next, align 8
  %call8 = call i32 @compiler_addop_j(%struct.compiler* %7, i32 114, %struct.basicblock_* %8, i32 1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.end.7
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.7
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %10 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v12 = getelementptr inbounds %struct._expr, %struct._expr* %10, i32 0, i32 1
  %IfExp13 = bitcast %union.anon.4* %v12 to %struct.anon.9*
  %body = getelementptr inbounds %struct.anon.9, %struct.anon.9* %IfExp13, i32 0, i32 1
  %11 = load %struct._expr*, %struct._expr** %body, align 8
  %call14 = call i32 @compiler_visit_expr(%struct.compiler* %9, %struct._expr* %11)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.end.11
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.11
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %13 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call18 = call i32 @compiler_addop_j(%struct.compiler* %12, i32 110, %struct.basicblock_* %13, i32 0)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %15 = load %struct.basicblock_*, %struct.basicblock_** %next, align 8
  %call22 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %14, %struct.basicblock_* %15)
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v23 = getelementptr inbounds %struct._expr, %struct._expr* %17, i32 0, i32 1
  %IfExp24 = bitcast %union.anon.4* %v23 to %struct.anon.9*
  %orelse = getelementptr inbounds %struct.anon.9, %struct.anon.9* %IfExp24, i32 0, i32 2
  %18 = load %struct._expr*, %struct._expr** %orelse, align 8
  %call25 = call i32 @compiler_visit_expr(%struct.compiler* %16, %struct._expr* %18)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.end.21
  store i32 0, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.end.21
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %20 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call29 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %19, %struct.basicblock_* %20)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.28, %if.then.27, %if.then.20, %if.then.16, %if.then.10, %if.then.6, %if.then.3, %if.then
  %21 = load i32, i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_genexp(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._object*, %struct._object** @compiler_genexp.name, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end.3, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @compiler_genexp.name, align 8
  %1 = load %struct._object*, %struct._object** @compiler_genexp.name, align 8
  %tobool1 = icmp ne %struct._object* %1, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %4 = load %struct._object*, %struct._object** @compiler_genexp.name, align 8
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %GeneratorExp = bitcast %union.anon.4* %v to %struct.anon.15*
  %generators = getelementptr inbounds %struct.anon.15, %struct.anon.15* %GeneratorExp, i32 0, i32 1
  %6 = load %struct.asdl_seq*, %struct.asdl_seq** %generators, align 8
  %7 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v4 = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 1
  %GeneratorExp5 = bitcast %union.anon.4* %v4 to %struct.anon.15*
  %elt = getelementptr inbounds %struct.anon.15, %struct.anon.15* %GeneratorExp5, i32 0, i32 0
  %8 = load %struct._expr*, %struct._expr** %elt, align 8
  %call6 = call i32 @compiler_comprehension(%struct.compiler* %2, %struct._expr* %3, i32 0, %struct._object* %4, %struct.asdl_seq* %6, %struct._expr* %8, %struct._expr* null)
  store i32 %call6, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_listcomp(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._object*, %struct._object** @compiler_listcomp.name, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end.3, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.47, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @compiler_listcomp.name, align 8
  %1 = load %struct._object*, %struct._object** @compiler_listcomp.name, align 8
  %tobool1 = icmp ne %struct._object* %1, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %4 = load %struct._object*, %struct._object** @compiler_listcomp.name, align 8
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %ListComp = bitcast %union.anon.4* %v to %struct.anon.12*
  %generators = getelementptr inbounds %struct.anon.12, %struct.anon.12* %ListComp, i32 0, i32 1
  %6 = load %struct.asdl_seq*, %struct.asdl_seq** %generators, align 8
  %7 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v4 = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 1
  %ListComp5 = bitcast %union.anon.4* %v4 to %struct.anon.12*
  %elt = getelementptr inbounds %struct.anon.12, %struct.anon.12* %ListComp5, i32 0, i32 0
  %8 = load %struct._expr*, %struct._expr** %elt, align 8
  %call6 = call i32 @compiler_comprehension(%struct.compiler* %2, %struct._expr* %3, i32 1, %struct._object* %4, %struct.asdl_seq* %6, %struct._expr* %8, %struct._expr* null)
  store i32 %call6, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_setcomp(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._object*, %struct._object** @compiler_setcomp.name, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end.3, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @compiler_setcomp.name, align 8
  %1 = load %struct._object*, %struct._object** @compiler_setcomp.name, align 8
  %tobool1 = icmp ne %struct._object* %1, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %4 = load %struct._object*, %struct._object** @compiler_setcomp.name, align 8
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %SetComp = bitcast %union.anon.4* %v to %struct.anon.13*
  %generators = getelementptr inbounds %struct.anon.13, %struct.anon.13* %SetComp, i32 0, i32 1
  %6 = load %struct.asdl_seq*, %struct.asdl_seq** %generators, align 8
  %7 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v4 = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 1
  %SetComp5 = bitcast %union.anon.4* %v4 to %struct.anon.13*
  %elt = getelementptr inbounds %struct.anon.13, %struct.anon.13* %SetComp5, i32 0, i32 0
  %8 = load %struct._expr*, %struct._expr** %elt, align 8
  %call6 = call i32 @compiler_comprehension(%struct.compiler* %2, %struct._expr* %3, i32 2, %struct._object* %4, %struct.asdl_seq* %6, %struct._expr* %8, %struct._expr* null)
  store i32 %call6, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_dictcomp(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._object*, %struct._object** @compiler_dictcomp.name, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end.3, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.49, i32 0, i32 0))
  store %struct._object* %call, %struct._object** @compiler_dictcomp.name, align 8
  %1 = load %struct._object*, %struct._object** @compiler_dictcomp.name, align 8
  %tobool1 = icmp ne %struct._object* %1, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %4 = load %struct._object*, %struct._object** @compiler_dictcomp.name, align 8
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %DictComp = bitcast %union.anon.4* %v to %struct.anon.14*
  %generators = getelementptr inbounds %struct.anon.14, %struct.anon.14* %DictComp, i32 0, i32 2
  %6 = load %struct.asdl_seq*, %struct.asdl_seq** %generators, align 8
  %7 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v4 = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 1
  %DictComp5 = bitcast %union.anon.4* %v4 to %struct.anon.14*
  %key = getelementptr inbounds %struct.anon.14, %struct.anon.14* %DictComp5, i32 0, i32 0
  %8 = load %struct._expr*, %struct._expr** %key, align 8
  %9 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v6 = getelementptr inbounds %struct._expr, %struct._expr* %9, i32 0, i32 1
  %DictComp7 = bitcast %union.anon.4* %v6 to %struct.anon.14*
  %value = getelementptr inbounds %struct.anon.14, %struct.anon.14* %DictComp7, i32 0, i32 1
  %10 = load %struct._expr*, %struct._expr** %value, align 8
  %call8 = call i32 @compiler_comprehension(%struct.compiler* %2, %struct._expr* %3, i32 3, %struct._object* %4, %struct.asdl_seq* %6, %struct._expr* %8, %struct._expr* %10)
  store i32 %call8, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_compare(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %cleanup = alloca %struct.basicblock_*, align 8
  %end = alloca %struct.basicblock_*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  store %struct.basicblock_* null, %struct.basicblock_** %cleanup, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %1, i32 0, i32 1
  %Compare = bitcast %union.anon.4* %v to %struct.anon.18*
  %left = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare, i32 0, i32 0
  %2 = load %struct._expr*, %struct._expr** %left, align 8
  %call = call i32 @compiler_visit_expr(%struct.compiler* %0, %struct._expr* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v1 = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 1
  %Compare2 = bitcast %union.anon.4* %v1 to %struct.anon.18*
  %ops = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare2, i32 0, i32 1
  %4 = load %struct.asdl_int_seq*, %struct.asdl_int_seq** %ops, align 8
  %cmp = icmp eq %struct.asdl_int_seq* %4, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v3 = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %Compare4 = bitcast %union.anon.4* %v3 to %struct.anon.18*
  %ops5 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare4, i32 0, i32 1
  %6 = load %struct.asdl_int_seq*, %struct.asdl_int_seq** %ops5, align 8
  %size = getelementptr inbounds %struct.asdl_int_seq, %struct.asdl_int_seq* %6, i32 0, i32 0
  %7 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %7, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %8 = load i64, i64* %n, align 8
  %cmp6 = icmp sgt i64 %8, 1
  br i1 %cmp6, label %if.then.7, label %if.end.18

if.then.7:                                        ; preds = %cond.end
  %9 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call8 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %9)
  store %struct.basicblock_* %call8, %struct.basicblock_** %cleanup, align 8
  %10 = load %struct.basicblock_*, %struct.basicblock_** %cleanup, align 8
  %cmp9 = icmp eq %struct.basicblock_* %10, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.7
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.7
  %11 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %12 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v12 = getelementptr inbounds %struct._expr, %struct._expr* %12, i32 0, i32 1
  %Compare13 = bitcast %union.anon.4* %v12 to %struct.anon.18*
  %comparators = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare13, i32 0, i32 2
  %13 = load %struct.asdl_seq*, %struct.asdl_seq** %comparators, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %13, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 0
  %14 = load i8*, i8** %arrayidx, align 8
  %15 = bitcast i8* %14 to %struct._expr*
  %call14 = call i32 @compiler_visit_expr(%struct.compiler* %11, %struct._expr* %15)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.end.11
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.11
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %cond.end
  store i64 1, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.18
  %16 = load i64, i64* %i, align 8
  %17 = load i64, i64* %n, align 8
  %cmp19 = icmp slt i64 %16, %17
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call20 = call i32 @compiler_addop(%struct.compiler* %18, i32 4)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end.23, label %if.then.22

if.then.22:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.23:                                        ; preds = %for.body
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call24 = call i32 @compiler_addop(%struct.compiler* %19, i32 3)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %if.end.23
  store i32 0, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.end.23
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %21 = load i64, i64* %i, align 8
  %sub = sub i64 %21, 1
  %22 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v28 = getelementptr inbounds %struct._expr, %struct._expr* %22, i32 0, i32 1
  %Compare29 = bitcast %union.anon.4* %v28 to %struct.anon.18*
  %ops30 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare29, i32 0, i32 1
  %23 = load %struct.asdl_int_seq*, %struct.asdl_int_seq** %ops30, align 8
  %elements31 = getelementptr inbounds %struct.asdl_int_seq, %struct.asdl_int_seq* %23, i32 0, i32 1
  %arrayidx32 = getelementptr [1 x i32], [1 x i32]* %elements31, i32 0, i64 %sub
  %24 = load i32, i32* %arrayidx32, align 4
  %call33 = call i32 @cmpop(i32 %24)
  %conv = sext i32 %call33 to i64
  %call34 = call i32 @compiler_addop_i(%struct.compiler* %20, i32 107, i64 %conv)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end.37, label %if.then.36

if.then.36:                                       ; preds = %if.end.27
  store i32 0, i32* %retval
  br label %return

if.end.37:                                        ; preds = %if.end.27
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %26 = load %struct.basicblock_*, %struct.basicblock_** %cleanup, align 8
  %call38 = call i32 @compiler_addop_j(%struct.compiler* %25, i32 111, %struct.basicblock_* %26, i32 1)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.end.41, label %if.then.40

if.then.40:                                       ; preds = %if.end.37
  store i32 0, i32* %retval
  br label %return

if.end.41:                                        ; preds = %if.end.37
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call42 = call %struct.basicblock_* @compiler_next_block(%struct.compiler* %27)
  %cmp43 = icmp eq %struct.basicblock_* %call42, null
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.41
  store i32 0, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.end.41
  %28 = load i64, i64* %i, align 8
  %29 = load i64, i64* %n, align 8
  %sub47 = sub i64 %29, 1
  %cmp48 = icmp slt i64 %28, %sub47
  br i1 %cmp48, label %if.then.50, label %if.end.60

if.then.50:                                       ; preds = %if.end.46
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %31 = load i64, i64* %i, align 8
  %32 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v51 = getelementptr inbounds %struct._expr, %struct._expr* %32, i32 0, i32 1
  %Compare52 = bitcast %union.anon.4* %v51 to %struct.anon.18*
  %comparators53 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare52, i32 0, i32 2
  %33 = load %struct.asdl_seq*, %struct.asdl_seq** %comparators53, align 8
  %elements54 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %33, i32 0, i32 1
  %arrayidx55 = getelementptr [1 x i8*], [1 x i8*]* %elements54, i32 0, i64 %31
  %34 = load i8*, i8** %arrayidx55, align 8
  %35 = bitcast i8* %34 to %struct._expr*
  %call56 = call i32 @compiler_visit_expr(%struct.compiler* %30, %struct._expr* %35)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.end.59, label %if.then.58

if.then.58:                                       ; preds = %if.then.50
  store i32 0, i32* %retval
  br label %return

if.end.59:                                        ; preds = %if.then.50
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.end.46
  br label %for.inc

for.inc:                                          ; preds = %if.end.60
  %36 = load i64, i64* %i, align 8
  %inc = add i64 %36, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %38 = load i64, i64* %n, align 8
  %sub61 = sub i64 %38, 1
  %39 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v62 = getelementptr inbounds %struct._expr, %struct._expr* %39, i32 0, i32 1
  %Compare63 = bitcast %union.anon.4* %v62 to %struct.anon.18*
  %comparators64 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare63, i32 0, i32 2
  %40 = load %struct.asdl_seq*, %struct.asdl_seq** %comparators64, align 8
  %elements65 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %40, i32 0, i32 1
  %arrayidx66 = getelementptr [1 x i8*], [1 x i8*]* %elements65, i32 0, i64 %sub61
  %41 = load i8*, i8** %arrayidx66, align 8
  %42 = bitcast i8* %41 to %struct._expr*
  %call67 = call i32 @compiler_visit_expr(%struct.compiler* %37, %struct._expr* %42)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end.70, label %if.then.69

if.then.69:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.70:                                        ; preds = %for.end
  %43 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %44 = load i64, i64* %n, align 8
  %sub71 = sub i64 %44, 1
  %45 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v72 = getelementptr inbounds %struct._expr, %struct._expr* %45, i32 0, i32 1
  %Compare73 = bitcast %union.anon.4* %v72 to %struct.anon.18*
  %ops74 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %Compare73, i32 0, i32 1
  %46 = load %struct.asdl_int_seq*, %struct.asdl_int_seq** %ops74, align 8
  %elements75 = getelementptr inbounds %struct.asdl_int_seq, %struct.asdl_int_seq* %46, i32 0, i32 1
  %arrayidx76 = getelementptr [1 x i32], [1 x i32]* %elements75, i32 0, i64 %sub71
  %47 = load i32, i32* %arrayidx76, align 4
  %call77 = call i32 @cmpop(i32 %47)
  %conv78 = sext i32 %call77 to i64
  %call79 = call i32 @compiler_addop_i(%struct.compiler* %43, i32 107, i64 %conv78)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end.82, label %if.then.81

if.then.81:                                       ; preds = %if.end.70
  store i32 0, i32* %retval
  br label %return

if.end.82:                                        ; preds = %if.end.70
  %48 = load i64, i64* %n, align 8
  %cmp83 = icmp sgt i64 %48, 1
  br i1 %cmp83, label %if.then.85, label %if.end.105

if.then.85:                                       ; preds = %if.end.82
  %49 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call86 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %49)
  store %struct.basicblock_* %call86, %struct.basicblock_** %end, align 8
  %50 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %cmp87 = icmp eq %struct.basicblock_* %50, null
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %if.then.85
  store i32 0, i32* %retval
  br label %return

if.end.90:                                        ; preds = %if.then.85
  %51 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %52 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call91 = call i32 @compiler_addop_j(%struct.compiler* %51, i32 110, %struct.basicblock_* %52, i32 0)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end.94, label %if.then.93

if.then.93:                                       ; preds = %if.end.90
  store i32 0, i32* %retval
  br label %return

if.end.94:                                        ; preds = %if.end.90
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %54 = load %struct.basicblock_*, %struct.basicblock_** %cleanup, align 8
  %call95 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %53, %struct.basicblock_* %54)
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call96 = call i32 @compiler_addop(%struct.compiler* %55, i32 2)
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.end.99, label %if.then.98

if.then.98:                                       ; preds = %if.end.94
  store i32 0, i32* %retval
  br label %return

if.end.99:                                        ; preds = %if.end.94
  %56 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call100 = call i32 @compiler_addop(%struct.compiler* %56, i32 1)
  %tobool101 = icmp ne i32 %call100, 0
  br i1 %tobool101, label %if.end.103, label %if.then.102

if.then.102:                                      ; preds = %if.end.99
  store i32 0, i32* %retval
  br label %return

if.end.103:                                       ; preds = %if.end.99
  %57 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %58 = load %struct.basicblock_*, %struct.basicblock_** %end, align 8
  %call104 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %57, %struct.basicblock_* %58)
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.103, %if.end.82
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.105, %if.then.102, %if.then.98, %if.then.93, %if.then.89, %if.then.81, %if.then.69, %if.then.58, %if.then.45, %if.then.40, %if.then.36, %if.then.26, %if.then.22, %if.then.16, %if.then.10, %if.then
  %59 = load i32, i32* %retval
  ret i32 %59
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_call(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %1 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %1, i32 0, i32 1
  %Call = bitcast %union.anon.4* %v to %struct.anon.19*
  %func = getelementptr inbounds %struct.anon.19, %struct.anon.19* %Call, i32 0, i32 0
  %2 = load %struct._expr*, %struct._expr** %func, align 8
  %call = call i32 @compiler_visit_expr(%struct.compiler* %0, %struct._expr* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %4 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v1 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 1
  %Call2 = bitcast %union.anon.4* %v1 to %struct.anon.19*
  %args = getelementptr inbounds %struct.anon.19, %struct.anon.19* %Call2, i32 0, i32 1
  %5 = load %struct.asdl_seq*, %struct.asdl_seq** %args, align 8
  %6 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v3 = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 1
  %Call4 = bitcast %union.anon.4* %v3 to %struct.anon.19*
  %keywords = getelementptr inbounds %struct.anon.19, %struct.anon.19* %Call4, i32 0, i32 2
  %7 = load %struct.asdl_seq*, %struct.asdl_seq** %keywords, align 8
  %8 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v5 = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 1
  %Call6 = bitcast %union.anon.4* %v5 to %struct.anon.19*
  %starargs = getelementptr inbounds %struct.anon.19, %struct.anon.19* %Call6, i32 0, i32 3
  %9 = load %struct._expr*, %struct._expr** %starargs, align 8
  %10 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v7 = getelementptr inbounds %struct._expr, %struct._expr* %10, i32 0, i32 1
  %Call8 = bitcast %union.anon.4* %v7 to %struct.anon.19*
  %kwargs = getelementptr inbounds %struct.anon.19, %struct.anon.19* %Call8, i32 0, i32 4
  %11 = load %struct._expr*, %struct._expr** %kwargs, align 8
  %call9 = call i32 @compiler_call_helper(%struct.compiler* %3, i64 0, %struct.asdl_seq* %5, %struct.asdl_seq* %7, %struct._expr* %9, %struct._expr* %11)
  store i32 %call9, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_slice(%struct.compiler* %c, %struct._slice* %s, i32 %ctx) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._slice*, align 8
  %ctx.addr = alloca i32, align 4
  %kindname = alloca i8*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %sub = alloca %struct._slice*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._slice* %s, %struct._slice** %s.addr, align 8
  store i32 %ctx, i32* %ctx.addr, align 4
  store i8* null, i8** %kindname, align 8
  %0 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %kind = getelementptr inbounds %struct._slice, %struct._slice* %0, i32 0, i32 0
  %1 = load i32, i32* %kind, align 4
  switch i32 %1, label %sw.default [
    i32 3, label %sw.bb
    i32 1, label %sw.bb.3
    i32 2, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0), i8** %kindname, align 8
  %2 = load i32, i32* %ctx.addr, align 4
  %cmp = icmp ne i32 %2, 5
  br i1 %cmp, label %if.then, label %if.end.2

if.then:                                          ; preds = %sw.bb
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %4 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v = getelementptr inbounds %struct._slice, %struct._slice* %4, i32 0, i32 1
  %Index = bitcast %union.anon.26* %v to %struct.anon.29*
  %value = getelementptr inbounds %struct.anon.29, %struct.anon.29* %Index, i32 0, i32 0
  %5 = load %struct._expr*, %struct._expr** %value, align 8
  %call = call i32 @compiler_visit_expr(%struct.compiler* %3, %struct._expr* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then.1

if.then.1:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.2

if.end.2:                                         ; preds = %if.end, %sw.bb
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i32 0, i32 0), i8** %kindname, align 8
  %6 = load i32, i32* %ctx.addr, align 4
  %cmp4 = icmp ne i32 %6, 5
  br i1 %cmp4, label %if.then.5, label %if.end.10

if.then.5:                                        ; preds = %sw.bb.3
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %8 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %9 = load i32, i32* %ctx.addr, align 4
  %call6 = call i32 @compiler_slice(%struct.compiler* %7, %struct._slice* %8, i32 %9)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.then.5
  store i32 0, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.then.5
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %sw.bb.3
  br label %sw.epilog

sw.bb.11:                                         ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52, i32 0, i32 0), i8** %kindname, align 8
  %10 = load i32, i32* %ctx.addr, align 4
  %cmp12 = icmp ne i32 %10, 5
  br i1 %cmp12, label %if.then.13, label %if.end.31

if.then.13:                                       ; preds = %sw.bb.11
  %11 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v14 = getelementptr inbounds %struct._slice, %struct._slice* %11, i32 0, i32 1
  %ExtSlice = bitcast %union.anon.26* %v14 to %struct.anon.28*
  %dims = getelementptr inbounds %struct.anon.28, %struct.anon.28* %ExtSlice, i32 0, i32 0
  %12 = load %struct.asdl_seq*, %struct.asdl_seq** %dims, align 8
  %cmp15 = icmp eq %struct.asdl_seq* %12, null
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.13
  br label %cond.end

cond.false:                                       ; preds = %if.then.13
  %13 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v16 = getelementptr inbounds %struct._slice, %struct._slice* %13, i32 0, i32 1
  %ExtSlice17 = bitcast %union.anon.26* %v16 to %struct.anon.28*
  %dims18 = getelementptr inbounds %struct.anon.28, %struct.anon.28* %ExtSlice17, i32 0, i32 0
  %14 = load %struct.asdl_seq*, %struct.asdl_seq** %dims18, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %14, i32 0, i32 0
  %15 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %15, %cond.false ]
  store i64 %cond, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %16 = load i64, i64* %i, align 8
  %17 = load i64, i64* %n, align 8
  %cmp19 = icmp slt i64 %16, %17
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i64, i64* %i, align 8
  %19 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v20 = getelementptr inbounds %struct._slice, %struct._slice* %19, i32 0, i32 1
  %ExtSlice21 = bitcast %union.anon.26* %v20 to %struct.anon.28*
  %dims22 = getelementptr inbounds %struct.anon.28, %struct.anon.28* %ExtSlice21, i32 0, i32 0
  %20 = load %struct.asdl_seq*, %struct.asdl_seq** %dims22, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %20, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %18
  %21 = load i8*, i8** %arrayidx, align 8
  %22 = bitcast i8* %21 to %struct._slice*
  store %struct._slice* %22, %struct._slice** %sub, align 8
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %24 = load %struct._slice*, %struct._slice** %sub, align 8
  %25 = load i32, i32* %ctx.addr, align 4
  %call23 = call i32 @compiler_visit_nested_slice(%struct.compiler* %23, %struct._slice* %24, i32 %25)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %26 = load i64, i64* %i, align 8
  %inc = add i64 %26, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %28 = load i64, i64* %n, align 8
  %call27 = call i32 @compiler_addop_i(%struct.compiler* %27, i32 102, i64 %28)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end.30:                                        ; preds = %for.end
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %sw.bb.11
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %29 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %30 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %kind32 = getelementptr inbounds %struct._slice, %struct._slice* %30, i32 0, i32 0
  %31 = load i32, i32* %kind32, align 4
  %call33 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %29, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.53, i32 0, i32 0), i32 %31)
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.31, %if.end.10, %if.end.2
  %32 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %33 = load i8*, i8** %kindname, align 8
  %34 = load i32, i32* %ctx.addr, align 4
  %call34 = call i32 @compiler_handle_subscr(%struct.compiler* %32, i8* %33, i32 %34)
  store i32 %call34, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %if.then.29, %if.then.25, %if.then.8, %if.then.1
  %35 = load i32, i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_list(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %n = alloca i64, align 8
  %i = alloca i32, align 4
  %seen_star = alloca i32, align 4
  %elt = alloca %struct._expr*, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt67 = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 1
  %List = bitcast %union.anon.4* %v to %struct.anon.32*
  %elts = getelementptr inbounds %struct.anon.32, %struct.anon.32* %List, i32 0, i32 0
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %elts, align 8
  %cmp = icmp eq %struct.asdl_seq* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v1 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 1
  %List2 = bitcast %union.anon.4* %v1 to %struct.anon.32*
  %elts3 = getelementptr inbounds %struct.anon.32, %struct.anon.32* %List2, i32 0, i32 0
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %elts3, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %3, i32 0, i32 0
  %4 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %4, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v4 = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %List5 = bitcast %union.anon.4* %v4 to %struct.anon.32*
  %ctx = getelementptr inbounds %struct.anon.32, %struct.anon.32* %List5, i32 0, i32 1
  %6 = load i32, i32* %ctx, align 4
  %cmp6 = icmp eq i32 %6, 2
  br i1 %cmp6, label %if.then, label %if.end.51

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %seen_star, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %i, align 4
  %conv = sext i32 %7 to i64
  %8 = load i64, i64* %n, align 8
  %cmp7 = icmp slt i64 %conv, %8
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v9 = getelementptr inbounds %struct._expr, %struct._expr* %10, i32 0, i32 1
  %List10 = bitcast %union.anon.4* %v9 to %struct.anon.32*
  %elts11 = getelementptr inbounds %struct.anon.32, %struct.anon.32* %List10, i32 0, i32 0
  %11 = load %struct.asdl_seq*, %struct.asdl_seq** %elts11, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %11, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %12 = load i8*, i8** %arrayidx, align 8
  %13 = bitcast i8* %12 to %struct._expr*
  store %struct._expr* %13, %struct._expr** %elt, align 8
  %14 = load %struct._expr*, %struct._expr** %elt, align 8
  %kind = getelementptr inbounds %struct._expr, %struct._expr* %14, i32 0, i32 0
  %15 = load i32, i32* %kind, align 4
  %cmp12 = icmp eq i32 %15, 23
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %16 = load i32, i32* %seen_star, align 4
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %if.else, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true
  %17 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %17, 256
  br i1 %cmp15, label %if.then.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.14
  %18 = load i64, i64* %n, align 8
  %19 = load i32, i32* %i, align 4
  %conv17 = sext i32 %19 to i64
  %sub = sub i64 %18, %conv17
  %sub18 = sub i64 %sub, 1
  %cmp19 = icmp sge i64 %sub18, 8388607
  br i1 %cmp19, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %lor.lhs.false, %if.then.14
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call i32 @compiler_error(%struct.compiler* %20, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.56, i32 0, i32 0))
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %22 = load i32, i32* %i, align 4
  %conv22 = sext i32 %22 to i64
  %23 = load i64, i64* %n, align 8
  %24 = load i32, i32* %i, align 4
  %conv23 = sext i32 %24 to i64
  %sub24 = sub i64 %23, %conv23
  %sub25 = sub i64 %sub24, 1
  %shl = shl i64 %sub25, 8
  %add = add i64 %conv22, %shl
  %call26 = call i32 @compiler_addop_i(%struct.compiler* %21, i32 94, i64 %add)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end
  store i32 1, i32* %seen_star, align 4
  %25 = load %struct._expr*, %struct._expr** %elt, align 8
  %v30 = getelementptr inbounds %struct._expr, %struct._expr* %25, i32 0, i32 1
  %Starred = bitcast %union.anon.4* %v30 to %struct.anon.30*
  %value = getelementptr inbounds %struct.anon.30, %struct.anon.30* %Starred, i32 0, i32 0
  %26 = load %struct._expr*, %struct._expr** %value, align 8
  %27 = bitcast %struct._expr* %26 to i8*
  %28 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %28 to i64
  %29 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v32 = getelementptr inbounds %struct._expr, %struct._expr* %29, i32 0, i32 1
  %List33 = bitcast %union.anon.4* %v32 to %struct.anon.32*
  %elts34 = getelementptr inbounds %struct.anon.32, %struct.anon.32* %List33, i32 0, i32 0
  %30 = load %struct.asdl_seq*, %struct.asdl_seq** %elts34, align 8
  %elements35 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %30, i32 0, i32 1
  %arrayidx36 = getelementptr [1 x i8*], [1 x i8*]* %elements35, i32 0, i64 %idxprom31
  store i8* %27, i8** %arrayidx36, align 8
  br label %if.end.43

if.else:                                          ; preds = %land.lhs.true, %for.body
  %31 = load %struct._expr*, %struct._expr** %elt, align 8
  %kind37 = getelementptr inbounds %struct._expr, %struct._expr* %31, i32 0, i32 0
  %32 = load i32, i32* %kind37, align 4
  %cmp38 = icmp eq i32 %32, 23
  br i1 %cmp38, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %if.else
  %33 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call41 = call i32 @compiler_error(%struct.compiler* %33, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.57, i32 0, i32 0))
  store i32 %call41, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.else
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.end.29
  br label %for.inc

for.inc:                                          ; preds = %if.end.43
  %34 = load i32, i32* %i, align 4
  %inc = add i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load i32, i32* %seen_star, align 4
  %tobool44 = icmp ne i32 %35, 0
  br i1 %tobool44, label %if.end.50, label %if.then.45

if.then.45:                                       ; preds = %for.end
  %36 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %37 = load i64, i64* %n, align 8
  %call46 = call i32 @compiler_addop_i(%struct.compiler* %36, i32 92, i64 %37)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.then.45
  store i32 0, i32* %retval
  br label %return

if.end.49:                                        ; preds = %if.then.45
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %for.end
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %cond.end
  %38 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v52 = getelementptr inbounds %struct._expr, %struct._expr* %38, i32 0, i32 1
  %List53 = bitcast %union.anon.4* %v52 to %struct.anon.32*
  %elts54 = getelementptr inbounds %struct.anon.32, %struct.anon.32* %List53, i32 0, i32 0
  %39 = load %struct.asdl_seq*, %struct.asdl_seq** %elts54, align 8
  store %struct.asdl_seq* %39, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond.55

for.cond.55:                                      ; preds = %for.inc.75, %if.end.51
  %40 = load i32, i32* %_i, align 4
  %conv56 = sext i32 %40 to i64
  %41 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp57 = icmp eq %struct.asdl_seq* %41, null
  br i1 %cmp57, label %cond.true.59, label %cond.false.60

cond.true.59:                                     ; preds = %for.cond.55
  br label %cond.end.62

cond.false.60:                                    ; preds = %for.cond.55
  %42 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size61 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %42, i32 0, i32 0
  %43 = load i64, i64* %size61, align 8
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.60, %cond.true.59
  %cond63 = phi i64 [ 0, %cond.true.59 ], [ %43, %cond.false.60 ]
  %cmp64 = icmp slt i64 %conv56, %cond63
  br i1 %cmp64, label %for.body.66, label %for.end.77

for.body.66:                                      ; preds = %cond.end.62
  %44 = load i32, i32* %_i, align 4
  %idxprom68 = sext i32 %44 to i64
  %45 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements69 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %45, i32 0, i32 1
  %arrayidx70 = getelementptr [1 x i8*], [1 x i8*]* %elements69, i32 0, i64 %idxprom68
  %46 = load i8*, i8** %arrayidx70, align 8
  %47 = bitcast i8* %46 to %struct._expr*
  store %struct._expr* %47, %struct._expr** %elt67, align 8
  %48 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %49 = load %struct._expr*, %struct._expr** %elt67, align 8
  %call71 = call i32 @compiler_visit_expr(%struct.compiler* %48, %struct._expr* %49)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %for.body.66
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %for.body.66
  br label %for.inc.75

for.inc.75:                                       ; preds = %if.end.74
  %50 = load i32, i32* %_i, align 4
  %inc76 = add i32 %50, 1
  store i32 %inc76, i32* %_i, align 4
  br label %for.cond.55

for.end.77:                                       ; preds = %cond.end.62
  %51 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v78 = getelementptr inbounds %struct._expr, %struct._expr* %51, i32 0, i32 1
  %List79 = bitcast %union.anon.4* %v78 to %struct.anon.32*
  %ctx80 = getelementptr inbounds %struct.anon.32, %struct.anon.32* %List79, i32 0, i32 1
  %52 = load i32, i32* %ctx80, align 4
  %cmp81 = icmp eq i32 %52, 1
  br i1 %cmp81, label %if.then.83, label %if.end.88

if.then.83:                                       ; preds = %for.end.77
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %54 = load i64, i64* %n, align 8
  %call84 = call i32 @compiler_addop_i(%struct.compiler* %53, i32 103, i64 %54)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.end.87, label %if.then.86

if.then.86:                                       ; preds = %if.then.83
  store i32 0, i32* %retval
  br label %return

if.end.87:                                        ; preds = %if.then.83
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87, %for.end.77
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.88, %if.then.86, %if.then.73, %if.then.48, %if.then.40, %if.then.28, %if.then.21
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_tuple(%struct.compiler* %c, %struct._expr* %e) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %n = alloca i64, align 8
  %i = alloca i32, align 4
  %seen_star = alloca i32, align 4
  %elt = alloca %struct._expr*, align 8
  %_i = alloca i32, align 4
  %seq = alloca %struct.asdl_seq*, align 8
  %elt67 = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  %0 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 1
  %Tuple = bitcast %union.anon.4* %v to %struct.anon.33*
  %elts = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple, i32 0, i32 0
  %1 = load %struct.asdl_seq*, %struct.asdl_seq** %elts, align 8
  %cmp = icmp eq %struct.asdl_seq* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v1 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 1
  %Tuple2 = bitcast %union.anon.4* %v1 to %struct.anon.33*
  %elts3 = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple2, i32 0, i32 0
  %3 = load %struct.asdl_seq*, %struct.asdl_seq** %elts3, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %3, i32 0, i32 0
  %4 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %4, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %5 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v4 = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 1
  %Tuple5 = bitcast %union.anon.4* %v4 to %struct.anon.33*
  %ctx = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple5, i32 0, i32 1
  %6 = load i32, i32* %ctx, align 4
  %cmp6 = icmp eq i32 %6, 2
  br i1 %cmp6, label %if.then, label %if.end.51

if.then:                                          ; preds = %cond.end
  store i32 0, i32* %seen_star, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %i, align 4
  %conv = sext i32 %7 to i64
  %8 = load i64, i64* %n, align 8
  %cmp7 = icmp slt i64 %conv, %8
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v9 = getelementptr inbounds %struct._expr, %struct._expr* %10, i32 0, i32 1
  %Tuple10 = bitcast %union.anon.4* %v9 to %struct.anon.33*
  %elts11 = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple10, i32 0, i32 0
  %11 = load %struct.asdl_seq*, %struct.asdl_seq** %elts11, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %11, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %12 = load i8*, i8** %arrayidx, align 8
  %13 = bitcast i8* %12 to %struct._expr*
  store %struct._expr* %13, %struct._expr** %elt, align 8
  %14 = load %struct._expr*, %struct._expr** %elt, align 8
  %kind = getelementptr inbounds %struct._expr, %struct._expr* %14, i32 0, i32 0
  %15 = load i32, i32* %kind, align 4
  %cmp12 = icmp eq i32 %15, 23
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body
  %16 = load i32, i32* %seen_star, align 4
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %if.else, label %if.then.14

if.then.14:                                       ; preds = %land.lhs.true
  %17 = load i32, i32* %i, align 4
  %cmp15 = icmp sge i32 %17, 256
  br i1 %cmp15, label %if.then.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.14
  %18 = load i64, i64* %n, align 8
  %19 = load i32, i32* %i, align 4
  %conv17 = sext i32 %19 to i64
  %sub = sub i64 %18, %conv17
  %sub18 = sub i64 %sub, 1
  %cmp19 = icmp sge i64 %sub18, 8388607
  br i1 %cmp19, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %lor.lhs.false, %if.then.14
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call i32 @compiler_error(%struct.compiler* %20, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.56, i32 0, i32 0))
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %22 = load i32, i32* %i, align 4
  %conv22 = sext i32 %22 to i64
  %23 = load i64, i64* %n, align 8
  %24 = load i32, i32* %i, align 4
  %conv23 = sext i32 %24 to i64
  %sub24 = sub i64 %23, %conv23
  %sub25 = sub i64 %sub24, 1
  %shl = shl i64 %sub25, 8
  %add = add i64 %conv22, %shl
  %call26 = call i32 @compiler_addop_i(%struct.compiler* %21, i32 94, i64 %add)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end
  store i32 1, i32* %seen_star, align 4
  %25 = load %struct._expr*, %struct._expr** %elt, align 8
  %v30 = getelementptr inbounds %struct._expr, %struct._expr* %25, i32 0, i32 1
  %Starred = bitcast %union.anon.4* %v30 to %struct.anon.30*
  %value = getelementptr inbounds %struct.anon.30, %struct.anon.30* %Starred, i32 0, i32 0
  %26 = load %struct._expr*, %struct._expr** %value, align 8
  %27 = bitcast %struct._expr* %26 to i8*
  %28 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %28 to i64
  %29 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v32 = getelementptr inbounds %struct._expr, %struct._expr* %29, i32 0, i32 1
  %Tuple33 = bitcast %union.anon.4* %v32 to %struct.anon.33*
  %elts34 = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple33, i32 0, i32 0
  %30 = load %struct.asdl_seq*, %struct.asdl_seq** %elts34, align 8
  %elements35 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %30, i32 0, i32 1
  %arrayidx36 = getelementptr [1 x i8*], [1 x i8*]* %elements35, i32 0, i64 %idxprom31
  store i8* %27, i8** %arrayidx36, align 8
  br label %if.end.43

if.else:                                          ; preds = %land.lhs.true, %for.body
  %31 = load %struct._expr*, %struct._expr** %elt, align 8
  %kind37 = getelementptr inbounds %struct._expr, %struct._expr* %31, i32 0, i32 0
  %32 = load i32, i32* %kind37, align 4
  %cmp38 = icmp eq i32 %32, 23
  br i1 %cmp38, label %if.then.40, label %if.end.42

if.then.40:                                       ; preds = %if.else
  %33 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call41 = call i32 @compiler_error(%struct.compiler* %33, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.57, i32 0, i32 0))
  store i32 %call41, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.else
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.end.29
  br label %for.inc

for.inc:                                          ; preds = %if.end.43
  %34 = load i32, i32* %i, align 4
  %inc = add i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %35 = load i32, i32* %seen_star, align 4
  %tobool44 = icmp ne i32 %35, 0
  br i1 %tobool44, label %if.end.50, label %if.then.45

if.then.45:                                       ; preds = %for.end
  %36 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %37 = load i64, i64* %n, align 8
  %call46 = call i32 @compiler_addop_i(%struct.compiler* %36, i32 92, i64 %37)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.then.45
  store i32 0, i32* %retval
  br label %return

if.end.49:                                        ; preds = %if.then.45
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %for.end
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %cond.end
  %38 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v52 = getelementptr inbounds %struct._expr, %struct._expr* %38, i32 0, i32 1
  %Tuple53 = bitcast %union.anon.4* %v52 to %struct.anon.33*
  %elts54 = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple53, i32 0, i32 0
  %39 = load %struct.asdl_seq*, %struct.asdl_seq** %elts54, align 8
  store %struct.asdl_seq* %39, %struct.asdl_seq** %seq, align 8
  store i32 0, i32* %_i, align 4
  br label %for.cond.55

for.cond.55:                                      ; preds = %for.inc.75, %if.end.51
  %40 = load i32, i32* %_i, align 4
  %conv56 = sext i32 %40 to i64
  %41 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %cmp57 = icmp eq %struct.asdl_seq* %41, null
  br i1 %cmp57, label %cond.true.59, label %cond.false.60

cond.true.59:                                     ; preds = %for.cond.55
  br label %cond.end.62

cond.false.60:                                    ; preds = %for.cond.55
  %42 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %size61 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %42, i32 0, i32 0
  %43 = load i64, i64* %size61, align 8
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.60, %cond.true.59
  %cond63 = phi i64 [ 0, %cond.true.59 ], [ %43, %cond.false.60 ]
  %cmp64 = icmp slt i64 %conv56, %cond63
  br i1 %cmp64, label %for.body.66, label %for.end.77

for.body.66:                                      ; preds = %cond.end.62
  %44 = load i32, i32* %_i, align 4
  %idxprom68 = sext i32 %44 to i64
  %45 = load %struct.asdl_seq*, %struct.asdl_seq** %seq, align 8
  %elements69 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %45, i32 0, i32 1
  %arrayidx70 = getelementptr [1 x i8*], [1 x i8*]* %elements69, i32 0, i64 %idxprom68
  %46 = load i8*, i8** %arrayidx70, align 8
  %47 = bitcast i8* %46 to %struct._expr*
  store %struct._expr* %47, %struct._expr** %elt67, align 8
  %48 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %49 = load %struct._expr*, %struct._expr** %elt67, align 8
  %call71 = call i32 @compiler_visit_expr(%struct.compiler* %48, %struct._expr* %49)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %for.body.66
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %for.body.66
  br label %for.inc.75

for.inc.75:                                       ; preds = %if.end.74
  %50 = load i32, i32* %_i, align 4
  %inc76 = add i32 %50, 1
  store i32 %inc76, i32* %_i, align 4
  br label %for.cond.55

for.end.77:                                       ; preds = %cond.end.62
  %51 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %v78 = getelementptr inbounds %struct._expr, %struct._expr* %51, i32 0, i32 1
  %Tuple79 = bitcast %union.anon.4* %v78 to %struct.anon.33*
  %ctx80 = getelementptr inbounds %struct.anon.33, %struct.anon.33* %Tuple79, i32 0, i32 1
  %52 = load i32, i32* %ctx80, align 4
  %cmp81 = icmp eq i32 %52, 1
  br i1 %cmp81, label %if.then.83, label %if.end.88

if.then.83:                                       ; preds = %for.end.77
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %54 = load i64, i64* %n, align 8
  %call84 = call i32 @compiler_addop_i(%struct.compiler* %53, i32 102, i64 %54)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.end.87, label %if.then.86

if.then.86:                                       ; preds = %if.then.83
  store i32 0, i32* %retval
  br label %return

if.end.87:                                        ; preds = %if.then.83
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87, %for.end.77
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.88, %if.then.86, %if.then.73, %if.then.48, %if.then.40, %if.then.28, %if.then.21
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_comprehension(%struct.compiler* %c, %struct._expr* %e, i32 %type, %struct._object* %name, %struct.asdl_seq* %generators, %struct._expr* %elt, %struct._expr* %val) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %e.addr = alloca %struct._expr*, align 8
  %type.addr = alloca i32, align 4
  %name.addr = alloca %struct._object*, align 8
  %generators.addr = alloca %struct.asdl_seq*, align 8
  %elt.addr = alloca %struct._expr*, align 8
  %val.addr = alloca %struct._expr*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %outermost_iter = alloca %struct._expr*, align 8
  %qualname = alloca %struct._object*, align 8
  %op = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp60 = alloca %struct._object*, align 8
  %_py_xdecref_tmp73 = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._expr* %e, %struct._expr** %e.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct.asdl_seq* %generators, %struct.asdl_seq** %generators.addr, align 8
  store %struct._expr* %elt, %struct._expr** %elt.addr, align 8
  store %struct._expr* %val, %struct._expr** %val.addr, align 8
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %co, align 8
  store %struct._object* null, %struct._object** %qualname, align 8
  %0 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %0, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 0
  %1 = load i8*, i8** %arrayidx, align 8
  %2 = bitcast i8* %1 to %struct._comprehension*
  %iter = getelementptr inbounds %struct._comprehension, %struct._comprehension* %2, i32 0, i32 1
  %3 = load %struct._expr*, %struct._expr** %iter, align 8
  store %struct._expr* %3, %struct._expr** %outermost_iter, align 8
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %5 = load %struct._object*, %struct._object** %name.addr, align 8
  %6 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %7 = bitcast %struct._expr* %6 to i8*
  %8 = load %struct._expr*, %struct._expr** %e.addr, align 8
  %lineno = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 2
  %9 = load i32, i32* %lineno, align 4
  %call = call i32 @compiler_enter_scope(%struct.compiler* %4, %struct._object* %5, i32 4, i8* %7, i32 %9)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %error

if.end:                                           ; preds = %entry
  %10 = load i32, i32* %type.addr, align 4
  %cmp = icmp ne i32 %10, 0
  br i1 %cmp, label %if.then.1, label %if.end.9

if.then.1:                                        ; preds = %if.end
  %11 = load i32, i32* %type.addr, align 4
  switch i32 %11, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.2
    i32 3, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %if.then.1
  store i32 103, i32* %op, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.then.1
  store i32 104, i32* %op, align 4
  br label %sw.epilog

sw.bb.3:                                          ; preds = %if.then.1
  store i32 105, i32* %op, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.1
  %12 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %13 = load i32, i32* %type.addr, align 4
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %12, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.46, i32 0, i32 0), i32 %13)
  br label %error_in_scope

sw.epilog:                                        ; preds = %sw.bb.3, %sw.bb.2, %sw.bb
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %15 = load i32, i32* %op, align 4
  %call5 = call i32 @compiler_addop_i(%struct.compiler* %14, i32 %15, i64 0)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %sw.epilog
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %sw.epilog
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.end
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %18 = load %struct._expr*, %struct._expr** %elt.addr, align 8
  %19 = load %struct._expr*, %struct._expr** %val.addr, align 8
  %20 = load i32, i32* %type.addr, align 4
  %call10 = call i32 @compiler_comprehension_generator(%struct.compiler* %16, %struct.asdl_seq* %17, i32 0, %struct._expr* %18, %struct._expr* %19, i32 %20)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.end.9
  br label %error_in_scope

if.end.13:                                        ; preds = %if.end.9
  %21 = load i32, i32* %type.addr, align 4
  %cmp14 = icmp ne i32 %21, 0
  br i1 %cmp14, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %if.end.13
  %22 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call16 = call i32 @compiler_addop(%struct.compiler* %22, i32 83)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %if.then.15
  store i32 0, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.then.15
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end.13
  %23 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call21 = call %struct.PyCodeObject* @assemble(%struct.compiler* %23, i32 1)
  store %struct.PyCodeObject* %call21, %struct.PyCodeObject** %co, align 8
  %24 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %24, i32 0, i32 7
  %25 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_qualname = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %25, i32 0, i32 2
  %26 = load %struct._object*, %struct._object** %u_qualname, align 8
  store %struct._object* %26, %struct._object** %qualname, align 8
  %27 = load %struct._object*, %struct._object** %qualname, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %28, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %29 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %29)
  %30 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %cmp22 = icmp eq %struct.PyCodeObject* %30, null
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.20
  br label %error

if.end.24:                                        ; preds = %if.end.20
  %31 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %32 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %33 = load %struct._object*, %struct._object** %qualname, align 8
  %call25 = call i32 @compiler_make_closure(%struct.compiler* %31, %struct.PyCodeObject* %32, i64 0, %struct._object* %33)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.end.24
  br label %error

if.end.28:                                        ; preds = %if.end.24
  br label %do.body

do.body:                                          ; preds = %if.end.28
  %34 = load %struct._object*, %struct._object** %qualname, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt29, align 8
  %dec = add i64 %36, -1
  store i64 %dec, i64* %ob_refcnt29, align 8
  %cmp30 = icmp ne i64 %dec, 0
  br i1 %cmp30, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %do.body
  br label %if.end.32

if.else:                                          ; preds = %do.body
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %39(%struct._object* %40)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else, %if.then.31
  br label %do.end

do.end:                                           ; preds = %if.end.32
  br label %do.body.33

do.body.33:                                       ; preds = %do.end
  %41 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %42 = bitcast %struct.PyCodeObject* %41 to %struct._object*
  store %struct._object* %42, %struct._object** %_py_decref_tmp34, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %44, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %47(%struct._object* %48)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  %49 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %50 = load %struct._expr*, %struct._expr** %outermost_iter, align 8
  %call44 = call i32 @compiler_visit_expr(%struct.compiler* %49, %struct._expr* %50)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %do.end.43
  store i32 0, i32* %retval
  br label %return

if.end.47:                                        ; preds = %do.end.43
  %51 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call48 = call i32 @compiler_addop(%struct.compiler* %51, i32 68)
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %if.end.47
  store i32 0, i32* %retval
  br label %return

if.end.51:                                        ; preds = %if.end.47
  %52 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call52 = call i32 @compiler_addop_i(%struct.compiler* %52, i32 131, i64 1)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %if.end.51
  store i32 0, i32* %retval
  br label %return

if.end.55:                                        ; preds = %if.end.51
  store i32 1, i32* %retval
  br label %return

error_in_scope:                                   ; preds = %if.then.12, %sw.default
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  call void @compiler_exit_scope(%struct.compiler* %53)
  br label %error

error:                                            ; preds = %error_in_scope, %if.then.27, %if.then.23, %if.then
  br label %do.body.56

do.body.56:                                       ; preds = %error
  %54 = load %struct._object*, %struct._object** %qualname, align 8
  store %struct._object* %54, %struct._object** %_py_xdecref_tmp, align 8
  %55 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp57 = icmp ne %struct._object* %55, null
  br i1 %cmp57, label %if.then.58, label %if.end.70

if.then.58:                                       ; preds = %do.body.56
  br label %do.body.59

do.body.59:                                       ; preds = %if.then.58
  %56 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp60, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_refcnt61 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt61, align 8
  %dec62 = add i64 %58, -1
  store i64 %dec62, i64* %ob_refcnt61, align 8
  %cmp63 = icmp ne i64 %dec62, 0
  br i1 %cmp63, label %if.then.64, label %if.else.65

if.then.64:                                       ; preds = %do.body.59
  br label %if.end.68

if.else.65:                                       ; preds = %do.body.59
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_dealloc67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc67, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  call void %61(%struct._object* %62)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.65, %if.then.64
  br label %do.end.69

do.end.69:                                        ; preds = %if.end.68
  br label %if.end.70

if.end.70:                                        ; preds = %do.end.69, %do.body.56
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %do.body.72

do.body.72:                                       ; preds = %do.end.71
  %63 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %64 = bitcast %struct.PyCodeObject* %63 to %struct._object*
  store %struct._object* %64, %struct._object** %_py_xdecref_tmp73, align 8
  %65 = load %struct._object*, %struct._object** %_py_xdecref_tmp73, align 8
  %cmp74 = icmp ne %struct._object* %65, null
  br i1 %cmp74, label %if.then.75, label %if.end.87

if.then.75:                                       ; preds = %do.body.72
  br label %do.body.76

do.body.76:                                       ; preds = %if.then.75
  %66 = load %struct._object*, %struct._object** %_py_xdecref_tmp73, align 8
  store %struct._object* %66, %struct._object** %_py_decref_tmp77, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt78, align 8
  %dec79 = add i64 %68, -1
  store i64 %dec79, i64* %ob_refcnt78, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.76
  br label %if.end.85

if.else.82:                                       ; preds = %do.body.76
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %71(%struct._object* %72)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  br label %if.end.87

if.end.87:                                        ; preds = %do.end.86, %do.body.72
  br label %do.end.88

do.end.88:                                        ; preds = %if.end.87
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.88, %if.end.55, %if.then.54, %if.then.50, %if.then.46, %if.then.18, %if.then.7
  %73 = load i32, i32* %retval
  ret i32 %73
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_comprehension_generator(%struct.compiler* %c, %struct.asdl_seq* %generators, i32 %gen_index, %struct._expr* %elt, %struct._expr* %val, i32 %type) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %generators.addr = alloca %struct.asdl_seq*, align 8
  %gen_index.addr = alloca i32, align 4
  %elt.addr = alloca %struct._expr*, align 8
  %val.addr = alloca %struct._expr*, align 8
  %type.addr = alloca i32, align 4
  %gen = alloca %struct._comprehension*, align 8
  %start = alloca %struct.basicblock_*, align 8
  %anchor = alloca %struct.basicblock_*, align 8
  %skip = alloca %struct.basicblock_*, align 8
  %if_cleanup = alloca %struct.basicblock_*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %e = alloca %struct._expr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.asdl_seq* %generators, %struct.asdl_seq** %generators.addr, align 8
  store i32 %gen_index, i32* %gen_index.addr, align 4
  store %struct._expr* %elt, %struct._expr** %elt.addr, align 8
  store %struct._expr* %val, %struct._expr** %val.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %start, align 8
  %1 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call1 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %1)
  store %struct.basicblock_* %call1, %struct.basicblock_** %skip, align 8
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call2 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %2)
  store %struct.basicblock_* %call2, %struct.basicblock_** %if_cleanup, align 8
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call3 = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %3)
  store %struct.basicblock_* %call3, %struct.basicblock_** %anchor, align 8
  %4 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  %cmp = icmp eq %struct.basicblock_* %4, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.basicblock_*, %struct.basicblock_** %skip, align 8
  %cmp4 = icmp eq %struct.basicblock_* %5, null
  br i1 %cmp4, label %if.then, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false
  %6 = load %struct.basicblock_*, %struct.basicblock_** %if_cleanup, align 8
  %cmp6 = icmp eq %struct.basicblock_* %6, null
  br i1 %cmp6, label %if.then, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false.5
  %7 = load %struct.basicblock_*, %struct.basicblock_** %anchor, align 8
  %cmp8 = icmp eq %struct.basicblock_* %7, null
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.7, %lor.lhs.false.5, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.7
  %8 = load i32, i32* %gen_index.addr, align 4
  %idxprom = sext i32 %8 to i64
  %9 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %elements = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %9, i32 0, i32 1
  %arrayidx = getelementptr [1 x i8*], [1 x i8*]* %elements, i32 0, i64 %idxprom
  %10 = load i8*, i8** %arrayidx, align 8
  %11 = bitcast i8* %10 to %struct._comprehension*
  store %struct._comprehension* %11, %struct._comprehension** %gen, align 8
  %12 = load i32, i32* %gen_index.addr, align 4
  %cmp9 = icmp eq i32 %12, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %13 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %13, i32 0, i32 7
  %14 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_argcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %14, i32 0, i32 10
  store i64 1, i64* %u_argcount, align 8
  %15 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call11 = call i32 @compiler_addop_i(%struct.compiler* %15, i32 124, i64 0)
  %tobool = icmp ne i32 %call11, 0
  br i1 %tobool, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %if.then.10
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.10
  br label %if.end.22

if.else:                                          ; preds = %if.end
  %16 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %17 = load %struct._comprehension*, %struct._comprehension** %gen, align 8
  %iter = getelementptr inbounds %struct._comprehension, %struct._comprehension* %17, i32 0, i32 1
  %18 = load %struct._expr*, %struct._expr** %iter, align 8
  %call14 = call i32 @compiler_visit_expr(%struct.compiler* %16, %struct._expr* %18)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.else
  %19 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call18 = call i32 @compiler_addop(%struct.compiler* %19, i32 68)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end.13
  %20 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %21 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  %call23 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %20, %struct.basicblock_* %21)
  %22 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %23 = load %struct.basicblock_*, %struct.basicblock_** %anchor, align 8
  %call24 = call i32 @compiler_addop_j(%struct.compiler* %22, i32 93, %struct.basicblock_* %23, i32 0)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %if.end.22
  store i32 0, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.end.22
  %24 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call28 = call %struct.basicblock_* @compiler_next_block(%struct.compiler* %24)
  %cmp29 = icmp eq %struct.basicblock_* %call28, null
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.end.27
  store i32 0, i32* %retval
  br label %return

if.end.31:                                        ; preds = %if.end.27
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %26 = load %struct._comprehension*, %struct._comprehension** %gen, align 8
  %target = getelementptr inbounds %struct._comprehension, %struct._comprehension* %26, i32 0, i32 0
  %27 = load %struct._expr*, %struct._expr** %target, align 8
  %call32 = call i32 @compiler_visit_expr(%struct.compiler* %25, %struct._expr* %27)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end.35, label %if.then.34

if.then.34:                                       ; preds = %if.end.31
  store i32 0, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.end.31
  %28 = load %struct._comprehension*, %struct._comprehension** %gen, align 8
  %ifs = getelementptr inbounds %struct._comprehension, %struct._comprehension* %28, i32 0, i32 2
  %29 = load %struct.asdl_seq*, %struct.asdl_seq** %ifs, align 8
  %cmp36 = icmp eq %struct.asdl_seq* %29, null
  br i1 %cmp36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.35
  br label %cond.end

cond.false:                                       ; preds = %if.end.35
  %30 = load %struct._comprehension*, %struct._comprehension** %gen, align 8
  %ifs37 = getelementptr inbounds %struct._comprehension, %struct._comprehension* %30, i32 0, i32 2
  %31 = load %struct.asdl_seq*, %struct.asdl_seq** %ifs37, align 8
  %size = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %31, i32 0, i32 0
  %32 = load i64, i64* %size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %32, %cond.false ]
  store i64 %cond, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %33 = load i64, i64* %i, align 8
  %34 = load i64, i64* %n, align 8
  %cmp38 = icmp slt i64 %33, %34
  br i1 %cmp38, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load i64, i64* %i, align 8
  %36 = load %struct._comprehension*, %struct._comprehension** %gen, align 8
  %ifs39 = getelementptr inbounds %struct._comprehension, %struct._comprehension* %36, i32 0, i32 2
  %37 = load %struct.asdl_seq*, %struct.asdl_seq** %ifs39, align 8
  %elements40 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %37, i32 0, i32 1
  %arrayidx41 = getelementptr [1 x i8*], [1 x i8*]* %elements40, i32 0, i64 %35
  %38 = load i8*, i8** %arrayidx41, align 8
  %39 = bitcast i8* %38 to %struct._expr*
  store %struct._expr* %39, %struct._expr** %e, align 8
  %40 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %41 = load %struct._expr*, %struct._expr** %e, align 8
  %call42 = call i32 @compiler_visit_expr(%struct.compiler* %40, %struct._expr* %41)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %for.body
  %42 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %43 = load %struct.basicblock_*, %struct.basicblock_** %if_cleanup, align 8
  %call46 = call i32 @compiler_addop_j(%struct.compiler* %42, i32 114, %struct.basicblock_* %43, i32 1)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.end.49, label %if.then.48

if.then.48:                                       ; preds = %if.end.45
  store i32 0, i32* %retval
  br label %return

if.end.49:                                        ; preds = %if.end.45
  %44 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call50 = call %struct.basicblock_* @compiler_next_block(%struct.compiler* %44)
  %cmp51 = icmp eq %struct.basicblock_* %call50, null
  br i1 %cmp51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.49
  store i32 0, i32* %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  br label %for.inc

for.inc:                                          ; preds = %if.end.53
  %45 = load i64, i64* %i, align 8
  %inc = add i64 %45, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %gen_index.addr, align 4
  %inc54 = add i32 %46, 1
  store i32 %inc54, i32* %gen_index.addr, align 4
  %conv = sext i32 %inc54 to i64
  %47 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %cmp55 = icmp eq %struct.asdl_seq* %47, null
  br i1 %cmp55, label %cond.true.57, label %cond.false.58

cond.true.57:                                     ; preds = %for.end
  br label %cond.end.60

cond.false.58:                                    ; preds = %for.end
  %48 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %size59 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %48, i32 0, i32 0
  %49 = load i64, i64* %size59, align 8
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.58, %cond.true.57
  %cond61 = phi i64 [ 0, %cond.true.57 ], [ %49, %cond.false.58 ]
  %cmp62 = icmp slt i64 %conv, %cond61
  br i1 %cmp62, label %if.then.64, label %if.end.69

if.then.64:                                       ; preds = %cond.end.60
  %50 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %51 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %52 = load i32, i32* %gen_index.addr, align 4
  %53 = load %struct._expr*, %struct._expr** %elt.addr, align 8
  %54 = load %struct._expr*, %struct._expr** %val.addr, align 8
  %55 = load i32, i32* %type.addr, align 4
  %call65 = call i32 @compiler_comprehension_generator(%struct.compiler* %50, %struct.asdl_seq* %51, i32 %52, %struct._expr* %53, %struct._expr* %54, i32 %55)
  %tobool66 = icmp ne i32 %call65, 0
  br i1 %tobool66, label %if.end.68, label %if.then.67

if.then.67:                                       ; preds = %if.then.64
  store i32 0, i32* %retval
  br label %return

if.end.68:                                        ; preds = %if.then.64
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %cond.end.60
  %56 = load i32, i32* %gen_index.addr, align 4
  %conv70 = sext i32 %56 to i64
  %57 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %cmp71 = icmp eq %struct.asdl_seq* %57, null
  br i1 %cmp71, label %cond.true.73, label %cond.false.74

cond.true.73:                                     ; preds = %if.end.69
  br label %cond.end.76

cond.false.74:                                    ; preds = %if.end.69
  %58 = load %struct.asdl_seq*, %struct.asdl_seq** %generators.addr, align 8
  %size75 = getelementptr inbounds %struct.asdl_seq, %struct.asdl_seq* %58, i32 0, i32 0
  %59 = load i64, i64* %size75, align 8
  br label %cond.end.76

cond.end.76:                                      ; preds = %cond.false.74, %cond.true.73
  %cond77 = phi i64 [ 0, %cond.true.73 ], [ %59, %cond.false.74 ]
  %cmp78 = icmp sge i64 %conv70, %cond77
  br i1 %cmp78, label %if.then.80, label %if.end.130

if.then.80:                                       ; preds = %cond.end.76
  %60 = load i32, i32* %type.addr, align 4
  switch i32 %60, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.93
    i32 2, label %sw.bb.103
    i32 3, label %sw.bb.114
  ]

sw.bb:                                            ; preds = %if.then.80
  %61 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %62 = load %struct._expr*, %struct._expr** %elt.addr, align 8
  %call81 = call i32 @compiler_visit_expr(%struct.compiler* %61, %struct._expr* %62)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.end.84, label %if.then.83

if.then.83:                                       ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end.84:                                        ; preds = %sw.bb
  %63 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call85 = call i32 @compiler_addop(%struct.compiler* %63, i32 86)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end.88, label %if.then.87

if.then.87:                                       ; preds = %if.end.84
  store i32 0, i32* %retval
  br label %return

if.end.88:                                        ; preds = %if.end.84
  %64 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call89 = call i32 @compiler_addop(%struct.compiler* %64, i32 1)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.end.92, label %if.then.91

if.then.91:                                       ; preds = %if.end.88
  store i32 0, i32* %retval
  br label %return

if.end.92:                                        ; preds = %if.end.88
  br label %sw.epilog

sw.bb.93:                                         ; preds = %if.then.80
  %65 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %66 = load %struct._expr*, %struct._expr** %elt.addr, align 8
  %call94 = call i32 @compiler_visit_expr(%struct.compiler* %65, %struct._expr* %66)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %if.end.97, label %if.then.96

if.then.96:                                       ; preds = %sw.bb.93
  store i32 0, i32* %retval
  br label %return

if.end.97:                                        ; preds = %sw.bb.93
  %67 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %68 = load i32, i32* %gen_index.addr, align 4
  %add = add i32 %68, 1
  %conv98 = sext i32 %add to i64
  %call99 = call i32 @compiler_addop_i(%struct.compiler* %67, i32 145, i64 %conv98)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %if.end.102, label %if.then.101

if.then.101:                                      ; preds = %if.end.97
  store i32 0, i32* %retval
  br label %return

if.end.102:                                       ; preds = %if.end.97
  br label %sw.epilog

sw.bb.103:                                        ; preds = %if.then.80
  %69 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %70 = load %struct._expr*, %struct._expr** %elt.addr, align 8
  %call104 = call i32 @compiler_visit_expr(%struct.compiler* %69, %struct._expr* %70)
  %tobool105 = icmp ne i32 %call104, 0
  br i1 %tobool105, label %if.end.107, label %if.then.106

if.then.106:                                      ; preds = %sw.bb.103
  store i32 0, i32* %retval
  br label %return

if.end.107:                                       ; preds = %sw.bb.103
  %71 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %72 = load i32, i32* %gen_index.addr, align 4
  %add108 = add i32 %72, 1
  %conv109 = sext i32 %add108 to i64
  %call110 = call i32 @compiler_addop_i(%struct.compiler* %71, i32 146, i64 %conv109)
  %tobool111 = icmp ne i32 %call110, 0
  br i1 %tobool111, label %if.end.113, label %if.then.112

if.then.112:                                      ; preds = %if.end.107
  store i32 0, i32* %retval
  br label %return

if.end.113:                                       ; preds = %if.end.107
  br label %sw.epilog

sw.bb.114:                                        ; preds = %if.then.80
  %73 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %74 = load %struct._expr*, %struct._expr** %val.addr, align 8
  %call115 = call i32 @compiler_visit_expr(%struct.compiler* %73, %struct._expr* %74)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end.118, label %if.then.117

if.then.117:                                      ; preds = %sw.bb.114
  store i32 0, i32* %retval
  br label %return

if.end.118:                                       ; preds = %sw.bb.114
  %75 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %76 = load %struct._expr*, %struct._expr** %elt.addr, align 8
  %call119 = call i32 @compiler_visit_expr(%struct.compiler* %75, %struct._expr* %76)
  %tobool120 = icmp ne i32 %call119, 0
  br i1 %tobool120, label %if.end.122, label %if.then.121

if.then.121:                                      ; preds = %if.end.118
  store i32 0, i32* %retval
  br label %return

if.end.122:                                       ; preds = %if.end.118
  %77 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %78 = load i32, i32* %gen_index.addr, align 4
  %add123 = add i32 %78, 1
  %conv124 = sext i32 %add123 to i64
  %call125 = call i32 @compiler_addop_i(%struct.compiler* %77, i32 147, i64 %conv124)
  %tobool126 = icmp ne i32 %call125, 0
  br i1 %tobool126, label %if.end.128, label %if.then.127

if.then.127:                                      ; preds = %if.end.122
  store i32 0, i32* %retval
  br label %return

if.end.128:                                       ; preds = %if.end.122
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.80
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.128, %if.end.113, %if.end.102, %if.end.92
  %79 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %80 = load %struct.basicblock_*, %struct.basicblock_** %skip, align 8
  %call129 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %79, %struct.basicblock_* %80)
  br label %if.end.130

if.end.130:                                       ; preds = %sw.epilog, %cond.end.76
  %81 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %82 = load %struct.basicblock_*, %struct.basicblock_** %if_cleanup, align 8
  %call131 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %81, %struct.basicblock_* %82)
  %83 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %84 = load %struct.basicblock_*, %struct.basicblock_** %start, align 8
  %call132 = call i32 @compiler_addop_j(%struct.compiler* %83, i32 113, %struct.basicblock_* %84, i32 1)
  %tobool133 = icmp ne i32 %call132, 0
  br i1 %tobool133, label %if.end.135, label %if.then.134

if.then.134:                                      ; preds = %if.end.130
  store i32 0, i32* %retval
  br label %return

if.end.135:                                       ; preds = %if.end.130
  %85 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %86 = load %struct.basicblock_*, %struct.basicblock_** %anchor, align 8
  %call136 = call %struct.basicblock_* @compiler_use_next_block(%struct.compiler* %85, %struct.basicblock_* %86)
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.135, %if.then.134, %sw.default, %if.then.127, %if.then.121, %if.then.117, %if.then.112, %if.then.106, %if.then.101, %if.then.96, %if.then.91, %if.then.87, %if.then.83, %if.then.67, %if.then.52, %if.then.48, %if.then.44, %if.then.34, %if.then.30, %if.then.26, %if.then.20, %if.then.16, %if.then.12, %if.then
  %87 = load i32, i32* %retval
  ret i32 %87
}

; Function Attrs: nounwind uwtable
define internal %struct.basicblock_* @compiler_next_block(%struct.compiler* %c) #0 {
entry:
  %retval = alloca %struct.basicblock_*, align 8
  %c.addr = alloca %struct.compiler*, align 8
  %block = alloca %struct.basicblock_*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call = call %struct.basicblock_* @compiler_new_block(%struct.compiler* %0)
  store %struct.basicblock_* %call, %struct.basicblock_** %block, align 8
  %1 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %cmp = icmp eq %struct.basicblock_* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.basicblock_* null, %struct.basicblock_** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %3 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %3, i32 0, i32 7
  %4 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_curblock = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %4, i32 0, i32 13
  %5 = load %struct.basicblock_*, %struct.basicblock_** %u_curblock, align 8
  %b_next = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %5, i32 0, i32 4
  store %struct.basicblock_* %2, %struct.basicblock_** %b_next, align 8
  %6 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u1 = getelementptr inbounds %struct.compiler, %struct.compiler* %7, i32 0, i32 7
  %8 = load %struct.compiler_unit*, %struct.compiler_unit** %u1, align 8
  %u_curblock2 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %8, i32 0, i32 13
  store %struct.basicblock_* %6, %struct.basicblock_** %u_curblock2, align 8
  %9 = load %struct.basicblock_*, %struct.basicblock_** %block, align 8
  store %struct.basicblock_* %9, %struct.basicblock_** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct.basicblock_*, %struct.basicblock_** %retval
  ret %struct.basicblock_* %10
}

; Function Attrs: nounwind uwtable
define internal i32 @cmpop(i32 %op) #0 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca i32, align 4
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.3
    i32 5, label %sw.bb.4
    i32 6, label %sw.bb.5
    i32 7, label %sw.bb.6
    i32 8, label %sw.bb.7
    i32 9, label %sw.bb.8
    i32 10, label %sw.bb.9
  ]

sw.bb:                                            ; preds = %entry
  store i32 2, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  store i32 3, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %entry
  store i32 4, i32* %retval
  br label %return

sw.bb.5:                                          ; preds = %entry
  store i32 5, i32* %retval
  br label %return

sw.bb.6:                                          ; preds = %entry
  store i32 8, i32* %retval
  br label %return

sw.bb.7:                                          ; preds = %entry
  store i32 9, i32* %retval
  br label %return

sw.bb.8:                                          ; preds = %entry
  store i32 6, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %entry
  store i32 7, i32* %retval
  br label %return

sw.default:                                       ; preds = %entry
  store i32 11, i32* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.9, %sw.bb.8, %sw.bb.7, %sw.bb.6, %sw.bb.5, %sw.bb.4, %sw.bb.3, %sw.bb.2, %sw.bb.1, %sw.bb
  %1 = load i32, i32* %retval
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_slice(%struct.compiler* %c, %struct._slice* %s, i32 %ctx) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._slice*, align 8
  %ctx.addr = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._slice* %s, %struct._slice** %s.addr, align 8
  store i32 %ctx, i32* %ctx.addr, align 4
  store i32 2, i32* %n, align 4
  %0 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v = getelementptr inbounds %struct._slice, %struct._slice* %0, i32 0, i32 1
  %Slice = bitcast %union.anon.26* %v to %struct.anon.27*
  %lower = getelementptr inbounds %struct.anon.27, %struct.anon.27* %Slice, i32 0, i32 0
  %1 = load %struct._expr*, %struct._expr** %lower, align 8
  %tobool = icmp ne %struct._expr* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v1 = getelementptr inbounds %struct._slice, %struct._slice* %3, i32 0, i32 1
  %Slice2 = bitcast %union.anon.26* %v1 to %struct.anon.27*
  %lower3 = getelementptr inbounds %struct.anon.27, %struct.anon.27* %Slice2, i32 0, i32 0
  %4 = load %struct._expr*, %struct._expr** %lower3, align 8
  %call = call i32 @compiler_visit_expr(%struct.compiler* %2, %struct._expr* %4)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.end, label %if.then.5

if.then.5:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.10

if.else:                                          ; preds = %entry
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %6 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %6, i32 0, i32 7
  %7 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %7, i32 0, i32 4
  %8 = load %struct._object*, %struct._object** %u_consts, align 8
  %call6 = call i32 @compiler_addop_o(%struct.compiler* %5, i32 100, %struct._object* %8, %struct._object* @_Py_NoneStruct)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.else
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.end
  %9 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v11 = getelementptr inbounds %struct._slice, %struct._slice* %9, i32 0, i32 1
  %Slice12 = bitcast %union.anon.26* %v11 to %struct.anon.27*
  %upper = getelementptr inbounds %struct.anon.27, %struct.anon.27* %Slice12, i32 0, i32 1
  %10 = load %struct._expr*, %struct._expr** %upper, align 8
  %tobool13 = icmp ne %struct._expr* %10, null
  br i1 %tobool13, label %if.then.14, label %if.else.22

if.then.14:                                       ; preds = %if.end.10
  %11 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %12 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v15 = getelementptr inbounds %struct._slice, %struct._slice* %12, i32 0, i32 1
  %Slice16 = bitcast %union.anon.26* %v15 to %struct.anon.27*
  %upper17 = getelementptr inbounds %struct.anon.27, %struct.anon.27* %Slice16, i32 0, i32 1
  %13 = load %struct._expr*, %struct._expr** %upper17, align 8
  %call18 = call i32 @compiler_visit_expr(%struct.compiler* %11, %struct._expr* %13)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.then.14
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.then.14
  br label %if.end.29

if.else.22:                                       ; preds = %if.end.10
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %15 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u23 = getelementptr inbounds %struct.compiler, %struct.compiler* %15, i32 0, i32 7
  %16 = load %struct.compiler_unit*, %struct.compiler_unit** %u23, align 8
  %u_consts24 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %16, i32 0, i32 4
  %17 = load %struct._object*, %struct._object** %u_consts24, align 8
  %call25 = call i32 @compiler_addop_o(%struct.compiler* %14, i32 100, %struct._object* %17, %struct._object* @_Py_NoneStruct)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.else.22
  store i32 0, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.else.22
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.end.21
  %18 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v30 = getelementptr inbounds %struct._slice, %struct._slice* %18, i32 0, i32 1
  %Slice31 = bitcast %union.anon.26* %v30 to %struct.anon.27*
  %step = getelementptr inbounds %struct.anon.27, %struct.anon.27* %Slice31, i32 0, i32 2
  %19 = load %struct._expr*, %struct._expr** %step, align 8
  %tobool32 = icmp ne %struct._expr* %19, null
  br i1 %tobool32, label %if.then.33, label %if.end.41

if.then.33:                                       ; preds = %if.end.29
  %20 = load i32, i32* %n, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %n, align 4
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %22 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v34 = getelementptr inbounds %struct._slice, %struct._slice* %22, i32 0, i32 1
  %Slice35 = bitcast %union.anon.26* %v34 to %struct.anon.27*
  %step36 = getelementptr inbounds %struct.anon.27, %struct.anon.27* %Slice35, i32 0, i32 2
  %23 = load %struct._expr*, %struct._expr** %step36, align 8
  %call37 = call i32 @compiler_visit_expr(%struct.compiler* %21, %struct._expr* %23)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.then.33
  store i32 0, i32* %retval
  br label %return

if.end.40:                                        ; preds = %if.then.33
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.29
  %24 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %25 = load i32, i32* %n, align 4
  %conv = sext i32 %25 to i64
  %call42 = call i32 @compiler_addop_i(%struct.compiler* %24, i32 133, i64 %conv)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %if.end.41
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %if.end.41
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.45, %if.then.44, %if.then.39, %if.then.27, %if.then.20, %if.then.8, %if.then.5
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_visit_nested_slice(%struct.compiler* %c, %struct._slice* %s, i32 %ctx) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %s.addr = alloca %struct._slice*, align 8
  %ctx.addr = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct._slice* %s, %struct._slice** %s.addr, align 8
  store i32 %ctx, i32* %ctx.addr, align 4
  %0 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %kind = getelementptr inbounds %struct._slice, %struct._slice* %0, i32 0, i32 0
  %1 = load i32, i32* %kind, align 4
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb.1
    i32 2, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry
  %2 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %3 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %4 = load i32, i32* %ctx.addr, align 4
  %call = call i32 @compiler_slice(%struct.compiler* %2, %struct._slice* %3, i32 %4)
  store i32 %call, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %6 = load %struct._slice*, %struct._slice** %s.addr, align 8
  %v = getelementptr inbounds %struct._slice, %struct._slice* %6, i32 0, i32 1
  %Index = bitcast %union.anon.26* %v to %struct.anon.29*
  %value = getelementptr inbounds %struct.anon.29, %struct.anon.29* %Index, i32 0, i32 0
  %7 = load %struct._expr*, %struct._expr** %value, align 8
  %call2 = call i32 @compiler_visit_expr(%struct.compiler* %5, %struct._expr* %7)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb.1
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb.1
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  br label %sw.default

sw.default:                                       ; preds = %entry, %sw.bb.3
  %8 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.54, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %if.then, %sw.bb
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @compiler_handle_subscr(%struct.compiler* %c, i8* %kind, i32 %ctx) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %kind.addr = alloca i8*, align 8
  %ctx.addr = alloca i32, align 4
  %op = alloca i32, align 4
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store i32 %ctx, i32* %ctx.addr, align 4
  store i32 0, i32* %op, align 4
  %0 = load i32, i32* %ctx.addr, align 4
  switch i32 %0, label %sw.epilog [
    i32 4, label %sw.bb
    i32 1, label %sw.bb
    i32 5, label %sw.bb.1
    i32 2, label %sw.bb.1
    i32 3, label %sw.bb.2
    i32 6, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry, %entry
  store i32 25, i32* %op, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  store i32 60, i32* %op, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %entry
  store i32 61, i32* %op, align 4
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %2 = load i8*, i8** %kind.addr, align 8
  %3 = load i32, i32* %ctx.addr, align 4
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.55, i32 0, i32 0), i8* %2, i32 %3)
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %entry, %sw.bb.2, %sw.bb.1, %sw.bb
  %4 = load i32, i32* %ctx.addr, align 4
  %cmp = icmp eq i32 %4, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %sw.epilog
  %5 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call4 = call i32 @compiler_addop(%struct.compiler* %5, i32 5)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.end, label %if.then.5

if.then.5:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.13

if.else:                                          ; preds = %sw.epilog
  %6 = load i32, i32* %ctx.addr, align 4
  %cmp6 = icmp eq i32 %6, 5
  br i1 %cmp6, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.else
  %7 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call8 = call i32 @compiler_addop(%struct.compiler* %7, i32 3)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.then.7
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.7
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.else
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.end
  %8 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %9 = load i32, i32* %op, align 4
  %call14 = call i32 @compiler_addop(%struct.compiler* %8, i32 %9)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.end.17, label %if.then.16

if.then.16:                                       ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.13
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.16, %if.then.10, %if.then.5, %sw.bb.3
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @assemble_init(%struct.assembler* %a, i32 %nblocks, i32 %firstlineno) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.assembler*, align 8
  %nblocks.addr = alloca i32, align 4
  %firstlineno.addr = alloca i32, align 4
  store %struct.assembler* %a, %struct.assembler** %a.addr, align 8
  store i32 %nblocks, i32* %nblocks.addr, align 4
  store i32 %firstlineno, i32* %firstlineno.addr, align 4
  %0 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %1 = bitcast %struct.assembler* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 48, i32 8, i1 false)
  %2 = load i32, i32* %firstlineno.addr, align 4
  %3 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lineno = getelementptr inbounds %struct.assembler, %struct.assembler* %3, i32 0, i32 6
  store i32 %2, i32* %a_lineno, align 4
  %call = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 128)
  %4 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_bytecode = getelementptr inbounds %struct.assembler, %struct.assembler* %4, i32 0, i32 0
  store %struct._object* %call, %struct._object** %a_bytecode, align 8
  %5 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_bytecode1 = getelementptr inbounds %struct.assembler, %struct.assembler* %5, i32 0, i32 0
  %6 = load %struct._object*, %struct._object** %a_bytecode1, align 8
  %tobool = icmp ne %struct._object* %6, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 16)
  %7 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab = getelementptr inbounds %struct.assembler, %struct.assembler* %7, i32 0, i32 4
  store %struct._object* %call2, %struct._object** %a_lnotab, align 8
  %8 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab3 = getelementptr inbounds %struct.assembler, %struct.assembler* %8, i32 0, i32 4
  %9 = load %struct._object*, %struct._object** %a_lnotab3, align 8
  %tobool4 = icmp ne %struct._object* %9, null
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %10 = load i32, i32* %nblocks.addr, align 4
  %conv = sext i32 %10 to i64
  %cmp = icmp ugt i64 %conv, 2305843009213693951
  br i1 %cmp, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @PyErr_NoMemory()
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.6
  %11 = load i32, i32* %nblocks.addr, align 4
  %conv11 = sext i32 %11 to i64
  %mul = mul i64 8, %conv11
  %call12 = call i8* @PyObject_Malloc(i64 %mul)
  %12 = bitcast i8* %call12 to %struct.basicblock_**
  %13 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_postorder = getelementptr inbounds %struct.assembler, %struct.assembler* %13, i32 0, i32 3
  store %struct.basicblock_** %12, %struct.basicblock_*** %a_postorder, align 8
  %14 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_postorder13 = getelementptr inbounds %struct.assembler, %struct.assembler* %14, i32 0, i32 3
  %15 = load %struct.basicblock_**, %struct.basicblock_*** %a_postorder13, align 8
  %tobool14 = icmp ne %struct.basicblock_** %15, null
  br i1 %tobool14, label %if.end.17, label %if.then.15

if.then.15:                                       ; preds = %if.end.10
  %call16 = call %struct._object* @PyErr_NoMemory()
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.10
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.15, %if.then.8, %if.then.5, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal void @dfs(%struct.compiler* %c, %struct.basicblock_* %b, %struct.assembler* %a) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %b.addr = alloca %struct.basicblock_*, align 8
  %a.addr = alloca %struct.assembler*, align 8
  %i = alloca i32, align 4
  %instr = alloca %struct.instr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.basicblock_* %b, %struct.basicblock_** %b.addr, align 8
  store %struct.assembler* %a, %struct.assembler** %a.addr, align 8
  store %struct.instr* null, %struct.instr** %instr, align 8
  %0 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_seen = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %0, i32 0, i32 5
  %bf.load = load i8, i8* %b_seen, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_seen1 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %1, i32 0, i32 5
  %bf.load2 = load i8, i8* %b_seen1, align 8
  %bf.clear3 = and i8 %bf.load2, -2
  %bf.set = or i8 %bf.clear3, 1
  store i8 %bf.set, i8* %b_seen1, align 8
  %2 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_next = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %2, i32 0, i32 4
  %3 = load %struct.basicblock_*, %struct.basicblock_** %b_next, align 8
  %cmp = icmp ne %struct.basicblock_* %3, null
  br i1 %cmp, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %4 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %5 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_next5 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %5, i32 0, i32 4
  %6 = load %struct.basicblock_*, %struct.basicblock_** %b_next5, align 8
  %7 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  call void @dfs(%struct.compiler* %4, %struct.basicblock_* %6, %struct.assembler* %7)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.4, %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.6
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_iused = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %9, i32 0, i32 1
  %10 = load i32, i32* %b_iused, align 4
  %cmp7 = icmp slt i32 %8, %10
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %12, i32 0, i32 3
  %13 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx = getelementptr %struct.instr, %struct.instr* %13, i64 %idxprom
  store %struct.instr* %arrayidx, %struct.instr** %instr, align 8
  %14 = load %struct.instr*, %struct.instr** %instr, align 8
  %15 = bitcast %struct.instr* %14 to i8*
  %bf.load8 = load i8, i8* %15, align 8
  %bf.lshr = lshr i8 %bf.load8, 1
  %bf.clear9 = and i8 %bf.lshr, 1
  %bf.cast10 = zext i8 %bf.clear9 to i32
  %tobool11 = icmp ne i32 %bf.cast10, 0
  br i1 %tobool11, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %16 = load %struct.instr*, %struct.instr** %instr, align 8
  %17 = bitcast %struct.instr* %16 to i8*
  %bf.load12 = load i8, i8* %17, align 8
  %bf.clear13 = and i8 %bf.load12, 1
  %bf.cast14 = zext i8 %bf.clear13 to i32
  %tobool15 = icmp ne i32 %bf.cast14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %lor.lhs.false, %for.body
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %19 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_target = getelementptr inbounds %struct.instr, %struct.instr* %19, i32 0, i32 3
  %20 = load %struct.basicblock_*, %struct.basicblock_** %i_target, align 8
  %21 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  call void @dfs(%struct.compiler* %18, %struct.basicblock_* %20, %struct.assembler* %21)
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.17
  %22 = load i32, i32* %i, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %24 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_nblocks = getelementptr inbounds %struct.assembler, %struct.assembler* %24, i32 0, i32 2
  %25 = load i32, i32* %a_nblocks, align 4
  %inc18 = add i32 %25, 1
  store i32 %inc18, i32* %a_nblocks, align 4
  %idxprom19 = sext i32 %25 to i64
  %26 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_postorder = getelementptr inbounds %struct.assembler, %struct.assembler* %26, i32 0, i32 3
  %27 = load %struct.basicblock_**, %struct.basicblock_*** %a_postorder, align 8
  %arrayidx20 = getelementptr %struct.basicblock_*, %struct.basicblock_** %27, i64 %idxprom19
  store %struct.basicblock_* %23, %struct.basicblock_** %arrayidx20, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @assemble_jump_offsets(%struct.assembler* %a, %struct.compiler* %c) #0 {
entry:
  %a.addr = alloca %struct.assembler*, align 8
  %c.addr = alloca %struct.compiler*, align 8
  %b = alloca %struct.basicblock_*, align 8
  %bsize = alloca i32, align 4
  %totsize = alloca i32, align 4
  %extended_arg_count = alloca i32, align 4
  %last_extended_arg_count = alloca i32, align 4
  %i = alloca i32, align 4
  %instr = alloca %struct.instr*, align 8
  %delta = alloca i32, align 4
  store %struct.assembler* %a, %struct.assembler** %a.addr, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store i32 0, i32* %extended_arg_count, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  store i32 0, i32* %totsize, align 4
  %0 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_nblocks = getelementptr inbounds %struct.assembler, %struct.assembler* %0, i32 0, i32 2
  %1 = load i32, i32* %a_nblocks, align 4
  %sub = sub i32 %1, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.body
  %2 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %2, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_postorder = getelementptr inbounds %struct.assembler, %struct.assembler* %4, i32 0, i32 3
  %5 = load %struct.basicblock_**, %struct.basicblock_*** %a_postorder, align 8
  %arrayidx = getelementptr %struct.basicblock_*, %struct.basicblock_** %5, i64 %idxprom
  %6 = load %struct.basicblock_*, %struct.basicblock_** %arrayidx, align 8
  store %struct.basicblock_* %6, %struct.basicblock_** %b, align 8
  %7 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %call = call i32 @blocksize(%struct.basicblock_* %7)
  store i32 %call, i32* %bsize, align 4
  %8 = load i32, i32* %totsize, align 4
  %9 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_offset = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %9, i32 0, i32 7
  store i32 %8, i32* %b_offset, align 4
  %10 = load i32, i32* %bsize, align 4
  %11 = load i32, i32* %totsize, align 4
  %add = add i32 %11, %10
  store i32 %add, i32* %totsize, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %dec = add i32 %12, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %extended_arg_count, align 4
  store i32 %13, i32* %last_extended_arg_count, align 4
  store i32 0, i32* %extended_arg_count, align 4
  %14 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %14, i32 0, i32 7
  %15 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_blocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %15, i32 0, i32 12
  %16 = load %struct.basicblock_*, %struct.basicblock_** %u_blocks, align 8
  store %struct.basicblock_* %16, %struct.basicblock_** %b, align 8
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc.31, %for.end
  %17 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %cmp2 = icmp ne %struct.basicblock_* %17, null
  br i1 %cmp2, label %for.body.3, label %for.end.32

for.body.3:                                       ; preds = %for.cond.1
  %18 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_offset4 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %18, i32 0, i32 7
  %19 = load i32, i32* %b_offset4, align 4
  store i32 %19, i32* %bsize, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond.5

for.cond.5:                                       ; preds = %for.inc.28, %for.body.3
  %20 = load i32, i32* %i, align 4
  %21 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_iused = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %21, i32 0, i32 1
  %22 = load i32, i32* %b_iused, align 4
  %cmp6 = icmp slt i32 %20, %22
  br i1 %cmp6, label %for.body.7, label %for.end.30

for.body.7:                                       ; preds = %for.cond.5
  %23 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %23 to i64
  %24 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %24, i32 0, i32 3
  %25 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx9 = getelementptr %struct.instr, %struct.instr* %25, i64 %idxprom8
  store %struct.instr* %arrayidx9, %struct.instr** %instr, align 8
  %26 = load %struct.instr*, %struct.instr** %instr, align 8
  %call10 = call i32 @instrsize(%struct.instr* %26)
  %27 = load i32, i32* %bsize, align 4
  %add11 = add i32 %27, %call10
  store i32 %add11, i32* %bsize, align 4
  %28 = load %struct.instr*, %struct.instr** %instr, align 8
  %29 = bitcast %struct.instr* %28 to i8*
  %bf.load = load i8, i8* %29, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body.7
  %30 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_target = getelementptr inbounds %struct.instr, %struct.instr* %30, i32 0, i32 3
  %31 = load %struct.basicblock_*, %struct.basicblock_** %i_target, align 8
  %b_offset12 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %31, i32 0, i32 7
  %32 = load i32, i32* %b_offset12, align 4
  %33 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_oparg = getelementptr inbounds %struct.instr, %struct.instr* %33, i32 0, i32 2
  store i32 %32, i32* %i_oparg, align 4
  br label %if.end.23

if.else:                                          ; preds = %for.body.7
  %34 = load %struct.instr*, %struct.instr** %instr, align 8
  %35 = bitcast %struct.instr* %34 to i8*
  %bf.load13 = load i8, i8* %35, align 8
  %bf.lshr = lshr i8 %bf.load13, 1
  %bf.clear14 = and i8 %bf.lshr, 1
  %bf.cast15 = zext i8 %bf.clear14 to i32
  %tobool16 = icmp ne i32 %bf.cast15, 0
  br i1 %tobool16, label %if.then.17, label %if.else.22

if.then.17:                                       ; preds = %if.else
  %36 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_target18 = getelementptr inbounds %struct.instr, %struct.instr* %36, i32 0, i32 3
  %37 = load %struct.basicblock_*, %struct.basicblock_** %i_target18, align 8
  %b_offset19 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %37, i32 0, i32 7
  %38 = load i32, i32* %b_offset19, align 4
  %39 = load i32, i32* %bsize, align 4
  %sub20 = sub i32 %38, %39
  store i32 %sub20, i32* %delta, align 4
  %40 = load i32, i32* %delta, align 4
  %41 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_oparg21 = getelementptr inbounds %struct.instr, %struct.instr* %41, i32 0, i32 2
  store i32 %40, i32* %i_oparg21, align 4
  br label %if.end

if.else.22:                                       ; preds = %if.else
  br label %for.inc.28

if.end:                                           ; preds = %if.then.17
  br label %if.end.23

if.end.23:                                        ; preds = %if.end, %if.then
  %42 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_oparg24 = getelementptr inbounds %struct.instr, %struct.instr* %42, i32 0, i32 2
  %43 = load i32, i32* %i_oparg24, align 4
  %cmp25 = icmp sgt i32 %43, 65535
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.23
  %44 = load i32, i32* %extended_arg_count, align 4
  %inc = add i32 %44, 1
  store i32 %inc, i32* %extended_arg_count, align 4
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.26, %if.end.23
  br label %for.inc.28

for.inc.28:                                       ; preds = %if.end.27, %if.else.22
  %45 = load i32, i32* %i, align 4
  %inc29 = add i32 %45, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond.5

for.end.30:                                       ; preds = %for.cond.5
  br label %for.inc.31

for.inc.31:                                       ; preds = %for.end.30
  %46 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_list = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %46, i32 0, i32 0
  %47 = load %struct.basicblock_*, %struct.basicblock_** %b_list, align 8
  store %struct.basicblock_* %47, %struct.basicblock_** %b, align 8
  br label %for.cond.1

for.end.32:                                       ; preds = %for.cond.1
  br label %do.cond

do.cond:                                          ; preds = %for.end.32
  %48 = load i32, i32* %last_extended_arg_count, align 4
  %49 = load i32, i32* %extended_arg_count, align 4
  %cmp33 = icmp ne i32 %48, %49
  br i1 %cmp33, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @assemble_emit(%struct.assembler* %a, %struct.instr* %i) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.assembler*, align 8
  %i.addr = alloca %struct.instr*, align 8
  %size = alloca i32, align 4
  %arg = alloca i32, align 4
  %ext = alloca i32, align 4
  %len = alloca i64, align 8
  %code = alloca i8*, align 8
  store %struct.assembler* %a, %struct.assembler** %a.addr, align 8
  store %struct.instr* %i, %struct.instr** %i.addr, align 8
  store i32 0, i32* %arg, align 4
  store i32 0, i32* %ext, align 4
  %0 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_bytecode = getelementptr inbounds %struct.assembler, %struct.assembler* %0, i32 0, i32 0
  %1 = load %struct._object*, %struct._object** %a_bytecode, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  store i64 %3, i64* %len, align 8
  %4 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %call = call i32 @instrsize(%struct.instr* %4)
  store i32 %call, i32* %size, align 4
  %5 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %6 = bitcast %struct.instr* %5 to i8*
  %bf.load = load i8, i8* %6, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %i_oparg = getelementptr inbounds %struct.instr, %struct.instr* %7, i32 0, i32 2
  %8 = load i32, i32* %i_oparg, align 4
  store i32 %8, i32* %arg, align 4
  %9 = load i32, i32* %arg, align 4
  %shr = ashr i32 %9, 16
  store i32 %shr, i32* %ext, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %i_lineno = getelementptr inbounds %struct.instr, %struct.instr* %10, i32 0, i32 4
  %11 = load i32, i32* %i_lineno, align 4
  %tobool1 = icmp ne i32 %11, 0
  br i1 %tobool1, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %13 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %call2 = call i32 @assemble_lnotab(%struct.assembler* %12, %struct.instr* %13)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %14 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_offset = getelementptr inbounds %struct.assembler, %struct.assembler* %14, i32 0, i32 1
  %15 = load i32, i32* %a_offset, align 4
  %16 = load i32, i32* %size, align 4
  %add = add i32 %15, %16
  %conv = sext i32 %add to i64
  %17 = load i64, i64* %len, align 8
  %cmp = icmp sge i64 %conv, %17
  br i1 %cmp, label %if.then.7, label %if.end.18

if.then.7:                                        ; preds = %if.end.5
  %18 = load i64, i64* %len, align 8
  %cmp8 = icmp sgt i64 %18, 4611686018427387903
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.7
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.7
  %19 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_bytecode12 = getelementptr inbounds %struct.assembler, %struct.assembler* %19, i32 0, i32 0
  %20 = load i64, i64* %len, align 8
  %mul = mul i64 %20, 2
  %call13 = call i32 @_PyBytes_Resize(%struct._object** %a_bytecode12, i64 %mul)
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.11
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.11
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %if.end.5
  %21 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_bytecode19 = getelementptr inbounds %struct.assembler, %struct.assembler* %21, i32 0, i32 0
  %22 = load %struct._object*, %struct._object** %a_bytecode19, align 8
  %23 = bitcast %struct._object* %22 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %23, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %24 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_offset20 = getelementptr inbounds %struct.assembler, %struct.assembler* %24, i32 0, i32 1
  %25 = load i32, i32* %a_offset20, align 4
  %idx.ext = sext i32 %25 to i64
  %add.ptr = getelementptr i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %code, align 8
  %26 = load i32, i32* %size, align 4
  %27 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_offset21 = getelementptr inbounds %struct.assembler, %struct.assembler* %27, i32 0, i32 1
  %28 = load i32, i32* %a_offset21, align 4
  %add22 = add i32 %28, %26
  store i32 %add22, i32* %a_offset21, align 4
  %29 = load i32, i32* %size, align 4
  %cmp23 = icmp eq i32 %29, 6
  br i1 %cmp23, label %if.then.25, label %if.end.32

if.then.25:                                       ; preds = %if.end.18
  %30 = load i8*, i8** %code, align 8
  %incdec.ptr = getelementptr i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %code, align 8
  store i8 -112, i8* %30, align 1
  %31 = load i32, i32* %ext, align 4
  %and = and i32 %31, 255
  %conv26 = trunc i32 %and to i8
  %32 = load i8*, i8** %code, align 8
  %incdec.ptr27 = getelementptr i8, i8* %32, i32 1
  store i8* %incdec.ptr27, i8** %code, align 8
  store i8 %conv26, i8* %32, align 1
  %33 = load i32, i32* %ext, align 4
  %shr28 = ashr i32 %33, 8
  %conv29 = trunc i32 %shr28 to i8
  %34 = load i8*, i8** %code, align 8
  %incdec.ptr30 = getelementptr i8, i8* %34, i32 1
  store i8* %incdec.ptr30, i8** %code, align 8
  store i8 %conv29, i8* %34, align 1
  %35 = load i32, i32* %arg, align 4
  %and31 = and i32 %35, 65535
  store i32 %and31, i32* %arg, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.25, %if.end.18
  %36 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %i_opcode = getelementptr inbounds %struct.instr, %struct.instr* %36, i32 0, i32 1
  %37 = load i8, i8* %i_opcode, align 1
  %38 = load i8*, i8** %code, align 8
  %incdec.ptr33 = getelementptr i8, i8* %38, i32 1
  store i8* %incdec.ptr33, i8** %code, align 8
  store i8 %37, i8* %38, align 1
  %39 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %40 = bitcast %struct.instr* %39 to i8*
  %bf.load34 = load i8, i8* %40, align 8
  %bf.lshr35 = lshr i8 %bf.load34, 2
  %bf.clear36 = and i8 %bf.lshr35, 1
  %bf.cast37 = zext i8 %bf.clear36 to i32
  %tobool38 = icmp ne i32 %bf.cast37, 0
  br i1 %tobool38, label %if.then.39, label %if.end.46

if.then.39:                                       ; preds = %if.end.32
  %41 = load i32, i32* %arg, align 4
  %and40 = and i32 %41, 255
  %conv41 = trunc i32 %and40 to i8
  %42 = load i8*, i8** %code, align 8
  %incdec.ptr42 = getelementptr i8, i8* %42, i32 1
  store i8* %incdec.ptr42, i8** %code, align 8
  store i8 %conv41, i8* %42, align 1
  %43 = load i32, i32* %arg, align 4
  %shr43 = ashr i32 %43, 8
  %conv44 = trunc i32 %shr43 to i8
  %44 = load i8*, i8** %code, align 8
  %incdec.ptr45 = getelementptr i8, i8* %44, i32 1
  store i8* %incdec.ptr45, i8** %code, align 8
  store i8 %conv44, i8* %44, align 1
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.39, %if.end.32
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.46, %if.then.16, %if.then.10, %if.then.4
  %45 = load i32, i32* %retval
  ret i32 %45
}

declare i32 @_PyBytes_Resize(%struct._object**, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct.PyCodeObject* @makecode(%struct.compiler* %c, %struct.assembler* %a) #0 {
entry:
  %c.addr = alloca %struct.compiler*, align 8
  %a.addr = alloca %struct.assembler*, align 8
  %tmp = alloca %struct._object*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %consts = alloca %struct._object*, align 8
  %names = alloca %struct._object*, align 8
  %varnames = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %freevars = alloca %struct._object*, align 8
  %cellvars = alloca %struct._object*, align 8
  %bytecode = alloca %struct._object*, align 8
  %nlocals = alloca i64, align 8
  %nlocals_int = alloca i32, align 4
  %flags = alloca i32, align 4
  %argcount = alloca i32, align 4
  %kwonlyargcount = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  %_py_xdecref_tmp99 = alloca %struct._object*, align 8
  %_py_decref_tmp105 = alloca %struct._object*, align 8
  %_py_xdecref_tmp120 = alloca %struct._object*, align 8
  %_py_decref_tmp126 = alloca %struct._object*, align 8
  %_py_xdecref_tmp141 = alloca %struct._object*, align 8
  %_py_decref_tmp147 = alloca %struct._object*, align 8
  %_py_xdecref_tmp162 = alloca %struct._object*, align 8
  %_py_decref_tmp168 = alloca %struct._object*, align 8
  %_py_xdecref_tmp183 = alloca %struct._object*, align 8
  %_py_decref_tmp189 = alloca %struct._object*, align 8
  %_py_xdecref_tmp204 = alloca %struct._object*, align 8
  %_py_decref_tmp210 = alloca %struct._object*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.assembler* %a, %struct.assembler** %a.addr, align 8
  store %struct.PyCodeObject* null, %struct.PyCodeObject** %co, align 8
  store %struct._object* null, %struct._object** %consts, align 8
  store %struct._object* null, %struct._object** %names, align 8
  store %struct._object* null, %struct._object** %varnames, align 8
  store %struct._object* null, %struct._object** %name, align 8
  store %struct._object* null, %struct._object** %freevars, align 8
  store %struct._object* null, %struct._object** %cellvars, align 8
  store %struct._object* null, %struct._object** %bytecode, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_consts = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 4
  %2 = load %struct._object*, %struct._object** %u_consts, align 8
  %call = call %struct._object* @dict_keys_inorder(%struct._object* %2, i64 0)
  store %struct._object* %call, %struct._object** %tmp, align 8
  %3 = load %struct._object*, %struct._object** %tmp, align 8
  %tobool = icmp ne %struct._object* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %error

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %tmp, align 8
  %call14 = call %struct._object* @PySequence_List(%struct._object* %4)
  store %struct._object* %call14, %struct._object** %consts, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %do.body
  br label %if.end.17

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.16
  br label %do.end

do.end:                                           ; preds = %if.end.17
  %12 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u18 = getelementptr inbounds %struct.compiler, %struct.compiler* %12, i32 0, i32 7
  %13 = load %struct.compiler_unit*, %struct.compiler_unit** %u18, align 8
  %u_names = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %13, i32 0, i32 5
  %14 = load %struct._object*, %struct._object** %u_names, align 8
  %call19 = call %struct._object* @dict_keys_inorder(%struct._object* %14, i64 0)
  store %struct._object* %call19, %struct._object** %names, align 8
  %15 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u20 = getelementptr inbounds %struct.compiler, %struct.compiler* %15, i32 0, i32 7
  %16 = load %struct.compiler_unit*, %struct.compiler_unit** %u20, align 8
  %u_varnames = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %16, i32 0, i32 6
  %17 = load %struct._object*, %struct._object** %u_varnames, align 8
  %call21 = call %struct._object* @dict_keys_inorder(%struct._object* %17, i64 0)
  store %struct._object* %call21, %struct._object** %varnames, align 8
  %18 = load %struct._object*, %struct._object** %consts, align 8
  %tobool22 = icmp ne %struct._object* %18, null
  br i1 %tobool22, label %lor.lhs.false, label %if.then.26

lor.lhs.false:                                    ; preds = %do.end
  %19 = load %struct._object*, %struct._object** %names, align 8
  %tobool23 = icmp ne %struct._object* %19, null
  br i1 %tobool23, label %lor.lhs.false.24, label %if.then.26

lor.lhs.false.24:                                 ; preds = %lor.lhs.false
  %20 = load %struct._object*, %struct._object** %varnames, align 8
  %tobool25 = icmp ne %struct._object* %20, null
  br i1 %tobool25, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %lor.lhs.false.24, %lor.lhs.false, %do.end
  br label %error

if.end.27:                                        ; preds = %lor.lhs.false.24
  %21 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u28 = getelementptr inbounds %struct.compiler, %struct.compiler* %21, i32 0, i32 7
  %22 = load %struct.compiler_unit*, %struct.compiler_unit** %u28, align 8
  %u_cellvars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %22, i32 0, i32 7
  %23 = load %struct._object*, %struct._object** %u_cellvars, align 8
  %call29 = call %struct._object* @dict_keys_inorder(%struct._object* %23, i64 0)
  store %struct._object* %call29, %struct._object** %cellvars, align 8
  %24 = load %struct._object*, %struct._object** %cellvars, align 8
  %tobool30 = icmp ne %struct._object* %24, null
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %if.end.27
  br label %error

if.end.32:                                        ; preds = %if.end.27
  %25 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u33 = getelementptr inbounds %struct.compiler, %struct.compiler* %25, i32 0, i32 7
  %26 = load %struct.compiler_unit*, %struct.compiler_unit** %u33, align 8
  %u_freevars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %26, i32 0, i32 8
  %27 = load %struct._object*, %struct._object** %u_freevars, align 8
  %28 = load %struct._object*, %struct._object** %cellvars, align 8
  %call34 = call i64 @PyTuple_Size(%struct._object* %28)
  %call35 = call %struct._object* @dict_keys_inorder(%struct._object* %27, i64 %call34)
  store %struct._object* %call35, %struct._object** %freevars, align 8
  %29 = load %struct._object*, %struct._object** %freevars, align 8
  %tobool36 = icmp ne %struct._object* %29, null
  br i1 %tobool36, label %if.end.38, label %if.then.37

if.then.37:                                       ; preds = %if.end.32
  br label %error

if.end.38:                                        ; preds = %if.end.32
  %30 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u39 = getelementptr inbounds %struct.compiler, %struct.compiler* %30, i32 0, i32 7
  %31 = load %struct.compiler_unit*, %struct.compiler_unit** %u39, align 8
  %u_varnames40 = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %31, i32 0, i32 6
  %32 = load %struct._object*, %struct._object** %u_varnames40, align 8
  %call41 = call i64 @PyDict_Size(%struct._object* %32)
  store i64 %call41, i64* %nlocals, align 8
  %33 = load i64, i64* %nlocals, align 8
  %conv = trunc i64 %33 to i32
  store i32 %conv, i32* %nlocals_int, align 4
  %34 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call42 = call i32 @compute_code_flags(%struct.compiler* %34)
  store i32 %call42, i32* %flags, align 4
  %35 = load i32, i32* %flags, align 4
  %cmp43 = icmp slt i32 %35, 0
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.38
  br label %error

if.end.46:                                        ; preds = %if.end.38
  %36 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_bytecode = getelementptr inbounds %struct.assembler, %struct.assembler* %36, i32 0, i32 0
  %37 = load %struct._object*, %struct._object** %a_bytecode, align 8
  %38 = load %struct._object*, %struct._object** %consts, align 8
  %39 = load %struct._object*, %struct._object** %names, align 8
  %40 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab = getelementptr inbounds %struct.assembler, %struct.assembler* %40, i32 0, i32 4
  %41 = load %struct._object*, %struct._object** %a_lnotab, align 8
  %call47 = call %struct._object* @PyCode_Optimize(%struct._object* %37, %struct._object* %38, %struct._object* %39, %struct._object* %41)
  store %struct._object* %call47, %struct._object** %bytecode, align 8
  %42 = load %struct._object*, %struct._object** %bytecode, align 8
  %tobool48 = icmp ne %struct._object* %42, null
  br i1 %tobool48, label %if.end.50, label %if.then.49

if.then.49:                                       ; preds = %if.end.46
  br label %error

if.end.50:                                        ; preds = %if.end.46
  %43 = load %struct._object*, %struct._object** %consts, align 8
  %call51 = call %struct._object* @PyList_AsTuple(%struct._object* %43)
  store %struct._object* %call51, %struct._object** %tmp, align 8
  %44 = load %struct._object*, %struct._object** %tmp, align 8
  %tobool52 = icmp ne %struct._object* %44, null
  br i1 %tobool52, label %if.end.54, label %if.then.53

if.then.53:                                       ; preds = %if.end.50
  br label %error

if.end.54:                                        ; preds = %if.end.50
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.54
  %45 = load %struct._object*, %struct._object** %consts, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp57, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %47, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %do.body.55
  br label %if.end.66

if.else.63:                                       ; preds = %do.body.55
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %50(%struct._object* %51)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  %52 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %52, %struct._object** %consts, align 8
  %53 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u68 = getelementptr inbounds %struct.compiler, %struct.compiler* %53, i32 0, i32 7
  %54 = load %struct.compiler_unit*, %struct.compiler_unit** %u68, align 8
  %u_argcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %54, i32 0, i32 10
  %55 = load i64, i64* %u_argcount, align 8
  %conv69 = trunc i64 %55 to i32
  store i32 %conv69, i32* %argcount, align 4
  %56 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u70 = getelementptr inbounds %struct.compiler, %struct.compiler* %56, i32 0, i32 7
  %57 = load %struct.compiler_unit*, %struct.compiler_unit** %u70, align 8
  %u_kwonlyargcount = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %57, i32 0, i32 11
  %58 = load i64, i64* %u_kwonlyargcount, align 8
  %conv71 = trunc i64 %58 to i32
  store i32 %conv71, i32* %kwonlyargcount, align 4
  %59 = load i32, i32* %argcount, align 4
  %60 = load i32, i32* %kwonlyargcount, align 4
  %61 = load i32, i32* %nlocals_int, align 4
  %62 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %call72 = call i32 @stackdepth(%struct.compiler* %62)
  %63 = load i32, i32* %flags, align 4
  %64 = load %struct._object*, %struct._object** %bytecode, align 8
  %65 = load %struct._object*, %struct._object** %consts, align 8
  %66 = load %struct._object*, %struct._object** %names, align 8
  %67 = load %struct._object*, %struct._object** %varnames, align 8
  %68 = load %struct._object*, %struct._object** %freevars, align 8
  %69 = load %struct._object*, %struct._object** %cellvars, align 8
  %70 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_filename = getelementptr inbounds %struct.compiler, %struct.compiler* %70, i32 0, i32 0
  %71 = load %struct._object*, %struct._object** %c_filename, align 8
  %72 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u73 = getelementptr inbounds %struct.compiler, %struct.compiler* %72, i32 0, i32 7
  %73 = load %struct.compiler_unit*, %struct.compiler_unit** %u73, align 8
  %u_name = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %73, i32 0, i32 1
  %74 = load %struct._object*, %struct._object** %u_name, align 8
  %75 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u74 = getelementptr inbounds %struct.compiler, %struct.compiler* %75, i32 0, i32 7
  %76 = load %struct.compiler_unit*, %struct.compiler_unit** %u74, align 8
  %u_firstlineno = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %76, i32 0, i32 16
  %77 = load i32, i32* %u_firstlineno, align 4
  %78 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab75 = getelementptr inbounds %struct.assembler, %struct.assembler* %78, i32 0, i32 4
  %79 = load %struct._object*, %struct._object** %a_lnotab75, align 8
  %call76 = call %struct.PyCodeObject* @PyCode_New(i32 %59, i32 %60, i32 %61, i32 %call72, i32 %63, %struct._object* %64, %struct._object* %65, %struct._object* %66, %struct._object* %67, %struct._object* %68, %struct._object* %69, %struct._object* %71, %struct._object* %74, i32 %77, %struct._object* %79)
  store %struct.PyCodeObject* %call76, %struct.PyCodeObject** %co, align 8
  br label %error

error:                                            ; preds = %do.end.67, %if.then.53, %if.then.49, %if.then.45, %if.then.37, %if.then.31, %if.then.26, %if.then
  br label %do.body.77

do.body.77:                                       ; preds = %error
  %80 = load %struct._object*, %struct._object** %consts, align 8
  store %struct._object* %80, %struct._object** %_py_xdecref_tmp, align 8
  %81 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp79 = icmp ne %struct._object* %81, null
  br i1 %cmp79, label %if.then.81, label %if.end.95

if.then.81:                                       ; preds = %do.body.77
  br label %do.body.82

do.body.82:                                       ; preds = %if.then.81
  %82 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp84, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt85, align 8
  %dec86 = add i64 %84, -1
  store i64 %dec86, i64* %ob_refcnt85, align 8
  %cmp87 = icmp ne i64 %dec86, 0
  br i1 %cmp87, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.82
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.82
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  call void %87(%struct._object* %88)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %do.end.94, %do.body.77
  br label %do.end.96

do.end.96:                                        ; preds = %if.end.95
  br label %do.body.97

do.body.97:                                       ; preds = %do.end.96
  %89 = load %struct._object*, %struct._object** %names, align 8
  store %struct._object* %89, %struct._object** %_py_xdecref_tmp99, align 8
  %90 = load %struct._object*, %struct._object** %_py_xdecref_tmp99, align 8
  %cmp100 = icmp ne %struct._object* %90, null
  br i1 %cmp100, label %if.then.102, label %if.end.116

if.then.102:                                      ; preds = %do.body.97
  br label %do.body.103

do.body.103:                                      ; preds = %if.then.102
  %91 = load %struct._object*, %struct._object** %_py_xdecref_tmp99, align 8
  store %struct._object* %91, %struct._object** %_py_decref_tmp105, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0
  %93 = load i64, i64* %ob_refcnt106, align 8
  %dec107 = add i64 %93, -1
  store i64 %dec107, i64* %ob_refcnt106, align 8
  %cmp108 = icmp ne i64 %dec107, 0
  br i1 %cmp108, label %if.then.110, label %if.else.111

if.then.110:                                      ; preds = %do.body.103
  br label %if.end.114

if.else.111:                                      ; preds = %do.body.103
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_type112 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type112, align 8
  %tp_dealloc113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc113, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  call void %96(%struct._object* %97)
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.111, %if.then.110
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  br label %if.end.116

if.end.116:                                       ; preds = %do.end.115, %do.body.97
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  br label %do.body.118

do.body.118:                                      ; preds = %do.end.117
  %98 = load %struct._object*, %struct._object** %varnames, align 8
  store %struct._object* %98, %struct._object** %_py_xdecref_tmp120, align 8
  %99 = load %struct._object*, %struct._object** %_py_xdecref_tmp120, align 8
  %cmp121 = icmp ne %struct._object* %99, null
  br i1 %cmp121, label %if.then.123, label %if.end.137

if.then.123:                                      ; preds = %do.body.118
  br label %do.body.124

do.body.124:                                      ; preds = %if.then.123
  %100 = load %struct._object*, %struct._object** %_py_xdecref_tmp120, align 8
  store %struct._object* %100, %struct._object** %_py_decref_tmp126, align 8
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp126, align 8
  %ob_refcnt127 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 0
  %102 = load i64, i64* %ob_refcnt127, align 8
  %dec128 = add i64 %102, -1
  store i64 %dec128, i64* %ob_refcnt127, align 8
  %cmp129 = icmp ne i64 %dec128, 0
  br i1 %cmp129, label %if.then.131, label %if.else.132

if.then.131:                                      ; preds = %do.body.124
  br label %if.end.135

if.else.132:                                      ; preds = %do.body.124
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp126, align 8
  %ob_type133 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 1
  %104 = load %struct._typeobject*, %struct._typeobject** %ob_type133, align 8
  %tp_dealloc134 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %104, i32 0, i32 4
  %105 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc134, align 8
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp126, align 8
  call void %105(%struct._object* %106)
  br label %if.end.135

if.end.135:                                       ; preds = %if.else.132, %if.then.131
  br label %do.end.136

do.end.136:                                       ; preds = %if.end.135
  br label %if.end.137

if.end.137:                                       ; preds = %do.end.136, %do.body.118
  br label %do.end.138

do.end.138:                                       ; preds = %if.end.137
  br label %do.body.139

do.body.139:                                      ; preds = %do.end.138
  %107 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %107, %struct._object** %_py_xdecref_tmp141, align 8
  %108 = load %struct._object*, %struct._object** %_py_xdecref_tmp141, align 8
  %cmp142 = icmp ne %struct._object* %108, null
  br i1 %cmp142, label %if.then.144, label %if.end.158

if.then.144:                                      ; preds = %do.body.139
  br label %do.body.145

do.body.145:                                      ; preds = %if.then.144
  %109 = load %struct._object*, %struct._object** %_py_xdecref_tmp141, align 8
  store %struct._object* %109, %struct._object** %_py_decref_tmp147, align 8
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_refcnt148 = getelementptr inbounds %struct._object, %struct._object* %110, i32 0, i32 0
  %111 = load i64, i64* %ob_refcnt148, align 8
  %dec149 = add i64 %111, -1
  store i64 %dec149, i64* %ob_refcnt148, align 8
  %cmp150 = icmp ne i64 %dec149, 0
  br i1 %cmp150, label %if.then.152, label %if.else.153

if.then.152:                                      ; preds = %do.body.145
  br label %if.end.156

if.else.153:                                      ; preds = %do.body.145
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_type154 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 1
  %113 = load %struct._typeobject*, %struct._typeobject** %ob_type154, align 8
  %tp_dealloc155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %113, i32 0, i32 4
  %114 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc155, align 8
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  call void %114(%struct._object* %115)
  br label %if.end.156

if.end.156:                                       ; preds = %if.else.153, %if.then.152
  br label %do.end.157

do.end.157:                                       ; preds = %if.end.156
  br label %if.end.158

if.end.158:                                       ; preds = %do.end.157, %do.body.139
  br label %do.end.159

do.end.159:                                       ; preds = %if.end.158
  br label %do.body.160

do.body.160:                                      ; preds = %do.end.159
  %116 = load %struct._object*, %struct._object** %freevars, align 8
  store %struct._object* %116, %struct._object** %_py_xdecref_tmp162, align 8
  %117 = load %struct._object*, %struct._object** %_py_xdecref_tmp162, align 8
  %cmp163 = icmp ne %struct._object* %117, null
  br i1 %cmp163, label %if.then.165, label %if.end.179

if.then.165:                                      ; preds = %do.body.160
  br label %do.body.166

do.body.166:                                      ; preds = %if.then.165
  %118 = load %struct._object*, %struct._object** %_py_xdecref_tmp162, align 8
  store %struct._object* %118, %struct._object** %_py_decref_tmp168, align 8
  %119 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  %ob_refcnt169 = getelementptr inbounds %struct._object, %struct._object* %119, i32 0, i32 0
  %120 = load i64, i64* %ob_refcnt169, align 8
  %dec170 = add i64 %120, -1
  store i64 %dec170, i64* %ob_refcnt169, align 8
  %cmp171 = icmp ne i64 %dec170, 0
  br i1 %cmp171, label %if.then.173, label %if.else.174

if.then.173:                                      ; preds = %do.body.166
  br label %if.end.177

if.else.174:                                      ; preds = %do.body.166
  %121 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  %ob_type175 = getelementptr inbounds %struct._object, %struct._object* %121, i32 0, i32 1
  %122 = load %struct._typeobject*, %struct._typeobject** %ob_type175, align 8
  %tp_dealloc176 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %122, i32 0, i32 4
  %123 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc176, align 8
  %124 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  call void %123(%struct._object* %124)
  br label %if.end.177

if.end.177:                                       ; preds = %if.else.174, %if.then.173
  br label %do.end.178

do.end.178:                                       ; preds = %if.end.177
  br label %if.end.179

if.end.179:                                       ; preds = %do.end.178, %do.body.160
  br label %do.end.180

do.end.180:                                       ; preds = %if.end.179
  br label %do.body.181

do.body.181:                                      ; preds = %do.end.180
  %125 = load %struct._object*, %struct._object** %cellvars, align 8
  store %struct._object* %125, %struct._object** %_py_xdecref_tmp183, align 8
  %126 = load %struct._object*, %struct._object** %_py_xdecref_tmp183, align 8
  %cmp184 = icmp ne %struct._object* %126, null
  br i1 %cmp184, label %if.then.186, label %if.end.200

if.then.186:                                      ; preds = %do.body.181
  br label %do.body.187

do.body.187:                                      ; preds = %if.then.186
  %127 = load %struct._object*, %struct._object** %_py_xdecref_tmp183, align 8
  store %struct._object* %127, %struct._object** %_py_decref_tmp189, align 8
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  %ob_refcnt190 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 0
  %129 = load i64, i64* %ob_refcnt190, align 8
  %dec191 = add i64 %129, -1
  store i64 %dec191, i64* %ob_refcnt190, align 8
  %cmp192 = icmp ne i64 %dec191, 0
  br i1 %cmp192, label %if.then.194, label %if.else.195

if.then.194:                                      ; preds = %do.body.187
  br label %if.end.198

if.else.195:                                      ; preds = %do.body.187
  %130 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  %ob_type196 = getelementptr inbounds %struct._object, %struct._object* %130, i32 0, i32 1
  %131 = load %struct._typeobject*, %struct._typeobject** %ob_type196, align 8
  %tp_dealloc197 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %131, i32 0, i32 4
  %132 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc197, align 8
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  call void %132(%struct._object* %133)
  br label %if.end.198

if.end.198:                                       ; preds = %if.else.195, %if.then.194
  br label %do.end.199

do.end.199:                                       ; preds = %if.end.198
  br label %if.end.200

if.end.200:                                       ; preds = %do.end.199, %do.body.181
  br label %do.end.201

do.end.201:                                       ; preds = %if.end.200
  br label %do.body.202

do.body.202:                                      ; preds = %do.end.201
  %134 = load %struct._object*, %struct._object** %bytecode, align 8
  store %struct._object* %134, %struct._object** %_py_xdecref_tmp204, align 8
  %135 = load %struct._object*, %struct._object** %_py_xdecref_tmp204, align 8
  %cmp205 = icmp ne %struct._object* %135, null
  br i1 %cmp205, label %if.then.207, label %if.end.221

if.then.207:                                      ; preds = %do.body.202
  br label %do.body.208

do.body.208:                                      ; preds = %if.then.207
  %136 = load %struct._object*, %struct._object** %_py_xdecref_tmp204, align 8
  store %struct._object* %136, %struct._object** %_py_decref_tmp210, align 8
  %137 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  %ob_refcnt211 = getelementptr inbounds %struct._object, %struct._object* %137, i32 0, i32 0
  %138 = load i64, i64* %ob_refcnt211, align 8
  %dec212 = add i64 %138, -1
  store i64 %dec212, i64* %ob_refcnt211, align 8
  %cmp213 = icmp ne i64 %dec212, 0
  br i1 %cmp213, label %if.then.215, label %if.else.216

if.then.215:                                      ; preds = %do.body.208
  br label %if.end.219

if.else.216:                                      ; preds = %do.body.208
  %139 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  %ob_type217 = getelementptr inbounds %struct._object, %struct._object* %139, i32 0, i32 1
  %140 = load %struct._typeobject*, %struct._typeobject** %ob_type217, align 8
  %tp_dealloc218 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %140, i32 0, i32 4
  %141 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc218, align 8
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  call void %141(%struct._object* %142)
  br label %if.end.219

if.end.219:                                       ; preds = %if.else.216, %if.then.215
  br label %do.end.220

do.end.220:                                       ; preds = %if.end.219
  br label %if.end.221

if.end.221:                                       ; preds = %do.end.220, %do.body.202
  br label %do.end.222

do.end.222:                                       ; preds = %if.end.221
  %143 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  ret %struct.PyCodeObject* %143
}

; Function Attrs: nounwind uwtable
define internal void @assemble_free(%struct.assembler* %a) #0 {
entry:
  %a.addr = alloca %struct.assembler*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp7 = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  store %struct.assembler* %a, %struct.assembler** %a.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_bytecode = getelementptr inbounds %struct.assembler, %struct.assembler* %0, i32 0, i32 0
  %1 = load %struct._object*, %struct._object** %a_bytecode, align 8
  store %struct._object* %1, %struct._object** %_py_xdecref_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %3 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body.1
  br label %if.end

if.else:                                          ; preds = %do.body.1
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %do.body
  br label %do.end.5

do.end.5:                                         ; preds = %if.end.4
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.5
  %10 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab = getelementptr inbounds %struct.assembler, %struct.assembler* %10, i32 0, i32 4
  %11 = load %struct._object*, %struct._object** %a_lnotab, align 8
  store %struct._object* %11, %struct._object** %_py_xdecref_tmp7, align 8
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  %cmp8 = icmp ne %struct._object* %12, null
  br i1 %cmp8, label %if.then.9, label %if.end.21

if.then.9:                                        ; preds = %do.body.6
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.9
  %13 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp11, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %15, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %18(%struct._object* %19)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %if.end.21

if.end.21:                                        ; preds = %do.end.20, %do.body.6
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  %20 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_postorder = getelementptr inbounds %struct.assembler, %struct.assembler* %20, i32 0, i32 3
  %21 = load %struct.basicblock_**, %struct.basicblock_*** %a_postorder, align 8
  %tobool = icmp ne %struct.basicblock_** %21, null
  br i1 %tobool, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %do.end.22
  %22 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_postorder24 = getelementptr inbounds %struct.assembler, %struct.assembler* %22, i32 0, i32 3
  %23 = load %struct.basicblock_**, %struct.basicblock_*** %a_postorder24, align 8
  %24 = bitcast %struct.basicblock_** %23 to i8*
  call void @PyObject_Free(i8* %24)
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.23, %do.end.22
  ret void
}

declare %struct._object* @PyBytes_FromStringAndSize(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @blocksize(%struct.basicblock_* %b) #0 {
entry:
  %b.addr = alloca %struct.basicblock_*, align 8
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  store %struct.basicblock_* %b, %struct.basicblock_** %b.addr, align 8
  store i32 0, i32* %size, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_iused = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %1, i32 0, i32 1
  %2 = load i32, i32* %b_iused, align 4
  %cmp = icmp slt i32 %0, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %4, i32 0, i32 3
  %5 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx = getelementptr %struct.instr, %struct.instr* %5, i64 %idxprom
  %call = call i32 @instrsize(%struct.instr* %arrayidx)
  %6 = load i32, i32* %size, align 4
  %add = add i32 %6, %call
  store i32 %add, i32* %size, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %size, align 4
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @instrsize(%struct.instr* %instr) #0 {
entry:
  %retval = alloca i32, align 4
  %instr.addr = alloca %struct.instr*, align 8
  store %struct.instr* %instr, %struct.instr** %instr.addr, align 8
  %0 = load %struct.instr*, %struct.instr** %instr.addr, align 8
  %1 = bitcast %struct.instr* %0 to i8*
  %bf.load = load i8, i8* %1, align 8
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.instr*, %struct.instr** %instr.addr, align 8
  %i_oparg = getelementptr inbounds %struct.instr, %struct.instr* %2, i32 0, i32 2
  %3 = load i32, i32* %i_oparg, align 4
  %cmp = icmp sgt i32 %3, 65535
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store i32 6, i32* %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  store i32 3, i32* %retval
  br label %return

return:                                           ; preds = %if.end.2, %if.then.1, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal i32 @assemble_lnotab(%struct.assembler* %a, %struct.instr* %i) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.assembler*, align 8
  %i.addr = alloca %struct.instr*, align 8
  %d_bytecode = alloca i32, align 4
  %d_lineno = alloca i32, align 4
  %len = alloca i64, align 8
  %lnotab = alloca i8*, align 8
  %j = alloca i32, align 4
  %nbytes = alloca i32, align 4
  %ncodes = alloca i32, align 4
  %j45 = alloca i32, align 4
  %nbytes46 = alloca i32, align 4
  %ncodes47 = alloca i32, align 4
  store %struct.assembler* %a, %struct.assembler** %a.addr, align 8
  store %struct.instr* %i, %struct.instr** %i.addr, align 8
  %0 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_offset = getelementptr inbounds %struct.assembler, %struct.assembler* %0, i32 0, i32 1
  %1 = load i32, i32* %a_offset, align 4
  %2 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lineno_off = getelementptr inbounds %struct.assembler, %struct.assembler* %2, i32 0, i32 7
  %3 = load i32, i32* %a_lineno_off, align 4
  %sub = sub i32 %1, %3
  store i32 %sub, i32* %d_bytecode, align 4
  %4 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %i_lineno = getelementptr inbounds %struct.instr, %struct.instr* %4, i32 0, i32 4
  %5 = load i32, i32* %i_lineno, align 4
  %6 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lineno = getelementptr inbounds %struct.assembler, %struct.assembler* %6, i32 0, i32 6
  %7 = load i32, i32* %a_lineno, align 4
  %sub1 = sub i32 %5, %7
  store i32 %sub1, i32* %d_lineno, align 4
  %8 = load i32, i32* %d_bytecode, align 4
  %cmp = icmp eq i32 %8, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %9 = load i32, i32* %d_lineno, align 4
  %cmp2 = icmp eq i32 %9, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load i32, i32* %d_bytecode, align 4
  %cmp3 = icmp sgt i32 %10, 255
  br i1 %cmp3, label %if.then.4, label %if.end.41

if.then.4:                                        ; preds = %if.end
  %11 = load i32, i32* %d_bytecode, align 4
  %div = sdiv i32 %11, 255
  store i32 %div, i32* %ncodes, align 4
  %12 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off = getelementptr inbounds %struct.assembler, %struct.assembler* %12, i32 0, i32 5
  %13 = load i32, i32* %a_lnotab_off, align 4
  %14 = load i32, i32* %ncodes, align 4
  %mul = mul i32 2, %14
  %add = add i32 %13, %mul
  store i32 %add, i32* %nbytes, align 4
  %15 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab = getelementptr inbounds %struct.assembler, %struct.assembler* %15, i32 0, i32 4
  %16 = load %struct._object*, %struct._object** %a_lnotab, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %17, i32 0, i32 1
  %18 = load i64, i64* %ob_size, align 8
  store i64 %18, i64* %len, align 8
  %19 = load i32, i32* %nbytes, align 4
  %conv = sext i32 %19 to i64
  %20 = load i64, i64* %len, align 8
  %cmp5 = icmp sge i64 %conv, %20
  br i1 %cmp5, label %if.then.7, label %if.end.30

if.then.7:                                        ; preds = %if.then.4
  %21 = load i64, i64* %len, align 8
  %cmp8 = icmp sle i64 %21, 1073741823
  br i1 %cmp8, label %land.lhs.true.10, label %if.else

land.lhs.true.10:                                 ; preds = %if.then.7
  %22 = load i64, i64* %len, align 8
  %mul11 = mul i64 %22, 2
  %23 = load i32, i32* %nbytes, align 4
  %conv12 = sext i32 %23 to i64
  %cmp13 = icmp slt i64 %mul11, %conv12
  br i1 %cmp13, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %land.lhs.true.10
  %24 = load i32, i32* %nbytes, align 4
  %conv16 = sext i32 %24 to i64
  store i64 %conv16, i64* %len, align 8
  br label %if.end.23

if.else:                                          ; preds = %land.lhs.true.10, %if.then.7
  %25 = load i64, i64* %len, align 8
  %cmp17 = icmp sle i64 %25, 1073741823
  br i1 %cmp17, label %if.then.19, label %if.else.21

if.then.19:                                       ; preds = %if.else
  %26 = load i64, i64* %len, align 8
  %mul20 = mul i64 %26, 2
  store i64 %mul20, i64* %len, align 8
  br label %if.end.22

if.else.21:                                       ; preds = %if.else
  %call = call %struct._object* @PyErr_NoMemory()
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.then.19
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.then.15
  %27 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab24 = getelementptr inbounds %struct.assembler, %struct.assembler* %27, i32 0, i32 4
  %28 = load i64, i64* %len, align 8
  %call25 = call i32 @_PyBytes_Resize(%struct._object** %a_lnotab24, i64 %28)
  %cmp26 = icmp slt i32 %call25, 0
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.23
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end.23
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.4
  %29 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab31 = getelementptr inbounds %struct.assembler, %struct.assembler* %29, i32 0, i32 4
  %30 = load %struct._object*, %struct._object** %a_lnotab31, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %31, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %32 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off32 = getelementptr inbounds %struct.assembler, %struct.assembler* %32, i32 0, i32 5
  %33 = load i32, i32* %a_lnotab_off32, align 4
  %idx.ext = sext i32 %33 to i64
  %add.ptr = getelementptr i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %lnotab, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.30
  %34 = load i32, i32* %j, align 4
  %35 = load i32, i32* %ncodes, align 4
  %cmp33 = icmp slt i32 %34, %35
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load i8*, i8** %lnotab, align 8
  %incdec.ptr = getelementptr i8, i8* %36, i32 1
  store i8* %incdec.ptr, i8** %lnotab, align 8
  store i8 -1, i8* %36, align 1
  %37 = load i8*, i8** %lnotab, align 8
  %incdec.ptr35 = getelementptr i8, i8* %37, i32 1
  store i8* %incdec.ptr35, i8** %lnotab, align 8
  store i8 0, i8* %37, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %38 = load i32, i32* %j, align 4
  %inc = add i32 %38, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load i32, i32* %ncodes, align 4
  %mul36 = mul i32 %39, 255
  %40 = load i32, i32* %d_bytecode, align 4
  %sub37 = sub i32 %40, %mul36
  store i32 %sub37, i32* %d_bytecode, align 4
  %41 = load i32, i32* %ncodes, align 4
  %mul38 = mul i32 %41, 2
  %42 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off39 = getelementptr inbounds %struct.assembler, %struct.assembler* %42, i32 0, i32 5
  %43 = load i32, i32* %a_lnotab_off39, align 4
  %add40 = add i32 %43, %mul38
  store i32 %add40, i32* %a_lnotab_off39, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %for.end, %if.end
  %44 = load i32, i32* %d_lineno, align 4
  %cmp42 = icmp sgt i32 %44, 255
  br i1 %cmp42, label %if.then.44, label %if.end.106

if.then.44:                                       ; preds = %if.end.41
  %45 = load i32, i32* %d_lineno, align 4
  %div48 = sdiv i32 %45, 255
  store i32 %div48, i32* %ncodes47, align 4
  %46 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off49 = getelementptr inbounds %struct.assembler, %struct.assembler* %46, i32 0, i32 5
  %47 = load i32, i32* %a_lnotab_off49, align 4
  %48 = load i32, i32* %ncodes47, align 4
  %mul50 = mul i32 2, %48
  %add51 = add i32 %47, %mul50
  store i32 %add51, i32* %nbytes46, align 4
  %49 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab52 = getelementptr inbounds %struct.assembler, %struct.assembler* %49, i32 0, i32 4
  %50 = load %struct._object*, %struct._object** %a_lnotab52, align 8
  %51 = bitcast %struct._object* %50 to %struct.PyVarObject*
  %ob_size53 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %51, i32 0, i32 1
  %52 = load i64, i64* %ob_size53, align 8
  store i64 %52, i64* %len, align 8
  %53 = load i32, i32* %nbytes46, align 4
  %conv54 = sext i32 %53 to i64
  %54 = load i64, i64* %len, align 8
  %cmp55 = icmp sge i64 %conv54, %54
  br i1 %cmp55, label %if.then.57, label %if.end.82

if.then.57:                                       ; preds = %if.then.44
  %55 = load i64, i64* %len, align 8
  %cmp58 = icmp sle i64 %55, 1073741823
  br i1 %cmp58, label %land.lhs.true.60, label %if.else.67

land.lhs.true.60:                                 ; preds = %if.then.57
  %56 = load i64, i64* %len, align 8
  %mul61 = mul i64 %56, 2
  %57 = load i32, i32* %nbytes46, align 4
  %conv62 = sext i32 %57 to i64
  %cmp63 = icmp slt i64 %mul61, %conv62
  br i1 %cmp63, label %if.then.65, label %if.else.67

if.then.65:                                       ; preds = %land.lhs.true.60
  %58 = load i32, i32* %nbytes46, align 4
  %conv66 = sext i32 %58 to i64
  store i64 %conv66, i64* %len, align 8
  br label %if.end.75

if.else.67:                                       ; preds = %land.lhs.true.60, %if.then.57
  %59 = load i64, i64* %len, align 8
  %cmp68 = icmp sle i64 %59, 1073741823
  br i1 %cmp68, label %if.then.70, label %if.else.72

if.then.70:                                       ; preds = %if.else.67
  %60 = load i64, i64* %len, align 8
  %mul71 = mul i64 %60, 2
  store i64 %mul71, i64* %len, align 8
  br label %if.end.74

if.else.72:                                       ; preds = %if.else.67
  %call73 = call %struct._object* @PyErr_NoMemory()
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %if.then.70
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.then.65
  %61 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab76 = getelementptr inbounds %struct.assembler, %struct.assembler* %61, i32 0, i32 4
  %62 = load i64, i64* %len, align 8
  %call77 = call i32 @_PyBytes_Resize(%struct._object** %a_lnotab76, i64 %62)
  %cmp78 = icmp slt i32 %call77, 0
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.end.75
  store i32 0, i32* %retval
  br label %return

if.end.81:                                        ; preds = %if.end.75
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81, %if.then.44
  %63 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab83 = getelementptr inbounds %struct.assembler, %struct.assembler* %63, i32 0, i32 4
  %64 = load %struct._object*, %struct._object** %a_lnotab83, align 8
  %65 = bitcast %struct._object* %64 to %struct.PyBytesObject*
  %ob_sval84 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %65, i32 0, i32 2
  %arraydecay85 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval84, i32 0, i32 0
  %66 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off86 = getelementptr inbounds %struct.assembler, %struct.assembler* %66, i32 0, i32 5
  %67 = load i32, i32* %a_lnotab_off86, align 4
  %idx.ext87 = sext i32 %67 to i64
  %add.ptr88 = getelementptr i8, i8* %arraydecay85, i64 %idx.ext87
  store i8* %add.ptr88, i8** %lnotab, align 8
  %68 = load i32, i32* %d_bytecode, align 4
  %conv89 = trunc i32 %68 to i8
  %69 = load i8*, i8** %lnotab, align 8
  %incdec.ptr90 = getelementptr i8, i8* %69, i32 1
  store i8* %incdec.ptr90, i8** %lnotab, align 8
  store i8 %conv89, i8* %69, align 1
  %70 = load i8*, i8** %lnotab, align 8
  %incdec.ptr91 = getelementptr i8, i8* %70, i32 1
  store i8* %incdec.ptr91, i8** %lnotab, align 8
  store i8 -1, i8* %70, align 1
  store i32 0, i32* %d_bytecode, align 4
  store i32 1, i32* %j45, align 4
  br label %for.cond.92

for.cond.92:                                      ; preds = %for.inc.98, %if.end.82
  %71 = load i32, i32* %j45, align 4
  %72 = load i32, i32* %ncodes47, align 4
  %cmp93 = icmp slt i32 %71, %72
  br i1 %cmp93, label %for.body.95, label %for.end.100

for.body.95:                                      ; preds = %for.cond.92
  %73 = load i8*, i8** %lnotab, align 8
  %incdec.ptr96 = getelementptr i8, i8* %73, i32 1
  store i8* %incdec.ptr96, i8** %lnotab, align 8
  store i8 0, i8* %73, align 1
  %74 = load i8*, i8** %lnotab, align 8
  %incdec.ptr97 = getelementptr i8, i8* %74, i32 1
  store i8* %incdec.ptr97, i8** %lnotab, align 8
  store i8 -1, i8* %74, align 1
  br label %for.inc.98

for.inc.98:                                       ; preds = %for.body.95
  %75 = load i32, i32* %j45, align 4
  %inc99 = add i32 %75, 1
  store i32 %inc99, i32* %j45, align 4
  br label %for.cond.92

for.end.100:                                      ; preds = %for.cond.92
  %76 = load i32, i32* %ncodes47, align 4
  %mul101 = mul i32 %76, 255
  %77 = load i32, i32* %d_lineno, align 4
  %sub102 = sub i32 %77, %mul101
  store i32 %sub102, i32* %d_lineno, align 4
  %78 = load i32, i32* %ncodes47, align 4
  %mul103 = mul i32 %78, 2
  %79 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off104 = getelementptr inbounds %struct.assembler, %struct.assembler* %79, i32 0, i32 5
  %80 = load i32, i32* %a_lnotab_off104, align 4
  %add105 = add i32 %80, %mul103
  store i32 %add105, i32* %a_lnotab_off104, align 4
  br label %if.end.106

if.end.106:                                       ; preds = %for.end.100, %if.end.41
  %81 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab107 = getelementptr inbounds %struct.assembler, %struct.assembler* %81, i32 0, i32 4
  %82 = load %struct._object*, %struct._object** %a_lnotab107, align 8
  %83 = bitcast %struct._object* %82 to %struct.PyVarObject*
  %ob_size108 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %83, i32 0, i32 1
  %84 = load i64, i64* %ob_size108, align 8
  store i64 %84, i64* %len, align 8
  %85 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off109 = getelementptr inbounds %struct.assembler, %struct.assembler* %85, i32 0, i32 5
  %86 = load i32, i32* %a_lnotab_off109, align 4
  %add110 = add i32 %86, 2
  %conv111 = sext i32 %add110 to i64
  %87 = load i64, i64* %len, align 8
  %cmp112 = icmp sge i64 %conv111, %87
  br i1 %cmp112, label %if.then.114, label %if.end.122

if.then.114:                                      ; preds = %if.end.106
  %88 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab115 = getelementptr inbounds %struct.assembler, %struct.assembler* %88, i32 0, i32 4
  %89 = load i64, i64* %len, align 8
  %mul116 = mul i64 %89, 2
  %call117 = call i32 @_PyBytes_Resize(%struct._object** %a_lnotab115, i64 %mul116)
  %cmp118 = icmp slt i32 %call117, 0
  br i1 %cmp118, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.then.114
  store i32 0, i32* %retval
  br label %return

if.end.121:                                       ; preds = %if.then.114
  br label %if.end.122

if.end.122:                                       ; preds = %if.end.121, %if.end.106
  %90 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab123 = getelementptr inbounds %struct.assembler, %struct.assembler* %90, i32 0, i32 4
  %91 = load %struct._object*, %struct._object** %a_lnotab123, align 8
  %92 = bitcast %struct._object* %91 to %struct.PyBytesObject*
  %ob_sval124 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %92, i32 0, i32 2
  %arraydecay125 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval124, i32 0, i32 0
  %93 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off126 = getelementptr inbounds %struct.assembler, %struct.assembler* %93, i32 0, i32 5
  %94 = load i32, i32* %a_lnotab_off126, align 4
  %idx.ext127 = sext i32 %94 to i64
  %add.ptr128 = getelementptr i8, i8* %arraydecay125, i64 %idx.ext127
  store i8* %add.ptr128, i8** %lnotab, align 8
  %95 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lnotab_off129 = getelementptr inbounds %struct.assembler, %struct.assembler* %95, i32 0, i32 5
  %96 = load i32, i32* %a_lnotab_off129, align 4
  %add130 = add i32 %96, 2
  store i32 %add130, i32* %a_lnotab_off129, align 4
  %97 = load i32, i32* %d_bytecode, align 4
  %tobool = icmp ne i32 %97, 0
  br i1 %tobool, label %if.then.131, label %if.else.136

if.then.131:                                      ; preds = %if.end.122
  %98 = load i32, i32* %d_bytecode, align 4
  %conv132 = trunc i32 %98 to i8
  %99 = load i8*, i8** %lnotab, align 8
  %incdec.ptr133 = getelementptr i8, i8* %99, i32 1
  store i8* %incdec.ptr133, i8** %lnotab, align 8
  store i8 %conv132, i8* %99, align 1
  %100 = load i32, i32* %d_lineno, align 4
  %conv134 = trunc i32 %100 to i8
  %101 = load i8*, i8** %lnotab, align 8
  %incdec.ptr135 = getelementptr i8, i8* %101, i32 1
  store i8* %incdec.ptr135, i8** %lnotab, align 8
  store i8 %conv134, i8* %101, align 1
  br label %if.end.140

if.else.136:                                      ; preds = %if.end.122
  %102 = load i8*, i8** %lnotab, align 8
  %incdec.ptr137 = getelementptr i8, i8* %102, i32 1
  store i8* %incdec.ptr137, i8** %lnotab, align 8
  store i8 0, i8* %102, align 1
  %103 = load i32, i32* %d_lineno, align 4
  %conv138 = trunc i32 %103 to i8
  %104 = load i8*, i8** %lnotab, align 8
  %incdec.ptr139 = getelementptr i8, i8* %104, i32 1
  store i8* %incdec.ptr139, i8** %lnotab, align 8
  store i8 %conv138, i8* %104, align 1
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.136, %if.then.131
  %105 = load %struct.instr*, %struct.instr** %i.addr, align 8
  %i_lineno141 = getelementptr inbounds %struct.instr, %struct.instr* %105, i32 0, i32 4
  %106 = load i32, i32* %i_lineno141, align 4
  %107 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lineno142 = getelementptr inbounds %struct.assembler, %struct.assembler* %107, i32 0, i32 6
  store i32 %106, i32* %a_lineno142, align 4
  %108 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_offset143 = getelementptr inbounds %struct.assembler, %struct.assembler* %108, i32 0, i32 1
  %109 = load i32, i32* %a_offset143, align 4
  %110 = load %struct.assembler*, %struct.assembler** %a.addr, align 8
  %a_lineno_off144 = getelementptr inbounds %struct.assembler, %struct.assembler* %110, i32 0, i32 7
  store i32 %109, i32* %a_lineno_off144, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.140, %if.then.120, %if.then.80, %if.else.72, %if.then.28, %if.else.21, %if.then
  %111 = load i32, i32* %retval
  ret i32 %111
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dict_keys_inorder(%struct._object* %dict, i64 %offset) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dict.addr = alloca %struct._object*, align 8
  %offset.addr = alloca i64, align 8
  %tuple = alloca %struct._object*, align 8
  %k = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %pos = alloca i64, align 8
  %size = alloca i64, align 8
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store i64 %offset, i64* %offset.addr, align 8
  store i64 0, i64* %pos, align 8
  %0 = load %struct._object*, %struct._object** %dict.addr, align 8
  %call = call i64 @PyDict_Size(%struct._object* %0)
  store i64 %call, i64* %size, align 8
  %1 = load i64, i64* %size, align 8
  %call1 = call %struct._object* @PyTuple_New(i64 %1)
  store %struct._object* %call1, %struct._object** %tuple, align 8
  %2 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load %struct._object*, %struct._object** %dict.addr, align 8
  %call2 = call i32 @PyDict_Next(%struct._object* %3, i64* %pos, %struct._object** %k, %struct._object** %v)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._object*, %struct._object** %v, align 8
  %call3 = call i64 @PyLong_AsLong(%struct._object* %4)
  store i64 %call3, i64* %i, align 8
  %5 = load %struct._object*, %struct._object** %k, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %6, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %7, %struct._object** %k, align 8
  %8 = load %struct._object*, %struct._object** %k, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %10 = load %struct._object*, %struct._object** %k, align 8
  %11 = load i64, i64* %i, align 8
  %12 = load i64, i64* %offset.addr, align 8
  %sub = sub i64 %11, %12
  %13 = load %struct._object*, %struct._object** %tuple, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyTupleObject*
  %ob_item4 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %14, i32 0, i32 1
  %arrayidx5 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4, i32 0, i64 %sub
  store %struct._object* %10, %struct._object** %arrayidx5, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %16 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %16
}

declare %struct._object* @PySequence_List(%struct._object*) #1

declare i64 @PyTuple_Size(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compute_code_flags(%struct.compiler* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %ste = alloca %struct._symtable_entry*, align 8
  %flags = alloca i32, align 4
  %n = alloca i64, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_ste = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 0
  %2 = load %struct._symtable_entry*, %struct._symtable_entry** %u_ste, align 8
  store %struct._symtable_entry* %2, %struct._symtable_entry** %ste, align 8
  store i32 0, i32* %flags, align 4
  %3 = load %struct._symtable_entry*, %struct._symtable_entry** %ste, align 8
  %ste_type = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %3, i32 0, i32 7
  %4 = load i32, i32* %ste_type, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end.27

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %flags, align 4
  %or = or i32 %5, 2
  store i32 %or, i32* %flags, align 4
  %6 = load %struct._symtable_entry*, %struct._symtable_entry** %ste, align 8
  %ste_unoptimized = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %6, i32 0, i32 8
  %7 = load i32, i32* %ste_unoptimized, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.end, label %if.then.1

if.then.1:                                        ; preds = %if.then
  %8 = load i32, i32* %flags, align 4
  %or2 = or i32 %8, 1
  store i32 %or2, i32* %flags, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.1, %if.then
  %9 = load %struct._symtable_entry*, %struct._symtable_entry** %ste, align 8
  %ste_nested = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %9, i32 0, i32 9
  %10 = load i32, i32* %ste_nested, align 4
  %tobool3 = icmp ne i32 %10, 0
  br i1 %tobool3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %11 = load i32, i32* %flags, align 4
  %or5 = or i32 %11, 16
  store i32 %or5, i32* %flags, align 4
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.4, %if.end
  %12 = load %struct._symtable_entry*, %struct._symtable_entry** %ste, align 8
  %ste_generator = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %12, i32 0, i32 10
  %bf.load = load i8, i8* %ste_generator, align 4
  %bf.lshr = lshr i8 %bf.load, 2
  %bf.clear = and i8 %bf.lshr, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool7 = icmp ne i32 %bf.cast, 0
  br i1 %tobool7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end.6
  %13 = load i32, i32* %flags, align 4
  %or9 = or i32 %13, 32
  store i32 %or9, i32* %flags, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.end.6
  %14 = load %struct._symtable_entry*, %struct._symtable_entry** %ste, align 8
  %ste_varargs = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %14, i32 0, i32 10
  %bf.load11 = load i8, i8* %ste_varargs, align 4
  %bf.lshr12 = lshr i8 %bf.load11, 3
  %bf.clear13 = and i8 %bf.lshr12, 1
  %bf.cast14 = zext i8 %bf.clear13 to i32
  %tobool15 = icmp ne i32 %bf.cast14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.end.10
  %15 = load i32, i32* %flags, align 4
  %or17 = or i32 %15, 4
  store i32 %or17, i32* %flags, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %if.end.10
  %16 = load %struct._symtable_entry*, %struct._symtable_entry** %ste, align 8
  %ste_varkeywords = getelementptr inbounds %struct._symtable_entry, %struct._symtable_entry* %16, i32 0, i32 10
  %bf.load19 = load i8, i8* %ste_varkeywords, align 4
  %bf.lshr20 = lshr i8 %bf.load19, 4
  %bf.clear21 = and i8 %bf.lshr20, 1
  %bf.cast22 = zext i8 %bf.clear21 to i32
  %tobool23 = icmp ne i32 %bf.cast22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %if.end.18
  %17 = load i32, i32* %flags, align 4
  %or25 = or i32 %17, 8
  store i32 %or25, i32* %flags, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.24, %if.end.18
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %entry
  %18 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %c_flags = getelementptr inbounds %struct.compiler, %struct.compiler* %18, i32 0, i32 3
  %19 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %c_flags, align 8
  %cf_flags = getelementptr inbounds %struct.PyCompilerFlags, %struct.PyCompilerFlags* %19, i32 0, i32 0
  %20 = load i32, i32* %cf_flags, align 4
  %and = and i32 %20, 516096
  %21 = load i32, i32* %flags, align 4
  %or28 = or i32 %21, %and
  store i32 %or28, i32* %flags, align 4
  %22 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u29 = getelementptr inbounds %struct.compiler, %struct.compiler* %22, i32 0, i32 7
  %23 = load %struct.compiler_unit*, %struct.compiler_unit** %u29, align 8
  %u_freevars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %23, i32 0, i32 8
  %24 = load %struct._object*, %struct._object** %u_freevars, align 8
  %call = call i64 @PyDict_Size(%struct._object* %24)
  store i64 %call, i64* %n, align 8
  %25 = load i64, i64* %n, align 8
  %cmp30 = icmp slt i64 %25, 0
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.27
  store i32 -1, i32* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.27
  %26 = load i64, i64* %n, align 8
  %cmp33 = icmp eq i64 %26, 0
  br i1 %cmp33, label %if.then.34, label %if.end.44

if.then.34:                                       ; preds = %if.end.32
  %27 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u35 = getelementptr inbounds %struct.compiler, %struct.compiler* %27, i32 0, i32 7
  %28 = load %struct.compiler_unit*, %struct.compiler_unit** %u35, align 8
  %u_cellvars = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %28, i32 0, i32 7
  %29 = load %struct._object*, %struct._object** %u_cellvars, align 8
  %call36 = call i64 @PyDict_Size(%struct._object* %29)
  store i64 %call36, i64* %n, align 8
  %30 = load i64, i64* %n, align 8
  %cmp37 = icmp slt i64 %30, 0
  br i1 %cmp37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.then.34
  store i32 -1, i32* %retval
  br label %return

if.end.39:                                        ; preds = %if.then.34
  %31 = load i64, i64* %n, align 8
  %cmp40 = icmp eq i64 %31, 0
  br i1 %cmp40, label %if.then.41, label %if.end.43

if.then.41:                                       ; preds = %if.end.39
  %32 = load i32, i32* %flags, align 4
  %or42 = or i32 %32, 64
  store i32 %or42, i32* %flags, align 4
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.41, %if.end.39
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end.32
  %33 = load i32, i32* %flags, align 4
  store i32 %33, i32* %retval
  br label %return

return:                                           ; preds = %if.end.44, %if.then.38, %if.then.31
  %34 = load i32, i32* %retval
  ret i32 %34
}

declare %struct._object* @PyCode_Optimize(%struct._object*, %struct._object*, %struct._object*, %struct._object*) #1

declare %struct._object* @PyList_AsTuple(%struct._object*) #1

declare %struct.PyCodeObject* @PyCode_New(i32, i32, i32, i32, i32, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @stackdepth(%struct.compiler* %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %b = alloca %struct.basicblock_*, align 8
  %entryblock = alloca %struct.basicblock_*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.basicblock_* null, %struct.basicblock_** %entryblock, align 8
  %0 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %u = getelementptr inbounds %struct.compiler, %struct.compiler* %0, i32 0, i32 7
  %1 = load %struct.compiler_unit*, %struct.compiler_unit** %u, align 8
  %u_blocks = getelementptr inbounds %struct.compiler_unit, %struct.compiler_unit* %1, i32 0, i32 12
  %2 = load %struct.basicblock_*, %struct.basicblock_** %u_blocks, align 8
  store %struct.basicblock_* %2, %struct.basicblock_** %b, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %cmp = icmp ne %struct.basicblock_* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_seen = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %4, i32 0, i32 5
  %bf.load = load i8, i8* %b_seen, align 8
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %b_seen, align 8
  %5 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_startdepth = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %5, i32 0, i32 6
  store i32 -2147483648, i32* %b_startdepth, align 4
  %6 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  store %struct.basicblock_* %6, %struct.basicblock_** %entryblock, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.basicblock_*, %struct.basicblock_** %b, align 8
  %b_list = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %7, i32 0, i32 0
  %8 = load %struct.basicblock_*, %struct.basicblock_** %b_list, align 8
  store %struct.basicblock_* %8, %struct.basicblock_** %b, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.basicblock_*, %struct.basicblock_** %entryblock, align 8
  %tobool = icmp ne %struct.basicblock_* %9, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.end
  %10 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %11 = load %struct.basicblock_*, %struct.basicblock_** %entryblock, align 8
  %call = call i32 @stackdepth_walk(%struct.compiler* %10, %struct.basicblock_* %11, i32 0, i32 0)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

declare i32 @PyDict_Next(%struct._object*, i64*, %struct._object**, %struct._object**) #1

; Function Attrs: nounwind uwtable
define internal i32 @stackdepth_walk(%struct.compiler* %c, %struct.basicblock_* %b, i32 %depth, i32 %maxdepth) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.compiler*, align 8
  %b.addr = alloca %struct.basicblock_*, align 8
  %depth.addr = alloca i32, align 4
  %maxdepth.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %target_depth = alloca i32, align 4
  %effect = alloca i32, align 4
  %instr = alloca %struct.instr*, align 8
  store %struct.compiler* %c, %struct.compiler** %c.addr, align 8
  store %struct.basicblock_* %b, %struct.basicblock_** %b.addr, align 8
  store i32 %depth, i32* %depth.addr, align 4
  store i32 %maxdepth, i32* %maxdepth.addr, align 4
  %0 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_seen = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %0, i32 0, i32 5
  %bf.load = load i8, i8* %b_seen, align 8
  %bf.clear = and i8 %bf.load, 1
  %bf.cast = zext i8 %bf.clear to i32
  %tobool = icmp ne i32 %bf.cast, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_startdepth = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %1, i32 0, i32 6
  %2 = load i32, i32* %b_startdepth, align 4
  %3 = load i32, i32* %depth.addr, align 4
  %cmp = icmp sge i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i32, i32* %maxdepth.addr, align 4
  store i32 %4, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_seen1 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %5, i32 0, i32 5
  %bf.load2 = load i8, i8* %b_seen1, align 8
  %bf.clear3 = and i8 %bf.load2, -2
  %bf.set = or i8 %bf.clear3, 1
  store i8 %bf.set, i8* %b_seen1, align 8
  %6 = load i32, i32* %depth.addr, align 4
  %7 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_startdepth4 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %7, i32 0, i32 6
  store i32 %6, i32* %b_startdepth4, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4
  %9 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_iused = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %9, i32 0, i32 1
  %10 = load i32, i32* %b_iused, align 4
  %cmp5 = icmp slt i32 %8, %10
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %12 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_instr = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %12, i32 0, i32 3
  %13 = load %struct.instr*, %struct.instr** %b_instr, align 8
  %arrayidx = getelementptr %struct.instr, %struct.instr* %13, i64 %idxprom
  store %struct.instr* %arrayidx, %struct.instr** %instr, align 8
  %14 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_opcode = getelementptr inbounds %struct.instr, %struct.instr* %14, i32 0, i32 1
  %15 = load i8, i8* %i_opcode, align 1
  %conv = zext i8 %15 to i32
  %16 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_oparg = getelementptr inbounds %struct.instr, %struct.instr* %16, i32 0, i32 2
  %17 = load i32, i32* %i_oparg, align 4
  %call = call i32 @PyCompile_OpcodeStackEffect(i32 %conv, i32 %17)
  store i32 %call, i32* %effect, align 4
  %18 = load i32, i32* %effect, align 4
  %cmp6 = icmp eq i32 %18, 2147483647
  br i1 %cmp6, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %for.body
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %20 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_opcode9 = getelementptr inbounds %struct.instr, %struct.instr* %20, i32 0, i32 1
  %21 = load i8, i8* %i_opcode9, align 1
  %conv10 = zext i8 %21 to i32
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.58, i32 0, i32 0), i32 %conv10)
  call void @Py_FatalError(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.59, i32 0, i32 0)) #6
  unreachable

if.end.12:                                        ; preds = %for.body
  %22 = load i32, i32* %effect, align 4
  %23 = load i32, i32* %depth.addr, align 4
  %add = add i32 %23, %22
  store i32 %add, i32* %depth.addr, align 4
  %24 = load i32, i32* %depth.addr, align 4
  %25 = load i32, i32* %maxdepth.addr, align 4
  %cmp13 = icmp sgt i32 %24, %25
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  %26 = load i32, i32* %depth.addr, align 4
  store i32 %26, i32* %maxdepth.addr, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %if.end.12
  %27 = load %struct.instr*, %struct.instr** %instr, align 8
  %28 = bitcast %struct.instr* %27 to i8*
  %bf.load17 = load i8, i8* %28, align 8
  %bf.lshr = lshr i8 %bf.load17, 1
  %bf.clear18 = and i8 %bf.lshr, 1
  %bf.cast19 = zext i8 %bf.clear18 to i32
  %tobool20 = icmp ne i32 %bf.cast19, 0
  br i1 %tobool20, label %if.then.26, label %lor.lhs.false.21

lor.lhs.false.21:                                 ; preds = %if.end.16
  %29 = load %struct.instr*, %struct.instr** %instr, align 8
  %30 = bitcast %struct.instr* %29 to i8*
  %bf.load22 = load i8, i8* %30, align 8
  %bf.clear23 = and i8 %bf.load22, 1
  %bf.cast24 = zext i8 %bf.clear23 to i32
  %tobool25 = icmp ne i32 %bf.cast24, 0
  br i1 %tobool25, label %if.then.26, label %if.end.61

if.then.26:                                       ; preds = %lor.lhs.false.21, %if.end.16
  %31 = load i32, i32* %depth.addr, align 4
  store i32 %31, i32* %target_depth, align 4
  %32 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_opcode27 = getelementptr inbounds %struct.instr, %struct.instr* %32, i32 0, i32 1
  %33 = load i8, i8* %i_opcode27, align 1
  %conv28 = zext i8 %33 to i32
  %cmp29 = icmp eq i32 %conv28, 93
  br i1 %cmp29, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %if.then.26
  %34 = load i32, i32* %depth.addr, align 4
  %sub = sub i32 %34, 2
  store i32 %sub, i32* %target_depth, align 4
  br label %if.end.48

if.else:                                          ; preds = %if.then.26
  %35 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_opcode32 = getelementptr inbounds %struct.instr, %struct.instr* %35, i32 0, i32 1
  %36 = load i8, i8* %i_opcode32, align 1
  %conv33 = zext i8 %36 to i32
  %cmp34 = icmp eq i32 %conv33, 122
  br i1 %cmp34, label %if.then.41, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %if.else
  %37 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_opcode37 = getelementptr inbounds %struct.instr, %struct.instr* %37, i32 0, i32 1
  %38 = load i8, i8* %i_opcode37, align 1
  %conv38 = zext i8 %38 to i32
  %cmp39 = icmp eq i32 %conv38, 121
  br i1 %cmp39, label %if.then.41, label %if.end.47

if.then.41:                                       ; preds = %lor.lhs.false.36, %if.else
  %39 = load i32, i32* %depth.addr, align 4
  %add42 = add i32 %39, 3
  store i32 %add42, i32* %target_depth, align 4
  %40 = load i32, i32* %target_depth, align 4
  %41 = load i32, i32* %maxdepth.addr, align 4
  %cmp43 = icmp sgt i32 %40, %41
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.41
  %42 = load i32, i32* %target_depth, align 4
  store i32 %42, i32* %maxdepth.addr, align 4
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.45, %if.then.41
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %lor.lhs.false.36
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.then.31
  %43 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %44 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_target = getelementptr inbounds %struct.instr, %struct.instr* %44, i32 0, i32 3
  %45 = load %struct.basicblock_*, %struct.basicblock_** %i_target, align 8
  %46 = load i32, i32* %target_depth, align 4
  %47 = load i32, i32* %maxdepth.addr, align 4
  %call49 = call i32 @stackdepth_walk(%struct.compiler* %43, %struct.basicblock_* %45, i32 %46, i32 %47)
  store i32 %call49, i32* %maxdepth.addr, align 4
  %48 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_opcode50 = getelementptr inbounds %struct.instr, %struct.instr* %48, i32 0, i32 1
  %49 = load i8, i8* %i_opcode50, align 1
  %conv51 = zext i8 %49 to i32
  %cmp52 = icmp eq i32 %conv51, 113
  br i1 %cmp52, label %if.then.59, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %if.end.48
  %50 = load %struct.instr*, %struct.instr** %instr, align 8
  %i_opcode55 = getelementptr inbounds %struct.instr, %struct.instr* %50, i32 0, i32 1
  %51 = load i8, i8* %i_opcode55, align 1
  %conv56 = zext i8 %51 to i32
  %cmp57 = icmp eq i32 %conv56, 110
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %lor.lhs.false.54, %if.end.48
  br label %out

if.end.60:                                        ; preds = %lor.lhs.false.54
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %lor.lhs.false.21
  br label %for.inc

for.inc:                                          ; preds = %if.end.61
  %52 = load i32, i32* %i, align 4
  %inc = add i32 %52, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %53 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_next = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %53, i32 0, i32 4
  %54 = load %struct.basicblock_*, %struct.basicblock_** %b_next, align 8
  %tobool62 = icmp ne %struct.basicblock_* %54, null
  br i1 %tobool62, label %if.then.63, label %if.end.66

if.then.63:                                       ; preds = %for.end
  %55 = load %struct.compiler*, %struct.compiler** %c.addr, align 8
  %56 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_next64 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %56, i32 0, i32 4
  %57 = load %struct.basicblock_*, %struct.basicblock_** %b_next64, align 8
  %58 = load i32, i32* %depth.addr, align 4
  %59 = load i32, i32* %maxdepth.addr, align 4
  %call65 = call i32 @stackdepth_walk(%struct.compiler* %55, %struct.basicblock_* %57, i32 %58, i32 %59)
  store i32 %call65, i32* %maxdepth.addr, align 4
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.63, %for.end
  br label %out

out:                                              ; preds = %if.end.66, %if.then.59
  %60 = load %struct.basicblock_*, %struct.basicblock_** %b.addr, align 8
  %b_seen67 = getelementptr inbounds %struct.basicblock_, %struct.basicblock_* %60, i32 0, i32 5
  %bf.load68 = load i8, i8* %b_seen67, align 8
  %bf.clear69 = and i8 %bf.load68, -2
  store i8 %bf.clear69, i8* %b_seen67, align 8
  %61 = load i32, i32* %maxdepth.addr, align 4
  store i32 %61, i32* %retval
  br label %return

return:                                           ; preds = %out, %if.then
  %62 = load i32, i32* %retval
  ret i32 %62
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind readonly }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
