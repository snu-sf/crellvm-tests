; ModuleID = './_pickle.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.PyModuleDef = type { %struct.PyModuleDef_Base, i8*, i8*, i64, %struct.PyMethodDef*, i32 (%struct._object*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, void (i8*)* }
%struct.PyModuleDef_Base = type { %struct._object, %struct._object* ()*, i64, %struct._object* }
%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct._Py_atomic_address = type { i8* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct.PickleState = type { %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object* }
%struct.PicklerObject = type { %struct._object, %struct.PyMemoTable*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i64, i64, i32, i32, i32, i64, i64, i32, i32, i32, %struct._object* }
%struct.PyMemoTable = type { i64, i64, i64, %struct.PyMemoEntry* }
%struct.PyMemoEntry = type { %struct._object*, i64 }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type opaque
%struct.PyFloatObject = type { %struct._object, double }
%struct._setobject = type { %struct._object, i64, i64, i64, %struct.setentry*, %struct.setentry* (%struct._setobject*, %struct._object*, i64)*, i64, [8 x %struct.setentry], %struct._object* }
%struct.setentry = type { %struct._object*, i64 }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyASCIIObject = type { %struct._object, i64, i64, %struct.anon, i32* }
%struct.anon = type { i32 }
%struct.PyCompactUnicodeObject = type { %struct.PyASCIIObject, i64, i8*, i64 }
%struct.PyUnicodeObject = type { %struct.PyCompactUnicodeObject, %union.anon }
%union.anon = type { i8* }
%struct.PyByteArrayObject = type { %struct.PyVarObject, i64, i8*, i8*, i32 }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.UnpicklerObject = type { %struct._object, %struct.Pdata*, %struct._object**, i64, i64, %struct._object*, %struct.bufferinfo, i8*, i8*, i64, i64, i64, %struct._object*, %struct._object*, %struct._object*, i8*, i8*, i64*, i64, i64, i32, i32 }
%struct.Pdata = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.UnpicklerMemoProxyObject = type { %struct._object, %struct.UnpicklerObject* }
%struct.PicklerMemoProxyObject = type { %struct._object, %struct.PicklerObject* }

@_picklemodule = internal global %struct.PyModuleDef { %struct.PyModuleDef_Base { %struct._object { i64 1, %struct._typeobject* null }, %struct._object* ()* null, i64 0, %struct._object* null }, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @pickle_module_doc, i32 0, i32 0), i64 96, %struct.PyMethodDef* getelementptr inbounds ([5 x %struct.PyMethodDef], [5 x %struct.PyMethodDef]* @pickle_methods, i32 0, i32 0), i32 (%struct._object*)* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* @pickle_traverse, i32 (%struct._object*)* @pickle_clear, void (i8*)* bitcast (void (%struct._object*)* @pickle_free to void (i8*)*) }, align 8
@Unpickler_Type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.139, i32 0, i32 0), i64 248, i64 0, void (%struct._object*)* bitcast (void (%struct.UnpicklerObject*)* @Unpickler_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([1115 x i8], [1115 x i8]* @_pickle_Unpickler___init____doc__, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.UnpicklerObject*, i32 (%struct._object*, i8*)*, i8*)* @Unpickler_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.UnpicklerObject*)* @Unpickler_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([3 x %struct.PyMethodDef], [3 x %struct.PyMethodDef]* @Unpickler_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([3 x %struct.PyGetSetDef], [3 x %struct.PyGetSetDef]* @Unpickler_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @_pickle_Unpickler___init__, %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyType_GenericNew, void (i8*)* @PyObject_GC_Del, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@Pickler_Type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.152, i32 0, i32 0), i64 128, i64 0, void (%struct._object*)* bitcast (void (%struct.PicklerObject*)* @Pickler_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([928 x i8], [928 x i8]* @_pickle_Pickler___init____doc__, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.PicklerObject*, i32 (%struct._object*, i8*)*, i8*)* @Pickler_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.PicklerObject*)* @Pickler_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([3 x %struct.PyMethodDef], [3 x %struct.PyMethodDef]* @Pickler_methods, i32 0, i32 0), %struct.PyMemberDef* getelementptr inbounds ([4 x %struct.PyMemberDef], [4 x %struct.PyMemberDef]* @Pickler_members, i32 0, i32 0), %struct.PyGetSetDef* getelementptr inbounds ([3 x %struct.PyGetSetDef], [3 x %struct.PyGetSetDef]* @Pickler_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @_pickle_Pickler___init__, %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyType_GenericNew, void (i8*)* @PyObject_GC_Del, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@Pdata_Type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.163, i32 0, i32 0), i64 40, i64 0, void (%struct._object*)* bitcast (void (%struct.Pdata*)* @Pdata_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 0, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PicklerMemoProxyType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.164, i32 0, i32 0), i64 24, i64 0, void (%struct._object*)* bitcast (void (%struct.PicklerMemoProxyObject*)* @PicklerMemoProxy_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* @PyObject_HashNotImplemented, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* @PyObject_GenericSetAttr, %struct.PyBufferProcs* null, i64 279552, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.PicklerMemoProxyObject*, i32 (%struct._object*, i8*)*, i8*)* @PicklerMemoProxy_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.PicklerMemoProxyObject*)* @PicklerMemoProxy_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([4 x %struct.PyMethodDef], [4 x %struct.PyMethodDef]* @picklerproxy_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@UnpicklerMemoProxyType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.168, i32 0, i32 0), i64 24, i64 0, void (%struct._object*)* bitcast (void (%struct.UnpicklerMemoProxyObject*)* @UnpicklerMemoProxy_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* @PyObject_HashNotImplemented, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* @PyObject_GenericSetAttr, %struct.PyBufferProcs* null, i64 279552, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.UnpicklerMemoProxyObject*, i32 (%struct._object*, i8*)*, i8*)* @UnpicklerMemoProxy_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.UnpicklerMemoProxyObject*)* @UnpicklerMemoProxy_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([4 x %struct.PyMethodDef], [4 x %struct.PyMethodDef]* @unpicklerproxy_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str = private unnamed_addr constant [8 x i8] c"Pickler\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"Unpickler\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"_pickle.PickleError\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"_pickle.PicklingError\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"_pickle.UnpicklingError\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"PickleError\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"PicklingError\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"UnpicklingError\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"_pickle\00", align 1
@pickle_module_doc = internal global [57 x i8] c"Optimized C implementation for the Python pickle module.\00", align 16
@pickle_methods = internal global [5 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @_pickle_dump to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([1043 x i8], [1043 x i8]* @_pickle_dump__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @_pickle_dumps to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([731 x i8], [731 x i8]* @_pickle_dumps__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @_pickle_load to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([1211 x i8], [1211 x i8]* @_pickle_load__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyModuleDef*, %struct._object*, %struct._object*)* @_pickle_loads to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([809 x i8], [809 x i8]* @_pickle_loads__doc__, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.9 = private unnamed_addr constant [5 x i8] c"dump\00", align 1
@_pickle_dump__doc__ = internal global [1043 x i8] c"dump($module, /, obj, file, protocol=None, *, fix_imports=True)\0A--\0A\0AWrite a pickled representation of obj to the open file object file.\0A\0AThis is equivalent to ``Pickler(file, protocol).dump(obj)``, but may\0Abe more efficient.\0A\0AThe optional *protocol* argument tells the pickler to use the given\0Aprotocol supported protocols are 0, 1, 2, 3 and 4.  The default\0Aprotocol is 3; a backward-incompatible protocol designed for Python 3.\0A\0ASpecifying a negative protocol version selects the highest protocol\0Aversion supported.  The higher the protocol used, the more recent the\0Aversion of Python needed to read the pickle produced.\0A\0AThe *file* argument must have a write() method that accepts a single\0Abytes argument.  It can thus be a file object opened for binary\0Awriting, a io.BytesIO instance, or any other custom object that meets\0Athis interface.\0A\0AIf *fix_imports* is True and protocol is less than 3, pickle will try\0Ato map the new Python 3 names to the old module names used in Python\0A2, so that the pickle data stream is readable with Python 2.\00", align 16
@.str.10 = private unnamed_addr constant [6 x i8] c"dumps\00", align 1
@_pickle_dumps__doc__ = internal global [731 x i8] c"dumps($module, /, obj, protocol=None, *, fix_imports=True)\0A--\0A\0AReturn the pickled representation of the object as a bytes object.\0A\0AThe optional *protocol* argument tells the pickler to use the given\0Aprotocol; supported protocols are 0, 1, 2, 3 and 4.  The default\0Aprotocol is 3; a backward-incompatible protocol designed for Python 3.\0A\0ASpecifying a negative protocol version selects the highest protocol\0Aversion supported.  The higher the protocol used, the more recent the\0Aversion of Python needed to read the pickle produced.\0A\0AIf *fix_imports* is True and *protocol* is less than 3, pickle will\0Atry to map the new Python 3 names to the old module names used in\0APython 2, so that the pickle data stream is readable with Python 2.\00", align 16
@.str.11 = private unnamed_addr constant [5 x i8] c"load\00", align 1
@_pickle_load__doc__ = internal global [1211 x i8] c"load($module, /, file, *, fix_imports=True, encoding='ASCII',\0A     errors='strict')\0A--\0A\0ARead and return an object from the pickle data stored in a file.\0A\0AThis is equivalent to ``Unpickler(file).load()``, but may be more\0Aefficient.\0A\0AThe protocol version of the pickle is detected automatically, so no\0Aprotocol argument is needed.  Bytes past the pickled object's\0Arepresentation are ignored.\0A\0AThe argument *file* must have two methods, a read() method that takes\0Aan integer argument, and a readline() method that requires no\0Aarguments.  Both methods should return bytes.  Thus *file* can be a\0Abinary file object opened for reading, a io.BytesIO object, or any\0Aother custom object that meets this interface.\0A\0AOptional keyword arguments are *fix_imports*, *encoding* and *errors*,\0Awhich are used to control compatiblity support for pickle stream\0Agenerated by Python 2.  If *fix_imports* is True, pickle will try to\0Amap the old Python 2 names to the new names used in Python 3.  The\0A*encoding* and *errors* tell pickle how to decode 8-bit string\0Ainstances pickled by Python 2; these default to 'ASCII' and 'strict',\0Arespectively.  The *encoding* can be 'bytes' to read these 8-bit\0Astring instances as bytes objects.\00", align 16
@.str.12 = private unnamed_addr constant [6 x i8] c"loads\00", align 1
@_pickle_loads__doc__ = internal global [809 x i8] c"loads($module, /, data, *, fix_imports=True, encoding='ASCII',\0A      errors='strict')\0A--\0A\0ARead and return an object from the given pickle data.\0A\0AThe protocol version of the pickle is detected automatically, so no\0Aprotocol argument is needed.  Bytes past the pickled object's\0Arepresentation are ignored.\0A\0AOptional keyword arguments are *fix_imports*, *encoding* and *errors*,\0Awhich are used to control compatiblity support for pickle stream\0Agenerated by Python 2.  If *fix_imports* is True, pickle will try to\0Amap the old Python 2 names to the new names used in Python 3.  The\0A*encoding* and *errors* tell pickle how to decode 8-bit string\0Ainstances pickled by Python 2; these default to 'ASCII' and 'strict',\0Arespectively.  The *encoding* can be 'bytes' to read these 8-bit\0Astring instances as bytes objects.\00", align 16
@_pickle_dump._keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* null], align 16
@.str.13 = private unnamed_addr constant [4 x i8] c"obj\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"protocol\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"fix_imports\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"OO|O$p:dump\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@PyExc_ValueError = external global %struct._object*, align 8
@.str.18 = private unnamed_addr constant [30 x i8] c"pickle protocol must be <= %d\00", align 1
@_Pickler_SetOutputStream.PyId_write = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i32 0, i32 0), %struct._object* null }, align 8
@.str.19 = private unnamed_addr constant [6 x i8] c"write\00", align 1
@PyExc_AttributeError = external global %struct._object*, align 8
@PyExc_TypeError = external global %struct._object*, align 8
@.str.20 = private unnamed_addr constant [35 x i8] c"file must have a 'write' attribute\00", align 1
@_PyThreadState_Current = external global %struct._Py_atomic_address, align 8
@_Py_CheckRecursionLimit = external global i32, align 4
@.str.21 = private unnamed_addr constant [26 x i8] c" while pickling an object\00", align 1
@_Py_FalseStruct = external global %struct._longobject, align 8
@_Py_TrueStruct = external global %struct._longobject, align 8
@PyLong_Type = external global %struct._typeobject, align 8
@PyFloat_Type = external global %struct._typeobject, align 8
@PyBytes_Type = external global %struct._typeobject, align 8
@PyUnicode_Type = external global %struct._typeobject, align 8
@PyDict_Type = external global %struct._typeobject, align 8
@PySet_Type = external global %struct._typeobject, align 8
@PyFrozenSet_Type = external global %struct._typeobject, align 8
@PyList_Type = external global %struct._typeobject, align 8
@PyTuple_Type = external global %struct._typeobject, align 8
@PyType_Type = external global %struct._typeobject, align 8
@PyFunction_Type = external global %struct._typeobject, align 8
@PyExc_KeyError = external global %struct._object*, align 8
@save.PyId___reduce__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), %struct._object* null }, align 8
@.str.22 = private unnamed_addr constant [11 x i8] c"__reduce__\00", align 1
@save.PyId___reduce_ex__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i32 0, i32 0), %struct._object* null }, align 8
@.str.23 = private unnamed_addr constant [14 x i8] c"__reduce_ex__\00", align 1
@.str.24 = private unnamed_addr constant [33 x i8] c"can't pickle '%.200s' object: %R\00", align 1
@.str.25 = private unnamed_addr constant [41 x i8] c"__reduce__ must return a string or tuple\00", align 1
@.str.26 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"I01\0A\00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"I00\0A\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.29 = private unnamed_addr constant [24 x i8] c"int too large to pickle\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"L\0A\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"%zd\0A\00", align 1
@.str.32 = private unnamed_addr constant [34 x i8] c"memo id too large for LONG_BINGET\00", align 1
@.str.33 = private unnamed_addr constant [6 x i8] c"(O())\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"strict\00", align 1
@save_bytes.PyId_latin1 = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i32 0, i32 0), %struct._object* null }, align 8
@.str.35 = private unnamed_addr constant [7 x i8] c"latin1\00", align 1
@.str.36 = private unnamed_addr constant [8 x i8] c"(O(OO))\00", align 1
@.str.37 = private unnamed_addr constant [50 x i8] c"cannot serialize a bytes object larger than 4 GiB\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"memo id too large for LONG_BINPUT\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"utf-8\00", align 1
@.str.40 = private unnamed_addr constant [14 x i8] c"surrogatepass\00", align 1
@.str.41 = private unnamed_addr constant [43 x i8] c"cannot serialize a string larger than 4GiB\00", align 1
@_PyByteArray_empty_string = external global [0 x i8], align 1
@Py_hexdigits = external global i8*, align 8
@save_dict.PyId_items = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0), %struct._object* null }, align 8
@.str.42 = private unnamed_addr constant [6 x i8] c"items\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.44 = private unnamed_addr constant [74 x i8] c"fast mode: can't pickle cyclic objects including object type %.200s at %p\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.45 = private unnamed_addr constant [41 x i8] c"dictionary changed size during iteration\00", align 1
@.str.46 = private unnamed_addr constant [41 x i8] c"dict items iterator must return 2-tuples\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"(O(O))\00", align 1
@.str.48 = private unnamed_addr constant [34 x i8] c"set changed size during iteration\00", align 1
@save_tuple.len2opcode = internal constant [4 x i8] c")\85\86\87", align 1
@_PyNone_Type = external global %struct._typeobject, align 8
@PyEllipsis_Type = external global %struct._typeobject, align 8
@_Py_EllipsisObject = external global %struct._object, align 8
@_PyNotImplemented_Type = external global %struct._typeobject, align 8
@_Py_NotImplementedStruct = external global %struct._object, align 8
@.str.49 = private unnamed_addr constant [5 x i8] c"O(O)\00", align 1
@save_global.PyId___name__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i32 0, i32 0), %struct._object* null }, align 8
@.str.50 = private unnamed_addr constant [9 x i8] c"__name__\00", align 1
@save_global.PyId___qualname__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.51, i32 0, i32 0), %struct._object* null }, align 8
@.str.51 = private unnamed_addr constant [13 x i8] c"__qualname__\00", align 1
@.str.52 = private unnamed_addr constant [44 x i8] c"Can't pickle %R: import of module %R failed\00", align 1
@.str.53 = private unnamed_addr constant [50 x i8] c"Can't pickle %R: attribute lookup %S on %S failed\00", align 1
@.str.54 = private unnamed_addr constant [51 x i8] c"Can't pickle %R: it's not the same object as %S.%S\00", align 1
@.str.55 = private unnamed_addr constant [52 x i8] c"Can't pickle %R: extension code %R isn't an integer\00", align 1
@.str.56 = private unnamed_addr constant [52 x i8] c"Can't pickle %R: extension code %ld is out of range\00", align 1
@PyExc_UnicodeEncodeError = external global %struct._object*, align 8
@.str.57 = private unnamed_addr constant [61 x i8] c"can't pickle module identifier '%S' using pickle protocol %i\00", align 1
@.str.58 = private unnamed_addr constant [61 x i8] c"can't pickle global identifier '%S' using pickle protocol %i\00", align 1
@whichmodule.PyId___module__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.59, i32 0, i32 0), %struct._object* null }, align 8
@.str.59 = private unnamed_addr constant [11 x i8] c"__module__\00", align 1
@whichmodule.PyId_modules = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60, i32 0, i32 0), %struct._object* null }, align 8
@.str.60 = private unnamed_addr constant [8 x i8] c"modules\00", align 1
@whichmodule.PyId___main__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.61, i32 0, i32 0), %struct._object* null }, align 8
@.str.61 = private unnamed_addr constant [9 x i8] c"__main__\00", align 1
@.str.62 = private unnamed_addr constant [26 x i8] c"unable to get sys.modules\00", align 1
@getattribute.PyId_dot = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.63, i32 0, i32 0), %struct._object* null }, align 8
@.str.63 = private unnamed_addr constant [2 x i8] c".\00", align 1
@getattribute.PyId_locals = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.64, i32 0, i32 0), %struct._object* null }, align 8
@.str.64 = private unnamed_addr constant [9 x i8] c"<locals>\00", align 1
@.str.65 = private unnamed_addr constant [76 x i8] c"Can't get qualified attribute %R on %R;use protocols >= 4 to enable support\00", align 1
@.str.66 = private unnamed_addr constant [35 x i8] c"Can't get local attribute %R on %R\00", align 1
@.str.67 = private unnamed_addr constant [29 x i8] c"Can't get attribute %R on %R\00", align 1
@.str.68 = private unnamed_addr constant [74 x i8] c"_compat_pickle.REVERSE_NAME_MAPPING values should be 2-tuples, not %.200s\00", align 1
@.str.69 = private unnamed_addr constant [88 x i8] c"_compat_pickle.REVERSE_NAME_MAPPING values should be pairs of str, not (%.200s, %.200s)\00", align 1
@.str.70 = private unnamed_addr constant [75 x i8] c"_compat_pickle.REVERSE_IMPORT_MAPPING values should be strings, not %.200s\00", align 1
@.str.71 = private unnamed_addr constant [63 x i8] c"tuple returned by __reduce__ must contain 2 through 5 elements\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"save_reduce\00", align 1
@.str.73 = private unnamed_addr constant [64 x i8] c"first item of the tuple returned by __reduce__ must be callable\00", align 1
@.str.74 = private unnamed_addr constant [64 x i8] c"second item of the tuple returned by __reduce__ must be a tuple\00", align 1
@.str.75 = private unnamed_addr constant [79 x i8] c"fourth element of the tuple returned by __reduce__ must be an iterator, not %s\00", align 1
@.str.76 = private unnamed_addr constant [78 x i8] c"fifth element of the tuple returned by __reduce__ must be an iterator, not %s\00", align 1
@save_reduce.PyId___name__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i32 0, i32 0), %struct._object* null }, align 8
@save_reduce.PyId___newobj_ex__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.77, i32 0, i32 0), %struct._object* null }, align 8
@.str.77 = private unnamed_addr constant [14 x i8] c"__newobj_ex__\00", align 1
@save_reduce.PyId___newobj__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.78, i32 0, i32 0), %struct._object* null }, align 8
@.str.78 = private unnamed_addr constant [11 x i8] c"__newobj__\00", align 1
@.str.79 = private unnamed_addr constant [66 x i8] c"length of the NEWOBJ_EX argument tuple must be exactly 3, not %zd\00", align 1
@.str.80 = private unnamed_addr constant [69 x i8] c"first item from NEWOBJ_EX argument tuple must be a class, not %.200s\00", align 1
@.str.81 = private unnamed_addr constant [70 x i8] c"second item from NEWOBJ_EX argument tuple must be a tuple, not %.200s\00", align 1
@.str.82 = private unnamed_addr constant [68 x i8] c"third item from NEWOBJ_EX argument tuple must be a dict, not %.200s\00", align 1
@.str.83 = private unnamed_addr constant [28 x i8] c"__newobj__ arglist is empty\00", align 1
@.str.84 = private unnamed_addr constant [43 x i8] c"args[0] from __newobj__ args is not a type\00", align 1
@.str.85 = private unnamed_addr constant [49 x i8] c"args[0] from __newobj__ args has the wrong class\00", align 1
@get_class.PyId___class__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.86, i32 0, i32 0), %struct._object* null }, align 8
@.str.86 = private unnamed_addr constant [10 x i8] c"__class__\00", align 1
@_pickle_dumps._keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* null], align 16
@.str.87 = private unnamed_addr constant [12 x i8] c"O|O$p:dumps\00", align 1
@_pickle_load._keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.89, i32 0, i32 0), i8* null], align 16
@.str.88 = private unnamed_addr constant [9 x i8] c"encoding\00", align 1
@.str.89 = private unnamed_addr constant [7 x i8] c"errors\00", align 1
@.str.90 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.91 = private unnamed_addr constant [12 x i8] c"O|$pss:load\00", align 1
@_Unpickler_SetInputStream.PyId_peek = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.92, i32 0, i32 0), %struct._object* null }, align 8
@.str.92 = private unnamed_addr constant [5 x i8] c"peek\00", align 1
@_Unpickler_SetInputStream.PyId_read = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.93, i32 0, i32 0), %struct._object* null }, align 8
@.str.93 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@_Unpickler_SetInputStream.PyId_readline = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.94, i32 0, i32 0), %struct._object* null }, align 8
@.str.94 = private unnamed_addr constant [9 x i8] c"readline\00", align 1
@.str.95 = private unnamed_addr constant [48 x i8] c"file must have 'read' and 'readline' attributes\00", align 1
@PyExc_EOFError = external global %struct._object*, align 8
@.str.96 = private unnamed_addr constant [24 x i8] c"invalid load key, '%c'.\00", align 1
@.str.97 = private unnamed_addr constant [27 x i8] c"unpickling stack underflow\00", align 1
@.str.98 = private unnamed_addr constant [17 x i8] c"Ran out of input\00", align 1
@PyExc_NotImplementedError = external global %struct._object*, align 8
@.str.99 = private unnamed_addr constant [32 x i8] c"could not convert string to int\00", align 1
@.str.100 = private unnamed_addr constant [26 x i8] c"pickle data was truncated\00", align 1
@.str.101 = private unnamed_addr constant [36 x i8] c"LONG pickle has negative byte count\00", align 1
@.str.102 = private unnamed_addr constant [34 x i8] c"could not convert string to float\00", align 1
@.str.103 = private unnamed_addr constant [52 x i8] c"BINBYTES exceeds system's maximum size of %zd bytes\00", align 1
@.str.104 = private unnamed_addr constant [53 x i8] c"BINSTRING exceeds system's maximum size of %zd bytes\00", align 1
@.str.105 = private unnamed_addr constant [6 x i8] c"bytes\00", align 1
@.str.106 = private unnamed_addr constant [42 x i8] c"the STRING opcode argument must be quoted\00", align 1
@.str.107 = private unnamed_addr constant [54 x i8] c"BINUNICODE exceeds system's maximum size of %zd bytes\00", align 1
@.str.108 = private unnamed_addr constant [20 x i8] c"could not find MARK\00", align 1
@load_additems.PyId_add = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.109, i32 0, i32 0), %struct._object* null }, align 8
@.str.109 = private unnamed_addr constant [4 x i8] c"add\00", align 1
@instantiate.PyId___getinitargs__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.110, i32 0, i32 0), %struct._object* null }, align 8
@.str.110 = private unnamed_addr constant [16 x i8] c"__getinitargs__\00", align 1
@instantiate.PyId___new__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.111, i32 0, i32 0), %struct._object* null }, align 8
@.str.111 = private unnamed_addr constant [8 x i8] c"__new__\00", align 1
@.str.112 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@find_class.PyId_find_class = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0), %struct._object* null }, align 8
@.str.113 = private unnamed_addr constant [11 x i8] c"find_class\00", align 1
@.str.114 = private unnamed_addr constant [3 x i8] c"OO\00", align 1
@.str.115 = private unnamed_addr constant [30 x i8] c"NEWOBJ expected an arg tuple.\00", align 1
@.str.116 = private unnamed_addr constant [42 x i8] c"NEWOBJ class argument isn't a type object\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"NEWOBJ class argument has NULL tp_new\00", align 1
@.str.118 = private unnamed_addr constant [52 x i8] c"NEWOBJ_EX class argument must be a type, not %.200s\00", align 1
@.str.119 = private unnamed_addr constant [46 x i8] c"NEWOBJ_EX class argument doesn't have __new__\00", align 1
@.str.120 = private unnamed_addr constant [26 x i8] c"STACK_GLOBAL requires str\00", align 1
@do_append.PyId_append = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.121, i32 0, i32 0), %struct._object* null }, align 8
@.str.121 = private unnamed_addr constant [7 x i8] c"append\00", align 1
@load_build.PyId___setstate__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.122, i32 0, i32 0), %struct._object* null }, align 8
@.str.122 = private unnamed_addr constant [13 x i8] c"__setstate__\00", align 1
@load_build.PyId___dict__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.123, i32 0, i32 0), %struct._object* null }, align 8
@.str.123 = private unnamed_addr constant [9 x i8] c"__dict__\00", align 1
@.str.124 = private unnamed_addr constant [26 x i8] c"state is not a dictionary\00", align 1
@.str.125 = private unnamed_addr constant [31 x i8] c"slot state is not a dictionary\00", align 1
@.str.126 = private unnamed_addr constant [30 x i8] c"negative LONG_BINPUT argument\00", align 1
@.str.127 = private unnamed_addr constant [22 x i8] c"negative PUT argument\00", align 1
@.str.128 = private unnamed_addr constant [33 x i8] c"odd number of items for SETITEMS\00", align 1
@.str.129 = private unnamed_addr constant [97 x i8] c"A load persistent id instruction was encountered,\0Abut no persistent_load function was specified.\00", align 1
@.str.130 = private unnamed_addr constant [32 x i8] c"unsupported pickle protocol: %d\00", align 1
@.str.131 = private unnamed_addr constant [51 x i8] c"FRAME length exceeds system's maximum of %zd bytes\00", align 1
@.str.132 = private unnamed_addr constant [24 x i8] c"EXT specifies code <= 0\00", align 1
@.str.133 = private unnamed_addr constant [32 x i8] c"unregistered extension code %ld\00", align 1
@.str.134 = private unnamed_addr constant [51 x i8] c"_inverted_registry[%ld] isn't a 2-tuple of strings\00", align 1
@.str.135 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.136 = private unnamed_addr constant [16 x i8] c"bad pickle data\00", align 1
@_pickle_loads._keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.89, i32 0, i32 0), i8* null], align 16
@.str.137 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.138 = private unnamed_addr constant [13 x i8] c"O|$pss:loads\00", align 1
@.str.139 = private unnamed_addr constant [18 x i8] c"_pickle.Unpickler\00", align 1
@_pickle_Unpickler___init____doc__ = internal global [1115 x i8] c"Unpickler(file, *, fix_imports=True, encoding='ASCII', errors='strict')\0A--\0A\0AThis takes a binary file for reading a pickle data stream.\0A\0AThe protocol version of the pickle is detected automatically, so no\0Aprotocol argument is needed.  Bytes past the pickled object's\0Arepresentation are ignored.\0A\0AThe argument *file* must have two methods, a read() method that takes\0Aan integer argument, and a readline() method that requires no\0Aarguments.  Both methods should return bytes.  Thus *file* can be a\0Abinary file object opened for reading, a io.BytesIO object, or any\0Aother custom object that meets this interface.\0A\0AOptional keyword arguments are *fix_imports*, *encoding* and *errors*,\0Awhich are used to control compatiblity support for pickle stream\0Agenerated by Python 2.  If *fix_imports* is True, pickle will try to\0Amap the old Python 2 names to the new names used in Python 3.  The\0A*encoding* and *errors* tell pickle how to decode 8-bit string\0Ainstances pickled by Python 2; these default to 'ASCII' and 'strict',\0Arespectively.  The *encoding* can be 'bytes' to read these 8-bit\0Astring instances as bytes objects.\00", align 16
@Unpickler_methods = internal global [3 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.UnpicklerObject*, %struct._object*)* @_pickle_Unpickler_load to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([189 x i8], [189 x i8]* @_pickle_Unpickler_load__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.UnpicklerObject*, %struct._object*)* @_pickle_Unpickler_find_class to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([351 x i8], [351 x i8]* @_pickle_Unpickler_find_class__doc__, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@Unpickler_getsets = internal global [3 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.144, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.UnpicklerObject*)* @Unpickler_get_memo to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.UnpicklerObject*, %struct._object*)* @Unpickler_set_memo to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.145, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.UnpicklerObject*)* @Unpickler_get_persload to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.UnpicklerObject*, %struct._object*)* @Unpickler_set_persload to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@_pickle_Unpickler_load__doc__ = internal global [189 x i8] c"load($self, /)\0A--\0A\0ALoad a pickle.\0A\0ARead a pickled object representation from the open file object given\0Ain the constructor, and return the reconstituted object hierarchy\0Aspecified therein.\00", align 16
@_pickle_Unpickler_find_class__doc__ = internal global [351 x i8] c"find_class($self, module_name, global_name, /)\0A--\0A\0AReturn an object from a specified module.\0A\0AIf necessary, the module will be imported. Subclasses may override\0Athis method (e.g. to restrict unpickling of arbitrary classes and\0Afunctions).\0A\0AThis method is called whenever a class or a function object is\0Aneeded.  Both arguments passed are str objects.\00", align 16
@.str.140 = private unnamed_addr constant [53 x i8] c"Unpickler.__init__() was not called by %s.__init__()\00", align 1
@_pickle_Unpickler_find_class_impl.PyId_modules = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60, i32 0, i32 0), %struct._object* null }, align 8
@.str.141 = private unnamed_addr constant [66 x i8] c"_compat_pickle.NAME_MAPPING values should be 2-tuples, not %.200s\00", align 1
@.str.142 = private unnamed_addr constant [80 x i8] c"_compat_pickle.NAME_MAPPING values should be pairs of str, not (%.200s, %.200s)\00", align 1
@.str.143 = private unnamed_addr constant [67 x i8] c"_compat_pickle.IMPORT_MAPPING values should be strings, not %.200s\00", align 1
@.str.144 = private unnamed_addr constant [5 x i8] c"memo\00", align 1
@.str.145 = private unnamed_addr constant [16 x i8] c"persistent_load\00", align 1
@.str.146 = private unnamed_addr constant [36 x i8] c"attribute deletion is not supported\00", align 1
@.str.147 = private unnamed_addr constant [26 x i8] c"memo key must be integers\00", align 1
@.str.148 = private unnamed_addr constant [36 x i8] c"memo key must be positive integers.\00", align 1
@.str.149 = private unnamed_addr constant [73 x i8] c"'memo' attribute must be an UnpicklerMemoProxy objector dict, not %.200s\00", align 1
@.str.150 = private unnamed_addr constant [55 x i8] c"persistent_load must be a callable taking one argument\00", align 1
@_pickle_Unpickler___init__._keywords = internal global [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.89, i32 0, i32 0), i8* null], align 16
@.str.151 = private unnamed_addr constant [17 x i8] c"O|$pss:Unpickler\00", align 1
@_pickle_Unpickler___init___impl.PyId_persistent_load = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.145, i32 0, i32 0), %struct._object* null }, align 8
@.str.152 = private unnamed_addr constant [16 x i8] c"_pickle.Pickler\00", align 1
@_pickle_Pickler___init____doc__ = internal global [928 x i8] c"Pickler(file, protocol=None, fix_imports=True)\0A--\0A\0AThis takes a binary file for writing a pickle data stream.\0A\0AThe optional *protocol* argument tells the pickler to use the given\0Aprotocol; supported protocols are 0, 1, 2, 3 and 4.  The default\0Aprotocol is 3; a backward-incompatible protocol designed for Python 3.\0A\0ASpecifying a negative protocol version selects the highest protocol\0Aversion supported.  The higher the protocol used, the more recent the\0Aversion of Python needed to read the pickle produced.\0A\0AThe *file* argument must have a write() method that accepts a single\0Abytes argument. It can thus be a file object opened for binary\0Awriting, a io.BytesIO instance, or any other custom object that meets\0Athis interface.\0A\0AIf *fix_imports* is True and protocol is less than 3, pickle will try\0Ato map the new Python 3 names to the old module names used in Python\0A2, so that the pickle data stream is readable with Python 2.\00", align 16
@Pickler_methods = internal global [3 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PicklerObject*, %struct._object*)* @_pickle_Pickler_dump to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @_pickle_Pickler_dump__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.153, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PicklerObject*, %struct._object*)* @_pickle_Pickler_clear_memo to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([271 x i8], [271 x i8]* @_pickle_Pickler_clear_memo__doc__, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@Pickler_members = internal global [4 x %struct.PyMemberDef] [%struct.PyMemberDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.155, i32 0, i32 0), i32 1, i64 76, i32 0, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.156, i32 0, i32 0), i32 1, i64 104, i32 0, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.157, i32 0, i32 0), i32 16, i64 32, i32 0, i8* null }, %struct.PyMemberDef zeroinitializer], align 16
@Pickler_getsets = internal global [3 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.144, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PicklerObject*)* @Pickler_get_memo to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.PicklerObject*, %struct._object*)* @Pickler_set_memo to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.158, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PicklerObject*)* @Pickler_get_persid to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.PicklerObject*, %struct._object*)* @Pickler_set_persid to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@_pickle_Pickler_dump__doc__ = internal global [93 x i8] c"dump($self, obj, /)\0A--\0A\0AWrite a pickled representation of the given object to the open file.\00", align 16
@.str.153 = private unnamed_addr constant [11 x i8] c"clear_memo\00", align 1
@_pickle_Pickler_clear_memo__doc__ = internal global [271 x i8] c"clear_memo($self, /)\0A--\0A\0AClears the pickler's \22memo\22.\0A\0AThe memo is the data structure that remembers which objects the\0Apickler has already seen, so that shared or recursive objects are\0Apickled by reference and not by value.  This method is useful when\0Are-using picklers.\00", align 16
@.str.154 = private unnamed_addr constant [51 x i8] c"Pickler.__init__() was not called by %s.__init__()\00", align 1
@.str.155 = private unnamed_addr constant [4 x i8] c"bin\00", align 1
@.str.156 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.157 = private unnamed_addr constant [15 x i8] c"dispatch_table\00", align 1
@.str.158 = private unnamed_addr constant [14 x i8] c"persistent_id\00", align 1
@.str.159 = private unnamed_addr constant [36 x i8] c"'memo' values must be 2-item tuples\00", align 1
@.str.160 = private unnamed_addr constant [71 x i8] c"'memo' attribute must be an PicklerMemoProxy objector dict, not %.200s\00", align 1
@.str.161 = private unnamed_addr constant [53 x i8] c"persistent_id must be a callable taking one argument\00", align 1
@_pickle_Pickler___init__._keywords = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* null], align 16
@.str.162 = private unnamed_addr constant [13 x i8] c"O|Op:Pickler\00", align 1
@_pickle_Pickler___init___impl.PyId_persistent_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.158, i32 0, i32 0), %struct._object* null }, align 8
@_pickle_Pickler___init___impl.PyId_dispatch_table = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.157, i32 0, i32 0), %struct._object* null }, align 8
@.str.163 = private unnamed_addr constant [14 x i8] c"_pickle.Pdata\00", align 1
@.str.164 = private unnamed_addr constant [25 x i8] c"_pickle.PicklerMemoProxy\00", align 1
@picklerproxy_methods = internal global [4 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.165, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PicklerMemoProxyObject*, %struct._object*)* @_pickle_PicklerMemoProxy_clear to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @_pickle_PicklerMemoProxy_clear__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.166, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PicklerMemoProxyObject*, %struct._object*)* @_pickle_PicklerMemoProxy_copy to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @_pickle_PicklerMemoProxy_copy__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PicklerMemoProxyObject*, %struct._object*)* @_pickle_PicklerMemoProxy___reduce__ to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @_pickle_PicklerMemoProxy___reduce____doc__, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.165 = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@_pickle_PicklerMemoProxy_clear__doc__ = internal global [48 x i8] c"clear($self, /)\0A--\0A\0ARemove all items from memo.\00", align 16
@.str.166 = private unnamed_addr constant [5 x i8] c"copy\00", align 1
@_pickle_PicklerMemoProxy_copy__doc__ = internal global [50 x i8] c"copy($self, /)\0A--\0A\0ACopy the memo to a new object.\00", align 16
@_pickle_PicklerMemoProxy___reduce____doc__ = internal global [51 x i8] c"__reduce__($self, /)\0A--\0A\0AImplement pickle support.\00", align 16
@.str.167 = private unnamed_addr constant [3 x i8] c"nO\00", align 1
@.str.168 = private unnamed_addr constant [27 x i8] c"_pickle.UnpicklerMemoProxy\00", align 1
@unpicklerproxy_methods = internal global [4 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.165, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.UnpicklerMemoProxyObject*, %struct._object*)* @_pickle_UnpicklerMemoProxy_clear to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @_pickle_UnpicklerMemoProxy_clear__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.166, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.UnpicklerMemoProxyObject*, %struct._object*)* @_pickle_UnpicklerMemoProxy_copy to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @_pickle_UnpicklerMemoProxy_copy__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.UnpicklerMemoProxyObject*, %struct._object*)* @_pickle_UnpicklerMemoProxy___reduce__ to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @_pickle_UnpicklerMemoProxy___reduce____doc__, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@_pickle_UnpicklerMemoProxy_clear__doc__ = internal global [48 x i8] c"clear($self, /)\0A--\0A\0ARemove all items from memo.\00", align 16
@_pickle_UnpicklerMemoProxy_copy__doc__ = internal global [50 x i8] c"copy($self, /)\0A--\0A\0ACopy the memo to a new object.\00", align 16
@_pickle_UnpicklerMemoProxy___reduce____doc__ = internal global [53 x i8] c"__reduce__($self, /)\0A--\0A\0AImplement pickling support.\00", align 16
@.str.169 = private unnamed_addr constant [8 x i8] c"copyreg\00", align 1
@.str.170 = private unnamed_addr constant [52 x i8] c"copyreg.dispatch_table should be a dict, not %.200s\00", align 1
@.str.171 = private unnamed_addr constant [20 x i8] c"_extension_registry\00", align 1
@.str.172 = private unnamed_addr constant [57 x i8] c"copyreg._extension_registry should be a dict, not %.200s\00", align 1
@.str.173 = private unnamed_addr constant [19 x i8] c"_inverted_registry\00", align 1
@.str.174 = private unnamed_addr constant [56 x i8] c"copyreg._inverted_registry should be a dict, not %.200s\00", align 1
@.str.175 = private unnamed_addr constant [17 x i8] c"_extension_cache\00", align 1
@.str.176 = private unnamed_addr constant [54 x i8] c"copyreg._extension_cache should be a dict, not %.200s\00", align 1
@.str.177 = private unnamed_addr constant [15 x i8] c"_compat_pickle\00", align 1
@.str.178 = private unnamed_addr constant [13 x i8] c"NAME_MAPPING\00", align 1
@.str.179 = private unnamed_addr constant [57 x i8] c"_compat_pickle.NAME_MAPPING should be a dict, not %.200s\00", align 1
@.str.180 = private unnamed_addr constant [15 x i8] c"IMPORT_MAPPING\00", align 1
@.str.181 = private unnamed_addr constant [59 x i8] c"_compat_pickle.IMPORT_MAPPING should be a dict, not %.200s\00", align 1
@.str.182 = private unnamed_addr constant [21 x i8] c"REVERSE_NAME_MAPPING\00", align 1
@.str.183 = private unnamed_addr constant [65 x i8] c"_compat_pickle.REVERSE_NAME_MAPPING should be a dict, not %.200s\00", align 1
@.str.184 = private unnamed_addr constant [23 x i8] c"REVERSE_IMPORT_MAPPING\00", align 1
@.str.185 = private unnamed_addr constant [67 x i8] c"_compat_pickle.REVERSE_IMPORT_MAPPING should be a dict, not %.200s\00", align 1
@.str.186 = private unnamed_addr constant [7 x i8] c"codecs\00", align 1
@.str.187 = private unnamed_addr constant [7 x i8] c"encode\00", align 1
@.str.188 = private unnamed_addr constant [47 x i8] c"codecs.encode should be a callable, not %.200s\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @PyInit__pickle() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %call = call %struct._object* @PyState_FindModule(%struct.PyModuleDef* @_picklemodule)
  store %struct._object* %call, %struct._object** %m, align 8
  %0 = load %struct._object*, %struct._object** %m, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %m, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 0
  %2 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %3 = load %struct._object*, %struct._object** %m, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call i32 @PyType_Ready(%struct._typeobject* @Unpickler_Type)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %call4 = call i32 @PyType_Ready(%struct._typeobject* @Pickler_Type)
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %call8 = call i32 @PyType_Ready(%struct._typeobject* @Pdata_Type)
  %cmp9 = icmp slt i32 %call8, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %if.end.7
  %call12 = call i32 @PyType_Ready(%struct._typeobject* @PicklerMemoProxyType)
  %cmp13 = icmp slt i32 %call12, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.15:                                        ; preds = %if.end.11
  %call16 = call i32 @PyType_Ready(%struct._typeobject* @UnpicklerMemoProxyType)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %if.end.15
  %call20 = call %struct._object* @PyModule_Create2(%struct.PyModuleDef* @_picklemodule, i32 1013)
  store %struct._object* %call20, %struct._object** %m, align 8
  %4 = load %struct._object*, %struct._object** %m, align 8
  %cmp21 = icmp eq %struct._object* %4, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.19
  %5 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @Pickler_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc24 = add i64 %5, 1
  store i64 %inc24, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @Pickler_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %6 = load %struct._object*, %struct._object** %m, align 8
  %call25 = call i32 @PyModule_AddObject(%struct._object* %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @Pickler_Type, i32 0, i32 0, i32 0))
  %cmp26 = icmp slt i32 %call25, 0
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.23
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.23
  %7 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @Unpickler_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc29 = add i64 %7, 1
  store i64 %inc29, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @Unpickler_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %8 = load %struct._object*, %struct._object** %m, align 8
  %call30 = call i32 @PyModule_AddObject(%struct._object* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @Unpickler_Type, i32 0, i32 0, i32 0))
  %cmp31 = icmp slt i32 %call30, 0
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.28
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.33:                                        ; preds = %if.end.28
  %9 = load %struct._object*, %struct._object** %m, align 8
  %call34 = call %struct.PickleState* @_Pickle_GetState(%struct._object* %9)
  store %struct.PickleState* %call34, %struct.PickleState** %st, align 8
  %call35 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i32 0, i32 0), %struct._object* null, %struct._object* null)
  %10 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %10, i32 0, i32 0
  store %struct._object* %call35, %struct._object** %PickleError, align 8
  %11 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError36 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %11, i32 0, i32 0
  %12 = load %struct._object*, %struct._object** %PickleError36, align 8
  %cmp37 = icmp eq %struct._object* %12, null
  br i1 %cmp37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end.33
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.39:                                        ; preds = %if.end.33
  %13 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError40 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %13, i32 0, i32 0
  %14 = load %struct._object*, %struct._object** %PickleError40, align 8
  %call41 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), %struct._object* %14, %struct._object* null)
  %15 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %15, i32 0, i32 1
  store %struct._object* %call41, %struct._object** %PicklingError, align 8
  %16 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError42 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %16, i32 0, i32 1
  %17 = load %struct._object*, %struct._object** %PicklingError42, align 8
  %cmp43 = icmp eq %struct._object* %17, null
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.39
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.45:                                        ; preds = %if.end.39
  %18 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError46 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %18, i32 0, i32 0
  %19 = load %struct._object*, %struct._object** %PickleError46, align 8
  %call47 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i32 0, i32 0), %struct._object* %19, %struct._object* null)
  %20 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %20, i32 0, i32 2
  store %struct._object* %call47, %struct._object** %UnpicklingError, align 8
  %21 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError48 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %21, i32 0, i32 2
  %22 = load %struct._object*, %struct._object** %UnpicklingError48, align 8
  %cmp49 = icmp eq %struct._object* %22, null
  br i1 %cmp49, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %if.end.45
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.45
  %23 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError52 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %23, i32 0, i32 0
  %24 = load %struct._object*, %struct._object** %PickleError52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt53, align 8
  %inc54 = add i64 %25, 1
  store i64 %inc54, i64* %ob_refcnt53, align 8
  %26 = load %struct._object*, %struct._object** %m, align 8
  %27 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError55 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %27, i32 0, i32 0
  %28 = load %struct._object*, %struct._object** %PickleError55, align 8
  %call56 = call i32 @PyModule_AddObject(%struct._object* %26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), %struct._object* %28)
  %cmp57 = icmp slt i32 %call56, 0
  br i1 %cmp57, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.end.51
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.59:                                        ; preds = %if.end.51
  %29 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError60 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %29, i32 0, i32 1
  %30 = load %struct._object*, %struct._object** %PicklingError60, align 8
  %ob_refcnt61 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt61, align 8
  %inc62 = add i64 %31, 1
  store i64 %inc62, i64* %ob_refcnt61, align 8
  %32 = load %struct._object*, %struct._object** %m, align 8
  %33 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError63 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %33, i32 0, i32 1
  %34 = load %struct._object*, %struct._object** %PicklingError63, align 8
  %call64 = call i32 @PyModule_AddObject(%struct._object* %32, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), %struct._object* %34)
  %cmp65 = icmp slt i32 %call64, 0
  br i1 %cmp65, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.end.59
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.67:                                        ; preds = %if.end.59
  %35 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError68 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %UnpicklingError68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt69, align 8
  %inc70 = add i64 %37, 1
  store i64 %inc70, i64* %ob_refcnt69, align 8
  %38 = load %struct._object*, %struct._object** %m, align 8
  %39 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError71 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %UnpicklingError71, align 8
  %call72 = call i32 @PyModule_AddObject(%struct._object* %38, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.7, i32 0, i32 0), %struct._object* %40)
  %cmp73 = icmp slt i32 %call72, 0
  br i1 %cmp73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end.67
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.75:                                        ; preds = %if.end.67
  %41 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %call76 = call i32 @_Pickle_InitState(%struct.PickleState* %41)
  %cmp77 = icmp slt i32 %call76, 0
  br i1 %cmp77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.75
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.79:                                        ; preds = %if.end.75
  %42 = load %struct._object*, %struct._object** %m, align 8
  store %struct._object* %42, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.79, %if.then.78, %if.then.74, %if.then.66, %if.then.58, %if.then.50, %if.then.44, %if.then.38, %if.then.32, %if.then.27, %if.then.22, %if.then.18, %if.then.14, %if.then.10, %if.then.6, %if.then.2, %if.then
  %43 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %43
}

declare %struct._object* @PyState_FindModule(%struct.PyModuleDef*) #1

declare i32 @PyType_Ready(%struct._typeobject*) #1

declare %struct._object* @PyModule_Create2(%struct.PyModuleDef*, i32) #1

declare i32 @PyModule_AddObject(%struct._object*, i8*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct.PickleState* @_Pickle_GetState(%struct._object* %module) #0 {
entry:
  %module.addr = alloca %struct._object*, align 8
  store %struct._object* %module, %struct._object** %module.addr, align 8
  %0 = load %struct._object*, %struct._object** %module.addr, align 8
  %call = call i8* @PyModule_GetState(%struct._object* %0)
  %1 = bitcast i8* %call to %struct.PickleState*
  ret %struct.PickleState* %1
}

declare %struct._object* @PyErr_NewException(i8*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @_Pickle_InitState(%struct.PickleState* %st) #0 {
entry:
  %retval = alloca i32, align 4
  %st.addr = alloca %struct.PickleState*, align 8
  %copyreg = alloca %struct._object*, align 8
  %compat_pickle = alloca %struct._object*, align 8
  %codecs = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp124 = alloca %struct._object*, align 8
  %_py_decref_tmp128 = alloca %struct._object*, align 8
  %_py_tmp159 = alloca %struct._object*, align 8
  %_py_decref_tmp163 = alloca %struct._object*, align 8
  %_py_tmp176 = alloca %struct._object*, align 8
  %_py_decref_tmp180 = alloca %struct._object*, align 8
  %_py_tmp193 = alloca %struct._object*, align 8
  %_py_decref_tmp197 = alloca %struct._object*, align 8
  %_py_tmp210 = alloca %struct._object*, align 8
  %_py_decref_tmp214 = alloca %struct._object*, align 8
  store %struct.PickleState* %st, %struct.PickleState** %st.addr, align 8
  store %struct._object* null, %struct._object** %copyreg, align 8
  store %struct._object* null, %struct._object** %compat_pickle, align 8
  store %struct._object* null, %struct._object** %codecs, align 8
  %call = call %struct._object* @PyImport_ImportModule(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.169, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %copyreg, align 8
  %0 = load %struct._object*, %struct._object** %copyreg, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %error

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %copyreg, align 8
  %call1 = call %struct._object* @PyObject_GetAttrString(%struct._object* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.157, i32 0, i32 0))
  %2 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %dispatch_table = getelementptr inbounds %struct.PickleState, %struct.PickleState* %2, i32 0, i32 3
  store %struct._object* %call1, %struct._object** %dispatch_table, align 8
  %3 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %dispatch_table2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %3, i32 0, i32 3
  %4 = load %struct._object*, %struct._object** %dispatch_table2, align 8
  %tobool3 = icmp ne %struct._object* %4, null
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  br label %error

if.end.5:                                         ; preds = %if.end
  %5 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %dispatch_table6 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %5, i32 0, i32 3
  %6 = load %struct._object*, %struct._object** %dispatch_table6, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %7, @PyDict_Type
  br i1 %cmp, label %if.end.11, label %if.then.7

if.then.7:                                        ; preds = %if.end.5
  %8 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %9 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %dispatch_table8 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %9, i32 0, i32 3
  %10 = load %struct._object*, %struct._object** %dispatch_table8, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 1
  %12 = load i8*, i8** %tp_name, align 8
  %call10 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %8, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.170, i32 0, i32 0), i8* %12)
  br label %error

if.end.11:                                        ; preds = %if.end.5
  %13 = load %struct._object*, %struct._object** %copyreg, align 8
  %call12 = call %struct._object* @PyObject_GetAttrString(%struct._object* %13, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.171, i32 0, i32 0))
  %14 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %14, i32 0, i32 4
  store %struct._object* %call12, %struct._object** %extension_registry, align 8
  %15 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_registry13 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %15, i32 0, i32 4
  %16 = load %struct._object*, %struct._object** %extension_registry13, align 8
  %tobool14 = icmp ne %struct._object* %16, null
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.11
  br label %error

if.end.16:                                        ; preds = %if.end.11
  %17 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_registry17 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %17, i32 0, i32 4
  %18 = load %struct._object*, %struct._object** %extension_registry17, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %cmp19 = icmp eq %struct._typeobject* %19, @PyDict_Type
  br i1 %cmp19, label %if.end.25, label %if.then.20

if.then.20:                                       ; preds = %if.end.16
  %20 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %21 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_registry21 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %21, i32 0, i32 4
  %22 = load %struct._object*, %struct._object** %extension_registry21, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_name23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 1
  %24 = load i8*, i8** %tp_name23, align 8
  %call24 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %20, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.172, i32 0, i32 0), i8* %24)
  br label %error

if.end.25:                                        ; preds = %if.end.16
  %25 = load %struct._object*, %struct._object** %copyreg, align 8
  %call26 = call %struct._object* @PyObject_GetAttrString(%struct._object* %25, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.173, i32 0, i32 0))
  %26 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %inverted_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %26, i32 0, i32 6
  store %struct._object* %call26, %struct._object** %inverted_registry, align 8
  %27 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %inverted_registry27 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %27, i32 0, i32 6
  %28 = load %struct._object*, %struct._object** %inverted_registry27, align 8
  %tobool28 = icmp ne %struct._object* %28, null
  br i1 %tobool28, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %if.end.25
  br label %error

if.end.30:                                        ; preds = %if.end.25
  %29 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %inverted_registry31 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %29, i32 0, i32 6
  %30 = load %struct._object*, %struct._object** %inverted_registry31, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %cmp33 = icmp eq %struct._typeobject* %31, @PyDict_Type
  br i1 %cmp33, label %if.end.39, label %if.then.34

if.then.34:                                       ; preds = %if.end.30
  %32 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %33 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %inverted_registry35 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %33, i32 0, i32 6
  %34 = load %struct._object*, %struct._object** %inverted_registry35, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_name37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 1
  %36 = load i8*, i8** %tp_name37, align 8
  %call38 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %32, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.174, i32 0, i32 0), i8* %36)
  br label %error

if.end.39:                                        ; preds = %if.end.30
  %37 = load %struct._object*, %struct._object** %copyreg, align 8
  %call40 = call %struct._object* @PyObject_GetAttrString(%struct._object* %37, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0))
  %38 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_cache = getelementptr inbounds %struct.PickleState, %struct.PickleState* %38, i32 0, i32 5
  store %struct._object* %call40, %struct._object** %extension_cache, align 8
  %39 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_cache41 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %39, i32 0, i32 5
  %40 = load %struct._object*, %struct._object** %extension_cache41, align 8
  %tobool42 = icmp ne %struct._object* %40, null
  br i1 %tobool42, label %if.end.44, label %if.then.43

if.then.43:                                       ; preds = %if.end.39
  br label %error

if.end.44:                                        ; preds = %if.end.39
  %41 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_cache45 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %41, i32 0, i32 5
  %42 = load %struct._object*, %struct._object** %extension_cache45, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %cmp47 = icmp eq %struct._typeobject* %43, @PyDict_Type
  br i1 %cmp47, label %if.end.53, label %if.then.48

if.then.48:                                       ; preds = %if.end.44
  %44 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %45 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_cache49 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %45, i32 0, i32 5
  %46 = load %struct._object*, %struct._object** %extension_cache49, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %tp_name51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 1
  %48 = load i8*, i8** %tp_name51, align 8
  %call52 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %44, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.176, i32 0, i32 0), i8* %48)
  br label %error

if.end.53:                                        ; preds = %if.end.44
  br label %do.body

do.body:                                          ; preds = %if.end.53
  %49 = load %struct._object*, %struct._object** %copyreg, align 8
  store %struct._object* %49, %struct._object** %_py_tmp, align 8
  %50 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp54 = icmp ne %struct._object* %50, null
  br i1 %cmp54, label %if.then.55, label %if.end.61

if.then.55:                                       ; preds = %do.body
  store %struct._object* null, %struct._object** %copyreg, align 8
  br label %do.body.56

do.body.56:                                       ; preds = %if.then.55
  %51 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %51, %struct._object** %_py_decref_tmp, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %53, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp57 = icmp ne i64 %dec, 0
  br i1 %cmp57, label %if.then.58, label %if.else

if.then.58:                                       ; preds = %do.body.56
  br label %if.end.60

if.else:                                          ; preds = %do.body.56
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %56(%struct._object* %57)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else, %if.then.58
  br label %do.end

do.end:                                           ; preds = %if.end.60
  br label %if.end.61

if.end.61:                                        ; preds = %do.end, %do.body
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  %call63 = call %struct._object* @PyImport_ImportModule(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.177, i32 0, i32 0))
  store %struct._object* %call63, %struct._object** %compat_pickle, align 8
  %58 = load %struct._object*, %struct._object** %compat_pickle, align 8
  %tobool64 = icmp ne %struct._object* %58, null
  br i1 %tobool64, label %if.end.66, label %if.then.65

if.then.65:                                       ; preds = %do.end.62
  br label %error

if.end.66:                                        ; preds = %do.end.62
  %59 = load %struct._object*, %struct._object** %compat_pickle, align 8
  %call67 = call %struct._object* @PyObject_GetAttrString(%struct._object* %59, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.178, i32 0, i32 0))
  %60 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %60, i32 0, i32 7
  store %struct._object* %call67, %struct._object** %name_mapping_2to3, align 8
  %61 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_2to368 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %61, i32 0, i32 7
  %62 = load %struct._object*, %struct._object** %name_mapping_2to368, align 8
  %tobool69 = icmp ne %struct._object* %62, null
  br i1 %tobool69, label %if.end.71, label %if.then.70

if.then.70:                                       ; preds = %if.end.66
  br label %error

if.end.71:                                        ; preds = %if.end.66
  %63 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_2to372 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %63, i32 0, i32 7
  %64 = load %struct._object*, %struct._object** %name_mapping_2to372, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %cmp74 = icmp eq %struct._typeobject* %65, @PyDict_Type
  br i1 %cmp74, label %if.end.80, label %if.then.75

if.then.75:                                       ; preds = %if.end.71
  %66 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %67 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_2to376 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %67, i32 0, i32 7
  %68 = load %struct._object*, %struct._object** %name_mapping_2to376, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 1
  %69 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_name78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 1
  %70 = load i8*, i8** %tp_name78, align 8
  %call79 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %66, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.179, i32 0, i32 0), i8* %70)
  br label %error

if.end.80:                                        ; preds = %if.end.71
  %71 = load %struct._object*, %struct._object** %compat_pickle, align 8
  %call81 = call %struct._object* @PyObject_GetAttrString(%struct._object* %71, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.180, i32 0, i32 0))
  %72 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %72, i32 0, i32 8
  store %struct._object* %call81, %struct._object** %import_mapping_2to3, align 8
  %73 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_2to382 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %73, i32 0, i32 8
  %74 = load %struct._object*, %struct._object** %import_mapping_2to382, align 8
  %tobool83 = icmp ne %struct._object* %74, null
  br i1 %tobool83, label %if.end.85, label %if.then.84

if.then.84:                                       ; preds = %if.end.80
  br label %error

if.end.85:                                        ; preds = %if.end.80
  %75 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_2to386 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %75, i32 0, i32 8
  %76 = load %struct._object*, %struct._object** %import_mapping_2to386, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %cmp88 = icmp eq %struct._typeobject* %77, @PyDict_Type
  br i1 %cmp88, label %if.end.94, label %if.then.89

if.then.89:                                       ; preds = %if.end.85
  %78 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %79 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_2to390 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %79, i32 0, i32 8
  %80 = load %struct._object*, %struct._object** %import_mapping_2to390, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_name92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 1
  %82 = load i8*, i8** %tp_name92, align 8
  %call93 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %78, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.181, i32 0, i32 0), i8* %82)
  br label %error

if.end.94:                                        ; preds = %if.end.85
  %83 = load %struct._object*, %struct._object** %compat_pickle, align 8
  %call95 = call %struct._object* @PyObject_GetAttrString(%struct._object* %83, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.182, i32 0, i32 0))
  %84 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %84, i32 0, i32 9
  store %struct._object* %call95, %struct._object** %name_mapping_3to2, align 8
  %85 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_3to296 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %85, i32 0, i32 9
  %86 = load %struct._object*, %struct._object** %name_mapping_3to296, align 8
  %tobool97 = icmp ne %struct._object* %86, null
  br i1 %tobool97, label %if.end.99, label %if.then.98

if.then.98:                                       ; preds = %if.end.94
  br label %error

if.end.99:                                        ; preds = %if.end.94
  %87 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_3to2100 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %87, i32 0, i32 9
  %88 = load %struct._object*, %struct._object** %name_mapping_3to2100, align 8
  %ob_type101 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type101, align 8
  %cmp102 = icmp eq %struct._typeobject* %89, @PyDict_Type
  br i1 %cmp102, label %if.end.108, label %if.then.103

if.then.103:                                      ; preds = %if.end.99
  %90 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %91 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_3to2104 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %91, i32 0, i32 9
  %92 = load %struct._object*, %struct._object** %name_mapping_3to2104, align 8
  %ob_type105 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type105, align 8
  %tp_name106 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 1
  %94 = load i8*, i8** %tp_name106, align 8
  %call107 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %90, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.183, i32 0, i32 0), i8* %94)
  br label %error

if.end.108:                                       ; preds = %if.end.99
  %95 = load %struct._object*, %struct._object** %compat_pickle, align 8
  %call109 = call %struct._object* @PyObject_GetAttrString(%struct._object* %95, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.184, i32 0, i32 0))
  %96 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %96, i32 0, i32 10
  store %struct._object* %call109, %struct._object** %import_mapping_3to2, align 8
  %97 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_3to2110 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %97, i32 0, i32 10
  %98 = load %struct._object*, %struct._object** %import_mapping_3to2110, align 8
  %tobool111 = icmp ne %struct._object* %98, null
  br i1 %tobool111, label %if.end.113, label %if.then.112

if.then.112:                                      ; preds = %if.end.108
  br label %error

if.end.113:                                       ; preds = %if.end.108
  %99 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_3to2114 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %99, i32 0, i32 10
  %100 = load %struct._object*, %struct._object** %import_mapping_3to2114, align 8
  %ob_type115 = getelementptr inbounds %struct._object, %struct._object* %100, i32 0, i32 1
  %101 = load %struct._typeobject*, %struct._typeobject** %ob_type115, align 8
  %cmp116 = icmp eq %struct._typeobject* %101, @PyDict_Type
  br i1 %cmp116, label %if.end.122, label %if.then.117

if.then.117:                                      ; preds = %if.end.113
  %102 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %103 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_3to2118 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %103, i32 0, i32 10
  %104 = load %struct._object*, %struct._object** %import_mapping_3to2118, align 8
  %ob_type119 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type119, align 8
  %tp_name120 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 1
  %106 = load i8*, i8** %tp_name120, align 8
  %call121 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %102, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.185, i32 0, i32 0), i8* %106)
  br label %error

if.end.122:                                       ; preds = %if.end.113
  br label %do.body.123

do.body.123:                                      ; preds = %if.end.122
  %107 = load %struct._object*, %struct._object** %compat_pickle, align 8
  store %struct._object* %107, %struct._object** %_py_tmp124, align 8
  %108 = load %struct._object*, %struct._object** %_py_tmp124, align 8
  %cmp125 = icmp ne %struct._object* %108, null
  br i1 %cmp125, label %if.then.126, label %if.end.138

if.then.126:                                      ; preds = %do.body.123
  store %struct._object* null, %struct._object** %compat_pickle, align 8
  br label %do.body.127

do.body.127:                                      ; preds = %if.then.126
  %109 = load %struct._object*, %struct._object** %_py_tmp124, align 8
  store %struct._object* %109, %struct._object** %_py_decref_tmp128, align 8
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  %ob_refcnt129 = getelementptr inbounds %struct._object, %struct._object* %110, i32 0, i32 0
  %111 = load i64, i64* %ob_refcnt129, align 8
  %dec130 = add i64 %111, -1
  store i64 %dec130, i64* %ob_refcnt129, align 8
  %cmp131 = icmp ne i64 %dec130, 0
  br i1 %cmp131, label %if.then.132, label %if.else.133

if.then.132:                                      ; preds = %do.body.127
  br label %if.end.136

if.else.133:                                      ; preds = %do.body.127
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  %ob_type134 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 1
  %113 = load %struct._typeobject*, %struct._typeobject** %ob_type134, align 8
  %tp_dealloc135 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %113, i32 0, i32 4
  %114 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc135, align 8
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  call void %114(%struct._object* %115)
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.133, %if.then.132
  br label %do.end.137

do.end.137:                                       ; preds = %if.end.136
  br label %if.end.138

if.end.138:                                       ; preds = %do.end.137, %do.body.123
  br label %do.end.139

do.end.139:                                       ; preds = %if.end.138
  %call140 = call %struct._object* @PyImport_ImportModule(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.186, i32 0, i32 0))
  store %struct._object* %call140, %struct._object** %codecs, align 8
  %116 = load %struct._object*, %struct._object** %codecs, align 8
  %cmp141 = icmp eq %struct._object* %116, null
  br i1 %cmp141, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %do.end.139
  br label %error

if.end.143:                                       ; preds = %do.end.139
  %117 = load %struct._object*, %struct._object** %codecs, align 8
  %call144 = call %struct._object* @PyObject_GetAttrString(%struct._object* %117, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.187, i32 0, i32 0))
  %118 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %codecs_encode = getelementptr inbounds %struct.PickleState, %struct.PickleState* %118, i32 0, i32 11
  store %struct._object* %call144, %struct._object** %codecs_encode, align 8
  %119 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %codecs_encode145 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %119, i32 0, i32 11
  %120 = load %struct._object*, %struct._object** %codecs_encode145, align 8
  %cmp146 = icmp eq %struct._object* %120, null
  br i1 %cmp146, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %if.end.143
  br label %error

if.end.148:                                       ; preds = %if.end.143
  %121 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %codecs_encode149 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %121, i32 0, i32 11
  %122 = load %struct._object*, %struct._object** %codecs_encode149, align 8
  %call150 = call i32 @PyCallable_Check(%struct._object* %122)
  %tobool151 = icmp ne i32 %call150, 0
  br i1 %tobool151, label %if.end.157, label %if.then.152

if.then.152:                                      ; preds = %if.end.148
  %123 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %124 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %codecs_encode153 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %124, i32 0, i32 11
  %125 = load %struct._object*, %struct._object** %codecs_encode153, align 8
  %ob_type154 = getelementptr inbounds %struct._object, %struct._object* %125, i32 0, i32 1
  %126 = load %struct._typeobject*, %struct._typeobject** %ob_type154, align 8
  %tp_name155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %126, i32 0, i32 1
  %127 = load i8*, i8** %tp_name155, align 8
  %call156 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %123, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.188, i32 0, i32 0), i8* %127)
  br label %error

if.end.157:                                       ; preds = %if.end.148
  br label %do.body.158

do.body.158:                                      ; preds = %if.end.157
  %128 = load %struct._object*, %struct._object** %codecs, align 8
  store %struct._object* %128, %struct._object** %_py_tmp159, align 8
  %129 = load %struct._object*, %struct._object** %_py_tmp159, align 8
  %cmp160 = icmp ne %struct._object* %129, null
  br i1 %cmp160, label %if.then.161, label %if.end.173

if.then.161:                                      ; preds = %do.body.158
  store %struct._object* null, %struct._object** %codecs, align 8
  br label %do.body.162

do.body.162:                                      ; preds = %if.then.161
  %130 = load %struct._object*, %struct._object** %_py_tmp159, align 8
  store %struct._object* %130, %struct._object** %_py_decref_tmp163, align 8
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp163, align 8
  %ob_refcnt164 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 0
  %132 = load i64, i64* %ob_refcnt164, align 8
  %dec165 = add i64 %132, -1
  store i64 %dec165, i64* %ob_refcnt164, align 8
  %cmp166 = icmp ne i64 %dec165, 0
  br i1 %cmp166, label %if.then.167, label %if.else.168

if.then.167:                                      ; preds = %do.body.162
  br label %if.end.171

if.else.168:                                      ; preds = %do.body.162
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp163, align 8
  %ob_type169 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 1
  %134 = load %struct._typeobject*, %struct._typeobject** %ob_type169, align 8
  %tp_dealloc170 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %134, i32 0, i32 4
  %135 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc170, align 8
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp163, align 8
  call void %135(%struct._object* %136)
  br label %if.end.171

if.end.171:                                       ; preds = %if.else.168, %if.then.167
  br label %do.end.172

do.end.172:                                       ; preds = %if.end.171
  br label %if.end.173

if.end.173:                                       ; preds = %do.end.172, %do.body.158
  br label %do.end.174

do.end.174:                                       ; preds = %if.end.173
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.152, %if.then.147, %if.then.142, %if.then.117, %if.then.112, %if.then.103, %if.then.98, %if.then.89, %if.then.84, %if.then.75, %if.then.70, %if.then.65, %if.then.48, %if.then.43, %if.then.34, %if.then.29, %if.then.20, %if.then.15, %if.then.7, %if.then.4, %if.then
  br label %do.body.175

do.body.175:                                      ; preds = %error
  %137 = load %struct._object*, %struct._object** %copyreg, align 8
  store %struct._object* %137, %struct._object** %_py_tmp176, align 8
  %138 = load %struct._object*, %struct._object** %_py_tmp176, align 8
  %cmp177 = icmp ne %struct._object* %138, null
  br i1 %cmp177, label %if.then.178, label %if.end.190

if.then.178:                                      ; preds = %do.body.175
  store %struct._object* null, %struct._object** %copyreg, align 8
  br label %do.body.179

do.body.179:                                      ; preds = %if.then.178
  %139 = load %struct._object*, %struct._object** %_py_tmp176, align 8
  store %struct._object* %139, %struct._object** %_py_decref_tmp180, align 8
  %140 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  %ob_refcnt181 = getelementptr inbounds %struct._object, %struct._object* %140, i32 0, i32 0
  %141 = load i64, i64* %ob_refcnt181, align 8
  %dec182 = add i64 %141, -1
  store i64 %dec182, i64* %ob_refcnt181, align 8
  %cmp183 = icmp ne i64 %dec182, 0
  br i1 %cmp183, label %if.then.184, label %if.else.185

if.then.184:                                      ; preds = %do.body.179
  br label %if.end.188

if.else.185:                                      ; preds = %do.body.179
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  %ob_type186 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 1
  %143 = load %struct._typeobject*, %struct._typeobject** %ob_type186, align 8
  %tp_dealloc187 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %143, i32 0, i32 4
  %144 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc187, align 8
  %145 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  call void %144(%struct._object* %145)
  br label %if.end.188

if.end.188:                                       ; preds = %if.else.185, %if.then.184
  br label %do.end.189

do.end.189:                                       ; preds = %if.end.188
  br label %if.end.190

if.end.190:                                       ; preds = %do.end.189, %do.body.175
  br label %do.end.191

do.end.191:                                       ; preds = %if.end.190
  br label %do.body.192

do.body.192:                                      ; preds = %do.end.191
  %146 = load %struct._object*, %struct._object** %compat_pickle, align 8
  store %struct._object* %146, %struct._object** %_py_tmp193, align 8
  %147 = load %struct._object*, %struct._object** %_py_tmp193, align 8
  %cmp194 = icmp ne %struct._object* %147, null
  br i1 %cmp194, label %if.then.195, label %if.end.207

if.then.195:                                      ; preds = %do.body.192
  store %struct._object* null, %struct._object** %compat_pickle, align 8
  br label %do.body.196

do.body.196:                                      ; preds = %if.then.195
  %148 = load %struct._object*, %struct._object** %_py_tmp193, align 8
  store %struct._object* %148, %struct._object** %_py_decref_tmp197, align 8
  %149 = load %struct._object*, %struct._object** %_py_decref_tmp197, align 8
  %ob_refcnt198 = getelementptr inbounds %struct._object, %struct._object* %149, i32 0, i32 0
  %150 = load i64, i64* %ob_refcnt198, align 8
  %dec199 = add i64 %150, -1
  store i64 %dec199, i64* %ob_refcnt198, align 8
  %cmp200 = icmp ne i64 %dec199, 0
  br i1 %cmp200, label %if.then.201, label %if.else.202

if.then.201:                                      ; preds = %do.body.196
  br label %if.end.205

if.else.202:                                      ; preds = %do.body.196
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp197, align 8
  %ob_type203 = getelementptr inbounds %struct._object, %struct._object* %151, i32 0, i32 1
  %152 = load %struct._typeobject*, %struct._typeobject** %ob_type203, align 8
  %tp_dealloc204 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %152, i32 0, i32 4
  %153 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc204, align 8
  %154 = load %struct._object*, %struct._object** %_py_decref_tmp197, align 8
  call void %153(%struct._object* %154)
  br label %if.end.205

if.end.205:                                       ; preds = %if.else.202, %if.then.201
  br label %do.end.206

do.end.206:                                       ; preds = %if.end.205
  br label %if.end.207

if.end.207:                                       ; preds = %do.end.206, %do.body.192
  br label %do.end.208

do.end.208:                                       ; preds = %if.end.207
  br label %do.body.209

do.body.209:                                      ; preds = %do.end.208
  %155 = load %struct._object*, %struct._object** %codecs, align 8
  store %struct._object* %155, %struct._object** %_py_tmp210, align 8
  %156 = load %struct._object*, %struct._object** %_py_tmp210, align 8
  %cmp211 = icmp ne %struct._object* %156, null
  br i1 %cmp211, label %if.then.212, label %if.end.224

if.then.212:                                      ; preds = %do.body.209
  store %struct._object* null, %struct._object** %codecs, align 8
  br label %do.body.213

do.body.213:                                      ; preds = %if.then.212
  %157 = load %struct._object*, %struct._object** %_py_tmp210, align 8
  store %struct._object* %157, %struct._object** %_py_decref_tmp214, align 8
  %158 = load %struct._object*, %struct._object** %_py_decref_tmp214, align 8
  %ob_refcnt215 = getelementptr inbounds %struct._object, %struct._object* %158, i32 0, i32 0
  %159 = load i64, i64* %ob_refcnt215, align 8
  %dec216 = add i64 %159, -1
  store i64 %dec216, i64* %ob_refcnt215, align 8
  %cmp217 = icmp ne i64 %dec216, 0
  br i1 %cmp217, label %if.then.218, label %if.else.219

if.then.218:                                      ; preds = %do.body.213
  br label %if.end.222

if.else.219:                                      ; preds = %do.body.213
  %160 = load %struct._object*, %struct._object** %_py_decref_tmp214, align 8
  %ob_type220 = getelementptr inbounds %struct._object, %struct._object* %160, i32 0, i32 1
  %161 = load %struct._typeobject*, %struct._typeobject** %ob_type220, align 8
  %tp_dealloc221 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %161, i32 0, i32 4
  %162 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc221, align 8
  %163 = load %struct._object*, %struct._object** %_py_decref_tmp214, align 8
  call void %162(%struct._object* %163)
  br label %if.end.222

if.end.222:                                       ; preds = %if.else.219, %if.then.218
  br label %do.end.223

do.end.223:                                       ; preds = %if.end.222
  br label %if.end.224

if.end.224:                                       ; preds = %do.end.223, %do.body.209
  br label %do.end.225

do.end.225:                                       ; preds = %if.end.224
  %164 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  call void @_Pickle_ClearState(%struct.PickleState* %164)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.225, %do.end.174
  %165 = load i32, i32* %retval
  ret i32 %165
}

; Function Attrs: nounwind uwtable
define internal i32 @pickle_traverse(%struct._object* %m, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %m.addr = alloca %struct._object*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %st = alloca %struct.PickleState*, align 8
  %vret = alloca i32, align 4
  %vret9 = alloca i32, align 4
  %vret20 = alloca i32, align 4
  %vret31 = alloca i32, align 4
  %vret42 = alloca i32, align 4
  %vret53 = alloca i32, align 4
  %vret64 = alloca i32, align 4
  %vret75 = alloca i32, align 4
  %vret86 = alloca i32, align 4
  %vret97 = alloca i32, align 4
  %vret108 = alloca i32, align 4
  %vret119 = alloca i32, align 4
  store %struct._object* %m, %struct._object** %m.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct._object*, %struct._object** %m.addr, align 8
  %call = call %struct.PickleState* @_Pickle_GetState(%struct._object* %0)
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %1, i32 0, i32 0
  %2 = load %struct._object*, %struct._object** %PickleError, align 8
  %tobool = icmp ne %struct._object* %2, null
  br i1 %tobool, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %4 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PickleError1 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %4, i32 0, i32 0
  %5 = load %struct._object*, %struct._object** %PickleError1, align 8
  %6 = load i8*, i8** %arg.addr, align 8
  %call2 = call i32 %3(%struct._object* %5, i8* %6)
  store i32 %call2, i32* %vret, align 4
  %7 = load i32, i32* %vret, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %8 = load i32, i32* %vret, align 4
  store i32 %8, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.5
  br label %do.body.6

do.body.6:                                        ; preds = %do.end
  %9 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %9, i32 0, i32 1
  %10 = load %struct._object*, %struct._object** %PicklingError, align 8
  %tobool7 = icmp ne %struct._object* %10, null
  br i1 %tobool7, label %if.then.8, label %if.end.15

if.then.8:                                        ; preds = %do.body.6
  %11 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %12 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError10 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %12, i32 0, i32 1
  %13 = load %struct._object*, %struct._object** %PicklingError10, align 8
  %14 = load i8*, i8** %arg.addr, align 8
  %call11 = call i32 %11(%struct._object* %13, i8* %14)
  store i32 %call11, i32* %vret9, align 4
  %15 = load i32, i32* %vret9, align 4
  %tobool12 = icmp ne i32 %15, 0
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.then.8
  %16 = load i32, i32* %vret9, align 4
  store i32 %16, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.then.8
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %do.body.6
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %17 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %17, i32 0, i32 2
  %18 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  %tobool18 = icmp ne %struct._object* %18, null
  br i1 %tobool18, label %if.then.19, label %if.end.26

if.then.19:                                       ; preds = %do.body.17
  %19 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %20 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError21 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %20, i32 0, i32 2
  %21 = load %struct._object*, %struct._object** %UnpicklingError21, align 8
  %22 = load i8*, i8** %arg.addr, align 8
  %call22 = call i32 %19(%struct._object* %21, i8* %22)
  store i32 %call22, i32* %vret20, align 4
  %23 = load i32, i32* %vret20, align 4
  %tobool23 = icmp ne i32 %23, 0
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.then.19
  %24 = load i32, i32* %vret20, align 4
  store i32 %24, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.then.19
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %do.body.17
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.27
  %25 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %dispatch_table = getelementptr inbounds %struct.PickleState, %struct.PickleState* %25, i32 0, i32 3
  %26 = load %struct._object*, %struct._object** %dispatch_table, align 8
  %tobool29 = icmp ne %struct._object* %26, null
  br i1 %tobool29, label %if.then.30, label %if.end.37

if.then.30:                                       ; preds = %do.body.28
  %27 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %28 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %dispatch_table32 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %28, i32 0, i32 3
  %29 = load %struct._object*, %struct._object** %dispatch_table32, align 8
  %30 = load i8*, i8** %arg.addr, align 8
  %call33 = call i32 %27(%struct._object* %29, i8* %30)
  store i32 %call33, i32* %vret31, align 4
  %31 = load i32, i32* %vret31, align 4
  %tobool34 = icmp ne i32 %31, 0
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.then.30
  %32 = load i32, i32* %vret31, align 4
  store i32 %32, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.then.30
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %do.body.28
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  br label %do.body.39

do.body.39:                                       ; preds = %do.end.38
  %33 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %extension_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %33, i32 0, i32 4
  %34 = load %struct._object*, %struct._object** %extension_registry, align 8
  %tobool40 = icmp ne %struct._object* %34, null
  br i1 %tobool40, label %if.then.41, label %if.end.48

if.then.41:                                       ; preds = %do.body.39
  %35 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %36 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %extension_registry43 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %36, i32 0, i32 4
  %37 = load %struct._object*, %struct._object** %extension_registry43, align 8
  %38 = load i8*, i8** %arg.addr, align 8
  %call44 = call i32 %35(%struct._object* %37, i8* %38)
  store i32 %call44, i32* %vret42, align 4
  %39 = load i32, i32* %vret42, align 4
  %tobool45 = icmp ne i32 %39, 0
  br i1 %tobool45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.then.41
  %40 = load i32, i32* %vret42, align 4
  store i32 %40, i32* %retval
  br label %return

if.end.47:                                        ; preds = %if.then.41
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %do.body.39
  br label %do.end.49

do.end.49:                                        ; preds = %if.end.48
  br label %do.body.50

do.body.50:                                       ; preds = %do.end.49
  %41 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %extension_cache = getelementptr inbounds %struct.PickleState, %struct.PickleState* %41, i32 0, i32 5
  %42 = load %struct._object*, %struct._object** %extension_cache, align 8
  %tobool51 = icmp ne %struct._object* %42, null
  br i1 %tobool51, label %if.then.52, label %if.end.59

if.then.52:                                       ; preds = %do.body.50
  %43 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %44 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %extension_cache54 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %44, i32 0, i32 5
  %45 = load %struct._object*, %struct._object** %extension_cache54, align 8
  %46 = load i8*, i8** %arg.addr, align 8
  %call55 = call i32 %43(%struct._object* %45, i8* %46)
  store i32 %call55, i32* %vret53, align 4
  %47 = load i32, i32* %vret53, align 4
  %tobool56 = icmp ne i32 %47, 0
  br i1 %tobool56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.then.52
  %48 = load i32, i32* %vret53, align 4
  store i32 %48, i32* %retval
  br label %return

if.end.58:                                        ; preds = %if.then.52
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %do.body.50
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  br label %do.body.61

do.body.61:                                       ; preds = %do.end.60
  %49 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %inverted_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %49, i32 0, i32 6
  %50 = load %struct._object*, %struct._object** %inverted_registry, align 8
  %tobool62 = icmp ne %struct._object* %50, null
  br i1 %tobool62, label %if.then.63, label %if.end.70

if.then.63:                                       ; preds = %do.body.61
  %51 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %52 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %inverted_registry65 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %52, i32 0, i32 6
  %53 = load %struct._object*, %struct._object** %inverted_registry65, align 8
  %54 = load i8*, i8** %arg.addr, align 8
  %call66 = call i32 %51(%struct._object* %53, i8* %54)
  store i32 %call66, i32* %vret64, align 4
  %55 = load i32, i32* %vret64, align 4
  %tobool67 = icmp ne i32 %55, 0
  br i1 %tobool67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.then.63
  %56 = load i32, i32* %vret64, align 4
  store i32 %56, i32* %retval
  br label %return

if.end.69:                                        ; preds = %if.then.63
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %do.body.61
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %do.body.72

do.body.72:                                       ; preds = %do.end.71
  %57 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %name_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %57, i32 0, i32 7
  %58 = load %struct._object*, %struct._object** %name_mapping_2to3, align 8
  %tobool73 = icmp ne %struct._object* %58, null
  br i1 %tobool73, label %if.then.74, label %if.end.81

if.then.74:                                       ; preds = %do.body.72
  %59 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %60 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %name_mapping_2to376 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %60, i32 0, i32 7
  %61 = load %struct._object*, %struct._object** %name_mapping_2to376, align 8
  %62 = load i8*, i8** %arg.addr, align 8
  %call77 = call i32 %59(%struct._object* %61, i8* %62)
  store i32 %call77, i32* %vret75, align 4
  %63 = load i32, i32* %vret75, align 4
  %tobool78 = icmp ne i32 %63, 0
  br i1 %tobool78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.then.74
  %64 = load i32, i32* %vret75, align 4
  store i32 %64, i32* %retval
  br label %return

if.end.80:                                        ; preds = %if.then.74
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80, %do.body.72
  br label %do.end.82

do.end.82:                                        ; preds = %if.end.81
  br label %do.body.83

do.body.83:                                       ; preds = %do.end.82
  %65 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %import_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %65, i32 0, i32 8
  %66 = load %struct._object*, %struct._object** %import_mapping_2to3, align 8
  %tobool84 = icmp ne %struct._object* %66, null
  br i1 %tobool84, label %if.then.85, label %if.end.92

if.then.85:                                       ; preds = %do.body.83
  %67 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %68 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %import_mapping_2to387 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %68, i32 0, i32 8
  %69 = load %struct._object*, %struct._object** %import_mapping_2to387, align 8
  %70 = load i8*, i8** %arg.addr, align 8
  %call88 = call i32 %67(%struct._object* %69, i8* %70)
  store i32 %call88, i32* %vret86, align 4
  %71 = load i32, i32* %vret86, align 4
  %tobool89 = icmp ne i32 %71, 0
  br i1 %tobool89, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %if.then.85
  %72 = load i32, i32* %vret86, align 4
  store i32 %72, i32* %retval
  br label %return

if.end.91:                                        ; preds = %if.then.85
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %do.body.83
  br label %do.end.93

do.end.93:                                        ; preds = %if.end.92
  br label %do.body.94

do.body.94:                                       ; preds = %do.end.93
  %73 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %name_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %73, i32 0, i32 9
  %74 = load %struct._object*, %struct._object** %name_mapping_3to2, align 8
  %tobool95 = icmp ne %struct._object* %74, null
  br i1 %tobool95, label %if.then.96, label %if.end.103

if.then.96:                                       ; preds = %do.body.94
  %75 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %76 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %name_mapping_3to298 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %76, i32 0, i32 9
  %77 = load %struct._object*, %struct._object** %name_mapping_3to298, align 8
  %78 = load i8*, i8** %arg.addr, align 8
  %call99 = call i32 %75(%struct._object* %77, i8* %78)
  store i32 %call99, i32* %vret97, align 4
  %79 = load i32, i32* %vret97, align 4
  %tobool100 = icmp ne i32 %79, 0
  br i1 %tobool100, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %if.then.96
  %80 = load i32, i32* %vret97, align 4
  store i32 %80, i32* %retval
  br label %return

if.end.102:                                       ; preds = %if.then.96
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %do.body.94
  br label %do.end.104

do.end.104:                                       ; preds = %if.end.103
  br label %do.body.105

do.body.105:                                      ; preds = %do.end.104
  %81 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %import_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %81, i32 0, i32 10
  %82 = load %struct._object*, %struct._object** %import_mapping_3to2, align 8
  %tobool106 = icmp ne %struct._object* %82, null
  br i1 %tobool106, label %if.then.107, label %if.end.114

if.then.107:                                      ; preds = %do.body.105
  %83 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %84 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %import_mapping_3to2109 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %84, i32 0, i32 10
  %85 = load %struct._object*, %struct._object** %import_mapping_3to2109, align 8
  %86 = load i8*, i8** %arg.addr, align 8
  %call110 = call i32 %83(%struct._object* %85, i8* %86)
  store i32 %call110, i32* %vret108, align 4
  %87 = load i32, i32* %vret108, align 4
  %tobool111 = icmp ne i32 %87, 0
  br i1 %tobool111, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %if.then.107
  %88 = load i32, i32* %vret108, align 4
  store i32 %88, i32* %retval
  br label %return

if.end.113:                                       ; preds = %if.then.107
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %do.body.105
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  br label %do.body.116

do.body.116:                                      ; preds = %do.end.115
  %89 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %codecs_encode = getelementptr inbounds %struct.PickleState, %struct.PickleState* %89, i32 0, i32 11
  %90 = load %struct._object*, %struct._object** %codecs_encode, align 8
  %tobool117 = icmp ne %struct._object* %90, null
  br i1 %tobool117, label %if.then.118, label %if.end.125

if.then.118:                                      ; preds = %do.body.116
  %91 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %92 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %codecs_encode120 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %92, i32 0, i32 11
  %93 = load %struct._object*, %struct._object** %codecs_encode120, align 8
  %94 = load i8*, i8** %arg.addr, align 8
  %call121 = call i32 %91(%struct._object* %93, i8* %94)
  store i32 %call121, i32* %vret119, align 4
  %95 = load i32, i32* %vret119, align 4
  %tobool122 = icmp ne i32 %95, 0
  br i1 %tobool122, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %if.then.118
  %96 = load i32, i32* %vret119, align 4
  store i32 %96, i32* %retval
  br label %return

if.end.124:                                       ; preds = %if.then.118
  br label %if.end.125

if.end.125:                                       ; preds = %if.end.124, %do.body.116
  br label %do.end.126

do.end.126:                                       ; preds = %if.end.125
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.126, %if.then.123, %if.then.112, %if.then.101, %if.then.90, %if.then.79, %if.then.68, %if.then.57, %if.then.46, %if.then.35, %if.then.24, %if.then.13, %if.then.4
  %97 = load i32, i32* %retval
  ret i32 %97
}

; Function Attrs: nounwind uwtable
define internal i32 @pickle_clear(%struct._object* %m) #0 {
entry:
  %m.addr = alloca %struct._object*, align 8
  store %struct._object* %m, %struct._object** %m.addr, align 8
  %0 = load %struct._object*, %struct._object** %m.addr, align 8
  %call = call %struct.PickleState* @_Pickle_GetState(%struct._object* %0)
  call void @_Pickle_ClearState(%struct.PickleState* %call)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal void @pickle_free(%struct._object* %m) #0 {
entry:
  %m.addr = alloca %struct._object*, align 8
  store %struct._object* %m, %struct._object** %m.addr, align 8
  %0 = load %struct._object*, %struct._object** %m.addr, align 8
  %call = call %struct.PickleState* @_Pickle_GetState(%struct._object* %0)
  call void @_Pickle_ClearState(%struct.PickleState* %call)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_dump(%struct.PyModuleDef* %module, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %file = alloca %struct._object*, align 8
  %protocol = alloca %struct._object*, align 8
  %fix_imports = alloca i32, align 4
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %return_value, align 8
  store %struct._object* null, %struct._object** %protocol, align 8
  store i32 1, i32* %fix_imports, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @_pickle_dump._keywords, i32 0, i32 0), %struct._object** %obj, %struct._object** %file, %struct._object** %protocol, i32* %fix_imports)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %2 = load %struct.PyModuleDef*, %struct.PyModuleDef** %module.addr, align 8
  %3 = load %struct._object*, %struct._object** %obj, align 8
  %4 = load %struct._object*, %struct._object** %file, align 8
  %5 = load %struct._object*, %struct._object** %protocol, align 8
  %6 = load i32, i32* %fix_imports, align 4
  %call1 = call %struct._object* @_pickle_dump_impl(%struct.PyModuleDef* %2, %struct._object* %3, %struct._object* %4, %struct._object* %5, i32 %6)
  store %struct._object* %call1, %struct._object** %return_value, align 8
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %return_value, align 8
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_dumps(%struct.PyModuleDef* %module, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %protocol = alloca %struct._object*, align 8
  %fix_imports = alloca i32, align 4
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %return_value, align 8
  store %struct._object* null, %struct._object** %protocol, align 8
  store i32 1, i32* %fix_imports, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.87, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_pickle_dumps._keywords, i32 0, i32 0), %struct._object** %obj, %struct._object** %protocol, i32* %fix_imports)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %2 = load %struct.PyModuleDef*, %struct.PyModuleDef** %module.addr, align 8
  %3 = load %struct._object*, %struct._object** %obj, align 8
  %4 = load %struct._object*, %struct._object** %protocol, align 8
  %5 = load i32, i32* %fix_imports, align 4
  %call1 = call %struct._object* @_pickle_dumps_impl(%struct.PyModuleDef* %2, %struct._object* %3, %struct._object* %4, i32 %5)
  store %struct._object* %call1, %struct._object** %return_value, align 8
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %6 = load %struct._object*, %struct._object** %return_value, align 8
  ret %struct._object* %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_load(%struct.PyModuleDef* %module, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %file = alloca %struct._object*, align 8
  %fix_imports = alloca i32, align 4
  %encoding = alloca i8*, align 8
  %errors = alloca i8*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %return_value, align 8
  store i32 1, i32* %fix_imports, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0), i8** %encoding, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8** %errors, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @_pickle_load._keywords, i32 0, i32 0), %struct._object** %file, i32* %fix_imports, i8** %encoding, i8** %errors)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %2 = load %struct.PyModuleDef*, %struct.PyModuleDef** %module.addr, align 8
  %3 = load %struct._object*, %struct._object** %file, align 8
  %4 = load i32, i32* %fix_imports, align 4
  %5 = load i8*, i8** %encoding, align 8
  %6 = load i8*, i8** %errors, align 8
  %call1 = call %struct._object* @_pickle_load_impl(%struct.PyModuleDef* %2, %struct._object* %3, i32 %4, i8* %5, i8* %6)
  store %struct._object* %call1, %struct._object** %return_value, align 8
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %return_value, align 8
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_loads(%struct.PyModuleDef* %module, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %data = alloca %struct._object*, align 8
  %fix_imports = alloca i32, align 4
  %encoding = alloca i8*, align 8
  %errors = alloca i8*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %return_value, align 8
  store i32 1, i32* %fix_imports, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0), i8** %encoding, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8** %errors, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.138, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @_pickle_loads._keywords, i32 0, i32 0), %struct._object** %data, i32* %fix_imports, i8** %encoding, i8** %errors)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %2 = load %struct.PyModuleDef*, %struct.PyModuleDef** %module.addr, align 8
  %3 = load %struct._object*, %struct._object** %data, align 8
  %4 = load i32, i32* %fix_imports, align 4
  %5 = load i8*, i8** %encoding, align 8
  %6 = load i8*, i8** %errors, align 8
  %call1 = call %struct._object* @_pickle_loads_impl(%struct.PyModuleDef* %2, %struct._object* %3, i32 %4, i8* %5, i8* %6)
  store %struct._object* %call1, %struct._object** %return_value, align 8
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %return_value, align 8
  ret %struct._object* %7
}

declare i32 @PyArg_ParseTupleAndKeywords(%struct._object*, %struct._object*, i8*, i8**, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_dump_impl(%struct.PyModuleDef* %module, %struct._object* %obj, %struct._object* %file, %struct._object* %protocol, i32 %fix_imports) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %file.addr = alloca %struct._object*, align 8
  %protocol.addr = alloca %struct._object*, align 8
  %fix_imports.addr = alloca i32, align 4
  %pickler = alloca %struct.PicklerObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %file, %struct._object** %file.addr, align 8
  store %struct._object* %protocol, %struct._object** %protocol.addr, align 8
  store i32 %fix_imports, i32* %fix_imports.addr, align 4
  %call = call %struct.PicklerObject* @_Pickler_New()
  store %struct.PicklerObject* %call, %struct.PicklerObject** %pickler, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %cmp = icmp eq %struct.PicklerObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %2 = load %struct._object*, %struct._object** %protocol.addr, align 8
  %3 = load i32, i32* %fix_imports.addr, align 4
  %call1 = call i32 @_Pickler_SetProtocol(%struct.PicklerObject* %1, %struct._object* %2, i32 %3)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %error

if.end.4:                                         ; preds = %if.end
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %5 = load %struct._object*, %struct._object** %file.addr, align 8
  %call5 = call i32 @_Pickler_SetOutputStream(%struct.PicklerObject* %4, %struct._object* %5)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  br label %error

if.end.8:                                         ; preds = %if.end.4
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %7 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call9 = call i32 @dump(%struct.PicklerObject* %6, %struct._object* %7)
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  br label %error

if.end.12:                                        ; preds = %if.end.8
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %call13 = call i32 @_Pickler_FlushToFile(%struct.PicklerObject* %8)
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  br label %error

if.end.16:                                        ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.end.16
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %10 = bitcast %struct.PicklerObject* %9 to %struct._object*
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp17 = icmp ne i64 %dec, 0
  br i1 %cmp17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %do.body
  br label %if.end.19

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %17 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.15, %if.then.11, %if.then.7, %if.then.3
  br label %do.body.20

do.body.20:                                       ; preds = %error
  %18 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %19 = bitcast %struct.PicklerObject* %18 to %struct._object*
  store %struct._object* %19, %struct._object** %_py_xdecref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp21 = icmp ne %struct._object* %20, null
  br i1 %cmp21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.body.20
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp24, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %23, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %26(%struct._object* %27)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %if.end.34

if.end.34:                                        ; preds = %do.end.33, %do.body.20
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.35, %do.end, %if.then
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal %struct.PicklerObject* @_Pickler_New() #0 {
entry:
  %retval = alloca %struct.PicklerObject*, align 8
  %self = alloca %struct.PicklerObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %call = call %struct._object* @_PyObject_GC_New(%struct._typeobject* @Pickler_Type)
  %0 = bitcast %struct._object* %call to %struct.PicklerObject*
  store %struct.PicklerObject* %0, %struct.PicklerObject** %self, align 8
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %cmp = icmp eq %struct.PicklerObject* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.PicklerObject* null, %struct.PicklerObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 2
  store %struct._object* null, %struct._object** %pers_func, align 8
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %dispatch_table = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %3, i32 0, i32 3
  store %struct._object* null, %struct._object** %dispatch_table, align 8
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 4
  store %struct._object* null, %struct._object** %write, align 8
  %5 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %5, i32 0, i32 8
  store i32 0, i32* %proto, align 4
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %6, i32 0, i32 9
  store i32 0, i32* %bin, align 4
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %framing = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %7, i32 0, i32 10
  store i32 0, i32* %framing, align 4
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %frame_start = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %8, i32 0, i32 11
  store i64 -1, i64* %frame_start, align 8
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %fast = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %9, i32 0, i32 13
  store i32 0, i32* %fast, align 4
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %fast_nesting = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %10, i32 0, i32 14
  store i32 0, i32* %fast_nesting, align 4
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %fix_imports = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 15
  store i32 0, i32* %fix_imports, align 4
  %12 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %fast_memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %12, i32 0, i32 16
  store %struct._object* null, %struct._object** %fast_memo, align 8
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %max_output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %13, i32 0, i32 7
  store i64 4096, i64* %max_output_len, align 8
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 6
  store i64 0, i64* %output_len, align 8
  %call1 = call %struct.PyMemoTable* @PyMemoTable_New()
  %15 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %15, i32 0, i32 1
  store %struct.PyMemoTable* %call1, %struct.PyMemoTable** %memo, align 8
  %16 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %max_output_len2 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %16, i32 0, i32 7
  %17 = load i64, i64* %max_output_len2, align 8
  %call3 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %17)
  %18 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %output_buffer = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %18, i32 0, i32 5
  store %struct._object* %call3, %struct._object** %output_buffer, align 8
  %19 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %memo4 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %19, i32 0, i32 1
  %20 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo4, align 8
  %cmp5 = icmp eq %struct.PyMemoTable* %20, null
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %21 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %output_buffer6 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %21, i32 0, i32 5
  %22 = load %struct._object*, %struct._object** %output_buffer6, align 8
  %cmp7 = icmp eq %struct._object* %22, null
  br i1 %cmp7, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %lor.lhs.false, %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %23 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  %24 = bitcast %struct.PicklerObject* %23 to %struct._object*
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %26, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %29(%struct._object* %30)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  store %struct.PicklerObject* null, %struct.PicklerObject** %retval
  br label %return

if.end.12:                                        ; preds = %lor.lhs.false
  %31 = load %struct.PicklerObject*, %struct.PicklerObject** %self, align 8
  store %struct.PicklerObject* %31, %struct.PicklerObject** %retval
  br label %return

return:                                           ; preds = %if.end.12, %do.end, %if.then
  %32 = load %struct.PicklerObject*, %struct.PicklerObject** %retval
  ret %struct.PicklerObject* %32
}

; Function Attrs: nounwind uwtable
define internal i32 @_Pickler_SetProtocol(%struct.PicklerObject* %self, %struct._object* %protocol, i32 %fix_imports) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %protocol.addr = alloca %struct._object*, align 8
  %fix_imports.addr = alloca i32, align 4
  %proto = alloca i64, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %protocol, %struct._object** %protocol.addr, align 8
  store i32 %fix_imports, i32* %fix_imports.addr, align 4
  %0 = load %struct._object*, %struct._object** %protocol.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %protocol.addr, align 8
  %cmp1 = icmp eq %struct._object* %1, @_Py_NoneStruct
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 3, i64* %proto, align 8
  br label %if.end.13

if.else:                                          ; preds = %lor.lhs.false
  %2 = load %struct._object*, %struct._object** %protocol.addr, align 8
  %call = call i64 @PyLong_AsLong(%struct._object* %2)
  store i64 %call, i64* %proto, align 8
  %3 = load i64, i64* %proto, align 8
  %cmp2 = icmp slt i64 %3, 0
  br i1 %cmp2, label %if.then.3, label %if.else.7

if.then.3:                                        ; preds = %if.else
  %4 = load i64, i64* %proto, align 8
  %cmp4 = icmp eq i64 %4, -1
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then.3
  %call5 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call5, null
  br i1 %tobool, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then.3
  store i64 4, i64* %proto, align 8
  br label %if.end.12

if.else.7:                                        ; preds = %if.else
  %5 = load i64, i64* %proto, align 8
  %cmp8 = icmp sgt i64 %5, 4
  br i1 %cmp8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.else.7
  %6 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call10 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i32 0, i32 0), i32 4)
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.else.7
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.then
  %7 = load i64, i64* %proto, align 8
  %conv = trunc i64 %7 to i32
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto14 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %8, i32 0, i32 8
  store i32 %conv, i32* %proto14, align 4
  %9 = load i64, i64* %proto, align 8
  %cmp15 = icmp sgt i64 %9, 0
  %conv16 = zext i1 %cmp15 to i32
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %10, i32 0, i32 9
  store i32 %conv16, i32* %bin, align 4
  %11 = load i32, i32* %fix_imports.addr, align 4
  %tobool17 = icmp ne i32 %11, 0
  br i1 %tobool17, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.13
  %12 = load i64, i64* %proto, align 8
  %cmp18 = icmp slt i64 %12, 3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.13
  %13 = phi i1 [ false, %if.end.13 ], [ %cmp18, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fix_imports20 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 15
  store i32 %land.ext, i32* %fix_imports20, align 4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then.9, %if.then.6
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @_Pickler_SetOutputStream(%struct.PicklerObject* %self, %struct._object* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %file.addr = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %file, %struct._object** %file.addr, align 8
  %0 = load %struct._object*, %struct._object** %file.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @_Pickler_SetOutputStream.PyId_write)
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %1, i32 0, i32 4
  store %struct._object* %call, %struct._object** %write, align 8
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 4
  %3 = load %struct._object*, %struct._object** %write1, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call2 = call i32 @PyErr_ExceptionMatches(%struct._object* %4)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.20, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.end
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i32 @dump(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %stop_op = alloca i8, align 1
  %header = alloca [2 x i8], align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8 46, i8* %stop_op, align 1
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 8
  %1 = load i32, i32* %proto, align 4
  %cmp = icmp sge i32 %1, 2
  br i1 %cmp, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr [2 x i8], [2 x i8]* %header, i32 0, i64 0
  store i8 -128, i8* %arrayidx, align 1
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 8
  %3 = load i32, i32* %proto1, align 4
  %conv = trunc i32 %3 to i8
  %arrayidx2 = getelementptr [2 x i8], [2 x i8]* %header, i32 0, i64 1
  store i8 %conv, i8* %arrayidx2, align 1
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %header, i32 0, i32 0
  %call = call i64 @_Pickler_Write(%struct.PicklerObject* %4, i8* %arraydecay, i64 2)
  %cmp3 = icmp slt i64 %call, 0
  br i1 %cmp3, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto6 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %5, i32 0, i32 8
  %6 = load i32, i32* %proto6, align 4
  %cmp7 = icmp sge i32 %6, 4
  br i1 %cmp7, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %framing = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %7, i32 0, i32 10
  store i32 1, i32* %framing, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end
  br label %if.end.11

if.end.11:                                        ; preds = %if.end.10, %entry
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %9 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call12 = call i32 @save(%struct.PicklerObject* %8, %struct._object* %9, i32 0)
  %cmp13 = icmp slt i32 %call12, 0
  br i1 %cmp13, label %if.then.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.11
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call15 = call i64 @_Pickler_Write(%struct.PicklerObject* %10, i8* %stop_op, i64 1)
  %cmp16 = icmp slt i64 %call15, 0
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %lor.lhs.false, %if.end.11
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %lor.lhs.false
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.18, %if.then.5
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @_Pickler_FlushToFile(%struct.PicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %output = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call %struct._object* @_Pickler_GetString(%struct.PicklerObject* %0)
  store %struct._object* %call, %struct._object** %output, align 8
  %1 = load %struct._object*, %struct._object** %output, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 4
  %3 = load %struct._object*, %struct._object** %write, align 8
  %4 = load %struct._object*, %struct._object** %output, align 8
  %call1 = call %struct._object* @_Pickle_FastCall(%struct._object* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %5, %struct._object** %_py_xdecref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp2 = icmp ne %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %do.body
  br label %do.body.4

do.body.4:                                        ; preds = %if.then.3
  %7 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body.4
  br label %if.end.7

if.else:                                          ; preds = %do.body.4
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  br label %if.end.8

if.end.8:                                         ; preds = %do.end, %do.body
  br label %do.end.9

do.end.9:                                         ; preds = %if.end.8
  %14 = load %struct._object*, %struct._object** %result, align 8
  %cmp10 = icmp eq %struct._object* %14, null
  %cond = select i1 %cmp10, i32 -1, i32 0
  store i32 %cond, i32* %retval
  br label %return

return:                                           ; preds = %do.end.9, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

declare %struct._object* @_PyObject_GC_New(%struct._typeobject*) #1

; Function Attrs: nounwind uwtable
define internal %struct.PyMemoTable* @PyMemoTable_New() #0 {
entry:
  %retval = alloca %struct.PyMemoTable*, align 8
  %memo = alloca %struct.PyMemoTable*, align 8
  %call = call i8* @PyMem_Malloc(i64 32)
  %0 = bitcast i8* %call to %struct.PyMemoTable*
  store %struct.PyMemoTable* %0, %struct.PyMemoTable** %memo, align 8
  %1 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %cmp = icmp eq %struct.PyMemoTable* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_NoMemory()
  store %struct.PyMemoTable* null, %struct.PyMemoTable** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_used = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %2, i32 0, i32 1
  store i64 0, i64* %mt_used, align 8
  %3 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_allocated = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %3, i32 0, i32 2
  store i64 8, i64* %mt_allocated, align 8
  %4 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_mask = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %4, i32 0, i32 0
  store i64 7, i64* %mt_mask, align 8
  %call2 = call i8* @PyMem_Malloc(i64 128)
  %5 = bitcast i8* %call2 to %struct.PyMemoEntry*
  %6 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_table = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %6, i32 0, i32 3
  store %struct.PyMemoEntry* %5, %struct.PyMemoEntry** %mt_table, align 8
  %7 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_table3 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %7, i32 0, i32 3
  %8 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table3, align 8
  %cmp4 = icmp eq %struct.PyMemoEntry* %8, null
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %9 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %10 = bitcast %struct.PyMemoTable* %9 to i8*
  call void @PyMem_Free(i8* %10)
  %call6 = call %struct._object* @PyErr_NoMemory()
  store %struct.PyMemoTable* null, %struct.PyMemoTable** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %11 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_table8 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %11, i32 0, i32 3
  %12 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table8, align 8
  %13 = bitcast %struct.PyMemoEntry* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 128, i32 8, i1 false)
  %14 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  store %struct.PyMemoTable* %14, %struct.PyMemoTable** %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.5, %if.then
  %15 = load %struct.PyMemoTable*, %struct.PyMemoTable** %retval
  ret %struct.PyMemoTable* %15
}

declare %struct._object* @PyBytes_FromStringAndSize(i8*, i64) #1

declare i8* @PyMem_Malloc(i64) #1

declare %struct._object* @PyErr_NoMemory() #1

declare void @PyMem_Free(i8*) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

declare i64 @PyLong_AsLong(%struct._object*) #1

declare %struct._object* @PyErr_Occurred() #1

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #1

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #1

declare i32 @PyErr_ExceptionMatches(%struct._object*) #1

declare void @PyErr_SetString(%struct._object*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i64 @_Pickler_Write(%struct.PicklerObject* %self, i8* %s, i64 %data_len) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.PicklerObject*, align 8
  %s.addr = alloca i8*, align 8
  %data_len.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %required = alloca i64, align 8
  %buffer = alloca i8*, align 8
  %need_new_frame = alloca i32, align 4
  %frame_start21 = alloca i64, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %data_len, i64* %data_len.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %framing = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 10
  %1 = load i32, i32* %framing, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 11
  %3 = load i64, i64* %frame_start, align 8
  %cmp = icmp eq i64 %3, -1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  store i32 %land.ext, i32* %need_new_frame, align 4
  %5 = load i32, i32* %need_new_frame, align 4
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then, label %if.else

if.then:                                          ; preds = %land.end
  %6 = load i64, i64* %data_len.addr, align 8
  %add = add i64 %6, 9
  store i64 %add, i64* %n, align 8
  br label %if.end

if.else:                                          ; preds = %land.end
  %7 = load i64, i64* %data_len.addr, align 8
  store i64 %7, i64* %n, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %8, i32 0, i32 6
  %9 = load i64, i64* %output_len, align 8
  %10 = load i64, i64* %n, align 8
  %add2 = add i64 %9, %10
  store i64 %add2, i64* %required, align 8
  %11 = load i64, i64* %required, align 8
  %12 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %max_output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %12, i32 0, i32 7
  %13 = load i64, i64* %max_output_len, align 8
  %cmp3 = icmp sgt i64 %11, %13
  br i1 %cmp3, label %if.then.4, label %if.end.17

if.then.4:                                        ; preds = %if.end
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len5 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 6
  %15 = load i64, i64* %output_len5, align 8
  %16 = load i64, i64* %n, align 8
  %sub = sub i64 4611686018427387903, %16
  %cmp6 = icmp sge i64 %15, %sub
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.then.4
  %call = call %struct._object* @PyErr_NoMemory()
  store i64 -1, i64* %retval
  br label %return

if.end.8:                                         ; preds = %if.then.4
  %17 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len9 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %17, i32 0, i32 6
  %18 = load i64, i64* %output_len9, align 8
  %19 = load i64, i64* %n, align 8
  %add10 = add i64 %18, %19
  %div = sdiv i64 %add10, 2
  %mul = mul i64 %div, 3
  %20 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %max_output_len11 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %20, i32 0, i32 7
  store i64 %mul, i64* %max_output_len11, align 8
  %21 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %21, i32 0, i32 5
  %22 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %max_output_len12 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %22, i32 0, i32 7
  %23 = load i64, i64* %max_output_len12, align 8
  %call13 = call i32 @_PyBytes_Resize(%struct._object** %output_buffer, i64 %23)
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.8
  store i64 -1, i64* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.8
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end
  %24 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer18 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %24, i32 0, i32 5
  %25 = load %struct._object*, %struct._object** %output_buffer18, align 8
  %26 = bitcast %struct._object* %25 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %26, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  store i8* %arraydecay, i8** %buffer, align 8
  %27 = load i32, i32* %need_new_frame, align 4
  %tobool19 = icmp ne i32 %27, 0
  br i1 %tobool19, label %if.then.20, label %if.end.28

if.then.20:                                       ; preds = %if.end.17
  %28 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len22 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %28, i32 0, i32 6
  %29 = load i64, i64* %output_len22, align 8
  store i64 %29, i64* %frame_start21, align 8
  %30 = load i64, i64* %frame_start21, align 8
  %31 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start23 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %31, i32 0, i32 11
  store i64 %30, i64* %frame_start23, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.20
  %32 = load i64, i64* %i, align 8
  %cmp24 = icmp slt i64 %32, 9
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %33 = load i64, i64* %frame_start21, align 8
  %34 = load i64, i64* %i, align 8
  %add25 = add i64 %33, %34
  %35 = load i8*, i8** %buffer, align 8
  %arrayidx = getelementptr i8, i8* %35, i64 %add25
  store i8 -2, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load i64, i64* %i, align 8
  %inc = add i64 %36, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len26 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %37, i32 0, i32 6
  %38 = load i64, i64* %output_len26, align 8
  %add27 = add i64 %38, 9
  store i64 %add27, i64* %output_len26, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %for.end, %if.end.17
  %39 = load i64, i64* %data_len.addr, align 8
  %cmp29 = icmp slt i64 %39, 8
  br i1 %cmp29, label %if.then.30, label %if.else.41

if.then.30:                                       ; preds = %if.end.28
  store i64 0, i64* %i, align 8
  br label %for.cond.31

for.cond.31:                                      ; preds = %for.inc.38, %if.then.30
  %40 = load i64, i64* %i, align 8
  %41 = load i64, i64* %data_len.addr, align 8
  %cmp32 = icmp slt i64 %40, %41
  br i1 %cmp32, label %for.body.33, label %for.end.40

for.body.33:                                      ; preds = %for.cond.31
  %42 = load i64, i64* %i, align 8
  %43 = load i8*, i8** %s.addr, align 8
  %arrayidx34 = getelementptr i8, i8* %43, i64 %42
  %44 = load i8, i8* %arrayidx34, align 1
  %45 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len35 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %45, i32 0, i32 6
  %46 = load i64, i64* %output_len35, align 8
  %47 = load i64, i64* %i, align 8
  %add36 = add i64 %46, %47
  %48 = load i8*, i8** %buffer, align 8
  %arrayidx37 = getelementptr i8, i8* %48, i64 %add36
  store i8 %44, i8* %arrayidx37, align 1
  br label %for.inc.38

for.inc.38:                                       ; preds = %for.body.33
  %49 = load i64, i64* %i, align 8
  %inc39 = add i64 %49, 1
  store i64 %inc39, i64* %i, align 8
  br label %for.cond.31

for.end.40:                                       ; preds = %for.cond.31
  br label %if.end.43

if.else.41:                                       ; preds = %if.end.28
  %50 = load i8*, i8** %buffer, align 8
  %51 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len42 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %51, i32 0, i32 6
  %52 = load i64, i64* %output_len42, align 8
  %add.ptr = getelementptr i8, i8* %50, i64 %52
  %53 = load i8*, i8** %s.addr, align 8
  %54 = load i64, i64* %data_len.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %53, i64 %54, i32 1, i1 false)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.41, %for.end.40
  %55 = load i64, i64* %data_len.addr, align 8
  %56 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len44 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %56, i32 0, i32 6
  %57 = load i64, i64* %output_len44, align 8
  %add45 = add i64 %57, %55
  store i64 %add45, i64* %output_len44, align 8
  %58 = load i64, i64* %data_len.addr, align 8
  store i64 %58, i64* %retval
  br label %return

return:                                           ; preds = %if.end.43, %if.then.15, %if.then.7
  %59 = load i64, i64* %retval
  ret i64 %59
}

; Function Attrs: nounwind uwtable
define internal i32 @save(%struct.PicklerObject* %self, %struct._object* %obj, i32 %pers_save) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %pers_save.addr = alloca i32, align 4
  %type = alloca %struct._typeobject*, align 8
  %reduce_func = alloca %struct._object*, align 8
  %reduce_value = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %st = alloca %struct.PickleState*, align 8
  %proto = alloca %struct._object*, align 8
  %st140 = alloca %struct.PickleState*, align 8
  %empty_tuple = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %st185 = alloca %struct.PickleState*, align 8
  %atomic_val194 = alloca %struct._Py_atomic_address*, align 8
  %result196 = alloca i8*, align 8
  %volatile_data198 = alloca i8**, align 8
  %order201 = alloca i32, align 4
  %tmp208 = alloca i8*, align 8
  %atomic_val217 = alloca %struct._Py_atomic_address*, align 8
  %result219 = alloca i8*, align 8
  %volatile_data221 = alloca i8**, align 8
  %order224 = alloca i32, align 4
  %tmp231 = alloca i8*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp241 = alloca %struct._object*, align 8
  %_py_xdecref_tmp256 = alloca %struct._object*, align 8
  %_py_decref_tmp262 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i32 %pers_save, i32* %pers_save.addr, align 4
  store %struct._object* null, %struct._object** %reduce_func, align 8
  store %struct._object* null, %struct._object** %reduce_value, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call i32 @_Pickler_OpcodeBoundary(%struct.PicklerObject* %0)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %1, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %2 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %3 = bitcast %struct._Py_atomic_address* %2 to i8*
  %4 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3, i32 %4)
  %5 = load i32, i32* %order, align 4
  switch i32 %5, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %6 = load i8**, i8*** %volatile_data, align 8
  %7 = load volatile i8*, i8** %6, align 8
  store i8* %7, i8** %result, align 8
  %8 = load i32, i32* %order, align 4
  switch i32 %8, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %9 = load i8*, i8** %result, align 8
  store i8* %9, i8** %tmp
  %10 = load i8*, i8** %tmp
  %11 = bitcast i8* %10 to %struct._ts*
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %11, i32 0, i32 4
  %12 = load i32, i32* %recursion_depth, align 4
  %inc = add i32 %12, 1
  store i32 %inc, i32* %recursion_depth, align 4
  %13 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp4 = icmp sgt i32 %inc, %13
  br i1 %cmp4, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %sw.epilog.3
  %call5 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i32 0, i32 0))
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %land.lhs.true, %sw.epilog.3
  %14 = load i32, i32* %pers_save.addr, align 4
  %tobool8 = icmp ne i32 %14, 0
  br i1 %tobool8, label %if.end.17, label %land.lhs.true.9

land.lhs.true.9:                                  ; preds = %if.end.7
  %15 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %15, i32 0, i32 2
  %16 = load %struct._object*, %struct._object** %pers_func, align 8
  %tobool10 = icmp ne %struct._object* %16, null
  br i1 %tobool10, label %if.then.11, label %if.end.17

if.then.11:                                       ; preds = %land.lhs.true.9
  %17 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %18 = load %struct._object*, %struct._object** %obj.addr, align 8
  %19 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func12 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %19, i32 0, i32 2
  %20 = load %struct._object*, %struct._object** %pers_func12, align 8
  %call13 = call i32 @save_pers(%struct.PicklerObject* %17, %struct._object* %18, %struct._object* %20)
  store i32 %call13, i32* %status, align 4
  %cmp14 = icmp ne i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.then.11
  br label %done

if.end.16:                                        ; preds = %if.then.11
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %land.lhs.true.9, %if.end.7
  %21 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %22, %struct._typeobject** %type, align 8
  %23 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp18 = icmp eq %struct._object* %23, @_Py_NoneStruct
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.end.17
  %24 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call20 = call i32 @save_none(%struct.PicklerObject* %24, %struct._object* %25)
  store i32 %call20, i32* %status, align 4
  br label %done

if.else:                                          ; preds = %if.end.17
  %26 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp21 = icmp eq %struct._object* %26, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  br i1 %cmp21, label %if.then.23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %27 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp22 = icmp eq %struct._object* %27, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  br i1 %cmp22, label %if.then.23, label %if.else.25

if.then.23:                                       ; preds = %lor.lhs.false, %if.else
  %28 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %29 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call24 = call i32 @save_bool(%struct.PicklerObject* %28, %struct._object* %29)
  store i32 %call24, i32* %status, align 4
  br label %done

if.else.25:                                       ; preds = %lor.lhs.false
  %30 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp26 = icmp eq %struct._typeobject* %30, @PyLong_Type
  br i1 %cmp26, label %if.then.27, label %if.else.29

if.then.27:                                       ; preds = %if.else.25
  %31 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %32 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call28 = call i32 @save_long(%struct.PicklerObject* %31, %struct._object* %32)
  store i32 %call28, i32* %status, align 4
  br label %done

if.else.29:                                       ; preds = %if.else.25
  %33 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp30 = icmp eq %struct._typeobject* %33, @PyFloat_Type
  br i1 %cmp30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %if.else.29
  %34 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %35 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call32 = call i32 @save_float(%struct.PicklerObject* %34, %struct._object* %35)
  store i32 %call32, i32* %status, align 4
  br label %done

if.end.33:                                        ; preds = %if.else.29
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35
  %36 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %36, i32 0, i32 1
  %37 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %38 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call37 = call i64* @PyMemoTable_Get(%struct.PyMemoTable* %37, %struct._object* %38)
  %tobool38 = icmp ne i64* %call37, null
  br i1 %tobool38, label %if.then.39, label %if.end.44

if.then.39:                                       ; preds = %if.end.36
  %39 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %40 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call40 = call i32 @memo_get(%struct.PicklerObject* %39, %struct._object* %40)
  %cmp41 = icmp slt i32 %call40, 0
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.then.39
  br label %error

if.end.43:                                        ; preds = %if.then.39
  br label %done

if.end.44:                                        ; preds = %if.end.36
  %41 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp45 = icmp eq %struct._typeobject* %41, @PyBytes_Type
  br i1 %cmp45, label %if.then.46, label %if.else.48

if.then.46:                                       ; preds = %if.end.44
  %42 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %43 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call47 = call i32 @save_bytes(%struct.PicklerObject* %42, %struct._object* %43)
  store i32 %call47, i32* %status, align 4
  br label %done

if.else.48:                                       ; preds = %if.end.44
  %44 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp49 = icmp eq %struct._typeobject* %44, @PyUnicode_Type
  br i1 %cmp49, label %if.then.50, label %if.else.52

if.then.50:                                       ; preds = %if.else.48
  %45 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %46 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call51 = call i32 @save_unicode(%struct.PicklerObject* %45, %struct._object* %46)
  store i32 %call51, i32* %status, align 4
  br label %done

if.else.52:                                       ; preds = %if.else.48
  %47 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp53 = icmp eq %struct._typeobject* %47, @PyDict_Type
  br i1 %cmp53, label %if.then.54, label %if.else.56

if.then.54:                                       ; preds = %if.else.52
  %48 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %49 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call55 = call i32 @save_dict(%struct.PicklerObject* %48, %struct._object* %49)
  store i32 %call55, i32* %status, align 4
  br label %done

if.else.56:                                       ; preds = %if.else.52
  %50 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp57 = icmp eq %struct._typeobject* %50, @PySet_Type
  br i1 %cmp57, label %if.then.58, label %if.else.60

if.then.58:                                       ; preds = %if.else.56
  %51 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %52 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call59 = call i32 @save_set(%struct.PicklerObject* %51, %struct._object* %52)
  store i32 %call59, i32* %status, align 4
  br label %done

if.else.60:                                       ; preds = %if.else.56
  %53 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp61 = icmp eq %struct._typeobject* %53, @PyFrozenSet_Type
  br i1 %cmp61, label %if.then.62, label %if.else.64

if.then.62:                                       ; preds = %if.else.60
  %54 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %55 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call63 = call i32 @save_frozenset(%struct.PicklerObject* %54, %struct._object* %55)
  store i32 %call63, i32* %status, align 4
  br label %done

if.else.64:                                       ; preds = %if.else.60
  %56 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp65 = icmp eq %struct._typeobject* %56, @PyList_Type
  br i1 %cmp65, label %if.then.66, label %if.else.68

if.then.66:                                       ; preds = %if.else.64
  %57 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %58 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call67 = call i32 @save_list(%struct.PicklerObject* %57, %struct._object* %58)
  store i32 %call67, i32* %status, align 4
  br label %done

if.else.68:                                       ; preds = %if.else.64
  %59 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp69 = icmp eq %struct._typeobject* %59, @PyTuple_Type
  br i1 %cmp69, label %if.then.70, label %if.else.72

if.then.70:                                       ; preds = %if.else.68
  %60 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %61 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call71 = call i32 @save_tuple(%struct.PicklerObject* %60, %struct._object* %61)
  store i32 %call71, i32* %status, align 4
  br label %done

if.else.72:                                       ; preds = %if.else.68
  %62 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp73 = icmp eq %struct._typeobject* %62, @PyType_Type
  br i1 %cmp73, label %if.then.74, label %if.else.76

if.then.74:                                       ; preds = %if.else.72
  %63 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %64 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call75 = call i32 @save_type(%struct.PicklerObject* %63, %struct._object* %64)
  store i32 %call75, i32* %status, align 4
  br label %done

if.else.76:                                       ; preds = %if.else.72
  %65 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp77 = icmp eq %struct._typeobject* %65, @PyFunction_Type
  br i1 %cmp77, label %if.then.78, label %if.end.80

if.then.78:                                       ; preds = %if.else.76
  %66 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %67 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call79 = call i32 @save_global(%struct.PicklerObject* %66, %struct._object* %67, %struct._object* null)
  store i32 %call79, i32* %status, align 4
  br label %done

if.end.80:                                        ; preds = %if.else.76
  br label %if.end.81

if.end.81:                                        ; preds = %if.end.80
  br label %if.end.82

if.end.82:                                        ; preds = %if.end.81
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.82
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85
  br label %if.end.87

if.end.87:                                        ; preds = %if.end.86
  br label %if.end.88

if.end.88:                                        ; preds = %if.end.87
  %68 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %68, i32 0, i32 3
  %69 = load %struct._object*, %struct._object** %dispatch_table, align 8
  %cmp89 = icmp eq %struct._object* %69, null
  br i1 %cmp89, label %if.then.90, label %if.else.104

if.then.90:                                       ; preds = %if.end.88
  %call92 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call92, %struct.PickleState** %st, align 8
  %70 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %dispatch_table93 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %70, i32 0, i32 3
  %71 = load %struct._object*, %struct._object** %dispatch_table93, align 8
  %72 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %73 = bitcast %struct._typeobject* %72 to %struct._object*
  %call94 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %71, %struct._object* %73)
  store %struct._object* %call94, %struct._object** %reduce_func, align 8
  %74 = load %struct._object*, %struct._object** %reduce_func, align 8
  %cmp95 = icmp eq %struct._object* %74, null
  br i1 %cmp95, label %if.then.96, label %if.else.101

if.then.96:                                       ; preds = %if.then.90
  %call97 = call %struct._object* @PyErr_Occurred()
  %tobool98 = icmp ne %struct._object* %call97, null
  br i1 %tobool98, label %if.then.99, label %if.end.100

if.then.99:                                       ; preds = %if.then.96
  br label %error

if.end.100:                                       ; preds = %if.then.96
  br label %if.end.103

if.else.101:                                      ; preds = %if.then.90
  %75 = load %struct._object*, %struct._object** %reduce_func, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt, align 8
  %inc102 = add i64 %76, 1
  store i64 %inc102, i64* %ob_refcnt, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.101, %if.end.100
  br label %if.end.115

if.else.104:                                      ; preds = %if.end.88
  %77 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table105 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %77, i32 0, i32 3
  %78 = load %struct._object*, %struct._object** %dispatch_table105, align 8
  %79 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %80 = bitcast %struct._typeobject* %79 to %struct._object*
  %call106 = call %struct._object* @PyObject_GetItem(%struct._object* %78, %struct._object* %80)
  store %struct._object* %call106, %struct._object** %reduce_func, align 8
  %81 = load %struct._object*, %struct._object** %reduce_func, align 8
  %cmp107 = icmp eq %struct._object* %81, null
  br i1 %cmp107, label %if.then.108, label %if.end.114

if.then.108:                                      ; preds = %if.else.104
  %82 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %call109 = call i32 @PyErr_ExceptionMatches(%struct._object* %82)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.then.111, label %if.else.112

if.then.111:                                      ; preds = %if.then.108
  call void @PyErr_Clear()
  br label %if.end.113

if.else.112:                                      ; preds = %if.then.108
  br label %error

if.end.113:                                       ; preds = %if.then.111
  br label %if.end.114

if.end.114:                                       ; preds = %if.end.113, %if.else.104
  br label %if.end.115

if.end.115:                                       ; preds = %if.end.114, %if.end.103
  %83 = load %struct._object*, %struct._object** %reduce_func, align 8
  %cmp116 = icmp ne %struct._object* %83, null
  br i1 %cmp116, label %if.then.117, label %if.else.121

if.then.117:                                      ; preds = %if.end.115
  %84 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_refcnt118 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 0
  %85 = load i64, i64* %ob_refcnt118, align 8
  %inc119 = add i64 %85, 1
  store i64 %inc119, i64* %ob_refcnt118, align 8
  %86 = load %struct._object*, %struct._object** %reduce_func, align 8
  %87 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call120 = call %struct._object* @_Pickle_FastCall(%struct._object* %86, %struct._object* %87)
  store %struct._object* %call120, %struct._object** %reduce_value, align 8
  br label %if.end.167

if.else.121:                                      ; preds = %if.end.115
  %88 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call122 = call i32 @PyType_IsSubtype(%struct._typeobject* %88, %struct._typeobject* @PyType_Type)
  %tobool123 = icmp ne i32 %call122, 0
  br i1 %tobool123, label %if.then.124, label %if.else.126

if.then.124:                                      ; preds = %if.else.121
  %89 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %90 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call125 = call i32 @save_global(%struct.PicklerObject* %89, %struct._object* %90, %struct._object* null)
  store i32 %call125, i32* %status, align 4
  br label %done

if.else.126:                                      ; preds = %if.else.121
  %91 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call127 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %91, %struct._Py_Identifier* @save.PyId___reduce_ex__)
  store %struct._object* %call127, %struct._object** %reduce_func, align 8
  %92 = load %struct._object*, %struct._object** %reduce_func, align 8
  %cmp128 = icmp ne %struct._object* %92, null
  br i1 %cmp128, label %if.then.129, label %if.else.138

if.then.129:                                      ; preds = %if.else.126
  %93 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto131 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %93, i32 0, i32 8
  %94 = load i32, i32* %proto131, align 4
  %conv = sext i32 %94 to i64
  %call132 = call %struct._object* @PyLong_FromLong(i64 %conv)
  store %struct._object* %call132, %struct._object** %proto, align 8
  %95 = load %struct._object*, %struct._object** %proto, align 8
  %cmp133 = icmp ne %struct._object* %95, null
  br i1 %cmp133, label %if.then.135, label %if.end.137

if.then.135:                                      ; preds = %if.then.129
  %96 = load %struct._object*, %struct._object** %reduce_func, align 8
  %97 = load %struct._object*, %struct._object** %proto, align 8
  %call136 = call %struct._object* @_Pickle_FastCall(%struct._object* %96, %struct._object* %97)
  store %struct._object* %call136, %struct._object** %reduce_value, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %if.then.135, %if.then.129
  br label %if.end.165

if.else.138:                                      ; preds = %if.else.126
  %call141 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call141, %struct.PickleState** %st140, align 8
  %98 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call142 = call i32 @PyErr_ExceptionMatches(%struct._object* %98)
  %tobool143 = icmp ne i32 %call142, 0
  br i1 %tobool143, label %if.then.144, label %if.else.145

if.then.144:                                      ; preds = %if.else.138
  call void @PyErr_Clear()
  br label %if.end.146

if.else.145:                                      ; preds = %if.else.138
  br label %error

if.end.146:                                       ; preds = %if.then.144
  %99 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call147 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %99, %struct._Py_Identifier* @save.PyId___reduce__)
  store %struct._object* %call147, %struct._object** %reduce_func, align 8
  %100 = load %struct._object*, %struct._object** %reduce_func, align 8
  %cmp148 = icmp ne %struct._object* %100, null
  br i1 %cmp148, label %if.then.150, label %if.else.162

if.then.150:                                      ; preds = %if.end.146
  %call152 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call152, %struct._object** %empty_tuple, align 8
  %101 = load %struct._object*, %struct._object** %reduce_func, align 8
  %102 = load %struct._object*, %struct._object** %empty_tuple, align 8
  %call153 = call %struct._object* @PyObject_Call(%struct._object* %101, %struct._object* %102, %struct._object* null)
  store %struct._object* %call153, %struct._object** %reduce_value, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.150
  %103 = load %struct._object*, %struct._object** %empty_tuple, align 8
  store %struct._object* %103, %struct._object** %_py_decref_tmp, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt155 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0
  %105 = load i64, i64* %ob_refcnt155, align 8
  %dec = add i64 %105, -1
  store i64 %dec, i64* %ob_refcnt155, align 8
  %cmp156 = icmp ne i64 %dec, 0
  br i1 %cmp156, label %if.then.158, label %if.else.159

if.then.158:                                      ; preds = %do.body
  br label %if.end.161

if.else.159:                                      ; preds = %do.body
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type160 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type160, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %108(%struct._object* %109)
  br label %if.end.161

if.end.161:                                       ; preds = %if.else.159, %if.then.158
  br label %do.end

do.end:                                           ; preds = %if.end.161
  br label %if.end.164

if.else.162:                                      ; preds = %if.end.146
  %110 = load %struct.PickleState*, %struct.PickleState** %st140, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %110, i32 0, i32 1
  %111 = load %struct._object*, %struct._object** %PicklingError, align 8
  %112 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %112, i32 0, i32 1
  %113 = load i8*, i8** %tp_name, align 8
  %114 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call163 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %111, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i32 0, i32 0), i8* %113, %struct._object* %114)
  br label %error

if.end.164:                                       ; preds = %do.end
  br label %if.end.165

if.end.165:                                       ; preds = %if.end.164, %if.end.137
  br label %if.end.166

if.end.166:                                       ; preds = %if.end.165
  br label %if.end.167

if.end.167:                                       ; preds = %if.end.166, %if.then.117
  %115 = load %struct._object*, %struct._object** %reduce_value, align 8
  %cmp168 = icmp eq %struct._object* %115, null
  br i1 %cmp168, label %if.then.170, label %if.end.171

if.then.170:                                      ; preds = %if.end.167
  br label %error

if.end.171:                                       ; preds = %if.end.167
  %116 = load %struct._object*, %struct._object** %reduce_value, align 8
  %ob_type172 = getelementptr inbounds %struct._object, %struct._object* %116, i32 0, i32 1
  %117 = load %struct._typeobject*, %struct._typeobject** %ob_type172, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %117, i32 0, i32 19
  %118 = load i64, i64* %tp_flags, align 8
  %and = and i64 %118, 268435456
  %cmp173 = icmp ne i64 %and, 0
  br i1 %cmp173, label %if.then.175, label %if.end.177

if.then.175:                                      ; preds = %if.end.171
  %119 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %120 = load %struct._object*, %struct._object** %obj.addr, align 8
  %121 = load %struct._object*, %struct._object** %reduce_value, align 8
  %call176 = call i32 @save_global(%struct.PicklerObject* %119, %struct._object* %120, %struct._object* %121)
  store i32 %call176, i32* %status, align 4
  br label %done

if.end.177:                                       ; preds = %if.end.171
  %122 = load %struct._object*, %struct._object** %reduce_value, align 8
  %ob_type178 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type178, align 8
  %tp_flags179 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 19
  %124 = load i64, i64* %tp_flags179, align 8
  %and180 = and i64 %124, 67108864
  %cmp181 = icmp ne i64 %and180, 0
  br i1 %cmp181, label %if.end.188, label %if.then.183

if.then.183:                                      ; preds = %if.end.177
  %call186 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call186, %struct.PickleState** %st185, align 8
  %125 = load %struct.PickleState*, %struct.PickleState** %st185, align 8
  %PicklingError187 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %125, i32 0, i32 1
  %126 = load %struct._object*, %struct._object** %PicklingError187, align 8
  call void @PyErr_SetString(%struct._object* %126, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.25, i32 0, i32 0))
  br label %error

if.end.188:                                       ; preds = %if.end.177
  %127 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %128 = load %struct._object*, %struct._object** %reduce_value, align 8
  %129 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call189 = call i32 @save_reduce(%struct.PicklerObject* %127, %struct._object* %128, %struct._object* %129)
  store i32 %call189, i32* %status, align 4
  br i1 false, label %if.then.190, label %if.end.191

if.then.190:                                      ; preds = %if.end.188
  br label %error

error:                                            ; preds = %if.then.190, %if.then.183, %if.then.170, %if.else.162, %if.else.145, %if.else.112, %if.then.99, %if.then.42
  store i32 -1, i32* %status, align 4
  br label %if.end.191

if.end.191:                                       ; preds = %error, %if.end.188
  br label %done

done:                                             ; preds = %if.end.191, %if.then.175, %if.then.124, %if.then.78, %if.then.74, %if.then.70, %if.then.66, %if.then.62, %if.then.58, %if.then.54, %if.then.50, %if.then.46, %if.end.43, %if.then.31, %if.then.27, %if.then.23, %if.then.19, %if.then.15
  br label %do.body.192

do.body.192:                                      ; preds = %done
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val194, align 8
  %130 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val194, align 8
  %_value199 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %130, i32 0, i32 0
  store i8** %_value199, i8*** %volatile_data198, align 8
  store i32 0, i32* %order201, align 4
  %131 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val194, align 8
  %132 = bitcast %struct._Py_atomic_address* %131 to i8*
  %133 = load i32, i32* %order201, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %132, i32 %133)
  %134 = load i32, i32* %order201, align 4
  switch i32 %134, label %sw.default.203 [
    i32 2, label %sw.bb.202
    i32 3, label %sw.bb.202
    i32 4, label %sw.bb.202
  ]

sw.bb.202:                                        ; preds = %do.body.192, %do.body.192, %do.body.192
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.204

sw.default.203:                                   ; preds = %do.body.192
  br label %sw.epilog.204

sw.epilog.204:                                    ; preds = %sw.default.203, %sw.bb.202
  %135 = load i8**, i8*** %volatile_data198, align 8
  %136 = load volatile i8*, i8** %135, align 8
  store i8* %136, i8** %result196, align 8
  %137 = load i32, i32* %order201, align 4
  switch i32 %137, label %sw.default.206 [
    i32 1, label %sw.bb.205
    i32 3, label %sw.bb.205
    i32 4, label %sw.bb.205
  ]

sw.bb.205:                                        ; preds = %sw.epilog.204, %sw.epilog.204, %sw.epilog.204
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.207

sw.default.206:                                   ; preds = %sw.epilog.204
  br label %sw.epilog.207

sw.epilog.207:                                    ; preds = %sw.default.206, %sw.bb.205
  %138 = load i8*, i8** %result196, align 8
  store i8* %138, i8** %tmp208
  %139 = load i8*, i8** %tmp208
  %140 = bitcast i8* %139 to %struct._ts*
  %recursion_depth209 = getelementptr inbounds %struct._ts, %struct._ts* %140, i32 0, i32 4
  %141 = load i32, i32* %recursion_depth209, align 4
  %dec210 = add i32 %141, -1
  store i32 %dec210, i32* %recursion_depth209, align 4
  %142 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp211 = icmp sgt i32 %142, 100
  br i1 %cmp211, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.epilog.207
  %143 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %sub = sub i32 %143, 50
  br label %cond.end

cond.false:                                       ; preds = %sw.epilog.207
  %144 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %shr = ashr i32 %144, 2
  %mul = mul i32 3, %shr
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %mul, %cond.false ]
  %cmp213 = icmp slt i32 %dec210, %cond
  br i1 %cmp213, label %if.then.215, label %if.end.232

if.then.215:                                      ; preds = %cond.end
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val217, align 8
  %145 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val217, align 8
  %_value222 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %145, i32 0, i32 0
  store i8** %_value222, i8*** %volatile_data221, align 8
  store i32 0, i32* %order224, align 4
  %146 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val217, align 8
  %147 = bitcast %struct._Py_atomic_address* %146 to i8*
  %148 = load i32, i32* %order224, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %147, i32 %148)
  %149 = load i32, i32* %order224, align 4
  switch i32 %149, label %sw.default.226 [
    i32 2, label %sw.bb.225
    i32 3, label %sw.bb.225
    i32 4, label %sw.bb.225
  ]

sw.bb.225:                                        ; preds = %if.then.215, %if.then.215, %if.then.215
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.227

sw.default.226:                                   ; preds = %if.then.215
  br label %sw.epilog.227

sw.epilog.227:                                    ; preds = %sw.default.226, %sw.bb.225
  %150 = load i8**, i8*** %volatile_data221, align 8
  %151 = load volatile i8*, i8** %150, align 8
  store i8* %151, i8** %result219, align 8
  %152 = load i32, i32* %order224, align 4
  switch i32 %152, label %sw.default.229 [
    i32 1, label %sw.bb.228
    i32 3, label %sw.bb.228
    i32 4, label %sw.bb.228
  ]

sw.bb.228:                                        ; preds = %sw.epilog.227, %sw.epilog.227, %sw.epilog.227
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.230

sw.default.229:                                   ; preds = %sw.epilog.227
  br label %sw.epilog.230

sw.epilog.230:                                    ; preds = %sw.default.229, %sw.bb.228
  %153 = load i8*, i8** %result219, align 8
  store i8* %153, i8** %tmp231
  %154 = load i8*, i8** %tmp231
  %155 = bitcast i8* %154 to %struct._ts*
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %155, i32 0, i32 5
  store i8 0, i8* %overflowed, align 1
  br label %if.end.232

if.end.232:                                       ; preds = %sw.epilog.230, %cond.end
  br label %do.end.233

do.end.233:                                       ; preds = %if.end.232
  br label %do.body.234

do.body.234:                                      ; preds = %do.end.233
  %156 = load %struct._object*, %struct._object** %reduce_func, align 8
  store %struct._object* %156, %struct._object** %_py_xdecref_tmp, align 8
  %157 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp236 = icmp ne %struct._object* %157, null
  br i1 %cmp236, label %if.then.238, label %if.end.252

if.then.238:                                      ; preds = %do.body.234
  br label %do.body.239

do.body.239:                                      ; preds = %if.then.238
  %158 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %158, %struct._object** %_py_decref_tmp241, align 8
  %159 = load %struct._object*, %struct._object** %_py_decref_tmp241, align 8
  %ob_refcnt242 = getelementptr inbounds %struct._object, %struct._object* %159, i32 0, i32 0
  %160 = load i64, i64* %ob_refcnt242, align 8
  %dec243 = add i64 %160, -1
  store i64 %dec243, i64* %ob_refcnt242, align 8
  %cmp244 = icmp ne i64 %dec243, 0
  br i1 %cmp244, label %if.then.246, label %if.else.247

if.then.246:                                      ; preds = %do.body.239
  br label %if.end.250

if.else.247:                                      ; preds = %do.body.239
  %161 = load %struct._object*, %struct._object** %_py_decref_tmp241, align 8
  %ob_type248 = getelementptr inbounds %struct._object, %struct._object* %161, i32 0, i32 1
  %162 = load %struct._typeobject*, %struct._typeobject** %ob_type248, align 8
  %tp_dealloc249 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %162, i32 0, i32 4
  %163 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc249, align 8
  %164 = load %struct._object*, %struct._object** %_py_decref_tmp241, align 8
  call void %163(%struct._object* %164)
  br label %if.end.250

if.end.250:                                       ; preds = %if.else.247, %if.then.246
  br label %do.end.251

do.end.251:                                       ; preds = %if.end.250
  br label %if.end.252

if.end.252:                                       ; preds = %do.end.251, %do.body.234
  br label %do.end.253

do.end.253:                                       ; preds = %if.end.252
  br label %do.body.254

do.body.254:                                      ; preds = %do.end.253
  %165 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %165, %struct._object** %_py_xdecref_tmp256, align 8
  %166 = load %struct._object*, %struct._object** %_py_xdecref_tmp256, align 8
  %cmp257 = icmp ne %struct._object* %166, null
  br i1 %cmp257, label %if.then.259, label %if.end.273

if.then.259:                                      ; preds = %do.body.254
  br label %do.body.260

do.body.260:                                      ; preds = %if.then.259
  %167 = load %struct._object*, %struct._object** %_py_xdecref_tmp256, align 8
  store %struct._object* %167, %struct._object** %_py_decref_tmp262, align 8
  %168 = load %struct._object*, %struct._object** %_py_decref_tmp262, align 8
  %ob_refcnt263 = getelementptr inbounds %struct._object, %struct._object* %168, i32 0, i32 0
  %169 = load i64, i64* %ob_refcnt263, align 8
  %dec264 = add i64 %169, -1
  store i64 %dec264, i64* %ob_refcnt263, align 8
  %cmp265 = icmp ne i64 %dec264, 0
  br i1 %cmp265, label %if.then.267, label %if.else.268

if.then.267:                                      ; preds = %do.body.260
  br label %if.end.271

if.else.268:                                      ; preds = %do.body.260
  %170 = load %struct._object*, %struct._object** %_py_decref_tmp262, align 8
  %ob_type269 = getelementptr inbounds %struct._object, %struct._object* %170, i32 0, i32 1
  %171 = load %struct._typeobject*, %struct._typeobject** %ob_type269, align 8
  %tp_dealloc270 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %171, i32 0, i32 4
  %172 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc270, align 8
  %173 = load %struct._object*, %struct._object** %_py_decref_tmp262, align 8
  call void %172(%struct._object* %173)
  br label %if.end.271

if.end.271:                                       ; preds = %if.else.268, %if.then.267
  br label %do.end.272

do.end.272:                                       ; preds = %if.end.271
  br label %if.end.273

if.end.273:                                       ; preds = %do.end.272, %do.body.254
  br label %do.end.274

do.end.274:                                       ; preds = %if.end.273
  %174 = load i32, i32* %status, align 4
  store i32 %174, i32* %retval
  br label %return

return:                                           ; preds = %do.end.274, %if.then.6, %if.then
  %175 = load i32, i32* %retval
  ret i32 %175
}

declare i32 @_PyBytes_Resize(%struct._object**, i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal i32 @_Pickler_OpcodeBoundary(%struct.PicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %frame_len = alloca i64, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %framing = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 10
  %1 = load i32, i32* %framing, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 11
  %3 = load i64, i64* %frame_start, align 8
  %cmp = icmp eq i64 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 6
  %5 = load i64, i64* %output_len, align 8
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %6, i32 0, i32 11
  %7 = load i64, i64* %frame_start1, align 8
  %sub = sub i64 %5, %7
  %sub2 = sub i64 %sub, 9
  store i64 %sub2, i64* %frame_len, align 8
  %8 = load i64, i64* %frame_len, align 8
  %cmp3 = icmp sge i64 %8, 65536
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call i32 @_Pickler_CommitFrame(%struct.PicklerObject* %9)
  store i32 %call, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.4, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_ANNOTATE_MEMORY_ORDER(i8* %address, i32 %order) #3 {
entry:
  %address.addr = alloca i8*, align 8
  %order.addr = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %order, i32* %order.addr, align 4
  %0 = load i8*, i8** %address.addr, align 8
  %1 = load i32, i32* %order.addr, align 4
  switch i32 %1, label %sw.epilog [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 0, label %sw.bb.1
    i32 1, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %order.addr, align 4
  switch i32 %2, label %sw.epilog.4 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
    i32 0, label %sw.bb.3
    i32 2, label %sw.bb.3
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.bb.3:                                          ; preds = %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.epilog, %sw.bb.3, %sw.bb.2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_thread_fence(i32 %order) #3 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_signal_fence(i32 %order) #3 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @_Py_CheckRecursiveCall(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @save_pers(%struct.PicklerObject* %self, %struct._object* %obj, %struct._object* %func) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %func.addr = alloca %struct._object*, align 8
  %pid = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %persid_op = alloca i8, align 1
  %binpersid_op = alloca i8, align 1
  %pid_str = alloca %struct._object*, align 8
  %pid_ascii_bytes = alloca i8*, align 8
  %size = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object* null, %struct._object** %pid, align 8
  store i32 0, i32* %status, align 4
  store i8 80, i8* %persid_op, align 1
  store i8 81, i8* %binpersid_op, align 1
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %2 = load %struct._object*, %struct._object** %func.addr, align 8
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call %struct._object* @_Pickle_FastCall(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call, %struct._object** %pid, align 8
  %4 = load %struct._object*, %struct._object** %pid, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %pid, align 8
  %cmp1 = icmp ne %struct._object* %5, @_Py_NoneStruct
  br i1 %cmp1, label %if.then.2, label %if.end.34

if.then.2:                                        ; preds = %if.end
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %6, i32 0, i32 9
  %7 = load i32, i32* %bin, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then.2
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %9 = load %struct._object*, %struct._object** %pid, align 8
  %call4 = call i32 @save(%struct.PicklerObject* %8, %struct._object* %9, i32 1)
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.3
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call6 = call i64 @_Pickler_Write(%struct.PicklerObject* %10, i8* %binpersid_op, i64 1)
  %cmp7 = icmp slt i64 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %lor.lhs.false, %if.then.3
  br label %error

if.end.9:                                         ; preds = %lor.lhs.false
  br label %if.end.33

if.else:                                          ; preds = %if.then.2
  store %struct._object* null, %struct._object** %pid_str, align 8
  %11 = load %struct._object*, %struct._object** %pid, align 8
  %call10 = call %struct._object* @PyObject_Str(%struct._object* %11)
  store %struct._object* %call10, %struct._object** %pid_str, align 8
  %12 = load %struct._object*, %struct._object** %pid_str, align 8
  %cmp11 = icmp eq %struct._object* %12, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.else
  br label %error

if.end.13:                                        ; preds = %if.else
  %13 = load %struct._object*, %struct._object** %pid_str, align 8
  %call14 = call i8* @PyUnicode_AsUTF8AndSize(%struct._object* %13, i64* %size)
  store i8* %call14, i8** %pid_ascii_bytes, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.13
  %14 = load %struct._object*, %struct._object** %pid_str, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt15, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt15, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body
  br label %if.end.19

if.else.18:                                       ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %21 = load i8*, i8** %pid_ascii_bytes, align 8
  %cmp20 = icmp eq i8* %21, null
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %do.end
  br label %error

if.end.22:                                        ; preds = %do.end
  %22 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call23 = call i64 @_Pickler_Write(%struct.PicklerObject* %22, i8* %persid_op, i64 1)
  %cmp24 = icmp slt i64 %call23, 0
  br i1 %cmp24, label %if.then.31, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %if.end.22
  %23 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %24 = load i8*, i8** %pid_ascii_bytes, align 8
  %25 = load i64, i64* %size, align 8
  %call26 = call i64 @_Pickler_Write(%struct.PicklerObject* %23, i8* %24, i64 %25)
  %cmp27 = icmp slt i64 %call26, 0
  br i1 %cmp27, label %if.then.31, label %lor.lhs.false.28

lor.lhs.false.28:                                 ; preds = %lor.lhs.false.25
  %26 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call29 = call i64 @_Pickler_Write(%struct.PicklerObject* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0), i64 1)
  %cmp30 = icmp slt i64 %call29, 0
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %lor.lhs.false.28, %lor.lhs.false.25, %if.end.22
  br label %error

if.end.32:                                        ; preds = %lor.lhs.false.28
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end.9
  store i32 1, i32* %status, align 4
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end
  br i1 false, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.34
  br label %error

error:                                            ; preds = %if.then.35, %if.then.31, %if.then.21, %if.then.12, %if.then.8
  store i32 -1, i32* %status, align 4
  br label %if.end.36

if.end.36:                                        ; preds = %error, %if.end.34
  br label %do.body.37

do.body.37:                                       ; preds = %if.end.36
  %27 = load %struct._object*, %struct._object** %pid, align 8
  store %struct._object* %27, %struct._object** %_py_xdecref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp38 = icmp ne %struct._object* %28, null
  br i1 %cmp38, label %if.then.39, label %if.end.51

if.then.39:                                       ; preds = %do.body.37
  br label %do.body.40

do.body.40:                                       ; preds = %if.then.39
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp41, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %31, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %34(%struct._object* %35)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %if.end.51

if.end.51:                                        ; preds = %do.end.50, %do.body.37
  br label %do.end.52

do.end.52:                                        ; preds = %if.end.51
  %36 = load i32, i32* %status, align 4
  store i32 %36, i32* %retval
  br label %return

return:                                           ; preds = %do.end.52, %if.then
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal i32 @save_none(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %none_op = alloca i8, align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8 78, i8* %none_op, align 1
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call i64 @_Pickler_Write(%struct.PicklerObject* %0, i8* %none_op, i64 1)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %1 = load i32, i32* %retval
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define internal i32 @save_bool(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %bool_op = alloca i8, align 1
  %bool_str = alloca i8*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 8
  %1 = load i32, i32* %proto, align 4
  %cmp = icmp sge i32 %1, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp1 = icmp eq %struct._object* %2, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  %cond = select i1 %cmp1, i32 -120, i32 -119
  %conv = trunc i32 %cond to i8
  store i8 %conv, i8* %bool_op, align 1
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call i64 @_Pickler_Write(%struct.PicklerObject* %3, i8* %bool_op, i64 1)
  %cmp2 = icmp slt i64 %call, 0
  br i1 %cmp2, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.14

if.else:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp5 = icmp eq %struct._object* %4, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  %cond7 = select i1 %cmp5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0)
  store i8* %cond7, i8** %bool_str, align 8
  %5 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %6 = load i8*, i8** %bool_str, align 8
  %7 = load i8*, i8** %bool_str, align 8
  %call8 = call i64 @strlen(i8* %7) #7
  %call9 = call i64 @_Pickler_Write(%struct.PicklerObject* %5, i8* %6, i64 %call8)
  %cmp10 = icmp slt i64 %call9, 0
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.else
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then.12, %if.then.4
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @save_long(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %repr = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %val = alloca i64, align 8
  %status = alloca i32, align 4
  %long_op = alloca i8, align 1
  %pdata = alloca [32 x i8], align 16
  %len = alloca i64, align 8
  %nbits = alloca i64, align 8
  %nbytes = alloca i64, align 8
  %pdata50 = alloca i8*, align 8
  %header = alloca [5 x i8], align 1
  %i = alloca i32, align 4
  %sign = alloca i32, align 4
  %string = alloca i8*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* null, %struct._object** %repr, align 8
  store i32 0, i32* %status, align 4
  store i8 76, i8* %long_op, align 1
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i64 @PyLong_AsLong(%struct._object* %0)
  store i64 %call, i64* %val, align 8
  %1 = load i64, i64* %val, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  call void @PyErr_Clear()
  br label %if.end.46

if.else:                                          ; preds = %land.lhs.true, %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 9
  %3 = load i32, i32* %bin, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %land.lhs.true.3, label %if.end.45

land.lhs.true.3:                                  ; preds = %if.else
  %4 = load i64, i64* %val, align 8
  %cmp4 = icmp sle i64 %4, 2147483647
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.45

land.lhs.true.5:                                  ; preds = %land.lhs.true.3
  %5 = load i64, i64* %val, align 8
  %cmp6 = icmp sge i64 %5, -2147483648
  br i1 %cmp6, label %if.then.7, label %if.end.45

if.then.7:                                        ; preds = %land.lhs.true.5
  store i64 0, i64* %len, align 8
  %6 = load i64, i64* %val, align 8
  %and = and i64 %6, 255
  %conv = trunc i64 %and to i8
  %arrayidx = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 1
  store i8 %conv, i8* %arrayidx, align 1
  %7 = load i64, i64* %val, align 8
  %shr = ashr i64 %7, 8
  %and8 = and i64 %shr, 255
  %conv9 = trunc i64 %and8 to i8
  %arrayidx10 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 2
  store i8 %conv9, i8* %arrayidx10, align 1
  %8 = load i64, i64* %val, align 8
  %shr11 = ashr i64 %8, 16
  %and12 = and i64 %shr11, 255
  %conv13 = trunc i64 %and12 to i8
  %arrayidx14 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 3
  store i8 %conv13, i8* %arrayidx14, align 1
  %9 = load i64, i64* %val, align 8
  %shr15 = ashr i64 %9, 24
  %and16 = and i64 %shr15, 255
  %conv17 = trunc i64 %and16 to i8
  %arrayidx18 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 4
  store i8 %conv17, i8* %arrayidx18, align 1
  %arrayidx19 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 4
  %10 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %10 to i32
  %cmp21 = icmp eq i32 %conv20, 0
  br i1 %cmp21, label %land.lhs.true.23, label %if.else.37

land.lhs.true.23:                                 ; preds = %if.then.7
  %arrayidx24 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 3
  %11 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %11 to i32
  %cmp26 = icmp eq i32 %conv25, 0
  br i1 %cmp26, label %if.then.28, label %if.else.37

if.then.28:                                       ; preds = %land.lhs.true.23
  %arrayidx29 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 2
  %12 = load i8, i8* %arrayidx29, align 1
  %conv30 = sext i8 %12 to i32
  %cmp31 = icmp eq i32 %conv30, 0
  br i1 %cmp31, label %if.then.33, label %if.else.35

if.then.33:                                       ; preds = %if.then.28
  %arrayidx34 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 0
  store i8 75, i8* %arrayidx34, align 1
  store i64 2, i64* %len, align 8
  br label %if.end

if.else.35:                                       ; preds = %if.then.28
  %arrayidx36 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 0
  store i8 77, i8* %arrayidx36, align 1
  store i64 3, i64* %len, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.35, %if.then.33
  br label %if.end.39

if.else.37:                                       ; preds = %land.lhs.true.23, %if.then.7
  %arrayidx38 = getelementptr [32 x i8], [32 x i8]* %pdata, i32 0, i64 0
  store i8 74, i8* %arrayidx38, align 1
  store i64 5, i64* %len, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.37, %if.end
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %pdata, i32 0, i32 0
  %14 = load i64, i64* %len, align 8
  %call40 = call i64 @_Pickler_Write(%struct.PicklerObject* %13, i8* %arraydecay, i64 %14)
  %cmp41 = icmp slt i64 %call40, 0
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.39
  store i32 -1, i32* %retval
  br label %return

if.end.44:                                        ; preds = %if.end.39
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %land.lhs.true.5, %land.lhs.true.3, %if.else
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.then
  %15 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %15, i32 0, i32 8
  %16 = load i32, i32* %proto, align 4
  %cmp47 = icmp sge i32 %16, 2
  br i1 %cmp47, label %if.then.49, label %if.else.133

if.then.49:                                       ; preds = %if.end.46
  %17 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call51 = call i32 @_PyLong_Sign(%struct._object* %17)
  store i32 %call51, i32* %sign, align 4
  %18 = load i32, i32* %sign, align 4
  %cmp52 = icmp eq i32 %18, 0
  br i1 %cmp52, label %if.then.54, label %if.end.63

if.then.54:                                       ; preds = %if.then.49
  %arrayidx55 = getelementptr [5 x i8], [5 x i8]* %header, i32 0, i64 0
  store i8 -118, i8* %arrayidx55, align 1
  %arrayidx56 = getelementptr [5 x i8], [5 x i8]* %header, i32 0, i64 1
  store i8 0, i8* %arrayidx56, align 1
  %19 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay57 = getelementptr inbounds [5 x i8], [5 x i8]* %header, i32 0, i32 0
  %call58 = call i64 @_Pickler_Write(%struct.PicklerObject* %19, i8* %arraydecay57, i64 2)
  %cmp59 = icmp slt i64 %call58, 0
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.then.54
  br label %error

if.end.62:                                        ; preds = %if.then.54
  store i32 0, i32* %retval
  br label %return

if.end.63:                                        ; preds = %if.then.49
  %20 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call64 = call i64 @_PyLong_NumBits(%struct._object* %20)
  store i64 %call64, i64* %nbits, align 8
  %21 = load i64, i64* %nbits, align 8
  %cmp65 = icmp eq i64 %21, -1
  br i1 %cmp65, label %land.lhs.true.67, label %if.end.71

land.lhs.true.67:                                 ; preds = %if.end.63
  %call68 = call %struct._object* @PyErr_Occurred()
  %tobool69 = icmp ne %struct._object* %call68, null
  br i1 %tobool69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %land.lhs.true.67
  br label %error

if.end.71:                                        ; preds = %land.lhs.true.67, %if.end.63
  %22 = load i64, i64* %nbits, align 8
  %shr72 = lshr i64 %22, 3
  %add = add i64 %shr72, 1
  store i64 %add, i64* %nbytes, align 8
  %23 = load i64, i64* %nbytes, align 8
  %cmp73 = icmp ugt i64 %23, 2147483647
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.end.71
  %24 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %24, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i32 0, i32 0))
  br label %error

if.end.76:                                        ; preds = %if.end.71
  %25 = load i64, i64* %nbytes, align 8
  %call77 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %25)
  store %struct._object* %call77, %struct._object** %repr, align 8
  %26 = load %struct._object*, %struct._object** %repr, align 8
  %cmp78 = icmp eq %struct._object* %26, null
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.end.76
  br label %error

if.end.81:                                        ; preds = %if.end.76
  %27 = load %struct._object*, %struct._object** %repr, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %28, i32 0, i32 2
  %arraydecay82 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  store i8* %arraydecay82, i8** %pdata50, align 8
  %29 = load %struct._object*, %struct._object** %obj.addr, align 8
  %30 = bitcast %struct._object* %29 to %struct._longobject*
  %31 = load i8*, i8** %pdata50, align 8
  %32 = load i64, i64* %nbytes, align 8
  %call83 = call i32 @_PyLong_AsByteArray(%struct._longobject* %30, i8* %31, i64 %32, i32 1, i32 1)
  store i32 %call83, i32* %i, align 4
  %33 = load i32, i32* %i, align 4
  %cmp84 = icmp slt i32 %33, 0
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %if.end.81
  br label %error

if.end.87:                                        ; preds = %if.end.81
  %34 = load i32, i32* %sign, align 4
  %cmp88 = icmp slt i32 %34, 0
  br i1 %cmp88, label %land.lhs.true.90, label %if.end.106

land.lhs.true.90:                                 ; preds = %if.end.87
  %35 = load i64, i64* %nbytes, align 8
  %cmp91 = icmp ugt i64 %35, 1
  br i1 %cmp91, label %land.lhs.true.93, label %if.end.106

land.lhs.true.93:                                 ; preds = %land.lhs.true.90
  %36 = load i64, i64* %nbytes, align 8
  %sub = sub i64 %36, 1
  %37 = load i8*, i8** %pdata50, align 8
  %arrayidx94 = getelementptr i8, i8* %37, i64 %sub
  %38 = load i8, i8* %arrayidx94, align 1
  %conv95 = zext i8 %38 to i32
  %cmp96 = icmp eq i32 %conv95, 255
  br i1 %cmp96, label %land.lhs.true.98, label %if.end.106

land.lhs.true.98:                                 ; preds = %land.lhs.true.93
  %39 = load i64, i64* %nbytes, align 8
  %sub99 = sub i64 %39, 2
  %40 = load i8*, i8** %pdata50, align 8
  %arrayidx100 = getelementptr i8, i8* %40, i64 %sub99
  %41 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %41 to i32
  %and102 = and i32 %conv101, 128
  %cmp103 = icmp ne i32 %and102, 0
  br i1 %cmp103, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %land.lhs.true.98
  %42 = load i64, i64* %nbytes, align 8
  %dec = add i64 %42, -1
  store i64 %dec, i64* %nbytes, align 8
  br label %if.end.106

if.end.106:                                       ; preds = %if.then.105, %land.lhs.true.98, %land.lhs.true.93, %land.lhs.true.90, %if.end.87
  %43 = load i64, i64* %nbytes, align 8
  %cmp107 = icmp ult i64 %43, 256
  br i1 %cmp107, label %if.then.109, label %if.else.113

if.then.109:                                      ; preds = %if.end.106
  %arrayidx110 = getelementptr [5 x i8], [5 x i8]* %header, i32 0, i64 0
  store i8 -118, i8* %arrayidx110, align 1
  %44 = load i64, i64* %nbytes, align 8
  %conv111 = trunc i64 %44 to i8
  %arrayidx112 = getelementptr [5 x i8], [5 x i8]* %header, i32 0, i64 1
  store i8 %conv111, i8* %arrayidx112, align 1
  store i64 2, i64* %size, align 8
  br label %if.end.121

if.else.113:                                      ; preds = %if.end.106
  %arrayidx114 = getelementptr [5 x i8], [5 x i8]* %header, i32 0, i64 0
  store i8 -117, i8* %arrayidx114, align 1
  %45 = load i64, i64* %nbytes, align 8
  store i64 %45, i64* %size, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.113
  %46 = load i32, i32* %i, align 4
  %cmp115 = icmp slt i32 %46, 5
  br i1 %cmp115, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %47 = load i64, i64* %size, align 8
  %and117 = and i64 %47, 255
  %conv118 = trunc i64 %and117 to i8
  %48 = load i32, i32* %i, align 4
  %idxprom = sext i32 %48 to i64
  %arrayidx119 = getelementptr [5 x i8], [5 x i8]* %header, i32 0, i64 %idxprom
  store i8 %conv118, i8* %arrayidx119, align 1
  %49 = load i64, i64* %size, align 8
  %shr120 = ashr i64 %49, 8
  store i64 %shr120, i64* %size, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %50 = load i32, i32* %i, align 4
  %inc = add i32 %50, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i64 5, i64* %size, align 8
  br label %if.end.121

if.end.121:                                       ; preds = %for.end, %if.then.109
  %51 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay122 = getelementptr inbounds [5 x i8], [5 x i8]* %header, i32 0, i32 0
  %52 = load i64, i64* %size, align 8
  %call123 = call i64 @_Pickler_Write(%struct.PicklerObject* %51, i8* %arraydecay122, i64 %52)
  %cmp124 = icmp slt i64 %call123, 0
  br i1 %cmp124, label %if.then.131, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.121
  %53 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %54 = load i8*, i8** %pdata50, align 8
  %55 = load i64, i64* %nbytes, align 8
  %conv126 = trunc i64 %55 to i32
  %conv127 = sext i32 %conv126 to i64
  %call128 = call i64 @_Pickler_Write(%struct.PicklerObject* %53, i8* %54, i64 %conv127)
  %cmp129 = icmp slt i64 %call128, 0
  br i1 %cmp129, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %lor.lhs.false, %if.end.121
  br label %error

if.end.132:                                       ; preds = %lor.lhs.false
  br label %if.end.157

if.else.133:                                      ; preds = %if.end.46
  %56 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call134 = call %struct._object* @PyObject_Repr(%struct._object* %56)
  store %struct._object* %call134, %struct._object** %repr, align 8
  %57 = load %struct._object*, %struct._object** %repr, align 8
  %cmp135 = icmp eq %struct._object* %57, null
  br i1 %cmp135, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %if.else.133
  br label %error

if.end.138:                                       ; preds = %if.else.133
  %58 = load %struct._object*, %struct._object** %repr, align 8
  %call139 = call i8* @PyUnicode_AsUTF8AndSize(%struct._object* %58, i64* %size)
  store i8* %call139, i8** %string, align 8
  %59 = load i8*, i8** %string, align 8
  %cmp140 = icmp eq i8* %59, null
  br i1 %cmp140, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %if.end.138
  br label %error

if.end.143:                                       ; preds = %if.end.138
  %60 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call144 = call i64 @_Pickler_Write(%struct.PicklerObject* %60, i8* %long_op, i64 1)
  %cmp145 = icmp slt i64 %call144, 0
  br i1 %cmp145, label %if.then.155, label %lor.lhs.false.147

lor.lhs.false.147:                                ; preds = %if.end.143
  %61 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %62 = load i8*, i8** %string, align 8
  %63 = load i64, i64* %size, align 8
  %call148 = call i64 @_Pickler_Write(%struct.PicklerObject* %61, i8* %62, i64 %63)
  %cmp149 = icmp slt i64 %call148, 0
  br i1 %cmp149, label %if.then.155, label %lor.lhs.false.151

lor.lhs.false.151:                                ; preds = %lor.lhs.false.147
  %64 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call152 = call i64 @_Pickler_Write(%struct.PicklerObject* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i64 2)
  %cmp153 = icmp slt i64 %call152, 0
  br i1 %cmp153, label %if.then.155, label %if.end.156

if.then.155:                                      ; preds = %lor.lhs.false.151, %lor.lhs.false.147, %if.end.143
  br label %error

if.end.156:                                       ; preds = %lor.lhs.false.151
  br label %if.end.157

if.end.157:                                       ; preds = %if.end.156, %if.end.132
  br i1 false, label %if.then.158, label %if.end.159

if.then.158:                                      ; preds = %if.end.157
  br label %error

error:                                            ; preds = %if.then.158, %if.then.155, %if.then.142, %if.then.137, %if.then.131, %if.then.86, %if.then.80, %if.then.75, %if.then.70, %if.then.61
  store i32 -1, i32* %status, align 4
  br label %if.end.159

if.end.159:                                       ; preds = %error, %if.end.157
  br label %do.body

do.body:                                          ; preds = %if.end.159
  %65 = load %struct._object*, %struct._object** %repr, align 8
  store %struct._object* %65, %struct._object** %_py_xdecref_tmp, align 8
  %66 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp160 = icmp ne %struct._object* %66, null
  br i1 %cmp160, label %if.then.162, label %if.end.170

if.then.162:                                      ; preds = %do.body
  br label %do.body.163

do.body.163:                                      ; preds = %if.then.162
  %67 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %67, %struct._object** %_py_decref_tmp, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0
  %69 = load i64, i64* %ob_refcnt, align 8
  %dec164 = add i64 %69, -1
  store i64 %dec164, i64* %ob_refcnt, align 8
  %cmp165 = icmp ne i64 %dec164, 0
  br i1 %cmp165, label %if.then.167, label %if.else.168

if.then.167:                                      ; preds = %do.body.163
  br label %if.end.169

if.else.168:                                      ; preds = %do.body.163
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %72(%struct._object* %73)
  br label %if.end.169

if.end.169:                                       ; preds = %if.else.168, %if.then.167
  br label %do.end

do.end:                                           ; preds = %if.end.169
  br label %if.end.170

if.end.170:                                       ; preds = %do.end, %do.body
  br label %do.end.171

do.end.171:                                       ; preds = %if.end.170
  %74 = load i32, i32* %status, align 4
  store i32 %74, i32* %retval
  br label %return

return:                                           ; preds = %do.end.171, %if.end.62, %if.end.44, %if.then.43
  %75 = load i32, i32* %retval
  ret i32 %75
}

; Function Attrs: nounwind uwtable
define internal i32 @save_float(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %x = alloca double, align 8
  %pdata = alloca [9 x i8], align 1
  %result = alloca i32, align 4
  %buf = alloca i8*, align 8
  %op = alloca i8, align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyFloatObject*
  %ob_fval = getelementptr inbounds %struct.PyFloatObject, %struct.PyFloatObject* %1, i32 0, i32 1
  %2 = load double, double* %ob_fval, align 8
  store double %2, double* %x, align 8
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %3, i32 0, i32 9
  %4 = load i32, i32* %bin, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr [9 x i8], [9 x i8]* %pdata, i32 0, i64 0
  store i8 71, i8* %arrayidx, align 1
  %5 = load double, double* %x, align 8
  %arrayidx1 = getelementptr [9 x i8], [9 x i8]* %pdata, i32 0, i64 1
  %call = call i32 @_PyFloat_Pack8(double %5, i8* %arrayidx1, i32 0)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay = getelementptr inbounds [9 x i8], [9 x i8]* %pdata, i32 0, i32 0
  %call3 = call i64 @_Pickler_Write(%struct.PicklerObject* %6, i8* %arraydecay, i64 9)
  %cmp4 = icmp slt i64 %call3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  br label %if.end.25

if.else:                                          ; preds = %entry
  store i32 -1, i32* %result, align 4
  store i8* null, i8** %buf, align 8
  store i8 70, i8* %op, align 1
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call7 = call i64 @_Pickler_Write(%struct.PicklerObject* %7, i8* %op, i64 1)
  %cmp8 = icmp slt i64 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.else
  br label %done

if.end.10:                                        ; preds = %if.else
  %8 = load double, double* %x, align 8
  %call11 = call i8* @PyOS_double_to_string(double %8, i8 signext 103, i32 17, i32 0, i32* null)
  store i8* %call11, i8** %buf, align 8
  %9 = load i8*, i8** %buf, align 8
  %tobool12 = icmp ne i8* %9, null
  br i1 %tobool12, label %if.end.15, label %if.then.13

if.then.13:                                       ; preds = %if.end.10
  %call14 = call %struct._object* @PyErr_NoMemory()
  br label %done

if.end.15:                                        ; preds = %if.end.10
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %11 = load i8*, i8** %buf, align 8
  %12 = load i8*, i8** %buf, align 8
  %call16 = call i64 @strlen(i8* %12) #7
  %call17 = call i64 @_Pickler_Write(%struct.PicklerObject* %10, i8* %11, i64 %call16)
  %cmp18 = icmp slt i64 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.15
  br label %done

if.end.20:                                        ; preds = %if.end.15
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call21 = call i64 @_Pickler_Write(%struct.PicklerObject* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0), i64 1)
  %cmp22 = icmp slt i64 %call21, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.20
  br label %done

if.end.24:                                        ; preds = %if.end.20
  store i32 0, i32* %result, align 4
  br label %done

done:                                             ; preds = %if.end.24, %if.then.23, %if.then.19, %if.then.13, %if.then.9
  %14 = load i8*, i8** %buf, align 8
  call void @PyMem_Free(i8* %14)
  %15 = load i32, i32* %result, align 4
  store i32 %15, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.6
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.25, %done, %if.then.5, %if.then.2
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal i64* @PyMemoTable_Get(%struct.PyMemoTable* %self, %struct._object* %key) #0 {
entry:
  %retval = alloca i64*, align 8
  %self.addr = alloca %struct.PyMemoTable*, align 8
  %key.addr = alloca %struct._object*, align 8
  %entry1 = alloca %struct.PyMemoEntry*, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  %0 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %key.addr, align 8
  %call = call %struct.PyMemoEntry* @_PyMemoTable_Lookup(%struct.PyMemoTable* %0, %struct._object* %1)
  store %struct.PyMemoEntry* %call, %struct.PyMemoEntry** %entry1, align 8
  %2 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_key = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %2, i32 0, i32 0
  %3 = load %struct._object*, %struct._object** %me_key, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64* null, i64** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_value = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %4, i32 0, i32 1
  store i64* %me_value, i64** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i64*, i64** %retval
  ret i64* %5
}

; Function Attrs: nounwind uwtable
define internal i32 @memo_get(%struct.PicklerObject* %self, %struct._object* %key) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %key.addr = alloca %struct._object*, align 8
  %value = alloca i64*, align 8
  %pdata = alloca [30 x i8], align 16
  %len = alloca i64, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 1
  %1 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %2 = load %struct._object*, %struct._object** %key.addr, align 8
  %call = call i64* @PyMemoTable_Get(%struct.PyMemoTable* %1, %struct._object* %2)
  store i64* %call, i64** %value, align 8
  %3 = load i64*, i64** %value, align 8
  %cmp = icmp eq i64* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %5 = load %struct._object*, %struct._object** %key.addr, align 8
  call void @PyErr_SetObject(%struct._object* %4, %struct._object* %5)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %6, i32 0, i32 9
  %7 = load i32, i32* %bin, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.else, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %arrayidx = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 0
  store i8 103, i8* %arrayidx, align 1
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %pdata, i32 0, i32 0
  %add.ptr = getelementptr i8, i8* %arraydecay, i64 1
  %8 = load i64*, i64** %value, align 8
  %9 = load i64, i64* %8, align 8
  %call2 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %add.ptr, i64 29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0), i64 %9)
  %arraydecay3 = getelementptr inbounds [30 x i8], [30 x i8]* %pdata, i32 0, i32 0
  %call4 = call i64 @strlen(i8* %arraydecay3) #7
  store i64 %call4, i64* %len, align 8
  br label %if.end.32

if.else:                                          ; preds = %if.end
  %10 = load i64*, i64** %value, align 8
  %11 = load i64, i64* %10, align 8
  %cmp5 = icmp slt i64 %11, 256
  br i1 %cmp5, label %if.then.6, label %if.else.9

if.then.6:                                        ; preds = %if.else
  %arrayidx7 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 0
  store i8 104, i8* %arrayidx7, align 1
  %12 = load i64*, i64** %value, align 8
  %13 = load i64, i64* %12, align 8
  %and = and i64 %13, 255
  %conv = trunc i64 %and to i8
  %arrayidx8 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 1
  store i8 %conv, i8* %arrayidx8, align 1
  store i64 2, i64* %len, align 8
  br label %if.end.31

if.else.9:                                        ; preds = %if.else
  %14 = load i64*, i64** %value, align 8
  %15 = load i64, i64* %14, align 8
  %cmp10 = icmp sle i64 %15, 4294967295
  br i1 %cmp10, label %if.then.12, label %if.else.28

if.then.12:                                       ; preds = %if.else.9
  %arrayidx13 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 0
  store i8 106, i8* %arrayidx13, align 1
  %16 = load i64*, i64** %value, align 8
  %17 = load i64, i64* %16, align 8
  %and14 = and i64 %17, 255
  %conv15 = trunc i64 %and14 to i8
  %arrayidx16 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 1
  store i8 %conv15, i8* %arrayidx16, align 1
  %18 = load i64*, i64** %value, align 8
  %19 = load i64, i64* %18, align 8
  %shr = ashr i64 %19, 8
  %and17 = and i64 %shr, 255
  %conv18 = trunc i64 %and17 to i8
  %arrayidx19 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 2
  store i8 %conv18, i8* %arrayidx19, align 1
  %20 = load i64*, i64** %value, align 8
  %21 = load i64, i64* %20, align 8
  %shr20 = ashr i64 %21, 16
  %and21 = and i64 %shr20, 255
  %conv22 = trunc i64 %and21 to i8
  %arrayidx23 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 3
  store i8 %conv22, i8* %arrayidx23, align 1
  %22 = load i64*, i64** %value, align 8
  %23 = load i64, i64* %22, align 8
  %shr24 = ashr i64 %23, 24
  %and25 = and i64 %shr24, 255
  %conv26 = trunc i64 %and25 to i8
  %arrayidx27 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 4
  store i8 %conv26, i8* %arrayidx27, align 1
  store i64 5, i64* %len, align 8
  br label %if.end.30

if.else.28:                                       ; preds = %if.else.9
  %call29 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call29, %struct.PickleState** %st, align 8
  %24 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %24, i32 0, i32 1
  %25 = load %struct._object*, %struct._object** %PicklingError, align 8
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.32, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.then.12
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.6
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.then.1
  %26 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay33 = getelementptr inbounds [30 x i8], [30 x i8]* %pdata, i32 0, i32 0
  %27 = load i64, i64* %len, align 8
  %call34 = call i64 @_Pickler_Write(%struct.PicklerObject* %26, i8* %arraydecay33, i64 %27)
  %cmp35 = icmp slt i64 %call34, 0
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.32
  store i32 -1, i32* %retval
  br label %return

if.end.38:                                        ; preds = %if.end.32
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.38, %if.then.37, %if.else.28, %if.then
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @save_bytes(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %reduce_value = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %st = alloca %struct.PickleState*, align 8
  %unicode_str = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %header = alloca [9 x i8], align 1
  %len = alloca i64, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 8
  %1 = load i32, i32* %proto, align 4
  %cmp = icmp slt i32 %1, 3
  br i1 %cmp, label %if.then, label %if.else.30

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %reduce_value, align 8
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.then
  %call = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyBytes_Type, i32 0, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %reduce_value, align 8
  br label %if.end.14

if.else:                                          ; preds = %if.then
  %call3 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call3, %struct.PickleState** %st, align 8
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %6, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %7 = load %struct._object*, %struct._object** %obj.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyVarObject*
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1
  %9 = load i64, i64* %ob_size4, align 8
  %call5 = call %struct._object* @PyUnicode_DecodeLatin1(i8* %arraydecay, i64 %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0))
  store %struct._object* %call5, %struct._object** %unicode_str, align 8
  %10 = load %struct._object*, %struct._object** %unicode_str, align 8
  %cmp6 = icmp eq %struct._object* %10, null
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  %11 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %codecs_encode = getelementptr inbounds %struct.PickleState, %struct.PickleState* %11, i32 0, i32 11
  %12 = load %struct._object*, %struct._object** %codecs_encode, align 8
  %13 = load %struct._object*, %struct._object** %unicode_str, align 8
  %call8 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @save_bytes.PyId_latin1)
  %call9 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i32 0, i32 0), %struct._object* %12, %struct._object* %13, %struct._object* %call8)
  store %struct._object* %call9, %struct._object** %reduce_value, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %14 = load %struct._object*, %struct._object** %unicode_str, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %do.body
  br label %if.end.13

if.else.12:                                       ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.12, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %if.end.14

if.end.14:                                        ; preds = %do.end, %if.then.2
  %21 = load %struct._object*, %struct._object** %reduce_value, align 8
  %cmp15 = icmp eq %struct._object* %21, null
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.14
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.14
  %22 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %23 = load %struct._object*, %struct._object** %reduce_value, align 8
  %24 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call18 = call i32 @save_reduce(%struct.PicklerObject* %22, %struct._object* %23, %struct._object* %24)
  store i32 %call18, i32* %status, align 4
  br label %do.body.19

do.body.19:                                       ; preds = %if.end.17
  %25 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp20, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt21, align 8
  %dec22 = add i64 %27, -1
  store i64 %dec22, i64* %ob_refcnt21, align 8
  %cmp23 = icmp ne i64 %dec22, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.19
  br label %if.end.28

if.else.25:                                       ; preds = %do.body.19
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  call void %30(%struct._object* %31)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  %32 = load i32, i32* %status, align 4
  store i32 %32, i32* %retval
  br label %return

if.else.30:                                       ; preds = %entry
  %33 = load %struct._object*, %struct._object** %obj.addr, align 8
  %34 = bitcast %struct._object* %33 to %struct.PyVarObject*
  %ob_size31 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %34, i32 0, i32 1
  %35 = load i64, i64* %ob_size31, align 8
  store i64 %35, i64* %size, align 8
  %36 = load i64, i64* %size, align 8
  %cmp32 = icmp slt i64 %36, 0
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.else.30
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.else.30
  %37 = load i64, i64* %size, align 8
  %cmp35 = icmp sle i64 %37, 255
  br i1 %cmp35, label %if.then.36, label %if.else.38

if.then.36:                                       ; preds = %if.end.34
  %arrayidx = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 0
  store i8 67, i8* %arrayidx, align 1
  %38 = load i64, i64* %size, align 8
  %conv = trunc i64 %38 to i8
  %arrayidx37 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 1
  store i8 %conv, i8* %arrayidx37, align 1
  store i64 2, i64* %len, align 8
  br label %if.end.66

if.else.38:                                       ; preds = %if.end.34
  %39 = load i64, i64* %size, align 8
  %cmp39 = icmp sle i64 %39, 4294967295
  br i1 %cmp39, label %if.then.41, label %if.else.56

if.then.41:                                       ; preds = %if.else.38
  %arrayidx42 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 0
  store i8 66, i8* %arrayidx42, align 1
  %40 = load i64, i64* %size, align 8
  %and = and i64 %40, 255
  %conv43 = trunc i64 %and to i8
  %arrayidx44 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 1
  store i8 %conv43, i8* %arrayidx44, align 1
  %41 = load i64, i64* %size, align 8
  %shr = ashr i64 %41, 8
  %and45 = and i64 %shr, 255
  %conv46 = trunc i64 %and45 to i8
  %arrayidx47 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 2
  store i8 %conv46, i8* %arrayidx47, align 1
  %42 = load i64, i64* %size, align 8
  %shr48 = ashr i64 %42, 16
  %and49 = and i64 %shr48, 255
  %conv50 = trunc i64 %and49 to i8
  %arrayidx51 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 3
  store i8 %conv50, i8* %arrayidx51, align 1
  %43 = load i64, i64* %size, align 8
  %shr52 = ashr i64 %43, 24
  %and53 = and i64 %shr52, 255
  %conv54 = trunc i64 %and53 to i8
  %arrayidx55 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 4
  store i8 %conv54, i8* %arrayidx55, align 1
  store i64 5, i64* %len, align 8
  br label %if.end.65

if.else.56:                                       ; preds = %if.else.38
  %44 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto57 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %44, i32 0, i32 8
  %45 = load i32, i32* %proto57, align 4
  %cmp58 = icmp sge i32 %45, 4
  br i1 %cmp58, label %if.then.60, label %if.else.63

if.then.60:                                       ; preds = %if.else.56
  %arrayidx61 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 0
  store i8 -114, i8* %arrayidx61, align 1
  %arraydecay62 = getelementptr inbounds [9 x i8], [9 x i8]* %header, i32 0, i32 0
  %add.ptr = getelementptr i8, i8* %arraydecay62, i64 1
  %46 = load i64, i64* %size, align 8
  call void @_write_size64(i8* %add.ptr, i64 %46)
  store i64 9, i64* %len, align 8
  br label %if.end.64

if.else.63:                                       ; preds = %if.else.56
  %47 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %47, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.37, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.64:                                        ; preds = %if.then.60
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.then.41
  br label %if.end.66

if.end.66:                                        ; preds = %if.end.65, %if.then.36
  %48 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay67 = getelementptr inbounds [9 x i8], [9 x i8]* %header, i32 0, i32 0
  %49 = load i64, i64* %len, align 8
  %call68 = call i64 @_Pickler_Write(%struct.PicklerObject* %48, i8* %arraydecay67, i64 %49)
  %cmp69 = icmp slt i64 %call68, 0
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.66
  store i32 -1, i32* %retval
  br label %return

if.end.72:                                        ; preds = %if.end.66
  %50 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %51 = load %struct._object*, %struct._object** %obj.addr, align 8
  %52 = bitcast %struct._object* %51 to %struct.PyBytesObject*
  %ob_sval73 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %52, i32 0, i32 2
  %arraydecay74 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval73, i32 0, i32 0
  %53 = load i64, i64* %size, align 8
  %call75 = call i64 @_Pickler_Write(%struct.PicklerObject* %50, i8* %arraydecay74, i64 %53)
  %cmp76 = icmp slt i64 %call75, 0
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.72
  store i32 -1, i32* %retval
  br label %return

if.end.79:                                        ; preds = %if.end.72
  %54 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %55 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call80 = call i32 @memo_put(%struct.PicklerObject* %54, %struct._object* %55)
  %cmp81 = icmp slt i32 %call80, 0
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.end.79
  store i32 -1, i32* %retval
  br label %return

if.end.84:                                        ; preds = %if.end.79
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.84, %if.then.83, %if.then.78, %if.then.71, %if.else.63, %if.then.33, %do.end.29, %if.then.16, %if.then.7
  %56 = load i32, i32* %retval
  ret i32 %56
}

; Function Attrs: nounwind uwtable
define internal i32 @save_unicode(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %encoded = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %unicode_op = alloca i8, align 1
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 9
  %1 = load i32, i32* %bin, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @write_unicode_binary(%struct.PicklerObject* %2, %struct._object* %3)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.44

if.else:                                          ; preds = %entry
  store i8 86, i8* %unicode_op, align 1
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call2 = call %struct._object* @raw_unicode_escape(%struct._object* %4)
  store %struct._object* %call2, %struct._object** %encoded, align 8
  %5 = load %struct._object*, %struct._object** %encoded, align 8
  %cmp3 = icmp eq %struct._object* %5, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.else
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call6 = call i64 @_Pickler_Write(%struct.PicklerObject* %6, i8* %unicode_op, i64 1)
  %cmp7 = icmp slt i64 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.end.5
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %7 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %do.body
  br label %if.end.12

if.else.11:                                       ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else.11, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.12
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.5
  %14 = load %struct._object*, %struct._object** %encoded, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1
  %16 = load i64, i64* %ob_size, align 8
  store i64 %16, i64* %size, align 8
  %17 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %18 = load %struct._object*, %struct._object** %encoded, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %19, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %20 = load i64, i64* %size, align 8
  %call14 = call i64 @_Pickler_Write(%struct.PicklerObject* %17, i8* %arraydecay, i64 %20)
  %cmp15 = icmp slt i64 %call14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.28

if.then.16:                                       ; preds = %if.end.13
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.16
  %21 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp18, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %23, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %26(%struct._object* %27)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  store i32 -1, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.end.13
  br label %do.body.29

do.body.29:                                       ; preds = %if.end.28
  %28 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp30, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %30, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %33(%struct._object* %34)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  %35 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call40 = call i64 @_Pickler_Write(%struct.PicklerObject* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0), i64 1)
  %cmp41 = icmp slt i64 %call40, 0
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %do.end.39
  store i32 -1, i32* %retval
  br label %return

if.end.43:                                        ; preds = %do.end.39
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end
  %36 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %37 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call45 = call i32 @memo_put(%struct.PicklerObject* %36, %struct._object* %37)
  %cmp46 = icmp slt i32 %call45, 0
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.end.44
  store i32 -1, i32* %retval
  br label %return

if.end.48:                                        ; preds = %if.end.44
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.48, %if.then.47, %if.then.42, %do.end.27, %do.end, %if.then.4, %if.then.1
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: nounwind uwtable
define internal i32 @save_dict(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %items = alloca %struct._object*, align 8
  %iter = alloca %struct._object*, align 8
  %header = alloca [3 x i8], align 1
  %len = alloca i64, align 8
  %status = alloca i32, align 4
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %atomic_val35 = alloca %struct._Py_atomic_address*, align 8
  %result37 = alloca i8*, align 8
  %volatile_data39 = alloca i8**, align 8
  %order42 = alloca i32, align 4
  %tmp49 = alloca i8*, align 8
  %atomic_val55 = alloca %struct._Py_atomic_address*, align 8
  %result57 = alloca i8*, align 8
  %volatile_data59 = alloca i8**, align 8
  %order62 = alloca i32, align 4
  %tmp69 = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %atomic_val90 = alloca %struct._Py_atomic_address*, align 8
  %result92 = alloca i8*, align 8
  %volatile_data94 = alloca i8**, align 8
  %order97 = alloca i32, align 4
  %tmp104 = alloca i8*, align 8
  %_py_decref_tmp114 = alloca %struct._object*, align 8
  %atomic_val128 = alloca %struct._Py_atomic_address*, align 8
  %result130 = alloca i8*, align 8
  %volatile_data132 = alloca i8**, align 8
  %order135 = alloca i32, align 4
  %tmp142 = alloca i8*, align 8
  %atomic_val156 = alloca %struct._Py_atomic_address*, align 8
  %result158 = alloca i8*, align 8
  %volatile_data160 = alloca i8**, align 8
  %order163 = alloca i32, align 4
  %tmp170 = alloca i8*, align 8
  %_py_decref_tmp176 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 13
  %1 = load i32, i32* %fast, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @fast_save_enter(%struct.PicklerObject* %2, %struct._object* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %error

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 9
  %5 = load i32, i32* %bin, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %arrayidx = getelementptr [3 x i8], [3 x i8]* %header, i32 0, i64 0
  store i8 125, i8* %arrayidx, align 1
  store i64 1, i64* %len, align 8
  br label %if.end.6

if.else:                                          ; preds = %if.end
  %arrayidx4 = getelementptr [3 x i8], [3 x i8]* %header, i32 0, i64 0
  store i8 40, i8* %arrayidx4, align 1
  %arrayidx5 = getelementptr [3 x i8], [3 x i8]* %header, i32 0, i64 1
  store i8 100, i8* %arrayidx5, align 1
  store i64 2, i64* %len, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.3
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %header, i32 0, i32 0
  %7 = load i64, i64* %len, align 8
  %call7 = call i64 @_Pickler_Write(%struct.PicklerObject* %6, i8* %arraydecay, i64 %7)
  %cmp = icmp slt i64 %call7, 0
  br i1 %cmp, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.6
  br label %error

if.end.9:                                         ; preds = %if.end.6
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call10 = call i64 @PyDict_Size(%struct._object* %8)
  store i64 %call10, i64* %len, align 8
  %cmp11 = icmp slt i64 %call10, 0
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  br label %error

if.end.13:                                        ; preds = %if.end.9
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call14 = call i32 @memo_put(%struct.PicklerObject* %9, %struct._object* %10)
  %cmp15 = icmp slt i32 %call14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.13
  br label %error

if.end.17:                                        ; preds = %if.end.13
  %11 = load i64, i64* %len, align 8
  %cmp18 = icmp ne i64 %11, 0
  br i1 %cmp18, label %if.then.19, label %if.end.187

if.then.19:                                       ; preds = %if.end.17
  %12 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp20 = icmp eq %struct._typeobject* %13, @PyDict_Type
  br i1 %cmp20, label %land.lhs.true.21, label %if.else.71

land.lhs.true.21:                                 ; preds = %if.then.19
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 8
  %15 = load i32, i32* %proto, align 4
  %cmp22 = icmp sgt i32 %15, 0
  br i1 %cmp22, label %if.then.23, label %if.else.71

if.then.23:                                       ; preds = %land.lhs.true.21
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %16 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %16, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %17 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %18 = bitcast %struct._Py_atomic_address* %17 to i8*
  %19 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %18, i32 %19)
  %20 = load i32, i32* %order, align 4
  switch i32 %20, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.23, %if.then.23, %if.then.23
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.23
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %21 = load i8**, i8*** %volatile_data, align 8
  %22 = load volatile i8*, i8** %21, align 8
  store i8* %22, i8** %result, align 8
  %23 = load i32, i32* %order, align 4
  switch i32 %23, label %sw.default.25 [
    i32 1, label %sw.bb.24
    i32 3, label %sw.bb.24
    i32 4, label %sw.bb.24
  ]

sw.bb.24:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.26

sw.default.25:                                    ; preds = %sw.epilog
  br label %sw.epilog.26

sw.epilog.26:                                     ; preds = %sw.default.25, %sw.bb.24
  %24 = load i8*, i8** %result, align 8
  store i8* %24, i8** %tmp
  %25 = load i8*, i8** %tmp
  %26 = bitcast i8* %25 to %struct._ts*
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %26, i32 0, i32 4
  %27 = load i32, i32* %recursion_depth, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %recursion_depth, align 4
  %28 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp27 = icmp sgt i32 %inc, %28
  br i1 %cmp27, label %land.lhs.true.28, label %if.end.32

land.lhs.true.28:                                 ; preds = %sw.epilog.26
  %call29 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i32 0, i32 0))
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %land.lhs.true.28
  br label %error

if.end.32:                                        ; preds = %land.lhs.true.28, %sw.epilog.26
  %29 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %30 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call33 = call i32 @batch_dict_exact(%struct.PicklerObject* %29, %struct._object* %30)
  store i32 %call33, i32* %status, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.32
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val35, align 8
  %31 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val35, align 8
  %_value40 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %31, i32 0, i32 0
  store i8** %_value40, i8*** %volatile_data39, align 8
  store i32 0, i32* %order42, align 4
  %32 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val35, align 8
  %33 = bitcast %struct._Py_atomic_address* %32 to i8*
  %34 = load i32, i32* %order42, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %33, i32 %34)
  %35 = load i32, i32* %order42, align 4
  switch i32 %35, label %sw.default.44 [
    i32 2, label %sw.bb.43
    i32 3, label %sw.bb.43
    i32 4, label %sw.bb.43
  ]

sw.bb.43:                                         ; preds = %do.body, %do.body, %do.body
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.45

sw.default.44:                                    ; preds = %do.body
  br label %sw.epilog.45

sw.epilog.45:                                     ; preds = %sw.default.44, %sw.bb.43
  %36 = load i8**, i8*** %volatile_data39, align 8
  %37 = load volatile i8*, i8** %36, align 8
  store i8* %37, i8** %result37, align 8
  %38 = load i32, i32* %order42, align 4
  switch i32 %38, label %sw.default.47 [
    i32 1, label %sw.bb.46
    i32 3, label %sw.bb.46
    i32 4, label %sw.bb.46
  ]

sw.bb.46:                                         ; preds = %sw.epilog.45, %sw.epilog.45, %sw.epilog.45
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.48

sw.default.47:                                    ; preds = %sw.epilog.45
  br label %sw.epilog.48

sw.epilog.48:                                     ; preds = %sw.default.47, %sw.bb.46
  %39 = load i8*, i8** %result37, align 8
  store i8* %39, i8** %tmp49
  %40 = load i8*, i8** %tmp49
  %41 = bitcast i8* %40 to %struct._ts*
  %recursion_depth50 = getelementptr inbounds %struct._ts, %struct._ts* %41, i32 0, i32 4
  %42 = load i32, i32* %recursion_depth50, align 4
  %dec = add i32 %42, -1
  store i32 %dec, i32* %recursion_depth50, align 4
  %43 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp51 = icmp sgt i32 %43, 100
  br i1 %cmp51, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.epilog.48
  %44 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %sub = sub i32 %44, 50
  br label %cond.end

cond.false:                                       ; preds = %sw.epilog.48
  %45 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %shr = ashr i32 %45, 2
  %mul = mul i32 3, %shr
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %mul, %cond.false ]
  %cmp52 = icmp slt i32 %dec, %cond
  br i1 %cmp52, label %if.then.53, label %if.end.70

if.then.53:                                       ; preds = %cond.end
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val55, align 8
  %46 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val55, align 8
  %_value60 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %46, i32 0, i32 0
  store i8** %_value60, i8*** %volatile_data59, align 8
  store i32 0, i32* %order62, align 4
  %47 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val55, align 8
  %48 = bitcast %struct._Py_atomic_address* %47 to i8*
  %49 = load i32, i32* %order62, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %48, i32 %49)
  %50 = load i32, i32* %order62, align 4
  switch i32 %50, label %sw.default.64 [
    i32 2, label %sw.bb.63
    i32 3, label %sw.bb.63
    i32 4, label %sw.bb.63
  ]

sw.bb.63:                                         ; preds = %if.then.53, %if.then.53, %if.then.53
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.65

sw.default.64:                                    ; preds = %if.then.53
  br label %sw.epilog.65

sw.epilog.65:                                     ; preds = %sw.default.64, %sw.bb.63
  %51 = load i8**, i8*** %volatile_data59, align 8
  %52 = load volatile i8*, i8** %51, align 8
  store i8* %52, i8** %result57, align 8
  %53 = load i32, i32* %order62, align 4
  switch i32 %53, label %sw.default.67 [
    i32 1, label %sw.bb.66
    i32 3, label %sw.bb.66
    i32 4, label %sw.bb.66
  ]

sw.bb.66:                                         ; preds = %sw.epilog.65, %sw.epilog.65, %sw.epilog.65
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.68

sw.default.67:                                    ; preds = %sw.epilog.65
  br label %sw.epilog.68

sw.epilog.68:                                     ; preds = %sw.default.67, %sw.bb.66
  %54 = load i8*, i8** %result57, align 8
  store i8* %54, i8** %tmp69
  %55 = load i8*, i8** %tmp69
  %56 = bitcast i8* %55 to %struct._ts*
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %56, i32 0, i32 5
  store i8 0, i8* %overflowed, align 1
  br label %if.end.70

if.end.70:                                        ; preds = %sw.epilog.68, %cond.end
  br label %do.end

do.end:                                           ; preds = %if.end.70
  br label %if.end.186

if.else.71:                                       ; preds = %land.lhs.true.21, %if.then.19
  %57 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call72 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %57, %struct._Py_Identifier* @save_dict.PyId_items, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0))
  store %struct._object* %call72, %struct._object** %items, align 8
  %58 = load %struct._object*, %struct._object** %items, align 8
  %cmp73 = icmp eq %struct._object* %58, null
  br i1 %cmp73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.else.71
  br label %error

if.end.75:                                        ; preds = %if.else.71
  %59 = load %struct._object*, %struct._object** %items, align 8
  %call76 = call %struct._object* @PyObject_GetIter(%struct._object* %59)
  store %struct._object* %call76, %struct._object** %iter, align 8
  br label %do.body.77

do.body.77:                                       ; preds = %if.end.75
  %60 = load %struct._object*, %struct._object** %items, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt, align 8
  %dec79 = add i64 %62, -1
  store i64 %dec79, i64* %ob_refcnt, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.77
  br label %if.end.84

if.else.82:                                       ; preds = %do.body.77
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %65(%struct._object* %66)
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.85

do.end.85:                                        ; preds = %if.end.84
  %67 = load %struct._object*, %struct._object** %iter, align 8
  %cmp86 = icmp eq %struct._object* %67, null
  br i1 %cmp86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %do.end.85
  br label %error

if.end.88:                                        ; preds = %do.end.85
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val90, align 8
  %68 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val90, align 8
  %_value95 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %68, i32 0, i32 0
  store i8** %_value95, i8*** %volatile_data94, align 8
  store i32 0, i32* %order97, align 4
  %69 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val90, align 8
  %70 = bitcast %struct._Py_atomic_address* %69 to i8*
  %71 = load i32, i32* %order97, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %70, i32 %71)
  %72 = load i32, i32* %order97, align 4
  switch i32 %72, label %sw.default.99 [
    i32 2, label %sw.bb.98
    i32 3, label %sw.bb.98
    i32 4, label %sw.bb.98
  ]

sw.bb.98:                                         ; preds = %if.end.88, %if.end.88, %if.end.88
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.100

sw.default.99:                                    ; preds = %if.end.88
  br label %sw.epilog.100

sw.epilog.100:                                    ; preds = %sw.default.99, %sw.bb.98
  %73 = load i8**, i8*** %volatile_data94, align 8
  %74 = load volatile i8*, i8** %73, align 8
  store i8* %74, i8** %result92, align 8
  %75 = load i32, i32* %order97, align 4
  switch i32 %75, label %sw.default.102 [
    i32 1, label %sw.bb.101
    i32 3, label %sw.bb.101
    i32 4, label %sw.bb.101
  ]

sw.bb.101:                                        ; preds = %sw.epilog.100, %sw.epilog.100, %sw.epilog.100
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.103

sw.default.102:                                   ; preds = %sw.epilog.100
  br label %sw.epilog.103

sw.epilog.103:                                    ; preds = %sw.default.102, %sw.bb.101
  %76 = load i8*, i8** %result92, align 8
  store i8* %76, i8** %tmp104
  %77 = load i8*, i8** %tmp104
  %78 = bitcast i8* %77 to %struct._ts*
  %recursion_depth105 = getelementptr inbounds %struct._ts, %struct._ts* %78, i32 0, i32 4
  %79 = load i32, i32* %recursion_depth105, align 4
  %inc106 = add i32 %79, 1
  store i32 %inc106, i32* %recursion_depth105, align 4
  %80 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp107 = icmp sgt i32 %inc106, %80
  br i1 %cmp107, label %land.lhs.true.108, label %if.end.124

land.lhs.true.108:                                ; preds = %sw.epilog.103
  %call109 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i32 0, i32 0))
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.then.111, label %if.end.124

if.then.111:                                      ; preds = %land.lhs.true.108
  br label %do.body.112

do.body.112:                                      ; preds = %if.then.111
  %81 = load %struct._object*, %struct._object** %iter, align 8
  store %struct._object* %81, %struct._object** %_py_decref_tmp114, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_refcnt115 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt115, align 8
  %dec116 = add i64 %83, -1
  store i64 %dec116, i64* %ob_refcnt115, align 8
  %cmp117 = icmp ne i64 %dec116, 0
  br i1 %cmp117, label %if.then.118, label %if.else.119

if.then.118:                                      ; preds = %do.body.112
  br label %if.end.122

if.else.119:                                      ; preds = %do.body.112
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_type120 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type120, align 8
  %tp_dealloc121 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 4
  %86 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc121, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  call void %86(%struct._object* %87)
  br label %if.end.122

if.end.122:                                       ; preds = %if.else.119, %if.then.118
  br label %do.end.123

do.end.123:                                       ; preds = %if.end.122
  br label %error

if.end.124:                                       ; preds = %land.lhs.true.108, %sw.epilog.103
  %88 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %89 = load %struct._object*, %struct._object** %iter, align 8
  %call125 = call i32 @batch_dict(%struct.PicklerObject* %88, %struct._object* %89)
  store i32 %call125, i32* %status, align 4
  br label %do.body.126

do.body.126:                                      ; preds = %if.end.124
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val128, align 8
  %90 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val128, align 8
  %_value133 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %90, i32 0, i32 0
  store i8** %_value133, i8*** %volatile_data132, align 8
  store i32 0, i32* %order135, align 4
  %91 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val128, align 8
  %92 = bitcast %struct._Py_atomic_address* %91 to i8*
  %93 = load i32, i32* %order135, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %92, i32 %93)
  %94 = load i32, i32* %order135, align 4
  switch i32 %94, label %sw.default.137 [
    i32 2, label %sw.bb.136
    i32 3, label %sw.bb.136
    i32 4, label %sw.bb.136
  ]

sw.bb.136:                                        ; preds = %do.body.126, %do.body.126, %do.body.126
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.138

sw.default.137:                                   ; preds = %do.body.126
  br label %sw.epilog.138

sw.epilog.138:                                    ; preds = %sw.default.137, %sw.bb.136
  %95 = load i8**, i8*** %volatile_data132, align 8
  %96 = load volatile i8*, i8** %95, align 8
  store i8* %96, i8** %result130, align 8
  %97 = load i32, i32* %order135, align 4
  switch i32 %97, label %sw.default.140 [
    i32 1, label %sw.bb.139
    i32 3, label %sw.bb.139
    i32 4, label %sw.bb.139
  ]

sw.bb.139:                                        ; preds = %sw.epilog.138, %sw.epilog.138, %sw.epilog.138
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.141

sw.default.140:                                   ; preds = %sw.epilog.138
  br label %sw.epilog.141

sw.epilog.141:                                    ; preds = %sw.default.140, %sw.bb.139
  %98 = load i8*, i8** %result130, align 8
  store i8* %98, i8** %tmp142
  %99 = load i8*, i8** %tmp142
  %100 = bitcast i8* %99 to %struct._ts*
  %recursion_depth143 = getelementptr inbounds %struct._ts, %struct._ts* %100, i32 0, i32 4
  %101 = load i32, i32* %recursion_depth143, align 4
  %dec144 = add i32 %101, -1
  store i32 %dec144, i32* %recursion_depth143, align 4
  %102 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp145 = icmp sgt i32 %102, 100
  br i1 %cmp145, label %cond.true.146, label %cond.false.148

cond.true.146:                                    ; preds = %sw.epilog.141
  %103 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %sub147 = sub i32 %103, 50
  br label %cond.end.151

cond.false.148:                                   ; preds = %sw.epilog.141
  %104 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %shr149 = ashr i32 %104, 2
  %mul150 = mul i32 3, %shr149
  br label %cond.end.151

cond.end.151:                                     ; preds = %cond.false.148, %cond.true.146
  %cond152 = phi i32 [ %sub147, %cond.true.146 ], [ %mul150, %cond.false.148 ]
  %cmp153 = icmp slt i32 %dec144, %cond152
  br i1 %cmp153, label %if.then.154, label %if.end.172

if.then.154:                                      ; preds = %cond.end.151
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val156, align 8
  %105 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val156, align 8
  %_value161 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %105, i32 0, i32 0
  store i8** %_value161, i8*** %volatile_data160, align 8
  store i32 0, i32* %order163, align 4
  %106 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val156, align 8
  %107 = bitcast %struct._Py_atomic_address* %106 to i8*
  %108 = load i32, i32* %order163, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %107, i32 %108)
  %109 = load i32, i32* %order163, align 4
  switch i32 %109, label %sw.default.165 [
    i32 2, label %sw.bb.164
    i32 3, label %sw.bb.164
    i32 4, label %sw.bb.164
  ]

sw.bb.164:                                        ; preds = %if.then.154, %if.then.154, %if.then.154
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.166

sw.default.165:                                   ; preds = %if.then.154
  br label %sw.epilog.166

sw.epilog.166:                                    ; preds = %sw.default.165, %sw.bb.164
  %110 = load i8**, i8*** %volatile_data160, align 8
  %111 = load volatile i8*, i8** %110, align 8
  store i8* %111, i8** %result158, align 8
  %112 = load i32, i32* %order163, align 4
  switch i32 %112, label %sw.default.168 [
    i32 1, label %sw.bb.167
    i32 3, label %sw.bb.167
    i32 4, label %sw.bb.167
  ]

sw.bb.167:                                        ; preds = %sw.epilog.166, %sw.epilog.166, %sw.epilog.166
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.169

sw.default.168:                                   ; preds = %sw.epilog.166
  br label %sw.epilog.169

sw.epilog.169:                                    ; preds = %sw.default.168, %sw.bb.167
  %113 = load i8*, i8** %result158, align 8
  store i8* %113, i8** %tmp170
  %114 = load i8*, i8** %tmp170
  %115 = bitcast i8* %114 to %struct._ts*
  %overflowed171 = getelementptr inbounds %struct._ts, %struct._ts* %115, i32 0, i32 5
  store i8 0, i8* %overflowed171, align 1
  br label %if.end.172

if.end.172:                                       ; preds = %sw.epilog.169, %cond.end.151
  br label %do.end.173

do.end.173:                                       ; preds = %if.end.172
  br label %do.body.174

do.body.174:                                      ; preds = %do.end.173
  %116 = load %struct._object*, %struct._object** %iter, align 8
  store %struct._object* %116, %struct._object** %_py_decref_tmp176, align 8
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp176, align 8
  %ob_refcnt177 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 0
  %118 = load i64, i64* %ob_refcnt177, align 8
  %dec178 = add i64 %118, -1
  store i64 %dec178, i64* %ob_refcnt177, align 8
  %cmp179 = icmp ne i64 %dec178, 0
  br i1 %cmp179, label %if.then.180, label %if.else.181

if.then.180:                                      ; preds = %do.body.174
  br label %if.end.184

if.else.181:                                      ; preds = %do.body.174
  %119 = load %struct._object*, %struct._object** %_py_decref_tmp176, align 8
  %ob_type182 = getelementptr inbounds %struct._object, %struct._object* %119, i32 0, i32 1
  %120 = load %struct._typeobject*, %struct._typeobject** %ob_type182, align 8
  %tp_dealloc183 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %120, i32 0, i32 4
  %121 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc183, align 8
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp176, align 8
  call void %121(%struct._object* %122)
  br label %if.end.184

if.end.184:                                       ; preds = %if.else.181, %if.then.180
  br label %do.end.185

do.end.185:                                       ; preds = %if.end.184
  br label %if.end.186

if.end.186:                                       ; preds = %do.end.185, %do.end
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %if.end.17
  br i1 false, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %if.end.187
  br label %error

error:                                            ; preds = %if.then.188, %do.end.123, %if.then.87, %if.then.74, %if.then.31, %if.then.16, %if.then.12, %if.then.8, %if.then
  store i32 -1, i32* %status, align 4
  br label %if.end.189

if.end.189:                                       ; preds = %error, %if.end.187
  %123 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast190 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %123, i32 0, i32 13
  %124 = load i32, i32* %fast190, align 4
  %tobool191 = icmp ne i32 %124, 0
  br i1 %tobool191, label %land.lhs.true.192, label %if.end.196

land.lhs.true.192:                                ; preds = %if.end.189
  %125 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %126 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call193 = call i32 @fast_save_leave(%struct.PicklerObject* %125, %struct._object* %126)
  %tobool194 = icmp ne i32 %call193, 0
  br i1 %tobool194, label %if.end.196, label %if.then.195

if.then.195:                                      ; preds = %land.lhs.true.192
  store i32 -1, i32* %status, align 4
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.195, %land.lhs.true.192, %if.end.189
  %127 = load i32, i32* %status, align 4
  ret i32 %127
}

; Function Attrs: nounwind uwtable
define internal i32 @save_set(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %set_size = alloca i64, align 8
  %ppos = alloca i64, align 8
  %hash = alloca i64, align 8
  %empty_set_op = alloca i8, align 1
  %mark_op = alloca i8, align 1
  %additems_op = alloca i8, align 1
  %items = alloca %struct._object*, align 8
  %reduce_value = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i64 0, i64* %ppos, align 8
  store i8 -113, i8* %empty_set_op, align 1
  store i8 40, i8* %mark_op, align 1
  store i8 -112, i8* %additems_op, align 1
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 8
  %1 = load i32, i32* %proto, align 4
  %cmp = icmp slt i32 %1, 4
  br i1 %cmp, label %if.then, label %if.end.22

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call %struct._object* @PySequence_List(%struct._object* %2)
  store %struct._object* %call, %struct._object** %items, align 8
  %3 = load %struct._object*, %struct._object** %items, align 8
  %cmp1 = icmp eq %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %items, align 8
  %call3 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PySet_Type, i32 0, i32 0, i32 0), %struct._object* %4)
  store %struct._object* %call3, %struct._object** %reduce_value, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %items, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  %12 = load %struct._object*, %struct._object** %reduce_value, align 8
  %cmp7 = icmp eq %struct._object* %12, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %do.end
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %14 = load %struct._object*, %struct._object** %reduce_value, align 8
  %15 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call10 = call i32 @save_reduce(%struct.PicklerObject* %13, %struct._object* %14, %struct._object* %15)
  store i32 %call10, i32* %status, align 4
  br label %do.body.11

do.body.11:                                       ; preds = %if.end.9
  %16 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp12, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt13, align 8
  %dec14 = add i64 %18, -1
  store i64 %dec14, i64* %ob_refcnt13, align 8
  %cmp15 = icmp ne i64 %dec14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20

if.else.17:                                       ; preds = %do.body.11
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  call void %21(%struct._object* %22)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  %23 = load i32, i32* %status, align 4
  store i32 %23, i32* %retval
  br label %return

if.end.22:                                        ; preds = %entry
  %24 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call23 = call i64 @_Pickler_Write(%struct.PicklerObject* %24, i8* %empty_set_op, i64 1)
  %cmp24 = icmp slt i64 %call23, 0
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.22
  store i32 -1, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.22
  %25 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %26 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call27 = call i32 @memo_put(%struct.PicklerObject* %25, %struct._object* %26)
  %cmp28 = icmp slt i32 %call27, 0
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.end.26
  store i32 -1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.end.26
  %27 = load %struct._object*, %struct._object** %obj.addr, align 8
  %28 = bitcast %struct._object* %27 to %struct._setobject*
  %used = getelementptr inbounds %struct._setobject, %struct._setobject* %28, i32 0, i32 2
  %29 = load i64, i64* %used, align 8
  store i64 %29, i64* %set_size, align 8
  %30 = load i64, i64* %set_size, align 8
  %cmp31 = icmp eq i64 %30, 0
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.30
  store i32 0, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end.30
  br label %do.body.34

do.body.34:                                       ; preds = %do.cond, %if.end.33
  store i32 0, i32* %i, align 4
  %31 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call35 = call i64 @_Pickler_Write(%struct.PicklerObject* %31, i8* %mark_op, i64 1)
  %cmp36 = icmp slt i64 %call35, 0
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %do.body.34
  store i32 -1, i32* %retval
  br label %return

if.end.38:                                        ; preds = %do.body.34
  br label %while.cond

while.cond:                                       ; preds = %if.end.46, %if.end.38
  %32 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call39 = call i32 @_PySet_NextEntry(%struct._object* %32, i64* %ppos, %struct._object** %item, i64* %hash)
  %tobool = icmp ne i32 %call39, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %33 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %34 = load %struct._object*, %struct._object** %item, align 8
  %call40 = call i32 @save(%struct.PicklerObject* %33, %struct._object* %34, i32 0)
  %cmp41 = icmp slt i32 %call40, 0
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %while.body
  store i32 -1, i32* %retval
  br label %return

if.end.43:                                        ; preds = %while.body
  %35 = load i32, i32* %i, align 4
  %inc = add i32 %35, 1
  store i32 %inc, i32* %i, align 4
  %cmp44 = icmp eq i32 %inc, 1000
  br i1 %cmp44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.43
  br label %while.end

if.end.46:                                        ; preds = %if.end.43
  br label %while.cond

while.end:                                        ; preds = %if.then.45, %while.cond
  %36 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call47 = call i64 @_Pickler_Write(%struct.PicklerObject* %36, i8* %additems_op, i64 1)
  %cmp48 = icmp slt i64 %call47, 0
  br i1 %cmp48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %while.end
  store i32 -1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %while.end
  %37 = load %struct._object*, %struct._object** %obj.addr, align 8
  %38 = bitcast %struct._object* %37 to %struct._setobject*
  %used51 = getelementptr inbounds %struct._setobject, %struct._setobject* %38, i32 0, i32 2
  %39 = load i64, i64* %used51, align 8
  %40 = load i64, i64* %set_size, align 8
  %cmp52 = icmp ne i64 %39, %40
  br i1 %cmp52, label %if.then.53, label %if.end.55

if.then.53:                                       ; preds = %if.end.50
  %41 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %call54 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %41, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.48, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.55:                                        ; preds = %if.end.50
  br label %do.cond

do.cond:                                          ; preds = %if.end.55
  %42 = load i32, i32* %i, align 4
  %cmp56 = icmp eq i32 %42, 1000
  br i1 %cmp56, label %do.body.34, label %do.end.57

do.end.57:                                        ; preds = %do.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.57, %if.then.53, %if.then.49, %if.then.42, %if.then.37, %if.then.32, %if.then.29, %if.then.25, %do.end.21, %if.then.8, %if.then.2
  %43 = load i32, i32* %retval
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define internal i32 @save_frozenset(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %iter = alloca %struct._object*, align 8
  %mark_op = alloca i8, align 1
  %frozenset_op = alloca i8, align 1
  %items = alloca %struct._object*, align 8
  %reduce_value = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  %_py_decref_tmp92 = alloca %struct._object*, align 8
  %pop_mark_op = alloca i8, align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8 40, i8* %mark_op, align 1
  store i8 -111, i8* %frozenset_op, align 1
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 13
  %1 = load i32, i32* %fast, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @fast_save_enter(%struct.PicklerObject* %2, %struct._object* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 8
  %5 = load i32, i32* %proto, align 4
  %cmp = icmp slt i32 %5, 4
  br i1 %cmp, label %if.then.2, label %if.end.26

if.then.2:                                        ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call3 = call %struct._object* @PySequence_List(%struct._object* %6)
  store %struct._object* %call3, %struct._object** %items, align 8
  %7 = load %struct._object*, %struct._object** %items, align 8
  %cmp4 = icmp eq %struct._object* %7, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  %8 = load %struct._object*, %struct._object** %items, align 8
  %call7 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyFrozenSet_Type, i32 0, i32 0, i32 0), %struct._object* %8)
  store %struct._object* %call7, %struct._object** %reduce_value, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.6
  %9 = load %struct._object*, %struct._object** %items, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %16 = load %struct._object*, %struct._object** %reduce_value, align 8
  %cmp11 = icmp eq %struct._object* %16, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %do.end
  %17 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %18 = load %struct._object*, %struct._object** %reduce_value, align 8
  %19 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call14 = call i32 @save_reduce(%struct.PicklerObject* %17, %struct._object* %18, %struct._object* %19)
  store i32 %call14, i32* %status, align 4
  br label %do.body.15

do.body.15:                                       ; preds = %if.end.13
  %20 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp16, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %22, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %25(%struct._object* %26)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  %27 = load i32, i32* %status, align 4
  store i32 %27, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.end
  %28 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call27 = call i64 @_Pickler_Write(%struct.PicklerObject* %28, i8* %mark_op, i64 1)
  %cmp28 = icmp slt i64 %call27, 0
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.end.26
  store i32 -1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.end.26
  %29 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call31 = call %struct._object* @PyObject_GetIter(%struct._object* %29)
  store %struct._object* %call31, %struct._object** %iter, align 8
  %30 = load %struct._object*, %struct._object** %iter, align 8
  %cmp32 = icmp eq %struct._object* %30, null
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.30
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  br label %for.cond

for.cond:                                         ; preds = %do.end.90, %if.end.34
  %31 = load %struct._object*, %struct._object** %iter, align 8
  %call35 = call %struct._object* @PyIter_Next(%struct._object* %31)
  store %struct._object* %call35, %struct._object** %item, align 8
  %32 = load %struct._object*, %struct._object** %item, align 8
  %cmp36 = icmp eq %struct._object* %32, null
  br i1 %cmp36, label %if.then.37, label %if.end.53

if.then.37:                                       ; preds = %for.cond
  %call38 = call %struct._object* @PyErr_Occurred()
  %tobool39 = icmp ne %struct._object* %call38, null
  br i1 %tobool39, label %if.then.40, label %if.end.52

if.then.40:                                       ; preds = %if.then.37
  br label %do.body.41

do.body.41:                                       ; preds = %if.then.40
  %33 = load %struct._object*, %struct._object** %iter, align 8
  store %struct._object* %33, %struct._object** %_py_decref_tmp42, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %35, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %38(%struct._object* %39)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  store i32 -1, i32* %retval
  br label %return

if.end.52:                                        ; preds = %if.then.37
  br label %for.end

if.end.53:                                        ; preds = %for.cond
  %40 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %41 = load %struct._object*, %struct._object** %item, align 8
  %call54 = call i32 @save(%struct.PicklerObject* %40, %struct._object* %41, i32 0)
  %cmp55 = icmp slt i32 %call54, 0
  br i1 %cmp55, label %if.then.56, label %if.end.79

if.then.56:                                       ; preds = %if.end.53
  br label %do.body.57

do.body.57:                                       ; preds = %if.then.56
  %42 = load %struct._object*, %struct._object** %item, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp58, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt59, align 8
  %dec60 = add i64 %44, -1
  store i64 %dec60, i64* %ob_refcnt59, align 8
  %cmp61 = icmp ne i64 %dec60, 0
  br i1 %cmp61, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %do.body.57
  br label %if.end.66

if.else.63:                                       ; preds = %do.body.57
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  call void %47(%struct._object* %48)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  br label %do.body.68

do.body.68:                                       ; preds = %do.end.67
  %49 = load %struct._object*, %struct._object** %iter, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp69, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %51, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.68
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.68
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %54(%struct._object* %55)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  store i32 -1, i32* %retval
  br label %return

if.end.79:                                        ; preds = %if.end.53
  br label %do.body.80

do.body.80:                                       ; preds = %if.end.79
  %56 = load %struct._object*, %struct._object** %item, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp81, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %58, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %61(%struct._object* %62)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  br label %for.cond

for.end:                                          ; preds = %if.end.52
  br label %do.body.91

do.body.91:                                       ; preds = %for.end
  %63 = load %struct._object*, %struct._object** %iter, align 8
  store %struct._object* %63, %struct._object** %_py_decref_tmp92, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_refcnt93 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt93, align 8
  %dec94 = add i64 %65, -1
  store i64 %dec94, i64* %ob_refcnt93, align 8
  %cmp95 = icmp ne i64 %dec94, 0
  br i1 %cmp95, label %if.then.96, label %if.else.97

if.then.96:                                       ; preds = %do.body.91
  br label %if.end.100

if.else.97:                                       ; preds = %do.body.91
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_type98 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type98, align 8
  %tp_dealloc99 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc99, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  call void %68(%struct._object* %69)
  br label %if.end.100

if.end.100:                                       ; preds = %if.else.97, %if.then.96
  br label %do.end.101

do.end.101:                                       ; preds = %if.end.100
  %70 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %70, i32 0, i32 1
  %71 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %72 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call102 = call i64* @PyMemoTable_Get(%struct.PyMemoTable* %71, %struct._object* %72)
  %tobool103 = icmp ne i64* %call102, null
  br i1 %tobool103, label %if.then.104, label %if.end.113

if.then.104:                                      ; preds = %do.end.101
  store i8 49, i8* %pop_mark_op, align 1
  %73 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call105 = call i64 @_Pickler_Write(%struct.PicklerObject* %73, i8* %pop_mark_op, i64 1)
  %cmp106 = icmp slt i64 %call105, 0
  br i1 %cmp106, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %if.then.104
  store i32 -1, i32* %retval
  br label %return

if.end.108:                                       ; preds = %if.then.104
  %74 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %75 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call109 = call i32 @memo_get(%struct.PicklerObject* %74, %struct._object* %75)
  %cmp110 = icmp slt i32 %call109, 0
  br i1 %cmp110, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %if.end.108
  store i32 -1, i32* %retval
  br label %return

if.end.112:                                       ; preds = %if.end.108
  store i32 0, i32* %retval
  br label %return

if.end.113:                                       ; preds = %do.end.101
  %76 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call114 = call i64 @_Pickler_Write(%struct.PicklerObject* %76, i8* %frozenset_op, i64 1)
  %cmp115 = icmp slt i64 %call114, 0
  br i1 %cmp115, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %if.end.113
  store i32 -1, i32* %retval
  br label %return

if.end.117:                                       ; preds = %if.end.113
  %77 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %78 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call118 = call i32 @memo_put(%struct.PicklerObject* %77, %struct._object* %78)
  %cmp119 = icmp slt i32 %call118, 0
  br i1 %cmp119, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.end.117
  store i32 -1, i32* %retval
  br label %return

if.end.121:                                       ; preds = %if.end.117
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.121, %if.then.120, %if.then.116, %if.end.112, %if.then.111, %if.then.107, %do.end.78, %do.end.51, %if.then.33, %if.then.29, %do.end.25, %if.then.12, %if.then.5, %if.then
  %79 = load i32, i32* %retval
  ret i32 %79
}

; Function Attrs: nounwind uwtable
define internal i32 @save_list(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %header = alloca [3 x i8], align 1
  %len = alloca i64, align 8
  %status = alloca i32, align 4
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %atomic_val35 = alloca %struct._Py_atomic_address*, align 8
  %result37 = alloca i8*, align 8
  %volatile_data39 = alloca i8**, align 8
  %order42 = alloca i32, align 4
  %tmp49 = alloca i8*, align 8
  %atomic_val55 = alloca %struct._Py_atomic_address*, align 8
  %result57 = alloca i8*, align 8
  %volatile_data59 = alloca i8**, align 8
  %order62 = alloca i32, align 4
  %tmp69 = alloca i8*, align 8
  %iter = alloca %struct._object*, align 8
  %atomic_val78 = alloca %struct._Py_atomic_address*, align 8
  %result80 = alloca i8*, align 8
  %volatile_data82 = alloca i8**, align 8
  %order85 = alloca i32, align 4
  %tmp92 = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %atomic_val113 = alloca %struct._Py_atomic_address*, align 8
  %result115 = alloca i8*, align 8
  %volatile_data117 = alloca i8**, align 8
  %order120 = alloca i32, align 4
  %tmp127 = alloca i8*, align 8
  %atomic_val141 = alloca %struct._Py_atomic_address*, align 8
  %result143 = alloca i8*, align 8
  %volatile_data145 = alloca i8**, align 8
  %order148 = alloca i32, align 4
  %tmp155 = alloca i8*, align 8
  %_py_decref_tmp161 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 13
  %1 = load i32, i32* %fast, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @fast_save_enter(%struct.PicklerObject* %2, %struct._object* %3)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %error

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 9
  %5 = load i32, i32* %bin, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %arrayidx = getelementptr [3 x i8], [3 x i8]* %header, i32 0, i64 0
  store i8 93, i8* %arrayidx, align 1
  store i64 1, i64* %len, align 8
  br label %if.end.6

if.else:                                          ; preds = %if.end
  %arrayidx4 = getelementptr [3 x i8], [3 x i8]* %header, i32 0, i64 0
  store i8 40, i8* %arrayidx4, align 1
  %arrayidx5 = getelementptr [3 x i8], [3 x i8]* %header, i32 0, i64 1
  store i8 108, i8* %arrayidx5, align 1
  store i64 2, i64* %len, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.3
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %header, i32 0, i32 0
  %7 = load i64, i64* %len, align 8
  %call7 = call i64 @_Pickler_Write(%struct.PicklerObject* %6, i8* %arraydecay, i64 %7)
  %cmp = icmp slt i64 %call7, 0
  br i1 %cmp, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.6
  br label %error

if.end.9:                                         ; preds = %if.end.6
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call10 = call i64 @PyList_Size(%struct._object* %8)
  store i64 %call10, i64* %len, align 8
  %cmp11 = icmp slt i64 %call10, 0
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  br label %error

if.end.13:                                        ; preds = %if.end.9
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call14 = call i32 @memo_put(%struct.PicklerObject* %9, %struct._object* %10)
  %cmp15 = icmp slt i32 %call14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.13
  br label %error

if.end.17:                                        ; preds = %if.end.13
  %11 = load i64, i64* %len, align 8
  %cmp18 = icmp ne i64 %11, 0
  br i1 %cmp18, label %if.then.19, label %if.end.172

if.then.19:                                       ; preds = %if.end.17
  %12 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp20 = icmp eq %struct._typeobject* %13, @PyList_Type
  br i1 %cmp20, label %land.lhs.true.21, label %if.else.71

land.lhs.true.21:                                 ; preds = %if.then.19
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 8
  %15 = load i32, i32* %proto, align 4
  %cmp22 = icmp sgt i32 %15, 0
  br i1 %cmp22, label %if.then.23, label %if.else.71

if.then.23:                                       ; preds = %land.lhs.true.21
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %16 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %16, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %17 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %18 = bitcast %struct._Py_atomic_address* %17 to i8*
  %19 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %18, i32 %19)
  %20 = load i32, i32* %order, align 4
  switch i32 %20, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.23, %if.then.23, %if.then.23
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.23
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %21 = load i8**, i8*** %volatile_data, align 8
  %22 = load volatile i8*, i8** %21, align 8
  store i8* %22, i8** %result, align 8
  %23 = load i32, i32* %order, align 4
  switch i32 %23, label %sw.default.25 [
    i32 1, label %sw.bb.24
    i32 3, label %sw.bb.24
    i32 4, label %sw.bb.24
  ]

sw.bb.24:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.26

sw.default.25:                                    ; preds = %sw.epilog
  br label %sw.epilog.26

sw.epilog.26:                                     ; preds = %sw.default.25, %sw.bb.24
  %24 = load i8*, i8** %result, align 8
  store i8* %24, i8** %tmp
  %25 = load i8*, i8** %tmp
  %26 = bitcast i8* %25 to %struct._ts*
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %26, i32 0, i32 4
  %27 = load i32, i32* %recursion_depth, align 4
  %inc = add i32 %27, 1
  store i32 %inc, i32* %recursion_depth, align 4
  %28 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp27 = icmp sgt i32 %inc, %28
  br i1 %cmp27, label %land.lhs.true.28, label %if.end.32

land.lhs.true.28:                                 ; preds = %sw.epilog.26
  %call29 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i32 0, i32 0))
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %land.lhs.true.28
  br label %error

if.end.32:                                        ; preds = %land.lhs.true.28, %sw.epilog.26
  %29 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %30 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call33 = call i32 @batch_list_exact(%struct.PicklerObject* %29, %struct._object* %30)
  store i32 %call33, i32* %status, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.32
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val35, align 8
  %31 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val35, align 8
  %_value40 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %31, i32 0, i32 0
  store i8** %_value40, i8*** %volatile_data39, align 8
  store i32 0, i32* %order42, align 4
  %32 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val35, align 8
  %33 = bitcast %struct._Py_atomic_address* %32 to i8*
  %34 = load i32, i32* %order42, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %33, i32 %34)
  %35 = load i32, i32* %order42, align 4
  switch i32 %35, label %sw.default.44 [
    i32 2, label %sw.bb.43
    i32 3, label %sw.bb.43
    i32 4, label %sw.bb.43
  ]

sw.bb.43:                                         ; preds = %do.body, %do.body, %do.body
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.45

sw.default.44:                                    ; preds = %do.body
  br label %sw.epilog.45

sw.epilog.45:                                     ; preds = %sw.default.44, %sw.bb.43
  %36 = load i8**, i8*** %volatile_data39, align 8
  %37 = load volatile i8*, i8** %36, align 8
  store i8* %37, i8** %result37, align 8
  %38 = load i32, i32* %order42, align 4
  switch i32 %38, label %sw.default.47 [
    i32 1, label %sw.bb.46
    i32 3, label %sw.bb.46
    i32 4, label %sw.bb.46
  ]

sw.bb.46:                                         ; preds = %sw.epilog.45, %sw.epilog.45, %sw.epilog.45
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.48

sw.default.47:                                    ; preds = %sw.epilog.45
  br label %sw.epilog.48

sw.epilog.48:                                     ; preds = %sw.default.47, %sw.bb.46
  %39 = load i8*, i8** %result37, align 8
  store i8* %39, i8** %tmp49
  %40 = load i8*, i8** %tmp49
  %41 = bitcast i8* %40 to %struct._ts*
  %recursion_depth50 = getelementptr inbounds %struct._ts, %struct._ts* %41, i32 0, i32 4
  %42 = load i32, i32* %recursion_depth50, align 4
  %dec = add i32 %42, -1
  store i32 %dec, i32* %recursion_depth50, align 4
  %43 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp51 = icmp sgt i32 %43, 100
  br i1 %cmp51, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.epilog.48
  %44 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %sub = sub i32 %44, 50
  br label %cond.end

cond.false:                                       ; preds = %sw.epilog.48
  %45 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %shr = ashr i32 %45, 2
  %mul = mul i32 3, %shr
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %mul, %cond.false ]
  %cmp52 = icmp slt i32 %dec, %cond
  br i1 %cmp52, label %if.then.53, label %if.end.70

if.then.53:                                       ; preds = %cond.end
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val55, align 8
  %46 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val55, align 8
  %_value60 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %46, i32 0, i32 0
  store i8** %_value60, i8*** %volatile_data59, align 8
  store i32 0, i32* %order62, align 4
  %47 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val55, align 8
  %48 = bitcast %struct._Py_atomic_address* %47 to i8*
  %49 = load i32, i32* %order62, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %48, i32 %49)
  %50 = load i32, i32* %order62, align 4
  switch i32 %50, label %sw.default.64 [
    i32 2, label %sw.bb.63
    i32 3, label %sw.bb.63
    i32 4, label %sw.bb.63
  ]

sw.bb.63:                                         ; preds = %if.then.53, %if.then.53, %if.then.53
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.65

sw.default.64:                                    ; preds = %if.then.53
  br label %sw.epilog.65

sw.epilog.65:                                     ; preds = %sw.default.64, %sw.bb.63
  %51 = load i8**, i8*** %volatile_data59, align 8
  %52 = load volatile i8*, i8** %51, align 8
  store i8* %52, i8** %result57, align 8
  %53 = load i32, i32* %order62, align 4
  switch i32 %53, label %sw.default.67 [
    i32 1, label %sw.bb.66
    i32 3, label %sw.bb.66
    i32 4, label %sw.bb.66
  ]

sw.bb.66:                                         ; preds = %sw.epilog.65, %sw.epilog.65, %sw.epilog.65
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.68

sw.default.67:                                    ; preds = %sw.epilog.65
  br label %sw.epilog.68

sw.epilog.68:                                     ; preds = %sw.default.67, %sw.bb.66
  %54 = load i8*, i8** %result57, align 8
  store i8* %54, i8** %tmp69
  %55 = load i8*, i8** %tmp69
  %56 = bitcast i8* %55 to %struct._ts*
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %56, i32 0, i32 5
  store i8 0, i8* %overflowed, align 1
  br label %if.end.70

if.end.70:                                        ; preds = %sw.epilog.68, %cond.end
  br label %do.end

do.end:                                           ; preds = %if.end.70
  br label %if.end.171

if.else.71:                                       ; preds = %land.lhs.true.21, %if.then.19
  %57 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call73 = call %struct._object* @PyObject_GetIter(%struct._object* %57)
  store %struct._object* %call73, %struct._object** %iter, align 8
  %58 = load %struct._object*, %struct._object** %iter, align 8
  %cmp74 = icmp eq %struct._object* %58, null
  br i1 %cmp74, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.else.71
  br label %error

if.end.76:                                        ; preds = %if.else.71
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val78, align 8
  %59 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val78, align 8
  %_value83 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %59, i32 0, i32 0
  store i8** %_value83, i8*** %volatile_data82, align 8
  store i32 0, i32* %order85, align 4
  %60 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val78, align 8
  %61 = bitcast %struct._Py_atomic_address* %60 to i8*
  %62 = load i32, i32* %order85, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %61, i32 %62)
  %63 = load i32, i32* %order85, align 4
  switch i32 %63, label %sw.default.87 [
    i32 2, label %sw.bb.86
    i32 3, label %sw.bb.86
    i32 4, label %sw.bb.86
  ]

sw.bb.86:                                         ; preds = %if.end.76, %if.end.76, %if.end.76
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.88

sw.default.87:                                    ; preds = %if.end.76
  br label %sw.epilog.88

sw.epilog.88:                                     ; preds = %sw.default.87, %sw.bb.86
  %64 = load i8**, i8*** %volatile_data82, align 8
  %65 = load volatile i8*, i8** %64, align 8
  store i8* %65, i8** %result80, align 8
  %66 = load i32, i32* %order85, align 4
  switch i32 %66, label %sw.default.90 [
    i32 1, label %sw.bb.89
    i32 3, label %sw.bb.89
    i32 4, label %sw.bb.89
  ]

sw.bb.89:                                         ; preds = %sw.epilog.88, %sw.epilog.88, %sw.epilog.88
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.91

sw.default.90:                                    ; preds = %sw.epilog.88
  br label %sw.epilog.91

sw.epilog.91:                                     ; preds = %sw.default.90, %sw.bb.89
  %67 = load i8*, i8** %result80, align 8
  store i8* %67, i8** %tmp92
  %68 = load i8*, i8** %tmp92
  %69 = bitcast i8* %68 to %struct._ts*
  %recursion_depth93 = getelementptr inbounds %struct._ts, %struct._ts* %69, i32 0, i32 4
  %70 = load i32, i32* %recursion_depth93, align 4
  %inc94 = add i32 %70, 1
  store i32 %inc94, i32* %recursion_depth93, align 4
  %71 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp95 = icmp sgt i32 %inc94, %71
  br i1 %cmp95, label %land.lhs.true.96, label %if.end.109

land.lhs.true.96:                                 ; preds = %sw.epilog.91
  %call97 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i32 0, i32 0))
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.then.99, label %if.end.109

if.then.99:                                       ; preds = %land.lhs.true.96
  br label %do.body.100

do.body.100:                                      ; preds = %if.then.99
  %72 = load %struct._object*, %struct._object** %iter, align 8
  store %struct._object* %72, %struct._object** %_py_decref_tmp, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt, align 8
  %dec102 = add i64 %74, -1
  store i64 %dec102, i64* %ob_refcnt, align 8
  %cmp103 = icmp ne i64 %dec102, 0
  br i1 %cmp103, label %if.then.104, label %if.else.105

if.then.104:                                      ; preds = %do.body.100
  br label %if.end.107

if.else.105:                                      ; preds = %do.body.100
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type106 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type106, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 4
  %77 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %77(%struct._object* %78)
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.105, %if.then.104
  br label %do.end.108

do.end.108:                                       ; preds = %if.end.107
  br label %error

if.end.109:                                       ; preds = %land.lhs.true.96, %sw.epilog.91
  %79 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %80 = load %struct._object*, %struct._object** %iter, align 8
  %call110 = call i32 @batch_list(%struct.PicklerObject* %79, %struct._object* %80)
  store i32 %call110, i32* %status, align 4
  br label %do.body.111

do.body.111:                                      ; preds = %if.end.109
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val113, align 8
  %81 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val113, align 8
  %_value118 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %81, i32 0, i32 0
  store i8** %_value118, i8*** %volatile_data117, align 8
  store i32 0, i32* %order120, align 4
  %82 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val113, align 8
  %83 = bitcast %struct._Py_atomic_address* %82 to i8*
  %84 = load i32, i32* %order120, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %83, i32 %84)
  %85 = load i32, i32* %order120, align 4
  switch i32 %85, label %sw.default.122 [
    i32 2, label %sw.bb.121
    i32 3, label %sw.bb.121
    i32 4, label %sw.bb.121
  ]

sw.bb.121:                                        ; preds = %do.body.111, %do.body.111, %do.body.111
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.123

sw.default.122:                                   ; preds = %do.body.111
  br label %sw.epilog.123

sw.epilog.123:                                    ; preds = %sw.default.122, %sw.bb.121
  %86 = load i8**, i8*** %volatile_data117, align 8
  %87 = load volatile i8*, i8** %86, align 8
  store i8* %87, i8** %result115, align 8
  %88 = load i32, i32* %order120, align 4
  switch i32 %88, label %sw.default.125 [
    i32 1, label %sw.bb.124
    i32 3, label %sw.bb.124
    i32 4, label %sw.bb.124
  ]

sw.bb.124:                                        ; preds = %sw.epilog.123, %sw.epilog.123, %sw.epilog.123
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.126

sw.default.125:                                   ; preds = %sw.epilog.123
  br label %sw.epilog.126

sw.epilog.126:                                    ; preds = %sw.default.125, %sw.bb.124
  %89 = load i8*, i8** %result115, align 8
  store i8* %89, i8** %tmp127
  %90 = load i8*, i8** %tmp127
  %91 = bitcast i8* %90 to %struct._ts*
  %recursion_depth128 = getelementptr inbounds %struct._ts, %struct._ts* %91, i32 0, i32 4
  %92 = load i32, i32* %recursion_depth128, align 4
  %dec129 = add i32 %92, -1
  store i32 %dec129, i32* %recursion_depth128, align 4
  %93 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp130 = icmp sgt i32 %93, 100
  br i1 %cmp130, label %cond.true.131, label %cond.false.133

cond.true.131:                                    ; preds = %sw.epilog.126
  %94 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %sub132 = sub i32 %94, 50
  br label %cond.end.136

cond.false.133:                                   ; preds = %sw.epilog.126
  %95 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %shr134 = ashr i32 %95, 2
  %mul135 = mul i32 3, %shr134
  br label %cond.end.136

cond.end.136:                                     ; preds = %cond.false.133, %cond.true.131
  %cond137 = phi i32 [ %sub132, %cond.true.131 ], [ %mul135, %cond.false.133 ]
  %cmp138 = icmp slt i32 %dec129, %cond137
  br i1 %cmp138, label %if.then.139, label %if.end.157

if.then.139:                                      ; preds = %cond.end.136
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val141, align 8
  %96 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val141, align 8
  %_value146 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %96, i32 0, i32 0
  store i8** %_value146, i8*** %volatile_data145, align 8
  store i32 0, i32* %order148, align 4
  %97 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val141, align 8
  %98 = bitcast %struct._Py_atomic_address* %97 to i8*
  %99 = load i32, i32* %order148, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %98, i32 %99)
  %100 = load i32, i32* %order148, align 4
  switch i32 %100, label %sw.default.150 [
    i32 2, label %sw.bb.149
    i32 3, label %sw.bb.149
    i32 4, label %sw.bb.149
  ]

sw.bb.149:                                        ; preds = %if.then.139, %if.then.139, %if.then.139
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.151

sw.default.150:                                   ; preds = %if.then.139
  br label %sw.epilog.151

sw.epilog.151:                                    ; preds = %sw.default.150, %sw.bb.149
  %101 = load i8**, i8*** %volatile_data145, align 8
  %102 = load volatile i8*, i8** %101, align 8
  store i8* %102, i8** %result143, align 8
  %103 = load i32, i32* %order148, align 4
  switch i32 %103, label %sw.default.153 [
    i32 1, label %sw.bb.152
    i32 3, label %sw.bb.152
    i32 4, label %sw.bb.152
  ]

sw.bb.152:                                        ; preds = %sw.epilog.151, %sw.epilog.151, %sw.epilog.151
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.154

sw.default.153:                                   ; preds = %sw.epilog.151
  br label %sw.epilog.154

sw.epilog.154:                                    ; preds = %sw.default.153, %sw.bb.152
  %104 = load i8*, i8** %result143, align 8
  store i8* %104, i8** %tmp155
  %105 = load i8*, i8** %tmp155
  %106 = bitcast i8* %105 to %struct._ts*
  %overflowed156 = getelementptr inbounds %struct._ts, %struct._ts* %106, i32 0, i32 5
  store i8 0, i8* %overflowed156, align 1
  br label %if.end.157

if.end.157:                                       ; preds = %sw.epilog.154, %cond.end.136
  br label %do.end.158

do.end.158:                                       ; preds = %if.end.157
  br label %do.body.159

do.body.159:                                      ; preds = %do.end.158
  %107 = load %struct._object*, %struct._object** %iter, align 8
  store %struct._object* %107, %struct._object** %_py_decref_tmp161, align 8
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp161, align 8
  %ob_refcnt162 = getelementptr inbounds %struct._object, %struct._object* %108, i32 0, i32 0
  %109 = load i64, i64* %ob_refcnt162, align 8
  %dec163 = add i64 %109, -1
  store i64 %dec163, i64* %ob_refcnt162, align 8
  %cmp164 = icmp ne i64 %dec163, 0
  br i1 %cmp164, label %if.then.165, label %if.else.166

if.then.165:                                      ; preds = %do.body.159
  br label %if.end.169

if.else.166:                                      ; preds = %do.body.159
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp161, align 8
  %ob_type167 = getelementptr inbounds %struct._object, %struct._object* %110, i32 0, i32 1
  %111 = load %struct._typeobject*, %struct._typeobject** %ob_type167, align 8
  %tp_dealloc168 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %111, i32 0, i32 4
  %112 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc168, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp161, align 8
  call void %112(%struct._object* %113)
  br label %if.end.169

if.end.169:                                       ; preds = %if.else.166, %if.then.165
  br label %do.end.170

do.end.170:                                       ; preds = %if.end.169
  br label %if.end.171

if.end.171:                                       ; preds = %do.end.170, %do.end
  br label %if.end.172

if.end.172:                                       ; preds = %if.end.171, %if.end.17
  br i1 false, label %if.then.173, label %if.end.174

if.then.173:                                      ; preds = %if.end.172
  br label %error

error:                                            ; preds = %if.then.173, %do.end.108, %if.then.75, %if.then.31, %if.then.16, %if.then.12, %if.then.8, %if.then
  store i32 -1, i32* %status, align 4
  br label %if.end.174

if.end.174:                                       ; preds = %error, %if.end.172
  %114 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast175 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %114, i32 0, i32 13
  %115 = load i32, i32* %fast175, align 4
  %tobool176 = icmp ne i32 %115, 0
  br i1 %tobool176, label %land.lhs.true.177, label %if.end.181

land.lhs.true.177:                                ; preds = %if.end.174
  %116 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %117 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call178 = call i32 @fast_save_leave(%struct.PicklerObject* %116, %struct._object* %117)
  %tobool179 = icmp ne i32 %call178, 0
  br i1 %tobool179, label %if.end.181, label %if.then.180

if.then.180:                                      ; preds = %land.lhs.true.177
  store i32 -1, i32* %status, align 4
  br label %if.end.181

if.end.181:                                       ; preds = %if.then.180, %land.lhs.true.177, %if.end.174
  %118 = load i32, i32* %status, align 4
  ret i32 %118
}

; Function Attrs: nounwind uwtable
define internal i32 @save_tuple(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %mark_op = alloca i8, align 1
  %tuple_op = alloca i8, align 1
  %pop_op = alloca i8, align 1
  %pop_mark_op = alloca i8, align 1
  %pdata = alloca [2 x i8], align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8 40, i8* %mark_op, align 1
  store i8 116, i8* %tuple_op, align 1
  store i8 48, i8* %pop_op, align 1
  store i8 49, i8* %pop_mark_op, align 1
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i64 @PyTuple_Size(%struct._object* %0)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp eq i64 %1, 0
  br i1 %cmp1, label %if.then.2, label %if.end.11

if.then.2:                                        ; preds = %if.end
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 8
  %3 = load i32, i32* %proto, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then.2
  %arrayidx = getelementptr [2 x i8], [2 x i8]* %pdata, i32 0, i64 0
  store i8 41, i8* %arrayidx, align 1
  store i64 1, i64* %len, align 8
  br label %if.end.6

if.else:                                          ; preds = %if.then.2
  %arrayidx4 = getelementptr [2 x i8], [2 x i8]* %pdata, i32 0, i64 0
  store i8 40, i8* %arrayidx4, align 1
  %arrayidx5 = getelementptr [2 x i8], [2 x i8]* %pdata, i32 0, i64 1
  store i8 116, i8* %arrayidx5, align 1
  store i64 2, i64* %len, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.3
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %pdata, i32 0, i32 0
  %5 = load i64, i64* %len, align 8
  %call7 = call i64 @_Pickler_Write(%struct.PicklerObject* %4, i8* %arraydecay, i64 %5)
  %cmp8 = icmp slt i64 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.6
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.6
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %6 = load i64, i64* %len, align 8
  %cmp12 = icmp sle i64 %6, 3
  br i1 %cmp12, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %if.end.11
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto13 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %7, i32 0, i32 8
  %8 = load i32, i32* %proto13, align 4
  %cmp14 = icmp sge i32 %8, 2
  br i1 %cmp14, label %if.then.15, label %if.end.38

if.then.15:                                       ; preds = %land.lhs.true
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %11 = load i64, i64* %len, align 8
  %call16 = call i32 @store_tuple_elements(%struct.PicklerObject* %9, %struct._object* %10, i64 %11)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.then.15
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.then.15
  %12 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %12, i32 0, i32 1
  %13 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %14 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call20 = call i64* @PyMemoTable_Get(%struct.PyMemoTable* %13, %struct._object* %14)
  %tobool21 = icmp ne i64* %call20, null
  br i1 %tobool21, label %if.then.22, label %if.else.32

if.then.22:                                       ; preds = %if.end.19
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.22
  %15 = load i64, i64* %i, align 8
  %16 = load i64, i64* %len, align 8
  %cmp23 = icmp slt i64 %15, %16
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call24 = call i64 @_Pickler_Write(%struct.PicklerObject* %17, i8* %pop_op, i64 1)
  %cmp25 = icmp slt i64 %call24, 0
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %for.body
  store i32 -1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.27
  %18 = load i64, i64* %i, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %20 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call28 = call i32 @memo_get(%struct.PicklerObject* %19, %struct._object* %20)
  %cmp29 = icmp slt i32 %call28, 0
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %for.end
  store i32 -1, i32* %retval
  br label %return

if.end.31:                                        ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

if.else.32:                                       ; preds = %if.end.19
  %21 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %22 = load i64, i64* %len, align 8
  %add.ptr = getelementptr i8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @save_tuple.len2opcode, i32 0, i32 0), i64 %22
  %call33 = call i64 @_Pickler_Write(%struct.PicklerObject* %21, i8* %add.ptr, i64 1)
  %cmp34 = icmp slt i64 %call33, 0
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.else.32
  store i32 -1, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.else.32
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36
  br label %memoize

if.end.38:                                        ; preds = %land.lhs.true, %if.end.11
  %23 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call39 = call i64 @_Pickler_Write(%struct.PicklerObject* %23, i8* %mark_op, i64 1)
  %cmp40 = icmp slt i64 %call39, 0
  br i1 %cmp40, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %if.end.38
  store i32 -1, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.end.38
  %24 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %obj.addr, align 8
  %26 = load i64, i64* %len, align 8
  %call43 = call i32 @store_tuple_elements(%struct.PicklerObject* %24, %struct._object* %25, i64 %26)
  %cmp44 = icmp slt i32 %call43, 0
  br i1 %cmp44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.end.42
  store i32 -1, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.end.42
  %27 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo47 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %27, i32 0, i32 1
  %28 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo47, align 8
  %29 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call48 = call i64* @PyMemoTable_Get(%struct.PyMemoTable* %28, %struct._object* %29)
  %tobool49 = icmp ne i64* %call48, null
  br i1 %tobool49, label %if.then.50, label %if.else.73

if.then.50:                                       ; preds = %if.end.46
  %30 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %30, i32 0, i32 9
  %31 = load i32, i32* %bin, align 4
  %tobool51 = icmp ne i32 %31, 0
  br i1 %tobool51, label %if.then.52, label %if.else.57

if.then.52:                                       ; preds = %if.then.50
  %32 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call53 = call i64 @_Pickler_Write(%struct.PicklerObject* %32, i8* %pop_mark_op, i64 1)
  %cmp54 = icmp slt i64 %call53, 0
  br i1 %cmp54, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %if.then.52
  store i32 -1, i32* %retval
  br label %return

if.end.56:                                        ; preds = %if.then.52
  br label %if.end.68

if.else.57:                                       ; preds = %if.then.50
  store i64 0, i64* %i, align 8
  br label %for.cond.58

for.cond.58:                                      ; preds = %for.inc.65, %if.else.57
  %33 = load i64, i64* %i, align 8
  %34 = load i64, i64* %len, align 8
  %cmp59 = icmp sle i64 %33, %34
  br i1 %cmp59, label %for.body.60, label %for.end.67

for.body.60:                                      ; preds = %for.cond.58
  %35 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call61 = call i64 @_Pickler_Write(%struct.PicklerObject* %35, i8* %pop_op, i64 1)
  %cmp62 = icmp slt i64 %call61, 0
  br i1 %cmp62, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %for.body.60
  store i32 -1, i32* %retval
  br label %return

if.end.64:                                        ; preds = %for.body.60
  br label %for.inc.65

for.inc.65:                                       ; preds = %if.end.64
  %36 = load i64, i64* %i, align 8
  %inc66 = add i64 %36, 1
  store i64 %inc66, i64* %i, align 8
  br label %for.cond.58

for.end.67:                                       ; preds = %for.cond.58
  br label %if.end.68

if.end.68:                                        ; preds = %for.end.67, %if.end.56
  %37 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call69 = call i32 @memo_get(%struct.PicklerObject* %37, %struct._object* %38)
  %cmp70 = icmp slt i32 %call69, 0
  br i1 %cmp70, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.end.68
  store i32 -1, i32* %retval
  br label %return

if.end.72:                                        ; preds = %if.end.68
  store i32 0, i32* %retval
  br label %return

if.else.73:                                       ; preds = %if.end.46
  %39 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call74 = call i64 @_Pickler_Write(%struct.PicklerObject* %39, i8* %tuple_op, i64 1)
  %cmp75 = icmp slt i64 %call74, 0
  br i1 %cmp75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.else.73
  store i32 -1, i32* %retval
  br label %return

if.end.77:                                        ; preds = %if.else.73
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77
  br label %memoize

memoize:                                          ; preds = %if.end.78, %if.end.37
  %40 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %41 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call79 = call i32 @memo_put(%struct.PicklerObject* %40, %struct._object* %41)
  %cmp80 = icmp slt i32 %call79, 0
  br i1 %cmp80, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %memoize
  store i32 -1, i32* %retval
  br label %return

if.end.82:                                        ; preds = %memoize
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.82, %if.then.81, %if.then.76, %if.end.72, %if.then.71, %if.then.63, %if.then.55, %if.then.45, %if.then.41, %if.then.35, %if.end.31, %if.then.30, %if.then.26, %if.then.18, %if.end.10, %if.then.9, %if.then
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i32 @save_type(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp = icmp eq %struct._object* %0, getelementptr inbounds (%struct._typeobject, %struct._typeobject* @_PyNone_Type, i32 0, i32 0, i32 0)
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @save_singleton_type(%struct.PicklerObject* %1, %struct._object* %2, %struct._object* @_Py_NoneStruct)
  store i32 %call, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp1 = icmp eq %struct._object* %3, getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyEllipsis_Type, i32 0, i32 0, i32 0)
  br i1 %cmp1, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call3 = call i32 @save_singleton_type(%struct.PicklerObject* %4, %struct._object* %5, %struct._object* @_Py_EllipsisObject)
  store i32 %call3, i32* %retval
  br label %return

if.else.4:                                        ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp5 = icmp eq %struct._object* %6, getelementptr inbounds (%struct._typeobject, %struct._typeobject* @_PyNotImplemented_Type, i32 0, i32 0, i32 0)
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.else.4
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call7 = call i32 @save_singleton_type(%struct.PicklerObject* %7, %struct._object* %8, %struct._object* @_Py_NotImplementedStruct)
  store i32 %call7, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else.4
  br label %if.end.8

if.end.8:                                         ; preds = %if.end
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call10 = call i32 @save_global(%struct.PicklerObject* %9, %struct._object* %10, %struct._object* null)
  store i32 %call10, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.6, %if.then.2, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @save_global(%struct.PicklerObject* %self, %struct._object* %obj, %struct._object* %name) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %global_name = alloca %struct._object*, align 8
  %module_name = alloca %struct._object*, align 8
  %module = alloca %struct._object*, align 8
  %cls = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %status = alloca i32, align 4
  %global_op = alloca i8, align 1
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %extension_key = alloca %struct._object*, align 8
  %code_obj = alloca %struct._object*, align 8
  %code = alloca i64, align 8
  %pdata = alloca [5 x i8], align 1
  %n = alloca i64, align 8
  %_py_decref_tmp76 = alloca %struct._object*, align 8
  %stack_global_op = alloca i8, align 1
  %encoded = alloca %struct._object*, align 8
  %unicode_encoder = alloca %struct._object* (%struct._object*)*, align 8
  %_py_decref_tmp216 = alloca %struct._object*, align 8
  %_py_decref_tmp229 = alloca %struct._object*, align 8
  %_py_decref_tmp265 = alloca %struct._object*, align 8
  %_py_decref_tmp278 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp308 = alloca %struct._object*, align 8
  %_py_xdecref_tmp322 = alloca %struct._object*, align 8
  %_py_decref_tmp327 = alloca %struct._object*, align 8
  %_py_xdecref_tmp341 = alloca %struct._object*, align 8
  %_py_decref_tmp346 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._object* null, %struct._object** %global_name, align 8
  store %struct._object* null, %struct._object** %module_name, align 8
  store %struct._object* null, %struct._object** %module, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  store i32 0, i32* %status, align 4
  store i8 99, i8* %global_op, align 1
  %0 = load %struct._object*, %struct._object** %name.addr, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 0
  %2 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %3 = load %struct._object*, %struct._object** %name.addr, align 8
  store %struct._object* %3, %struct._object** %global_name, align 8
  br label %if.end.17

if.else:                                          ; preds = %entry
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 8
  %5 = load i32, i32* %proto, align 4
  %cmp = icmp sge i32 %5, 4
  br i1 %cmp, label %if.then.1, label %if.end.9

if.then.1:                                        ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call2 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %6, %struct._Py_Identifier* @save_global.PyId___qualname__)
  store %struct._object* %call2, %struct._object** %global_name, align 8
  %7 = load %struct._object*, %struct._object** %global_name, align 8
  %cmp3 = icmp eq %struct._object* %7, null
  br i1 %cmp3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %if.then.1
  %8 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call5 = call i32 @PyErr_ExceptionMatches(%struct._object* %8)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %if.then.4
  br label %error

if.end:                                           ; preds = %if.then.4
  call void @PyErr_Clear()
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then.1
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.else
  %9 = load %struct._object*, %struct._object** %global_name, align 8
  %cmp10 = icmp eq %struct._object* %9, null
  br i1 %cmp10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.end.9
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call12 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %10, %struct._Py_Identifier* @save_global.PyId___name__)
  store %struct._object* %call12, %struct._object** %global_name, align 8
  %11 = load %struct._object*, %struct._object** %global_name, align 8
  %cmp13 = icmp eq %struct._object* %11, null
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.11
  br label %error

if.end.15:                                        ; preds = %if.then.11
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %if.end.9
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.then
  %12 = load %struct._object*, %struct._object** %obj.addr, align 8
  %13 = load %struct._object*, %struct._object** %global_name, align 8
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto18 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 8
  %15 = load i32, i32* %proto18, align 4
  %cmp19 = icmp sge i32 %15, 4
  %conv = zext i1 %cmp19 to i32
  %call20 = call %struct._object* @whichmodule(%struct._object* %12, %struct._object* %13, i32 %conv)
  store %struct._object* %call20, %struct._object** %module_name, align 8
  %16 = load %struct._object*, %struct._object** %module_name, align 8
  %cmp21 = icmp eq %struct._object* %16, null
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.17
  br label %error

if.end.24:                                        ; preds = %if.end.17
  %17 = load %struct._object*, %struct._object** %module_name, align 8
  %call25 = call %struct._object* @PyImport_Import(%struct._object* %17)
  store %struct._object* %call25, %struct._object** %module, align 8
  %18 = load %struct._object*, %struct._object** %module, align 8
  %cmp26 = icmp eq %struct._object* %18, null
  br i1 %cmp26, label %if.then.28, label %if.end.30

if.then.28:                                       ; preds = %if.end.24
  %19 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %19, i32 0, i32 1
  %20 = load %struct._object*, %struct._object** %PicklingError, align 8
  %21 = load %struct._object*, %struct._object** %obj.addr, align 8
  %22 = load %struct._object*, %struct._object** %module_name, align 8
  %call29 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %20, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.52, i32 0, i32 0), %struct._object* %21, %struct._object* %22)
  br label %error

if.end.30:                                        ; preds = %if.end.24
  %23 = load %struct._object*, %struct._object** %module, align 8
  %24 = load %struct._object*, %struct._object** %global_name, align 8
  %25 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto31 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %25, i32 0, i32 8
  %26 = load i32, i32* %proto31, align 4
  %cmp32 = icmp sge i32 %26, 4
  %conv33 = zext i1 %cmp32 to i32
  %call34 = call %struct._object* @getattribute(%struct._object* %23, %struct._object* %24, i32 %conv33)
  store %struct._object* %call34, %struct._object** %cls, align 8
  %27 = load %struct._object*, %struct._object** %cls, align 8
  %cmp35 = icmp eq %struct._object* %27, null
  br i1 %cmp35, label %if.then.37, label %if.end.40

if.then.37:                                       ; preds = %if.end.30
  %28 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError38 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %28, i32 0, i32 1
  %29 = load %struct._object*, %struct._object** %PicklingError38, align 8
  %30 = load %struct._object*, %struct._object** %obj.addr, align 8
  %31 = load %struct._object*, %struct._object** %global_name, align 8
  %32 = load %struct._object*, %struct._object** %module_name, align 8
  %call39 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %29, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.53, i32 0, i32 0), %struct._object* %30, %struct._object* %31, %struct._object* %32)
  br label %error

if.end.40:                                        ; preds = %if.end.30
  %33 = load %struct._object*, %struct._object** %cls, align 8
  %34 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp41 = icmp ne %struct._object* %33, %34
  br i1 %cmp41, label %if.then.43, label %if.end.52

if.then.43:                                       ; preds = %if.end.40
  br label %do.body

do.body:                                          ; preds = %if.then.43
  %35 = load %struct._object*, %struct._object** %cls, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt44 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt44, align 8
  %dec = add i64 %37, -1
  store i64 %dec, i64* %ob_refcnt44, align 8
  %cmp45 = icmp ne i64 %dec, 0
  br i1 %cmp45, label %if.then.47, label %if.else.48

if.then.47:                                       ; preds = %do.body
  br label %if.end.49

if.else.48:                                       ; preds = %do.body
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %40(%struct._object* %41)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.48, %if.then.47
  br label %do.end

do.end:                                           ; preds = %if.end.49
  %42 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError50 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %42, i32 0, i32 1
  %43 = load %struct._object*, %struct._object** %PicklingError50, align 8
  %44 = load %struct._object*, %struct._object** %obj.addr, align 8
  %45 = load %struct._object*, %struct._object** %module_name, align 8
  %46 = load %struct._object*, %struct._object** %global_name, align 8
  %call51 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %43, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.54, i32 0, i32 0), %struct._object* %44, %struct._object* %45, %struct._object* %46)
  br label %error

if.end.52:                                        ; preds = %if.end.40
  br label %do.body.53

do.body.53:                                       ; preds = %if.end.52
  %47 = load %struct._object*, %struct._object** %cls, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp54, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %49, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.53
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.53
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %52(%struct._object* %53)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  %54 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto65 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %54, i32 0, i32 8
  %55 = load i32, i32* %proto65, align 4
  %cmp66 = icmp sge i32 %55, 2
  br i1 %cmp66, label %if.then.68, label %if.else.155

if.then.68:                                       ; preds = %do.end.64
  %56 = load %struct._object*, %struct._object** %module_name, align 8
  %57 = load %struct._object*, %struct._object** %global_name, align 8
  %call69 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %56, %struct._object* %57)
  store %struct._object* %call69, %struct._object** %extension_key, align 8
  %58 = load %struct._object*, %struct._object** %extension_key, align 8
  %cmp70 = icmp eq %struct._object* %58, null
  br i1 %cmp70, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.then.68
  br label %error

if.end.73:                                        ; preds = %if.then.68
  %59 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %extension_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %59, i32 0, i32 4
  %60 = load %struct._object*, %struct._object** %extension_registry, align 8
  %61 = load %struct._object*, %struct._object** %extension_key, align 8
  %call74 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %60, %struct._object* %61)
  store %struct._object* %call74, %struct._object** %code_obj, align 8
  br label %do.body.75

do.body.75:                                       ; preds = %if.end.73
  %62 = load %struct._object*, %struct._object** %extension_key, align 8
  store %struct._object* %62, %struct._object** %_py_decref_tmp76, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp76, align 8
  %ob_refcnt77 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0
  %64 = load i64, i64* %ob_refcnt77, align 8
  %dec78 = add i64 %64, -1
  store i64 %dec78, i64* %ob_refcnt77, align 8
  %cmp79 = icmp ne i64 %dec78, 0
  br i1 %cmp79, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.75
  br label %if.end.85

if.else.82:                                       ; preds = %do.body.75
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp76, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp76, align 8
  call void %67(%struct._object* %68)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  %69 = load %struct._object*, %struct._object** %code_obj, align 8
  %cmp87 = icmp eq %struct._object* %69, null
  br i1 %cmp87, label %if.then.89, label %if.end.94

if.then.89:                                       ; preds = %do.end.86
  %call90 = call %struct._object* @PyErr_Occurred()
  %tobool91 = icmp ne %struct._object* %call90, null
  br i1 %tobool91, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %if.then.89
  br label %error

if.end.93:                                        ; preds = %if.then.89
  br label %gen_global

if.end.94:                                        ; preds = %do.end.86
  %70 = load %struct._object*, %struct._object** %code_obj, align 8
  %ob_type95 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type95, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 19
  %72 = load i64, i64* %tp_flags, align 8
  %and = and i64 %72, 16777216
  %cmp96 = icmp ne i64 %and, 0
  br i1 %cmp96, label %if.end.101, label %if.then.98

if.then.98:                                       ; preds = %if.end.94
  %73 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError99 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %73, i32 0, i32 1
  %74 = load %struct._object*, %struct._object** %PicklingError99, align 8
  %75 = load %struct._object*, %struct._object** %obj.addr, align 8
  %76 = load %struct._object*, %struct._object** %code_obj, align 8
  %call100 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %74, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.55, i32 0, i32 0), %struct._object* %75, %struct._object* %76)
  br label %error

if.end.101:                                       ; preds = %if.end.94
  %77 = load %struct._object*, %struct._object** %code_obj, align 8
  %call102 = call i64 @PyLong_AsLong(%struct._object* %77)
  store i64 %call102, i64* %code, align 8
  %78 = load i64, i64* %code, align 8
  %cmp103 = icmp sle i64 %78, 0
  br i1 %cmp103, label %if.then.107, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.101
  %79 = load i64, i64* %code, align 8
  %cmp105 = icmp sgt i64 %79, 2147483647
  br i1 %cmp105, label %if.then.107, label %if.end.114

if.then.107:                                      ; preds = %lor.lhs.false, %if.end.101
  %call108 = call %struct._object* @PyErr_Occurred()
  %tobool109 = icmp ne %struct._object* %call108, null
  br i1 %tobool109, label %if.end.113, label %if.then.110

if.then.110:                                      ; preds = %if.then.107
  %80 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError111 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %80, i32 0, i32 1
  %81 = load %struct._object*, %struct._object** %PicklingError111, align 8
  %82 = load %struct._object*, %struct._object** %obj.addr, align 8
  %83 = load i64, i64* %code, align 8
  %call112 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %81, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.56, i32 0, i32 0), %struct._object* %82, i64 %83)
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.110, %if.then.107
  br label %error

if.end.114:                                       ; preds = %lor.lhs.false
  %84 = load i64, i64* %code, align 8
  %cmp115 = icmp sle i64 %84, 255
  br i1 %cmp115, label %if.then.117, label %if.else.120

if.then.117:                                      ; preds = %if.end.114
  %arrayidx = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 0
  store i8 -126, i8* %arrayidx, align 1
  %85 = load i64, i64* %code, align 8
  %conv118 = trunc i64 %85 to i8
  %arrayidx119 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 1
  store i8 %conv118, i8* %arrayidx119, align 1
  store i64 2, i64* %n, align 8
  br label %if.end.149

if.else.120:                                      ; preds = %if.end.114
  %86 = load i64, i64* %code, align 8
  %cmp121 = icmp sle i64 %86, 65535
  br i1 %cmp121, label %if.then.123, label %if.else.131

if.then.123:                                      ; preds = %if.else.120
  %arrayidx124 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 0
  store i8 -125, i8* %arrayidx124, align 1
  %87 = load i64, i64* %code, align 8
  %and125 = and i64 %87, 255
  %conv126 = trunc i64 %and125 to i8
  %arrayidx127 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 1
  store i8 %conv126, i8* %arrayidx127, align 1
  %88 = load i64, i64* %code, align 8
  %shr = ashr i64 %88, 8
  %and128 = and i64 %shr, 255
  %conv129 = trunc i64 %and128 to i8
  %arrayidx130 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 2
  store i8 %conv129, i8* %arrayidx130, align 1
  store i64 3, i64* %n, align 8
  br label %if.end.148

if.else.131:                                      ; preds = %if.else.120
  %arrayidx132 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 0
  store i8 -124, i8* %arrayidx132, align 1
  %89 = load i64, i64* %code, align 8
  %and133 = and i64 %89, 255
  %conv134 = trunc i64 %and133 to i8
  %arrayidx135 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 1
  store i8 %conv134, i8* %arrayidx135, align 1
  %90 = load i64, i64* %code, align 8
  %shr136 = ashr i64 %90, 8
  %and137 = and i64 %shr136, 255
  %conv138 = trunc i64 %and137 to i8
  %arrayidx139 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 2
  store i8 %conv138, i8* %arrayidx139, align 1
  %91 = load i64, i64* %code, align 8
  %shr140 = ashr i64 %91, 16
  %and141 = and i64 %shr140, 255
  %conv142 = trunc i64 %and141 to i8
  %arrayidx143 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 3
  store i8 %conv142, i8* %arrayidx143, align 1
  %92 = load i64, i64* %code, align 8
  %shr144 = ashr i64 %92, 24
  %and145 = and i64 %shr144, 255
  %conv146 = trunc i64 %and145 to i8
  %arrayidx147 = getelementptr [5 x i8], [5 x i8]* %pdata, i32 0, i64 4
  store i8 %conv146, i8* %arrayidx147, align 1
  store i64 5, i64* %n, align 8
  br label %if.end.148

if.end.148:                                       ; preds = %if.else.131, %if.then.123
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %if.then.117
  %93 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %pdata, i32 0, i32 0
  %94 = load i64, i64* %n, align 8
  %call150 = call i64 @_Pickler_Write(%struct.PicklerObject* %93, i8* %arraydecay, i64 %94)
  %cmp151 = icmp slt i64 %call150, 0
  br i1 %cmp151, label %if.then.153, label %if.end.154

if.then.153:                                      ; preds = %if.end.149
  br label %error

if.end.154:                                       ; preds = %if.end.149
  br label %if.end.300

if.else.155:                                      ; preds = %do.end.64
  br label %gen_global

gen_global:                                       ; preds = %if.else.155, %if.end.93
  %95 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto156 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %95, i32 0, i32 8
  %96 = load i32, i32* %proto156, align 4
  %cmp157 = icmp sge i32 %96, 4
  br i1 %cmp157, label %if.then.159, label %if.else.175

if.then.159:                                      ; preds = %gen_global
  store i8 -109, i8* %stack_global_op, align 1
  %97 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %98 = load %struct._object*, %struct._object** %module_name, align 8
  %call160 = call i32 @save(%struct.PicklerObject* %97, %struct._object* %98, i32 0)
  %cmp161 = icmp slt i32 %call160, 0
  br i1 %cmp161, label %if.then.163, label %if.end.164

if.then.163:                                      ; preds = %if.then.159
  br label %error

if.end.164:                                       ; preds = %if.then.159
  %99 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %100 = load %struct._object*, %struct._object** %global_name, align 8
  %call165 = call i32 @save(%struct.PicklerObject* %99, %struct._object* %100, i32 0)
  %cmp166 = icmp slt i32 %call165, 0
  br i1 %cmp166, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %if.end.164
  br label %error

if.end.169:                                       ; preds = %if.end.164
  %101 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call170 = call i64 @_Pickler_Write(%struct.PicklerObject* %101, i8* %stack_global_op, i64 1)
  %cmp171 = icmp slt i64 %call170, 0
  br i1 %cmp171, label %if.then.173, label %if.end.174

if.then.173:                                      ; preds = %if.end.169
  br label %error

if.end.174:                                       ; preds = %if.end.169
  br label %if.end.294

if.else.175:                                      ; preds = %gen_global
  %102 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call176 = call i64 @_Pickler_Write(%struct.PicklerObject* %102, i8* %global_op, i64 1)
  %cmp177 = icmp slt i64 %call176, 0
  br i1 %cmp177, label %if.then.179, label %if.end.180

if.then.179:                                      ; preds = %if.else.175
  br label %error

if.end.180:                                       ; preds = %if.else.175
  %103 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto181 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %103, i32 0, i32 8
  %104 = load i32, i32* %proto181, align 4
  %cmp182 = icmp slt i32 %104, 3
  br i1 %cmp182, label %land.lhs.true, label %if.end.191

land.lhs.true:                                    ; preds = %if.end.180
  %105 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fix_imports = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %105, i32 0, i32 15
  %106 = load i32, i32* %fix_imports, align 4
  %tobool184 = icmp ne i32 %106, 0
  br i1 %tobool184, label %if.then.185, label %if.end.191

if.then.185:                                      ; preds = %land.lhs.true
  %call186 = call i32 @fix_imports(%struct._object** %module_name, %struct._object** %global_name)
  %cmp187 = icmp slt i32 %call186, 0
  br i1 %cmp187, label %if.then.189, label %if.end.190

if.then.189:                                      ; preds = %if.then.185
  br label %error

if.end.190:                                       ; preds = %if.then.185
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.190, %land.lhs.true, %if.end.180
  %107 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto192 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %107, i32 0, i32 8
  %108 = load i32, i32* %proto192, align 4
  %cmp193 = icmp eq i32 %108, 3
  br i1 %cmp193, label %if.then.195, label %if.else.196

if.then.195:                                      ; preds = %if.end.191
  store %struct._object* (%struct._object*)* @PyUnicode_AsUTF8String, %struct._object* (%struct._object*)** %unicode_encoder, align 8
  br label %if.end.197

if.else.196:                                      ; preds = %if.end.191
  store %struct._object* (%struct._object*)* @PyUnicode_AsASCIIString, %struct._object* (%struct._object*)** %unicode_encoder, align 8
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.196, %if.then.195
  %109 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %unicode_encoder, align 8
  %110 = load %struct._object*, %struct._object** %module_name, align 8
  %call198 = call %struct._object* %109(%struct._object* %110)
  store %struct._object* %call198, %struct._object** %encoded, align 8
  %111 = load %struct._object*, %struct._object** %encoded, align 8
  %cmp199 = icmp eq %struct._object* %111, null
  br i1 %cmp199, label %if.then.201, label %if.end.209

if.then.201:                                      ; preds = %if.end.197
  %112 = load %struct._object*, %struct._object** @PyExc_UnicodeEncodeError, align 8
  %call202 = call i32 @PyErr_ExceptionMatches(%struct._object* %112)
  %tobool203 = icmp ne i32 %call202, 0
  br i1 %tobool203, label %if.then.204, label %if.end.208

if.then.204:                                      ; preds = %if.then.201
  %113 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError205 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %113, i32 0, i32 1
  %114 = load %struct._object*, %struct._object** %PicklingError205, align 8
  %115 = load %struct._object*, %struct._object** %module_name, align 8
  %116 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto206 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %116, i32 0, i32 8
  %117 = load i32, i32* %proto206, align 4
  %call207 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %114, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.57, i32 0, i32 0), %struct._object* %115, i32 %117)
  br label %if.end.208

if.end.208:                                       ; preds = %if.then.204, %if.then.201
  br label %error

if.end.209:                                       ; preds = %if.end.197
  %118 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %119 = load %struct._object*, %struct._object** %encoded, align 8
  %120 = bitcast %struct._object* %119 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %120, i32 0, i32 2
  %arraydecay210 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %121 = load %struct._object*, %struct._object** %encoded, align 8
  %122 = bitcast %struct._object* %121 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %122, i32 0, i32 1
  %123 = load i64, i64* %ob_size, align 8
  %call211 = call i64 @_Pickler_Write(%struct.PicklerObject* %118, i8* %arraydecay210, i64 %123)
  %cmp212 = icmp slt i64 %call211, 0
  br i1 %cmp212, label %if.then.214, label %if.end.227

if.then.214:                                      ; preds = %if.end.209
  br label %do.body.215

do.body.215:                                      ; preds = %if.then.214
  %124 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %124, %struct._object** %_py_decref_tmp216, align 8
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp216, align 8
  %ob_refcnt217 = getelementptr inbounds %struct._object, %struct._object* %125, i32 0, i32 0
  %126 = load i64, i64* %ob_refcnt217, align 8
  %dec218 = add i64 %126, -1
  store i64 %dec218, i64* %ob_refcnt217, align 8
  %cmp219 = icmp ne i64 %dec218, 0
  br i1 %cmp219, label %if.then.221, label %if.else.222

if.then.221:                                      ; preds = %do.body.215
  br label %if.end.225

if.else.222:                                      ; preds = %do.body.215
  %127 = load %struct._object*, %struct._object** %_py_decref_tmp216, align 8
  %ob_type223 = getelementptr inbounds %struct._object, %struct._object* %127, i32 0, i32 1
  %128 = load %struct._typeobject*, %struct._typeobject** %ob_type223, align 8
  %tp_dealloc224 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %128, i32 0, i32 4
  %129 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc224, align 8
  %130 = load %struct._object*, %struct._object** %_py_decref_tmp216, align 8
  call void %129(%struct._object* %130)
  br label %if.end.225

if.end.225:                                       ; preds = %if.else.222, %if.then.221
  br label %do.end.226

do.end.226:                                       ; preds = %if.end.225
  br label %error

if.end.227:                                       ; preds = %if.end.209
  br label %do.body.228

do.body.228:                                      ; preds = %if.end.227
  %131 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %131, %struct._object** %_py_decref_tmp229, align 8
  %132 = load %struct._object*, %struct._object** %_py_decref_tmp229, align 8
  %ob_refcnt230 = getelementptr inbounds %struct._object, %struct._object* %132, i32 0, i32 0
  %133 = load i64, i64* %ob_refcnt230, align 8
  %dec231 = add i64 %133, -1
  store i64 %dec231, i64* %ob_refcnt230, align 8
  %cmp232 = icmp ne i64 %dec231, 0
  br i1 %cmp232, label %if.then.234, label %if.else.235

if.then.234:                                      ; preds = %do.body.228
  br label %if.end.238

if.else.235:                                      ; preds = %do.body.228
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp229, align 8
  %ob_type236 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 1
  %135 = load %struct._typeobject*, %struct._typeobject** %ob_type236, align 8
  %tp_dealloc237 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %135, i32 0, i32 4
  %136 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc237, align 8
  %137 = load %struct._object*, %struct._object** %_py_decref_tmp229, align 8
  call void %136(%struct._object* %137)
  br label %if.end.238

if.end.238:                                       ; preds = %if.else.235, %if.then.234
  br label %do.end.239

do.end.239:                                       ; preds = %if.end.238
  %138 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call240 = call i64 @_Pickler_Write(%struct.PicklerObject* %138, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0), i64 1)
  %cmp241 = icmp slt i64 %call240, 0
  br i1 %cmp241, label %if.then.243, label %if.end.244

if.then.243:                                      ; preds = %do.end.239
  br label %error

if.end.244:                                       ; preds = %do.end.239
  %139 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %unicode_encoder, align 8
  %140 = load %struct._object*, %struct._object** %global_name, align 8
  %call245 = call %struct._object* %139(%struct._object* %140)
  store %struct._object* %call245, %struct._object** %encoded, align 8
  %141 = load %struct._object*, %struct._object** %encoded, align 8
  %cmp246 = icmp eq %struct._object* %141, null
  br i1 %cmp246, label %if.then.248, label %if.end.256

if.then.248:                                      ; preds = %if.end.244
  %142 = load %struct._object*, %struct._object** @PyExc_UnicodeEncodeError, align 8
  %call249 = call i32 @PyErr_ExceptionMatches(%struct._object* %142)
  %tobool250 = icmp ne i32 %call249, 0
  br i1 %tobool250, label %if.then.251, label %if.end.255

if.then.251:                                      ; preds = %if.then.248
  %143 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError252 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %143, i32 0, i32 1
  %144 = load %struct._object*, %struct._object** %PicklingError252, align 8
  %145 = load %struct._object*, %struct._object** %global_name, align 8
  %146 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto253 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %146, i32 0, i32 8
  %147 = load i32, i32* %proto253, align 4
  %call254 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %144, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.58, i32 0, i32 0), %struct._object* %145, i32 %147)
  br label %if.end.255

if.end.255:                                       ; preds = %if.then.251, %if.then.248
  br label %error

if.end.256:                                       ; preds = %if.end.244
  %148 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %149 = load %struct._object*, %struct._object** %encoded, align 8
  %150 = bitcast %struct._object* %149 to %struct.PyBytesObject*
  %ob_sval257 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %150, i32 0, i32 2
  %arraydecay258 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval257, i32 0, i32 0
  %151 = load %struct._object*, %struct._object** %encoded, align 8
  %152 = bitcast %struct._object* %151 to %struct.PyVarObject*
  %ob_size259 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %152, i32 0, i32 1
  %153 = load i64, i64* %ob_size259, align 8
  %call260 = call i64 @_Pickler_Write(%struct.PicklerObject* %148, i8* %arraydecay258, i64 %153)
  %cmp261 = icmp slt i64 %call260, 0
  br i1 %cmp261, label %if.then.263, label %if.end.276

if.then.263:                                      ; preds = %if.end.256
  br label %do.body.264

do.body.264:                                      ; preds = %if.then.263
  %154 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %154, %struct._object** %_py_decref_tmp265, align 8
  %155 = load %struct._object*, %struct._object** %_py_decref_tmp265, align 8
  %ob_refcnt266 = getelementptr inbounds %struct._object, %struct._object* %155, i32 0, i32 0
  %156 = load i64, i64* %ob_refcnt266, align 8
  %dec267 = add i64 %156, -1
  store i64 %dec267, i64* %ob_refcnt266, align 8
  %cmp268 = icmp ne i64 %dec267, 0
  br i1 %cmp268, label %if.then.270, label %if.else.271

if.then.270:                                      ; preds = %do.body.264
  br label %if.end.274

if.else.271:                                      ; preds = %do.body.264
  %157 = load %struct._object*, %struct._object** %_py_decref_tmp265, align 8
  %ob_type272 = getelementptr inbounds %struct._object, %struct._object* %157, i32 0, i32 1
  %158 = load %struct._typeobject*, %struct._typeobject** %ob_type272, align 8
  %tp_dealloc273 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %158, i32 0, i32 4
  %159 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc273, align 8
  %160 = load %struct._object*, %struct._object** %_py_decref_tmp265, align 8
  call void %159(%struct._object* %160)
  br label %if.end.274

if.end.274:                                       ; preds = %if.else.271, %if.then.270
  br label %do.end.275

do.end.275:                                       ; preds = %if.end.274
  br label %error

if.end.276:                                       ; preds = %if.end.256
  br label %do.body.277

do.body.277:                                      ; preds = %if.end.276
  %161 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %161, %struct._object** %_py_decref_tmp278, align 8
  %162 = load %struct._object*, %struct._object** %_py_decref_tmp278, align 8
  %ob_refcnt279 = getelementptr inbounds %struct._object, %struct._object* %162, i32 0, i32 0
  %163 = load i64, i64* %ob_refcnt279, align 8
  %dec280 = add i64 %163, -1
  store i64 %dec280, i64* %ob_refcnt279, align 8
  %cmp281 = icmp ne i64 %dec280, 0
  br i1 %cmp281, label %if.then.283, label %if.else.284

if.then.283:                                      ; preds = %do.body.277
  br label %if.end.287

if.else.284:                                      ; preds = %do.body.277
  %164 = load %struct._object*, %struct._object** %_py_decref_tmp278, align 8
  %ob_type285 = getelementptr inbounds %struct._object, %struct._object* %164, i32 0, i32 1
  %165 = load %struct._typeobject*, %struct._typeobject** %ob_type285, align 8
  %tp_dealloc286 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %165, i32 0, i32 4
  %166 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc286, align 8
  %167 = load %struct._object*, %struct._object** %_py_decref_tmp278, align 8
  call void %166(%struct._object* %167)
  br label %if.end.287

if.end.287:                                       ; preds = %if.else.284, %if.then.283
  br label %do.end.288

do.end.288:                                       ; preds = %if.end.287
  %168 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call289 = call i64 @_Pickler_Write(%struct.PicklerObject* %168, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i32 0, i32 0), i64 1)
  %cmp290 = icmp slt i64 %call289, 0
  br i1 %cmp290, label %if.then.292, label %if.end.293

if.then.292:                                      ; preds = %do.end.288
  br label %error

if.end.293:                                       ; preds = %do.end.288
  br label %if.end.294

if.end.294:                                       ; preds = %if.end.293, %if.end.174
  %169 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %170 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call295 = call i32 @memo_put(%struct.PicklerObject* %169, %struct._object* %170)
  %cmp296 = icmp slt i32 %call295, 0
  br i1 %cmp296, label %if.then.298, label %if.end.299

if.then.298:                                      ; preds = %if.end.294
  br label %error

if.end.299:                                       ; preds = %if.end.294
  br label %if.end.300

if.end.300:                                       ; preds = %if.end.299, %if.end.154
  br i1 false, label %if.then.301, label %if.end.302

if.then.301:                                      ; preds = %if.end.300
  br label %error

error:                                            ; preds = %if.then.301, %if.then.298, %if.then.292, %do.end.275, %if.end.255, %if.then.243, %do.end.226, %if.end.208, %if.then.189, %if.then.179, %if.then.173, %if.then.168, %if.then.163, %if.then.153, %if.end.113, %if.then.98, %if.then.92, %if.then.72, %do.end, %if.then.37, %if.then.28, %if.then.23, %if.then.14, %if.then.7
  store i32 -1, i32* %status, align 4
  br label %if.end.302

if.end.302:                                       ; preds = %error, %if.end.300
  br label %do.body.303

do.body.303:                                      ; preds = %if.end.302
  %171 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %171, %struct._object** %_py_xdecref_tmp, align 8
  %172 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp304 = icmp ne %struct._object* %172, null
  br i1 %cmp304, label %if.then.306, label %if.end.319

if.then.306:                                      ; preds = %do.body.303
  br label %do.body.307

do.body.307:                                      ; preds = %if.then.306
  %173 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %173, %struct._object** %_py_decref_tmp308, align 8
  %174 = load %struct._object*, %struct._object** %_py_decref_tmp308, align 8
  %ob_refcnt309 = getelementptr inbounds %struct._object, %struct._object* %174, i32 0, i32 0
  %175 = load i64, i64* %ob_refcnt309, align 8
  %dec310 = add i64 %175, -1
  store i64 %dec310, i64* %ob_refcnt309, align 8
  %cmp311 = icmp ne i64 %dec310, 0
  br i1 %cmp311, label %if.then.313, label %if.else.314

if.then.313:                                      ; preds = %do.body.307
  br label %if.end.317

if.else.314:                                      ; preds = %do.body.307
  %176 = load %struct._object*, %struct._object** %_py_decref_tmp308, align 8
  %ob_type315 = getelementptr inbounds %struct._object, %struct._object* %176, i32 0, i32 1
  %177 = load %struct._typeobject*, %struct._typeobject** %ob_type315, align 8
  %tp_dealloc316 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %177, i32 0, i32 4
  %178 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc316, align 8
  %179 = load %struct._object*, %struct._object** %_py_decref_tmp308, align 8
  call void %178(%struct._object* %179)
  br label %if.end.317

if.end.317:                                       ; preds = %if.else.314, %if.then.313
  br label %do.end.318

do.end.318:                                       ; preds = %if.end.317
  br label %if.end.319

if.end.319:                                       ; preds = %do.end.318, %do.body.303
  br label %do.end.320

do.end.320:                                       ; preds = %if.end.319
  br label %do.body.321

do.body.321:                                      ; preds = %do.end.320
  %180 = load %struct._object*, %struct._object** %global_name, align 8
  store %struct._object* %180, %struct._object** %_py_xdecref_tmp322, align 8
  %181 = load %struct._object*, %struct._object** %_py_xdecref_tmp322, align 8
  %cmp323 = icmp ne %struct._object* %181, null
  br i1 %cmp323, label %if.then.325, label %if.end.338

if.then.325:                                      ; preds = %do.body.321
  br label %do.body.326

do.body.326:                                      ; preds = %if.then.325
  %182 = load %struct._object*, %struct._object** %_py_xdecref_tmp322, align 8
  store %struct._object* %182, %struct._object** %_py_decref_tmp327, align 8
  %183 = load %struct._object*, %struct._object** %_py_decref_tmp327, align 8
  %ob_refcnt328 = getelementptr inbounds %struct._object, %struct._object* %183, i32 0, i32 0
  %184 = load i64, i64* %ob_refcnt328, align 8
  %dec329 = add i64 %184, -1
  store i64 %dec329, i64* %ob_refcnt328, align 8
  %cmp330 = icmp ne i64 %dec329, 0
  br i1 %cmp330, label %if.then.332, label %if.else.333

if.then.332:                                      ; preds = %do.body.326
  br label %if.end.336

if.else.333:                                      ; preds = %do.body.326
  %185 = load %struct._object*, %struct._object** %_py_decref_tmp327, align 8
  %ob_type334 = getelementptr inbounds %struct._object, %struct._object* %185, i32 0, i32 1
  %186 = load %struct._typeobject*, %struct._typeobject** %ob_type334, align 8
  %tp_dealloc335 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %186, i32 0, i32 4
  %187 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc335, align 8
  %188 = load %struct._object*, %struct._object** %_py_decref_tmp327, align 8
  call void %187(%struct._object* %188)
  br label %if.end.336

if.end.336:                                       ; preds = %if.else.333, %if.then.332
  br label %do.end.337

do.end.337:                                       ; preds = %if.end.336
  br label %if.end.338

if.end.338:                                       ; preds = %do.end.337, %do.body.321
  br label %do.end.339

do.end.339:                                       ; preds = %if.end.338
  br label %do.body.340

do.body.340:                                      ; preds = %do.end.339
  %189 = load %struct._object*, %struct._object** %module, align 8
  store %struct._object* %189, %struct._object** %_py_xdecref_tmp341, align 8
  %190 = load %struct._object*, %struct._object** %_py_xdecref_tmp341, align 8
  %cmp342 = icmp ne %struct._object* %190, null
  br i1 %cmp342, label %if.then.344, label %if.end.357

if.then.344:                                      ; preds = %do.body.340
  br label %do.body.345

do.body.345:                                      ; preds = %if.then.344
  %191 = load %struct._object*, %struct._object** %_py_xdecref_tmp341, align 8
  store %struct._object* %191, %struct._object** %_py_decref_tmp346, align 8
  %192 = load %struct._object*, %struct._object** %_py_decref_tmp346, align 8
  %ob_refcnt347 = getelementptr inbounds %struct._object, %struct._object* %192, i32 0, i32 0
  %193 = load i64, i64* %ob_refcnt347, align 8
  %dec348 = add i64 %193, -1
  store i64 %dec348, i64* %ob_refcnt347, align 8
  %cmp349 = icmp ne i64 %dec348, 0
  br i1 %cmp349, label %if.then.351, label %if.else.352

if.then.351:                                      ; preds = %do.body.345
  br label %if.end.355

if.else.352:                                      ; preds = %do.body.345
  %194 = load %struct._object*, %struct._object** %_py_decref_tmp346, align 8
  %ob_type353 = getelementptr inbounds %struct._object, %struct._object* %194, i32 0, i32 1
  %195 = load %struct._typeobject*, %struct._typeobject** %ob_type353, align 8
  %tp_dealloc354 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %195, i32 0, i32 4
  %196 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc354, align 8
  %197 = load %struct._object*, %struct._object** %_py_decref_tmp346, align 8
  call void %196(%struct._object* %197)
  br label %if.end.355

if.end.355:                                       ; preds = %if.else.352, %if.then.351
  br label %do.end.356

do.end.356:                                       ; preds = %if.end.355
  br label %if.end.357

if.end.357:                                       ; preds = %do.end.356, %do.body.340
  br label %do.end.358

do.end.358:                                       ; preds = %if.end.357
  %198 = load i32, i32* %status, align 4
  ret i32 %198
}

; Function Attrs: nounwind uwtable
define internal %struct.PickleState* @_Pickle_GetGlobalState() #0 {
entry:
  %call = call %struct._object* @PyState_FindModule(%struct.PyModuleDef* @_picklemodule)
  %call1 = call %struct.PickleState* @_Pickle_GetState(%struct._object* %call)
  ret %struct.PickleState* %call1
}

declare %struct._object* @PyDict_GetItemWithError(%struct._object*, %struct._object*) #1

declare %struct._object* @PyObject_GetItem(%struct._object*, %struct._object*) #1

declare void @PyErr_Clear() #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @_Pickle_FastCall(%struct._object* %func, %struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %func.addr = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %arg_tuple = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp9 = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %call = call %struct._object* @PyTuple_New(i64 1)
  store %struct._object* %call, %struct._object** %arg_tuple, align 8
  %0 = load %struct._object*, %struct._object** %arg_tuple, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct._object*, %struct._object** %obj.addr, align 8
  store %struct._object* %1, %struct._object** %_py_decref_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 0
  %3 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %3, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp1 = icmp ne i64 %dec, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 4
  %6 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %6(%struct._object* %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %entry
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %9 = load %struct._object*, %struct._object** %arg_tuple, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %10, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  store %struct._object* %8, %struct._object** %arrayidx, align 8
  %11 = load %struct._object*, %struct._object** %func.addr, align 8
  %12 = load %struct._object*, %struct._object** %arg_tuple, align 8
  %call4 = call %struct._object* @PyObject_Call(%struct._object* %11, %struct._object* %12, %struct._object* null)
  store %struct._object* %call4, %struct._object** %result, align 8
  br label %do.body.5

do.body.5:                                        ; preds = %if.end.3
  %13 = load %struct._object*, %struct._object** %arg_tuple, align 8
  store %struct._object* %13, %struct._object** %_py_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp6 = icmp ne %struct._object* %14, null
  br i1 %cmp6, label %if.then.7, label %if.end.19

if.then.7:                                        ; preds = %do.body.5
  store %struct._object* null, %struct._object** %arg_tuple, align 8
  br label %do.body.8

do.body.8:                                        ; preds = %if.then.7
  %15 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp9, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_refcnt10 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt10, align 8
  %dec11 = add i64 %17, -1
  store i64 %dec11, i64* %ob_refcnt10, align 8
  %cmp12 = icmp ne i64 %dec11, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.8
  br label %if.end.17

if.else.14:                                       ; preds = %do.body.8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_dealloc16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc16, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  call void %20(%struct._object* %21)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.14, %if.then.13
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  br label %if.end.19

if.end.19:                                        ; preds = %do.end.18, %do.body.5
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  %22 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %22, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.20, %do.end
  %23 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %23
}

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #1

declare %struct._object* @PyLong_FromLong(i64) #1

declare %struct._object* @PyTuple_New(i64) #1

declare %struct._object* @PyObject_Call(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @save_reduce(%struct.PicklerObject* %self, %struct._object* %args, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %callable = alloca %struct._object*, align 8
  %argtup = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %listitems = alloca %struct._object*, align 8
  %dictitems = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %size = alloca i64, align 8
  %use_newobj = alloca i32, align 4
  %use_newobj_ex = alloca i32, align 4
  %reduce_op = alloca i8, align 1
  %build_op = alloca i8, align 1
  %newobj_op = alloca i8, align 1
  %newobj_ex_op = alloca i8, align 1
  %name = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp85 = alloca %struct._object*, align 8
  %cls = alloca %struct._object*, align 8
  %args100 = alloca %struct._object*, align 8
  %kwargs = alloca %struct._object*, align 8
  %cls157 = alloca %struct._object*, align 8
  %newargtup = alloca %struct._object*, align 8
  %obj_class = alloca %struct._object*, align 8
  %p = alloca i32, align 4
  %_py_decref_tmp177 = alloca %struct._object*, align 8
  %_py_decref_tmp206 = alloca %struct._object*, align 8
  %pop_op = alloca i8, align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* null, %struct._object** %state, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %listitems, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %dictitems, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  store i32 0, i32* %use_newobj, align 4
  store i32 0, i32* %use_newobj_ex, align 4
  store i8 82, i8* %reduce_op, align 1
  store i8 98, i8* %build_op, align 1
  store i8 -127, i8* %newobj_op, align 1
  store i8 -110, i8* %newobj_ex_op, align 1
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call1 = call i64 @PyTuple_Size(%struct._object* %0)
  store i64 %call1, i64* %size, align 8
  %1 = load i64, i64* %size, align 8
  %cmp = icmp slt i64 %1, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i64, i64* %size, align 8
  %cmp2 = icmp sgt i64 %2, 5
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %3, i32 0, i32 1
  %4 = load %struct._object*, %struct._object** %PicklingError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.71, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %args.addr, align 8
  %call3 = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %5, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72, i32 0, i32 0), i64 2, i64 5, %struct._object** %callable, %struct._object** %argtup, %struct._object** %state, %struct._object** %listitems, %struct._object** %dictitems)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %callable, align 8
  %call6 = call i32 @PyCallable_Check(%struct._object* %6)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.10, label %if.then.8

if.then.8:                                        ; preds = %if.end.5
  %7 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError9 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %7, i32 0, i32 1
  %8 = load %struct._object*, %struct._object** %PicklingError9, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.73, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  %9 = load %struct._object*, %struct._object** %argtup, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 19
  %11 = load i64, i64* %tp_flags, align 8
  %and = and i64 %11, 67108864
  %cmp11 = icmp ne i64 %and, 0
  br i1 %cmp11, label %if.end.14, label %if.then.12

if.then.12:                                       ; preds = %if.end.10
  %12 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError13 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %12, i32 0, i32 1
  %13 = load %struct._object*, %struct._object** %PicklingError13, align 8
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.74, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.10
  %14 = load %struct._object*, %struct._object** %state, align 8
  %cmp15 = icmp eq %struct._object* %14, @_Py_NoneStruct
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.14
  store %struct._object* null, %struct._object** %state, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end.14
  %15 = load %struct._object*, %struct._object** %listitems, align 8
  %cmp18 = icmp eq %struct._object* %15, @_Py_NoneStruct
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.end.17
  store %struct._object* null, %struct._object** %listitems, align 8
  br label %if.end.30

if.else:                                          ; preds = %if.end.17
  %16 = load %struct._object*, %struct._object** %listitems, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_iternext = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 26
  %18 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext, align 8
  %cmp21 = icmp ne %struct._object* (%struct._object*)* %18, null
  br i1 %cmp21, label %land.lhs.true, label %if.then.25

land.lhs.true:                                    ; preds = %if.else
  %19 = load %struct._object*, %struct._object** %listitems, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_iternext23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 26
  %21 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext23, align 8
  %cmp24 = icmp ne %struct._object* (%struct._object*)* %21, @_PyObject_NextNotImplemented
  br i1 %cmp24, label %if.end.29, label %if.then.25

if.then.25:                                       ; preds = %land.lhs.true, %if.else
  %22 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError26 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %22, i32 0, i32 1
  %23 = load %struct._object*, %struct._object** %PicklingError26, align 8
  %24 = load %struct._object*, %struct._object** %listitems, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 1
  %26 = load i8*, i8** %tp_name, align 8
  %call28 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %23, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.75, i32 0, i32 0), i8* %26)
  store i32 -1, i32* %retval
  br label %return

if.end.29:                                        ; preds = %land.lhs.true
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.then.19
  %27 = load %struct._object*, %struct._object** %dictitems, align 8
  %cmp31 = icmp eq %struct._object* %27, @_Py_NoneStruct
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %if.end.30
  store %struct._object* null, %struct._object** %dictitems, align 8
  br label %if.end.47

if.else.33:                                       ; preds = %if.end.30
  %28 = load %struct._object*, %struct._object** %dictitems, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_iternext35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 26
  %30 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext35, align 8
  %cmp36 = icmp ne %struct._object* (%struct._object*)* %30, null
  br i1 %cmp36, label %land.lhs.true.37, label %if.then.41

land.lhs.true.37:                                 ; preds = %if.else.33
  %31 = load %struct._object*, %struct._object** %dictitems, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_iternext39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 26
  %33 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext39, align 8
  %cmp40 = icmp ne %struct._object* (%struct._object*)* %33, @_PyObject_NextNotImplemented
  br i1 %cmp40, label %if.end.46, label %if.then.41

if.then.41:                                       ; preds = %land.lhs.true.37, %if.else.33
  %34 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError42 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %34, i32 0, i32 1
  %35 = load %struct._object*, %struct._object** %PicklingError42, align 8
  %36 = load %struct._object*, %struct._object** %dictitems, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_name44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 1
  %38 = load i8*, i8** %tp_name44, align 8
  %call45 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %35, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.76, i32 0, i32 0), i8* %38)
  store i32 -1, i32* %retval
  br label %return

if.end.46:                                        ; preds = %land.lhs.true.37
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %if.then.32
  %39 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %39, i32 0, i32 8
  %40 = load i32, i32* %proto, align 4
  %cmp48 = icmp sge i32 %40, 2
  br i1 %cmp48, label %if.then.49, label %if.end.97

if.then.49:                                       ; preds = %if.end.47
  %41 = load %struct._object*, %struct._object** %callable, align 8
  %call50 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %41, %struct._Py_Identifier* @save_reduce.PyId___name__)
  store %struct._object* %call50, %struct._object** %name, align 8
  %42 = load %struct._object*, %struct._object** %name, align 8
  %cmp51 = icmp eq %struct._object* %42, null
  br i1 %cmp51, label %if.then.52, label %if.else.57

if.then.52:                                       ; preds = %if.then.49
  %43 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call53 = call i32 @PyErr_ExceptionMatches(%struct._object* %43)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %if.then.52
  store i32 -1, i32* %retval
  br label %return

if.end.56:                                        ; preds = %if.then.52
  call void @PyErr_Clear()
  br label %if.end.96

if.else.57:                                       ; preds = %if.then.49
  %44 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto58 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %44, i32 0, i32 8
  %45 = load i32, i32* %proto58, align 4
  %cmp59 = icmp sge i32 %45, 4
  br i1 %cmp59, label %if.then.60, label %if.else.73

if.then.60:                                       ; preds = %if.else.57
  %46 = load %struct._object*, %struct._object** %name, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_flags62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 19
  %48 = load i64, i64* %tp_flags62, align 8
  %and63 = and i64 %48, 268435456
  %cmp64 = icmp ne i64 %and63, 0
  br i1 %cmp64, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then.60
  %49 = load %struct._object*, %struct._object** %name, align 8
  %call65 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @save_reduce.PyId___newobj_ex__)
  %call66 = call i32 @PyUnicode_Compare(%struct._object* %49, %struct._object* %call65)
  %cmp67 = icmp eq i32 %call66, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then.60
  %50 = phi i1 [ false, %if.then.60 ], [ %cmp67, %land.rhs ]
  %land.ext = zext i1 %50 to i32
  store i32 %land.ext, i32* %use_newobj_ex, align 4
  br label %do.body

do.body:                                          ; preds = %land.end
  %51 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %51, %struct._object** %_py_decref_tmp, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %53, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp68 = icmp ne i64 %dec, 0
  br i1 %cmp68, label %if.then.69, label %if.else.70

if.then.69:                                       ; preds = %do.body
  br label %if.end.72

if.else.70:                                       ; preds = %do.body
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type71 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type71, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %56(%struct._object* %57)
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.70, %if.then.69
  br label %do.end

do.end:                                           ; preds = %if.end.72
  br label %if.end.95

if.else.73:                                       ; preds = %if.else.57
  %58 = load %struct._object*, %struct._object** %name, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_flags75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 19
  %60 = load i64, i64* %tp_flags75, align 8
  %and76 = and i64 %60, 268435456
  %cmp77 = icmp ne i64 %and76, 0
  br i1 %cmp77, label %land.rhs.78, label %land.end.82

land.rhs.78:                                      ; preds = %if.else.73
  %61 = load %struct._object*, %struct._object** %name, align 8
  %call79 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @save_reduce.PyId___newobj__)
  %call80 = call i32 @PyUnicode_Compare(%struct._object* %61, %struct._object* %call79)
  %cmp81 = icmp eq i32 %call80, 0
  br label %land.end.82

land.end.82:                                      ; preds = %land.rhs.78, %if.else.73
  %62 = phi i1 [ false, %if.else.73 ], [ %cmp81, %land.rhs.78 ]
  %land.ext83 = zext i1 %62 to i32
  store i32 %land.ext83, i32* %use_newobj, align 4
  br label %do.body.84

do.body.84:                                       ; preds = %land.end.82
  %63 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %63, %struct._object** %_py_decref_tmp85, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_refcnt86 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt86, align 8
  %dec87 = add i64 %65, -1
  store i64 %dec87, i64* %ob_refcnt86, align 8
  %cmp88 = icmp ne i64 %dec87, 0
  br i1 %cmp88, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.84
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.84
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  call void %68(%struct._object* %69)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %do.end.94, %do.end
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.end.56
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.end.47
  %70 = load i32, i32* %use_newobj_ex, align 4
  %tobool98 = icmp ne i32 %70, 0
  br i1 %tobool98, label %if.then.99, label %if.else.154

if.then.99:                                       ; preds = %if.end.97
  %71 = load %struct._object*, %struct._object** %argtup, align 8
  %72 = bitcast %struct._object* %71 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %72, i32 0, i32 1
  %73 = load i64, i64* %ob_size, align 8
  %cmp101 = icmp ne i64 %73, 3
  br i1 %cmp101, label %if.then.102, label %if.end.106

if.then.102:                                      ; preds = %if.then.99
  %74 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError103 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %74, i32 0, i32 1
  %75 = load %struct._object*, %struct._object** %PicklingError103, align 8
  %76 = load %struct._object*, %struct._object** %argtup, align 8
  %77 = bitcast %struct._object* %76 to %struct.PyVarObject*
  %ob_size104 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %77, i32 0, i32 1
  %78 = load i64, i64* %ob_size104, align 8
  %call105 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %75, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.79, i32 0, i32 0), i64 %78)
  store i32 -1, i32* %retval
  br label %return

if.end.106:                                       ; preds = %if.then.99
  %79 = load %struct._object*, %struct._object** %argtup, align 8
  %80 = bitcast %struct._object* %79 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %80, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %81 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %81, %struct._object** %cls, align 8
  %82 = load %struct._object*, %struct._object** %cls, align 8
  %ob_type107 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type107, align 8
  %tp_flags108 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 19
  %84 = load i64, i64* %tp_flags108, align 8
  %and109 = and i64 %84, 2147483648
  %cmp110 = icmp ne i64 %and109, 0
  br i1 %cmp110, label %if.end.116, label %if.then.111

if.then.111:                                      ; preds = %if.end.106
  %85 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError112 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %85, i32 0, i32 1
  %86 = load %struct._object*, %struct._object** %PicklingError112, align 8
  %87 = load %struct._object*, %struct._object** %cls, align 8
  %ob_type113 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type113, align 8
  %tp_name114 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 1
  %89 = load i8*, i8** %tp_name114, align 8
  %call115 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %86, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.80, i32 0, i32 0), i8* %89)
  store i32 -1, i32* %retval
  br label %return

if.end.116:                                       ; preds = %if.end.106
  %90 = load %struct._object*, %struct._object** %argtup, align 8
  %91 = bitcast %struct._object* %90 to %struct.PyTupleObject*
  %ob_item117 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %91, i32 0, i32 1
  %arrayidx118 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item117, i32 0, i64 1
  %92 = load %struct._object*, %struct._object** %arrayidx118, align 8
  store %struct._object* %92, %struct._object** %args100, align 8
  %93 = load %struct._object*, %struct._object** %args100, align 8
  %ob_type119 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 1
  %94 = load %struct._typeobject*, %struct._typeobject** %ob_type119, align 8
  %tp_flags120 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 19
  %95 = load i64, i64* %tp_flags120, align 8
  %and121 = and i64 %95, 67108864
  %cmp122 = icmp ne i64 %and121, 0
  br i1 %cmp122, label %if.end.128, label %if.then.123

if.then.123:                                      ; preds = %if.end.116
  %96 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError124 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %96, i32 0, i32 1
  %97 = load %struct._object*, %struct._object** %PicklingError124, align 8
  %98 = load %struct._object*, %struct._object** %args100, align 8
  %ob_type125 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 1
  %99 = load %struct._typeobject*, %struct._typeobject** %ob_type125, align 8
  %tp_name126 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %99, i32 0, i32 1
  %100 = load i8*, i8** %tp_name126, align 8
  %call127 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %97, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.81, i32 0, i32 0), i8* %100)
  store i32 -1, i32* %retval
  br label %return

if.end.128:                                       ; preds = %if.end.116
  %101 = load %struct._object*, %struct._object** %argtup, align 8
  %102 = bitcast %struct._object* %101 to %struct.PyTupleObject*
  %ob_item129 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %102, i32 0, i32 1
  %arrayidx130 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item129, i32 0, i64 2
  %103 = load %struct._object*, %struct._object** %arrayidx130, align 8
  store %struct._object* %103, %struct._object** %kwargs, align 8
  %104 = load %struct._object*, %struct._object** %kwargs, align 8
  %ob_type131 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type131, align 8
  %tp_flags132 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 19
  %106 = load i64, i64* %tp_flags132, align 8
  %and133 = and i64 %106, 536870912
  %cmp134 = icmp ne i64 %and133, 0
  br i1 %cmp134, label %if.end.140, label %if.then.135

if.then.135:                                      ; preds = %if.end.128
  %107 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError136 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %107, i32 0, i32 1
  %108 = load %struct._object*, %struct._object** %PicklingError136, align 8
  %109 = load %struct._object*, %struct._object** %kwargs, align 8
  %ob_type137 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 1
  %110 = load %struct._typeobject*, %struct._typeobject** %ob_type137, align 8
  %tp_name138 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 1
  %111 = load i8*, i8** %tp_name138, align 8
  %call139 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %108, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.82, i32 0, i32 0), i8* %111)
  store i32 -1, i32* %retval
  br label %return

if.end.140:                                       ; preds = %if.end.128
  %112 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %113 = load %struct._object*, %struct._object** %cls, align 8
  %call141 = call i32 @save(%struct.PicklerObject* %112, %struct._object* %113, i32 0)
  %cmp142 = icmp slt i32 %call141, 0
  br i1 %cmp142, label %if.then.152, label %lor.lhs.false.143

lor.lhs.false.143:                                ; preds = %if.end.140
  %114 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %115 = load %struct._object*, %struct._object** %args100, align 8
  %call144 = call i32 @save(%struct.PicklerObject* %114, %struct._object* %115, i32 0)
  %cmp145 = icmp slt i32 %call144, 0
  br i1 %cmp145, label %if.then.152, label %lor.lhs.false.146

lor.lhs.false.146:                                ; preds = %lor.lhs.false.143
  %116 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %117 = load %struct._object*, %struct._object** %kwargs, align 8
  %call147 = call i32 @save(%struct.PicklerObject* %116, %struct._object* %117, i32 0)
  %cmp148 = icmp slt i32 %call147, 0
  br i1 %cmp148, label %if.then.152, label %lor.lhs.false.149

lor.lhs.false.149:                                ; preds = %lor.lhs.false.146
  %118 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call150 = call i64 @_Pickler_Write(%struct.PicklerObject* %118, i8* %newobj_ex_op, i64 1)
  %cmp151 = icmp slt i64 %call150, 0
  br i1 %cmp151, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %lor.lhs.false.149, %lor.lhs.false.146, %lor.lhs.false.143, %if.end.140
  store i32 -1, i32* %retval
  br label %return

if.end.153:                                       ; preds = %lor.lhs.false.149
  br label %if.end.241

if.else.154:                                      ; preds = %if.end.97
  %119 = load i32, i32* %use_newobj, align 4
  %tobool155 = icmp ne i32 %119, 0
  br i1 %tobool155, label %if.then.156, label %if.else.226

if.then.156:                                      ; preds = %if.else.154
  %120 = load %struct._object*, %struct._object** %argtup, align 8
  %121 = bitcast %struct._object* %120 to %struct.PyVarObject*
  %ob_size158 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %121, i32 0, i32 1
  %122 = load i64, i64* %ob_size158, align 8
  %cmp159 = icmp slt i64 %122, 1
  br i1 %cmp159, label %if.then.160, label %if.end.162

if.then.160:                                      ; preds = %if.then.156
  %123 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError161 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %123, i32 0, i32 1
  %124 = load %struct._object*, %struct._object** %PicklingError161, align 8
  call void @PyErr_SetString(%struct._object* %124, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.83, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.162:                                       ; preds = %if.then.156
  %125 = load %struct._object*, %struct._object** %argtup, align 8
  %126 = bitcast %struct._object* %125 to %struct.PyTupleObject*
  %ob_item163 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %126, i32 0, i32 1
  %arrayidx164 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item163, i32 0, i64 0
  %127 = load %struct._object*, %struct._object** %arrayidx164, align 8
  store %struct._object* %127, %struct._object** %cls157, align 8
  %128 = load %struct._object*, %struct._object** %cls157, align 8
  %ob_type165 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 1
  %129 = load %struct._typeobject*, %struct._typeobject** %ob_type165, align 8
  %tp_flags166 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %129, i32 0, i32 19
  %130 = load i64, i64* %tp_flags166, align 8
  %and167 = and i64 %130, 2147483648
  %cmp168 = icmp ne i64 %and167, 0
  br i1 %cmp168, label %if.end.171, label %if.then.169

if.then.169:                                      ; preds = %if.end.162
  %131 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError170 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %131, i32 0, i32 1
  %132 = load %struct._object*, %struct._object** %PicklingError170, align 8
  call void @PyErr_SetString(%struct._object* %132, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.84, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.171:                                       ; preds = %if.end.162
  %133 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp172 = icmp ne %struct._object* %133, null
  br i1 %cmp172, label %if.then.173, label %if.end.192

if.then.173:                                      ; preds = %if.end.171
  %134 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call174 = call %struct._object* @get_class(%struct._object* %134)
  store %struct._object* %call174, %struct._object** %obj_class, align 8
  %135 = load %struct._object*, %struct._object** %obj_class, align 8
  %136 = load %struct._object*, %struct._object** %cls157, align 8
  %cmp175 = icmp ne %struct._object* %135, %136
  %conv = zext i1 %cmp175 to i32
  store i32 %conv, i32* %p, align 4
  br label %do.body.176

do.body.176:                                      ; preds = %if.then.173
  %137 = load %struct._object*, %struct._object** %obj_class, align 8
  store %struct._object* %137, %struct._object** %_py_decref_tmp177, align 8
  %138 = load %struct._object*, %struct._object** %_py_decref_tmp177, align 8
  %ob_refcnt178 = getelementptr inbounds %struct._object, %struct._object* %138, i32 0, i32 0
  %139 = load i64, i64* %ob_refcnt178, align 8
  %dec179 = add i64 %139, -1
  store i64 %dec179, i64* %ob_refcnt178, align 8
  %cmp180 = icmp ne i64 %dec179, 0
  br i1 %cmp180, label %if.then.182, label %if.else.183

if.then.182:                                      ; preds = %do.body.176
  br label %if.end.186

if.else.183:                                      ; preds = %do.body.176
  %140 = load %struct._object*, %struct._object** %_py_decref_tmp177, align 8
  %ob_type184 = getelementptr inbounds %struct._object, %struct._object* %140, i32 0, i32 1
  %141 = load %struct._typeobject*, %struct._typeobject** %ob_type184, align 8
  %tp_dealloc185 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %141, i32 0, i32 4
  %142 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc185, align 8
  %143 = load %struct._object*, %struct._object** %_py_decref_tmp177, align 8
  call void %142(%struct._object* %143)
  br label %if.end.186

if.end.186:                                       ; preds = %if.else.183, %if.then.182
  br label %do.end.187

do.end.187:                                       ; preds = %if.end.186
  %144 = load i32, i32* %p, align 4
  %tobool188 = icmp ne i32 %144, 0
  br i1 %tobool188, label %if.then.189, label %if.end.191

if.then.189:                                      ; preds = %do.end.187
  %145 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError190 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %145, i32 0, i32 1
  %146 = load %struct._object*, %struct._object** %PicklingError190, align 8
  call void @PyErr_SetString(%struct._object* %146, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.85, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.191:                                       ; preds = %do.end.187
  br label %if.end.192

if.end.192:                                       ; preds = %if.end.191, %if.end.171
  %147 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %148 = load %struct._object*, %struct._object** %cls157, align 8
  %call193 = call i32 @save(%struct.PicklerObject* %147, %struct._object* %148, i32 0)
  %cmp194 = icmp slt i32 %call193, 0
  br i1 %cmp194, label %if.then.196, label %if.end.197

if.then.196:                                      ; preds = %if.end.192
  store i32 -1, i32* %retval
  br label %return

if.end.197:                                       ; preds = %if.end.192
  %149 = load %struct._object*, %struct._object** %argtup, align 8
  %150 = load %struct._object*, %struct._object** %argtup, align 8
  %151 = bitcast %struct._object* %150 to %struct.PyVarObject*
  %ob_size198 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %151, i32 0, i32 1
  %152 = load i64, i64* %ob_size198, align 8
  %call199 = call %struct._object* @PyTuple_GetSlice(%struct._object* %149, i64 1, i64 %152)
  store %struct._object* %call199, %struct._object** %newargtup, align 8
  %153 = load %struct._object*, %struct._object** %newargtup, align 8
  %cmp200 = icmp eq %struct._object* %153, null
  br i1 %cmp200, label %if.then.202, label %if.end.203

if.then.202:                                      ; preds = %if.end.197
  store i32 -1, i32* %retval
  br label %return

if.end.203:                                       ; preds = %if.end.197
  %154 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %155 = load %struct._object*, %struct._object** %newargtup, align 8
  %call204 = call i32 @save(%struct.PicklerObject* %154, %struct._object* %155, i32 0)
  store i32 %call204, i32* %p, align 4
  br label %do.body.205

do.body.205:                                      ; preds = %if.end.203
  %156 = load %struct._object*, %struct._object** %newargtup, align 8
  store %struct._object* %156, %struct._object** %_py_decref_tmp206, align 8
  %157 = load %struct._object*, %struct._object** %_py_decref_tmp206, align 8
  %ob_refcnt207 = getelementptr inbounds %struct._object, %struct._object* %157, i32 0, i32 0
  %158 = load i64, i64* %ob_refcnt207, align 8
  %dec208 = add i64 %158, -1
  store i64 %dec208, i64* %ob_refcnt207, align 8
  %cmp209 = icmp ne i64 %dec208, 0
  br i1 %cmp209, label %if.then.211, label %if.else.212

if.then.211:                                      ; preds = %do.body.205
  br label %if.end.215

if.else.212:                                      ; preds = %do.body.205
  %159 = load %struct._object*, %struct._object** %_py_decref_tmp206, align 8
  %ob_type213 = getelementptr inbounds %struct._object, %struct._object* %159, i32 0, i32 1
  %160 = load %struct._typeobject*, %struct._typeobject** %ob_type213, align 8
  %tp_dealloc214 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %160, i32 0, i32 4
  %161 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc214, align 8
  %162 = load %struct._object*, %struct._object** %_py_decref_tmp206, align 8
  call void %161(%struct._object* %162)
  br label %if.end.215

if.end.215:                                       ; preds = %if.else.212, %if.then.211
  br label %do.end.216

do.end.216:                                       ; preds = %if.end.215
  %163 = load i32, i32* %p, align 4
  %cmp217 = icmp slt i32 %163, 0
  br i1 %cmp217, label %if.then.219, label %if.end.220

if.then.219:                                      ; preds = %do.end.216
  store i32 -1, i32* %retval
  br label %return

if.end.220:                                       ; preds = %do.end.216
  %164 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call221 = call i64 @_Pickler_Write(%struct.PicklerObject* %164, i8* %newobj_op, i64 1)
  %cmp222 = icmp slt i64 %call221, 0
  br i1 %cmp222, label %if.then.224, label %if.end.225

if.then.224:                                      ; preds = %if.end.220
  store i32 -1, i32* %retval
  br label %return

if.end.225:                                       ; preds = %if.end.220
  br label %if.end.240

if.else.226:                                      ; preds = %if.else.154
  %165 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %166 = load %struct._object*, %struct._object** %callable, align 8
  %call227 = call i32 @save(%struct.PicklerObject* %165, %struct._object* %166, i32 0)
  %cmp228 = icmp slt i32 %call227, 0
  br i1 %cmp228, label %if.then.238, label %lor.lhs.false.230

lor.lhs.false.230:                                ; preds = %if.else.226
  %167 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %168 = load %struct._object*, %struct._object** %argtup, align 8
  %call231 = call i32 @save(%struct.PicklerObject* %167, %struct._object* %168, i32 0)
  %cmp232 = icmp slt i32 %call231, 0
  br i1 %cmp232, label %if.then.238, label %lor.lhs.false.234

lor.lhs.false.234:                                ; preds = %lor.lhs.false.230
  %169 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call235 = call i64 @_Pickler_Write(%struct.PicklerObject* %169, i8* %reduce_op, i64 1)
  %cmp236 = icmp slt i64 %call235, 0
  br i1 %cmp236, label %if.then.238, label %if.end.239

if.then.238:                                      ; preds = %lor.lhs.false.234, %lor.lhs.false.230, %if.else.226
  store i32 -1, i32* %retval
  br label %return

if.end.239:                                       ; preds = %lor.lhs.false.234
  br label %if.end.240

if.end.240:                                       ; preds = %if.end.239, %if.end.225
  br label %if.end.241

if.end.241:                                       ; preds = %if.end.240, %if.end.153
  %170 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp242 = icmp ne %struct._object* %170, null
  br i1 %cmp242, label %if.then.244, label %if.end.265

if.then.244:                                      ; preds = %if.end.241
  %171 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %171, i32 0, i32 1
  %172 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %173 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call245 = call i64* @PyMemoTable_Get(%struct.PyMemoTable* %172, %struct._object* %173)
  %tobool246 = icmp ne i64* %call245, null
  br i1 %tobool246, label %if.then.247, label %if.else.258

if.then.247:                                      ; preds = %if.then.244
  store i8 48, i8* %pop_op, align 1
  %174 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call248 = call i64 @_Pickler_Write(%struct.PicklerObject* %174, i8* %pop_op, i64 1)
  %cmp249 = icmp slt i64 %call248, 0
  br i1 %cmp249, label %if.then.251, label %if.end.252

if.then.251:                                      ; preds = %if.then.247
  store i32 -1, i32* %retval
  br label %return

if.end.252:                                       ; preds = %if.then.247
  %175 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %176 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call253 = call i32 @memo_get(%struct.PicklerObject* %175, %struct._object* %176)
  %cmp254 = icmp slt i32 %call253, 0
  br i1 %cmp254, label %if.then.256, label %if.end.257

if.then.256:                                      ; preds = %if.end.252
  store i32 -1, i32* %retval
  br label %return

if.end.257:                                       ; preds = %if.end.252
  store i32 0, i32* %retval
  br label %return

if.else.258:                                      ; preds = %if.then.244
  %177 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %178 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call259 = call i32 @memo_put(%struct.PicklerObject* %177, %struct._object* %178)
  %cmp260 = icmp slt i32 %call259, 0
  br i1 %cmp260, label %if.then.262, label %if.end.263

if.then.262:                                      ; preds = %if.else.258
  store i32 -1, i32* %retval
  br label %return

if.end.263:                                       ; preds = %if.else.258
  br label %if.end.264

if.end.264:                                       ; preds = %if.end.263
  br label %if.end.265

if.end.265:                                       ; preds = %if.end.264, %if.end.241
  %179 = load %struct._object*, %struct._object** %listitems, align 8
  %tobool266 = icmp ne %struct._object* %179, null
  br i1 %tobool266, label %land.lhs.true.267, label %if.end.272

land.lhs.true.267:                                ; preds = %if.end.265
  %180 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %181 = load %struct._object*, %struct._object** %listitems, align 8
  %call268 = call i32 @batch_list(%struct.PicklerObject* %180, %struct._object* %181)
  %cmp269 = icmp slt i32 %call268, 0
  br i1 %cmp269, label %if.then.271, label %if.end.272

if.then.271:                                      ; preds = %land.lhs.true.267
  store i32 -1, i32* %retval
  br label %return

if.end.272:                                       ; preds = %land.lhs.true.267, %if.end.265
  %182 = load %struct._object*, %struct._object** %dictitems, align 8
  %tobool273 = icmp ne %struct._object* %182, null
  br i1 %tobool273, label %land.lhs.true.274, label %if.end.279

land.lhs.true.274:                                ; preds = %if.end.272
  %183 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %184 = load %struct._object*, %struct._object** %dictitems, align 8
  %call275 = call i32 @batch_dict(%struct.PicklerObject* %183, %struct._object* %184)
  %cmp276 = icmp slt i32 %call275, 0
  br i1 %cmp276, label %if.then.278, label %if.end.279

if.then.278:                                      ; preds = %land.lhs.true.274
  store i32 -1, i32* %retval
  br label %return

if.end.279:                                       ; preds = %land.lhs.true.274, %if.end.272
  %185 = load %struct._object*, %struct._object** %state, align 8
  %tobool280 = icmp ne %struct._object* %185, null
  br i1 %tobool280, label %if.then.281, label %if.end.291

if.then.281:                                      ; preds = %if.end.279
  %186 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %187 = load %struct._object*, %struct._object** %state, align 8
  %call282 = call i32 @save(%struct.PicklerObject* %186, %struct._object* %187, i32 0)
  %cmp283 = icmp slt i32 %call282, 0
  br i1 %cmp283, label %if.then.289, label %lor.lhs.false.285

lor.lhs.false.285:                                ; preds = %if.then.281
  %188 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call286 = call i64 @_Pickler_Write(%struct.PicklerObject* %188, i8* %build_op, i64 1)
  %cmp287 = icmp slt i64 %call286, 0
  br i1 %cmp287, label %if.then.289, label %if.end.290

if.then.289:                                      ; preds = %lor.lhs.false.285, %if.then.281
  store i32 -1, i32* %retval
  br label %return

if.end.290:                                       ; preds = %lor.lhs.false.285
  br label %if.end.291

if.end.291:                                       ; preds = %if.end.290, %if.end.279
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.291, %if.then.289, %if.then.278, %if.then.271, %if.then.262, %if.end.257, %if.then.256, %if.then.251, %if.then.238, %if.then.224, %if.then.219, %if.then.202, %if.then.196, %if.then.189, %if.then.169, %if.then.160, %if.then.152, %if.then.135, %if.then.123, %if.then.111, %if.then.102, %if.then.55, %if.then.41, %if.then.25, %if.then.12, %if.then.8, %if.then.4, %if.then
  %189 = load i32, i32* %retval
  ret i32 %189
}

; Function Attrs: nounwind uwtable
define internal i32 @_Pickler_CommitFrame(%struct.PicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %frame_len = alloca i64, align 8
  %qdata = alloca i8*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %framing = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 10
  %1 = load i32, i32* %framing, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 11
  %3 = load i64, i64* %frame_start, align 8
  %cmp = icmp eq i64 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 6
  %5 = load i64, i64* %output_len, align 8
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %6, i32 0, i32 11
  %7 = load i64, i64* %frame_start1, align 8
  %sub = sub i64 %5, %7
  %sub2 = sub i64 %sub, 9
  store i64 %sub2, i64* %frame_len, align 8
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %8, i32 0, i32 5
  %9 = load %struct._object*, %struct._object** %output_buffer, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %10, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start3 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 11
  %12 = load i64, i64* %frame_start3, align 8
  %add.ptr = getelementptr i8, i8* %arraydecay, i64 %12
  store i8* %add.ptr, i8** %qdata, align 8
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %14 = load i8*, i8** %qdata, align 8
  %15 = load i64, i64* %frame_len, align 8
  call void @_Pickler_WriteFrameHeader(%struct.PicklerObject* %13, i8* %14, i64 %15)
  %16 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start4 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %16, i32 0, i32 11
  store i64 -1, i64* %frame_start4, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load i32, i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal void @_Pickler_WriteFrameHeader(%struct.PicklerObject* %self, i8* %qdata, i64 %frame_len) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  %qdata.addr = alloca i8*, align 8
  %frame_len.addr = alloca i64, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store i8* %qdata, i8** %qdata.addr, align 8
  store i64 %frame_len, i64* %frame_len.addr, align 8
  %0 = load i8*, i8** %qdata.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 0
  store i8 -107, i8* %arrayidx, align 1
  %1 = load i8*, i8** %qdata.addr, align 8
  %add.ptr = getelementptr i8, i8* %1, i64 1
  %2 = load i64, i64* %frame_len.addr, align 8
  call void @_write_size64(i8* %add.ptr, i64 %2)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @_write_size64(i8* %out, i64 %value) #0 {
entry:
  %out.addr = alloca i8*, align 8
  %value.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = sext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i64, i64* %value.addr, align 8
  %2 = load i32, i32* %i, align 4
  %mul = mul i32 8, %2
  %sh_prom = zext i32 %mul to i64
  %shr = lshr i64 %1, %sh_prom
  %and = and i64 %shr, 255
  %conv2 = trunc i64 %and to i8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %out.addr, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 %idxprom
  store i8 %conv2, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 8, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.9, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %6, 8
  br i1 %cmp4, label %for.body.6, label %for.end.11

for.body.6:                                       ; preds = %for.cond.3
  %7 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %7 to i64
  %8 = load i8*, i8** %out.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %8, i64 %idxprom7
  store i8 0, i8* %arrayidx8, align 1
  br label %for.inc.9

for.inc.9:                                        ; preds = %for.body.6
  %9 = load i32, i32* %i, align 4
  %inc10 = add i32 %9, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond.3

for.end.11:                                       ; preds = %for.cond.3
  ret void
}

declare %struct._object* @PyObject_Str(%struct._object*) #1

declare i8* @PyUnicode_AsUTF8AndSize(%struct._object*, i64*) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

declare i32 @_PyLong_Sign(%struct._object*) #1

declare i64 @_PyLong_NumBits(%struct._object*) #1

declare i32 @_PyLong_AsByteArray(%struct._longobject*, i8*, i64, i32, i32) #1

declare %struct._object* @PyObject_Repr(%struct._object*) #1

declare i32 @_PyFloat_Pack8(double, i8*, i32) #1

declare i8* @PyOS_double_to_string(double, i8 signext, i32, i32, i32*) #1

; Function Attrs: nounwind uwtable
define internal %struct.PyMemoEntry* @_PyMemoTable_Lookup(%struct.PyMemoTable* %self, %struct._object* %key) #0 {
entry:
  %retval = alloca %struct.PyMemoEntry*, align 8
  %self.addr = alloca %struct.PyMemoTable*, align 8
  %key.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %perturb = alloca i64, align 8
  %mask = alloca i64, align 8
  %table = alloca %struct.PyMemoEntry*, align 8
  %entry1 = alloca %struct.PyMemoEntry*, align 8
  %hash = alloca i64, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  %0 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_mask = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %0, i32 0, i32 0
  %1 = load i64, i64* %mt_mask, align 8
  store i64 %1, i64* %mask, align 8
  %2 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %2, i32 0, i32 3
  %3 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table, align 8
  store %struct.PyMemoEntry* %3, %struct.PyMemoEntry** %table, align 8
  %4 = load %struct._object*, %struct._object** %key.addr, align 8
  %5 = ptrtoint %struct._object* %4 to i64
  %shr = ashr i64 %5, 3
  store i64 %shr, i64* %hash, align 8
  %6 = load i64, i64* %hash, align 8
  %7 = load i64, i64* %mask, align 8
  %and = and i64 %6, %7
  store i64 %and, i64* %i, align 8
  %8 = load i64, i64* %i, align 8
  %9 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %table, align 8
  %arrayidx = getelementptr %struct.PyMemoEntry, %struct.PyMemoEntry* %9, i64 %8
  store %struct.PyMemoEntry* %arrayidx, %struct.PyMemoEntry** %entry1, align 8
  %10 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_key = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %10, i32 0, i32 0
  %11 = load %struct._object*, %struct._object** %me_key, align 8
  %cmp = icmp eq %struct._object* %11, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %12 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_key2 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %12, i32 0, i32 0
  %13 = load %struct._object*, %struct._object** %me_key2, align 8
  %14 = load %struct._object*, %struct._object** %key.addr, align 8
  %cmp3 = icmp eq %struct._object* %13, %14
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  store %struct.PyMemoEntry* %15, %struct.PyMemoEntry** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %16 = load i64, i64* %hash, align 8
  store i64 %16, i64* %perturb, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load i64, i64* %i, align 8
  %shl = shl i64 %17, 2
  %18 = load i64, i64* %i, align 8
  %add = add i64 %shl, %18
  %19 = load i64, i64* %perturb, align 8
  %add4 = add i64 %add, %19
  %add5 = add i64 %add4, 1
  store i64 %add5, i64* %i, align 8
  %20 = load i64, i64* %i, align 8
  %21 = load i64, i64* %mask, align 8
  %and6 = and i64 %20, %21
  %22 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %table, align 8
  %arrayidx7 = getelementptr %struct.PyMemoEntry, %struct.PyMemoEntry* %22, i64 %and6
  store %struct.PyMemoEntry* %arrayidx7, %struct.PyMemoEntry** %entry1, align 8
  %23 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_key8 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %23, i32 0, i32 0
  %24 = load %struct._object*, %struct._object** %me_key8, align 8
  %cmp9 = icmp eq %struct._object* %24, null
  br i1 %cmp9, label %if.then.13, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %for.cond
  %25 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_key11 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %25, i32 0, i32 0
  %26 = load %struct._object*, %struct._object** %me_key11, align 8
  %27 = load %struct._object*, %struct._object** %key.addr, align 8
  %cmp12 = icmp eq %struct._object* %26, %27
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %lor.lhs.false.10, %for.cond
  %28 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  store %struct.PyMemoEntry* %28, %struct.PyMemoEntry** %retval
  br label %return

if.end.14:                                        ; preds = %lor.lhs.false.10
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %29 = load i64, i64* %perturb, align 8
  %shr15 = lshr i64 %29, 5
  store i64 %shr15, i64* %perturb, align 8
  br label %for.cond

return:                                           ; preds = %if.then.13, %if.then
  %30 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %retval
  ret %struct.PyMemoEntry* %30
}

declare void @PyErr_SetObject(%struct._object*, %struct._object*) #1

declare i32 @PyOS_snprintf(i8*, i64, i8*, ...) #1

declare %struct._object* @Py_BuildValue(i8*, ...) #1

declare %struct._object* @PyUnicode_DecodeLatin1(i8*, i64, i8*) #1

declare %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier*) #1

; Function Attrs: nounwind uwtable
define internal i32 @memo_put(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %pdata = alloca [30 x i8], align 16
  %len = alloca i64, align 8
  %idx = alloca i64, align 8
  %memoize_op = alloca i8, align 1
  %st = alloca %struct.PickleState*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8 -108, i8* %memoize_op, align 1
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 13
  %1 = load i32, i32* %fast, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 1
  %3 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %call = call i64 @PyMemoTable_Size(%struct.PyMemoTable* %3)
  store i64 %call, i64* %idx, align 8
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 1
  %5 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo1, align 8
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %7 = load i64, i64* %idx, align 8
  %call2 = call i32 @PyMemoTable_Set(%struct.PyMemoTable* %5, %struct._object* %6, i64 %7)
  %cmp = icmp slt i32 %call2, 0
  br i1 %cmp, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %8, i32 0, i32 8
  %9 = load i32, i32* %proto, align 4
  %cmp5 = icmp sge i32 %9, 4
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end.4
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call7 = call i64 @_Pickler_Write(%struct.PicklerObject* %10, i8* %memoize_op, i64 1)
  %cmp8 = icmp slt i64 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.then.6
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.then.6
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end.4
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %bin = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 9
  %12 = load i32, i32* %bin, align 4
  %tobool11 = icmp ne i32 %12, 0
  br i1 %tobool11, label %if.else.16, label %if.then.12

if.then.12:                                       ; preds = %if.else
  %arrayidx = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 0
  store i8 112, i8* %arrayidx, align 1
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %pdata, i32 0, i32 0
  %add.ptr = getelementptr i8, i8* %arraydecay, i64 1
  %13 = load i64, i64* %idx, align 8
  %call13 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %add.ptr, i64 29, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0), i64 %13)
  %arraydecay14 = getelementptr inbounds [30 x i8], [30 x i8]* %pdata, i32 0, i32 0
  %call15 = call i64 @strlen(i8* %arraydecay14) #7
  store i64 %call15, i64* %len, align 8
  br label %if.end.43

if.else.16:                                       ; preds = %if.else
  %14 = load i64, i64* %idx, align 8
  %cmp17 = icmp slt i64 %14, 256
  br i1 %cmp17, label %if.then.18, label %if.else.21

if.then.18:                                       ; preds = %if.else.16
  %arrayidx19 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 0
  store i8 113, i8* %arrayidx19, align 1
  %15 = load i64, i64* %idx, align 8
  %conv = trunc i64 %15 to i8
  %arrayidx20 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 1
  store i8 %conv, i8* %arrayidx20, align 1
  store i64 2, i64* %len, align 8
  br label %if.end.42

if.else.21:                                       ; preds = %if.else.16
  %16 = load i64, i64* %idx, align 8
  %cmp22 = icmp sle i64 %16, 4294967295
  br i1 %cmp22, label %if.then.24, label %if.else.39

if.then.24:                                       ; preds = %if.else.21
  %arrayidx25 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 0
  store i8 114, i8* %arrayidx25, align 1
  %17 = load i64, i64* %idx, align 8
  %and = and i64 %17, 255
  %conv26 = trunc i64 %and to i8
  %arrayidx27 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 1
  store i8 %conv26, i8* %arrayidx27, align 1
  %18 = load i64, i64* %idx, align 8
  %shr = ashr i64 %18, 8
  %and28 = and i64 %shr, 255
  %conv29 = trunc i64 %and28 to i8
  %arrayidx30 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 2
  store i8 %conv29, i8* %arrayidx30, align 1
  %19 = load i64, i64* %idx, align 8
  %shr31 = ashr i64 %19, 16
  %and32 = and i64 %shr31, 255
  %conv33 = trunc i64 %and32 to i8
  %arrayidx34 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 3
  store i8 %conv33, i8* %arrayidx34, align 1
  %20 = load i64, i64* %idx, align 8
  %shr35 = ashr i64 %20, 24
  %and36 = and i64 %shr35, 255
  %conv37 = trunc i64 %and36 to i8
  %arrayidx38 = getelementptr [30 x i8], [30 x i8]* %pdata, i32 0, i64 4
  store i8 %conv37, i8* %arrayidx38, align 1
  store i64 5, i64* %len, align 8
  br label %if.end.41

if.else.39:                                       ; preds = %if.else.21
  %call40 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call40, %struct.PickleState** %st, align 8
  %21 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %21, i32 0, i32 1
  %22 = load %struct._object*, %struct._object** %PicklingError, align 8
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.41:                                        ; preds = %if.then.24
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.18
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.then.12
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43
  %23 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay45 = getelementptr inbounds [30 x i8], [30 x i8]* %pdata, i32 0, i32 0
  %24 = load i64, i64* %len, align 8
  %call46 = call i64 @_Pickler_Write(%struct.PicklerObject* %23, i8* %arraydecay45, i64 %24)
  %cmp47 = icmp slt i64 %call46, 0
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.end.44
  store i32 -1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %if.end.44
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.50, %if.then.49, %if.else.39, %if.end.10, %if.then.9, %if.then.3, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal i64 @PyMemoTable_Size(%struct.PyMemoTable* %self) #0 {
entry:
  %self.addr = alloca %struct.PyMemoTable*, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  %0 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %0, i32 0, i32 1
  %1 = load i64, i64* %mt_used, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define internal i32 @PyMemoTable_Set(%struct.PyMemoTable* %self, %struct._object* %key, i64 %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyMemoTable*, align 8
  %key.addr = alloca %struct._object*, align 8
  %value.addr = alloca i64, align 8
  %entry1 = alloca %struct.PyMemoEntry*, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  store i64 %value, i64* %value.addr, align 8
  %0 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %key.addr, align 8
  %call = call %struct.PyMemoEntry* @_PyMemoTable_Lookup(%struct.PyMemoTable* %0, %struct._object* %1)
  store %struct.PyMemoEntry* %call, %struct.PyMemoEntry** %entry1, align 8
  %2 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_key = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %2, i32 0, i32 0
  %3 = load %struct._object*, %struct._object** %me_key, align 8
  %cmp = icmp ne %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %value.addr, align 8
  %5 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_value = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %5, i32 0, i32 1
  store i64 %4, i64* %me_value, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %key.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %8 = load %struct._object*, %struct._object** %key.addr, align 8
  %9 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_key2 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %9, i32 0, i32 0
  store %struct._object* %8, %struct._object** %me_key2, align 8
  %10 = load i64, i64* %value.addr, align 8
  %11 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %entry1, align 8
  %me_value3 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %11, i32 0, i32 1
  store i64 %10, i64* %me_value3, align 8
  %12 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %12, i32 0, i32 1
  %13 = load i64, i64* %mt_used, align 8
  %inc4 = add i64 %13, 1
  store i64 %inc4, i64* %mt_used, align 8
  %14 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used5 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %14, i32 0, i32 1
  %15 = load i64, i64* %mt_used5, align 8
  %mul = mul i64 %15, 3
  %16 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_mask = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %16, i32 0, i32 0
  %17 = load i64, i64* %mt_mask, align 8
  %add = add i64 %17, 1
  %mul6 = mul i64 %add, 2
  %cmp7 = icmp sge i64 %mul, %mul6
  br i1 %cmp7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %18 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %19 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used10 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %19, i32 0, i32 1
  %20 = load i64, i64* %mt_used10, align 8
  %cmp11 = icmp sgt i64 %20, 50000
  %cond = select i1 %cmp11, i32 2, i32 4
  %conv = sext i32 %cond to i64
  %21 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used12 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %21, i32 0, i32 1
  %22 = load i64, i64* %mt_used12, align 8
  %mul13 = mul i64 %conv, %22
  %call14 = call i32 @_PyMemoTable_ResizeTable(%struct.PyMemoTable* %18, i64 %mul13)
  store i32 %call14, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.8, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal i32 @_PyMemoTable_ResizeTable(%struct.PyMemoTable* %self, i64 %min_size) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyMemoTable*, align 8
  %min_size.addr = alloca i64, align 8
  %oldtable = alloca %struct.PyMemoEntry*, align 8
  %oldentry = alloca %struct.PyMemoEntry*, align 8
  %newentry = alloca %struct.PyMemoEntry*, align 8
  %new_size = alloca i64, align 8
  %to_process = alloca i64, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  store i64 %min_size, i64* %min_size.addr, align 8
  store %struct.PyMemoEntry* null, %struct.PyMemoEntry** %oldtable, align 8
  store i64 8, i64* %new_size, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %new_size, align 8
  %1 = load i64, i64* %min_size.addr, align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i64, i64* %new_size, align 8
  %cmp1 = icmp sgt i64 %2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %3, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %4 = load i64, i64* %new_size, align 8
  %shl = shl i64 %4, 1
  store i64 %shl, i64* %new_size, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %5 = load i64, i64* %new_size, align 8
  %cmp2 = icmp sle i64 %5, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %call = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %while.end
  %6 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %6, i32 0, i32 3
  %7 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table, align 8
  store %struct.PyMemoEntry* %7, %struct.PyMemoEntry** %oldtable, align 8
  %8 = load i64, i64* %new_size, align 8
  %mul = mul i64 %8, 16
  %call3 = call i8* @PyMem_Malloc(i64 %mul)
  %9 = bitcast i8* %call3 to %struct.PyMemoEntry*
  %10 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table4 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %10, i32 0, i32 3
  store %struct.PyMemoEntry* %9, %struct.PyMemoEntry** %mt_table4, align 8
  %11 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table5 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %11, i32 0, i32 3
  %12 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table5, align 8
  %cmp6 = icmp eq %struct.PyMemoEntry* %12, null
  br i1 %cmp6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end
  %13 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldtable, align 8
  %14 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table8 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %14, i32 0, i32 3
  store %struct.PyMemoEntry* %13, %struct.PyMemoEntry** %mt_table8, align 8
  %call9 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  %15 = load i64, i64* %new_size, align 8
  %16 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_allocated = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %16, i32 0, i32 2
  store i64 %15, i64* %mt_allocated, align 8
  %17 = load i64, i64* %new_size, align 8
  %sub = sub i64 %17, 1
  %18 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_mask = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %18, i32 0, i32 0
  store i64 %sub, i64* %mt_mask, align 8
  %19 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table11 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %19, i32 0, i32 3
  %20 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table11, align 8
  %21 = bitcast %struct.PyMemoEntry* %20 to i8*
  %22 = load i64, i64* %new_size, align 8
  %mul12 = mul i64 16, %22
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 %mul12, i32 8, i1 false)
  %23 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %23, i32 0, i32 1
  %24 = load i64, i64* %mt_used, align 8
  store i64 %24, i64* %to_process, align 8
  %25 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldtable, align 8
  store %struct.PyMemoEntry* %25, %struct.PyMemoEntry** %oldentry, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %26 = load i64, i64* %to_process, align 8
  %cmp13 = icmp sgt i64 %26, 0
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %27 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldentry, align 8
  %me_key = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %27, i32 0, i32 0
  %28 = load %struct._object*, %struct._object** %me_key, align 8
  %cmp14 = icmp ne %struct._object* %28, null
  br i1 %cmp14, label %if.then.15, label %if.end.21

if.then.15:                                       ; preds = %for.body
  %29 = load i64, i64* %to_process, align 8
  %dec = add i64 %29, -1
  store i64 %dec, i64* %to_process, align 8
  %30 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %31 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldentry, align 8
  %me_key16 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %31, i32 0, i32 0
  %32 = load %struct._object*, %struct._object** %me_key16, align 8
  %call17 = call %struct.PyMemoEntry* @_PyMemoTable_Lookup(%struct.PyMemoTable* %30, %struct._object* %32)
  store %struct.PyMemoEntry* %call17, %struct.PyMemoEntry** %newentry, align 8
  %33 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldentry, align 8
  %me_key18 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %33, i32 0, i32 0
  %34 = load %struct._object*, %struct._object** %me_key18, align 8
  %35 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %newentry, align 8
  %me_key19 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %35, i32 0, i32 0
  store %struct._object* %34, %struct._object** %me_key19, align 8
  %36 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldentry, align 8
  %me_value = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %36, i32 0, i32 1
  %37 = load i64, i64* %me_value, align 8
  %38 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %newentry, align 8
  %me_value20 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %38, i32 0, i32 1
  store i64 %37, i64* %me_value20, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.then.15, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.21
  %39 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldentry, align 8
  %incdec.ptr = getelementptr %struct.PyMemoEntry, %struct.PyMemoEntry* %39, i32 1
  store %struct.PyMemoEntry* %incdec.ptr, %struct.PyMemoEntry** %oldentry, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %40 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %oldtable, align 8
  %41 = bitcast %struct.PyMemoEntry* %40 to i8*
  call void @PyMem_Free(i8* %41)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.7, %if.then
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i32 @write_unicode_binary(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %encoded = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %data = alloca i8*, align 8
  %r = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* null, %struct._object** %encoded, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %1, i32 0, i32 3
  %2 = bitcast %struct.anon* %state to i32*
  %bf.load = load i32, i32* %2, align 4
  %bf.lshr = lshr i32 %bf.load, 7
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @_PyUnicode_Ready(%struct._object* %3)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call, %cond.false ]
  %tobool1 = icmp ne i32 %cond, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call2 = call i8* @PyUnicode_AsUTF8AndSize(%struct._object* %4, i64* %size)
  store i8* %call2, i8** %data, align 8
  %5 = load i8*, i8** %data, align 8
  %cmp = icmp ne i8* %5, null
  br i1 %cmp, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %7 = load i8*, i8** %data, align 8
  %8 = load i64, i64* %size, align 8
  %call4 = call i32 @write_utf8(%struct.PicklerObject* %6, i8* %7, i64 %8)
  store i32 %call4, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  call void @PyErr_Clear()
  %9 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call6 = call %struct._object* @PyUnicode_AsEncodedString(%struct._object* %9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.40, i32 0, i32 0))
  store %struct._object* %call6, %struct._object** %encoded, align 8
  %10 = load %struct._object*, %struct._object** %encoded, align 8
  %cmp7 = icmp eq %struct._object* %10, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.5
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %12 = load %struct._object*, %struct._object** %encoded, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %13, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %14 = load %struct._object*, %struct._object** %encoded, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1
  %16 = load i64, i64* %ob_size, align 8
  %call10 = call i32 @write_utf8(%struct.PicklerObject* %11, i8* %arraydecay, i64 %16)
  store i32 %call10, i32* %r, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.9
  %17 = load %struct._object*, %struct._object** %encoded, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %19, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  %24 = load i32, i32* %r, align 4
  store i32 %24, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.8, %if.then.3, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @raw_unicode_escape(%struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %repr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %p = alloca i8*, align 8
  %i = alloca i64, align 8
  %size = alloca i64, align 8
  %expandsize = alloca i64, align 8
  %data = alloca i8*, align 8
  %kind = alloca i32, align 4
  %ch = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %1, i32 0, i32 3
  %2 = bitcast %struct.anon* %state to i32*
  %bf.load = load i32, i32* %2, align 4
  %bf.lshr = lshr i32 %bf.load, 7
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @_PyUnicode_Ready(%struct._object* %3)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call, %cond.false ]
  %tobool1 = icmp ne i32 %cond, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %5, i32 0, i32 1
  %6 = load i64, i64* %length, align 8
  store i64 %6, i64* %size, align 8
  %7 = load %struct._object*, %struct._object** %obj.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyASCIIObject*
  %state2 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %8, i32 0, i32 3
  %9 = bitcast %struct.anon* %state2 to i32*
  %bf.load3 = load i32, i32* %9, align 4
  %bf.lshr4 = lshr i32 %bf.load3, 5
  %bf.clear5 = and i32 %bf.lshr4, 1
  %tobool6 = icmp ne i32 %bf.clear5, 0
  br i1 %tobool6, label %cond.true.7, label %cond.false.18

cond.true.7:                                      ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyASCIIObject*
  %state8 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %11, i32 0, i32 3
  %12 = bitcast %struct.anon* %state8 to i32*
  %bf.load9 = load i32, i32* %12, align 4
  %bf.lshr10 = lshr i32 %bf.load9, 6
  %bf.clear11 = and i32 %bf.lshr10, 1
  %tobool12 = icmp ne i32 %bf.clear11, 0
  br i1 %tobool12, label %cond.true.13, label %cond.false.14

cond.true.13:                                     ; preds = %cond.true.7
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyASCIIObject*
  %add.ptr = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %14, i64 1
  %15 = bitcast %struct.PyASCIIObject* %add.ptr to i8*
  br label %cond.end.16

cond.false.14:                                    ; preds = %cond.true.7
  %16 = load %struct._object*, %struct._object** %obj.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyCompactUnicodeObject*
  %add.ptr15 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %17, i64 1
  %18 = bitcast %struct.PyCompactUnicodeObject* %add.ptr15 to i8*
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.14, %cond.true.13
  %cond17 = phi i8* [ %15, %cond.true.13 ], [ %18, %cond.false.14 ]
  br label %cond.end.20

cond.false.18:                                    ; preds = %if.end
  %19 = load %struct._object*, %struct._object** %obj.addr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyUnicodeObject*
  %data19 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %20, i32 0, i32 1
  %any = bitcast %union.anon* %data19 to i8**
  %21 = load i8*, i8** %any, align 8
  br label %cond.end.20

cond.end.20:                                      ; preds = %cond.false.18, %cond.end.16
  %cond21 = phi i8* [ %cond17, %cond.end.16 ], [ %21, %cond.false.18 ]
  store i8* %cond21, i8** %data, align 8
  %22 = load %struct._object*, %struct._object** %obj.addr, align 8
  %23 = bitcast %struct._object* %22 to %struct.PyASCIIObject*
  %state22 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %23, i32 0, i32 3
  %24 = bitcast %struct.anon* %state22 to i32*
  %bf.load23 = load i32, i32* %24, align 4
  %bf.lshr24 = lshr i32 %bf.load23, 2
  %bf.clear25 = and i32 %bf.lshr24, 7
  store i32 %bf.clear25, i32* %kind, align 4
  %25 = load i32, i32* %kind, align 4
  %cmp = icmp eq i32 %25, 4
  br i1 %cmp, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %cond.end.20
  store i64 10, i64* %expandsize, align 8
  br label %if.end.27

if.else:                                          ; preds = %cond.end.20
  store i64 6, i64* %expandsize, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.26
  %26 = load i64, i64* %size, align 8
  %27 = load i64, i64* %expandsize, align 8
  %div = sdiv i64 9223372036854775807, %27
  %cmp28 = icmp sgt i64 %26, %div
  br i1 %cmp28, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %if.end.27
  %call30 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call30, %struct._object** %retval
  br label %return

if.end.31:                                        ; preds = %if.end.27
  %28 = load i64, i64* %expandsize, align 8
  %29 = load i64, i64* %size, align 8
  %mul = mul i64 %28, %29
  %call32 = call %struct._object* @PyByteArray_FromStringAndSize(i8* null, i64 %mul)
  store %struct._object* %call32, %struct._object** %repr, align 8
  %30 = load %struct._object*, %struct._object** %repr, align 8
  %cmp33 = icmp eq %struct._object* %30, null
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.31
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.35:                                        ; preds = %if.end.31
  %31 = load i64, i64* %size, align 8
  %cmp36 = icmp eq i64 %31, 0
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.35
  br label %done

if.end.38:                                        ; preds = %if.end.35
  %32 = load %struct._object*, %struct._object** %repr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %33, i32 0, i32 1
  %34 = load i64, i64* %ob_size, align 8
  %tobool39 = icmp ne i64 %34, 0
  br i1 %tobool39, label %cond.true.40, label %cond.false.41

cond.true.40:                                     ; preds = %if.end.38
  %35 = load %struct._object*, %struct._object** %repr, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyByteArrayObject*
  %ob_start = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %36, i32 0, i32 3
  %37 = load i8*, i8** %ob_start, align 8
  br label %cond.end.42

cond.false.41:                                    ; preds = %if.end.38
  br label %cond.end.42

cond.end.42:                                      ; preds = %cond.false.41, %cond.true.40
  %cond43 = phi i8* [ %37, %cond.true.40 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.41 ]
  store i8* %cond43, i8** %p, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end.42
  %38 = load i64, i64* %i, align 8
  %39 = load i64, i64* %size, align 8
  %cmp44 = icmp slt i64 %38, %39
  br i1 %cmp44, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i32, i32* %kind, align 4
  %cmp45 = icmp eq i32 %40, 1
  br i1 %cmp45, label %cond.true.46, label %cond.false.47

cond.true.46:                                     ; preds = %for.body
  %41 = load i64, i64* %i, align 8
  %42 = load i8*, i8** %data, align 8
  %arrayidx = getelementptr i8, i8* %42, i64 %41
  %43 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %43 to i32
  br label %cond.end.57

cond.false.47:                                    ; preds = %for.body
  %44 = load i32, i32* %kind, align 4
  %cmp48 = icmp eq i32 %44, 2
  br i1 %cmp48, label %cond.true.50, label %cond.false.53

cond.true.50:                                     ; preds = %cond.false.47
  %45 = load i64, i64* %i, align 8
  %46 = load i8*, i8** %data, align 8
  %47 = bitcast i8* %46 to i16*
  %arrayidx51 = getelementptr i16, i16* %47, i64 %45
  %48 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %48 to i32
  br label %cond.end.55

cond.false.53:                                    ; preds = %cond.false.47
  %49 = load i64, i64* %i, align 8
  %50 = load i8*, i8** %data, align 8
  %51 = bitcast i8* %50 to i32*
  %arrayidx54 = getelementptr i32, i32* %51, i64 %49
  %52 = load i32, i32* %arrayidx54, align 4
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.53, %cond.true.50
  %cond56 = phi i32 [ %conv52, %cond.true.50 ], [ %52, %cond.false.53 ]
  br label %cond.end.57

cond.end.57:                                      ; preds = %cond.end.55, %cond.true.46
  %cond58 = phi i32 [ %conv, %cond.true.46 ], [ %cond56, %cond.end.55 ]
  store i32 %cond58, i32* %ch, align 4
  %53 = load i32, i32* %ch, align 4
  %cmp59 = icmp uge i32 %53, 65536
  br i1 %cmp59, label %if.then.61, label %if.else.99

if.then.61:                                       ; preds = %cond.end.57
  %54 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr i8, i8* %54, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 92, i8* %54, align 1
  %55 = load i8*, i8** %p, align 8
  %incdec.ptr62 = getelementptr i8, i8* %55, i32 1
  store i8* %incdec.ptr62, i8** %p, align 8
  store i8 85, i8* %55, align 1
  %56 = load i32, i32* %ch, align 4
  %shr = lshr i32 %56, 28
  %and = and i32 %shr, 15
  %idxprom = zext i32 %and to i64
  %57 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx63 = getelementptr i8, i8* %57, i64 %idxprom
  %58 = load i8, i8* %arrayidx63, align 1
  %59 = load i8*, i8** %p, align 8
  %incdec.ptr64 = getelementptr i8, i8* %59, i32 1
  store i8* %incdec.ptr64, i8** %p, align 8
  store i8 %58, i8* %59, align 1
  %60 = load i32, i32* %ch, align 4
  %shr65 = lshr i32 %60, 24
  %and66 = and i32 %shr65, 15
  %idxprom67 = zext i32 %and66 to i64
  %61 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx68 = getelementptr i8, i8* %61, i64 %idxprom67
  %62 = load i8, i8* %arrayidx68, align 1
  %63 = load i8*, i8** %p, align 8
  %incdec.ptr69 = getelementptr i8, i8* %63, i32 1
  store i8* %incdec.ptr69, i8** %p, align 8
  store i8 %62, i8* %63, align 1
  %64 = load i32, i32* %ch, align 4
  %shr70 = lshr i32 %64, 20
  %and71 = and i32 %shr70, 15
  %idxprom72 = zext i32 %and71 to i64
  %65 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx73 = getelementptr i8, i8* %65, i64 %idxprom72
  %66 = load i8, i8* %arrayidx73, align 1
  %67 = load i8*, i8** %p, align 8
  %incdec.ptr74 = getelementptr i8, i8* %67, i32 1
  store i8* %incdec.ptr74, i8** %p, align 8
  store i8 %66, i8* %67, align 1
  %68 = load i32, i32* %ch, align 4
  %shr75 = lshr i32 %68, 16
  %and76 = and i32 %shr75, 15
  %idxprom77 = zext i32 %and76 to i64
  %69 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx78 = getelementptr i8, i8* %69, i64 %idxprom77
  %70 = load i8, i8* %arrayidx78, align 1
  %71 = load i8*, i8** %p, align 8
  %incdec.ptr79 = getelementptr i8, i8* %71, i32 1
  store i8* %incdec.ptr79, i8** %p, align 8
  store i8 %70, i8* %71, align 1
  %72 = load i32, i32* %ch, align 4
  %shr80 = lshr i32 %72, 12
  %and81 = and i32 %shr80, 15
  %idxprom82 = zext i32 %and81 to i64
  %73 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx83 = getelementptr i8, i8* %73, i64 %idxprom82
  %74 = load i8, i8* %arrayidx83, align 1
  %75 = load i8*, i8** %p, align 8
  %incdec.ptr84 = getelementptr i8, i8* %75, i32 1
  store i8* %incdec.ptr84, i8** %p, align 8
  store i8 %74, i8* %75, align 1
  %76 = load i32, i32* %ch, align 4
  %shr85 = lshr i32 %76, 8
  %and86 = and i32 %shr85, 15
  %idxprom87 = zext i32 %and86 to i64
  %77 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx88 = getelementptr i8, i8* %77, i64 %idxprom87
  %78 = load i8, i8* %arrayidx88, align 1
  %79 = load i8*, i8** %p, align 8
  %incdec.ptr89 = getelementptr i8, i8* %79, i32 1
  store i8* %incdec.ptr89, i8** %p, align 8
  store i8 %78, i8* %79, align 1
  %80 = load i32, i32* %ch, align 4
  %shr90 = lshr i32 %80, 4
  %and91 = and i32 %shr90, 15
  %idxprom92 = zext i32 %and91 to i64
  %81 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx93 = getelementptr i8, i8* %81, i64 %idxprom92
  %82 = load i8, i8* %arrayidx93, align 1
  %83 = load i8*, i8** %p, align 8
  %incdec.ptr94 = getelementptr i8, i8* %83, i32 1
  store i8* %incdec.ptr94, i8** %p, align 8
  store i8 %82, i8* %83, align 1
  %84 = load i32, i32* %ch, align 4
  %and95 = and i32 %84, 15
  %idxprom96 = zext i32 %and95 to i64
  %85 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx97 = getelementptr i8, i8* %85, i64 %idxprom96
  %86 = load i8, i8* %arrayidx97, align 1
  %87 = load i8*, i8** %p, align 8
  %incdec.ptr98 = getelementptr i8, i8* %87, i32 1
  store i8* %incdec.ptr98, i8** %p, align 8
  store i8 %86, i8* %87, align 1
  br label %if.end.133

if.else.99:                                       ; preds = %cond.end.57
  %88 = load i32, i32* %ch, align 4
  %cmp100 = icmp uge i32 %88, 256
  br i1 %cmp100, label %if.then.107, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.99
  %89 = load i32, i32* %ch, align 4
  %cmp102 = icmp eq i32 %89, 92
  br i1 %cmp102, label %if.then.107, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %lor.lhs.false
  %90 = load i32, i32* %ch, align 4
  %cmp105 = icmp eq i32 %90, 10
  br i1 %cmp105, label %if.then.107, label %if.else.129

if.then.107:                                      ; preds = %lor.lhs.false.104, %lor.lhs.false, %if.else.99
  %91 = load i8*, i8** %p, align 8
  %incdec.ptr108 = getelementptr i8, i8* %91, i32 1
  store i8* %incdec.ptr108, i8** %p, align 8
  store i8 92, i8* %91, align 1
  %92 = load i8*, i8** %p, align 8
  %incdec.ptr109 = getelementptr i8, i8* %92, i32 1
  store i8* %incdec.ptr109, i8** %p, align 8
  store i8 117, i8* %92, align 1
  %93 = load i32, i32* %ch, align 4
  %shr110 = lshr i32 %93, 12
  %and111 = and i32 %shr110, 15
  %idxprom112 = zext i32 %and111 to i64
  %94 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx113 = getelementptr i8, i8* %94, i64 %idxprom112
  %95 = load i8, i8* %arrayidx113, align 1
  %96 = load i8*, i8** %p, align 8
  %incdec.ptr114 = getelementptr i8, i8* %96, i32 1
  store i8* %incdec.ptr114, i8** %p, align 8
  store i8 %95, i8* %96, align 1
  %97 = load i32, i32* %ch, align 4
  %shr115 = lshr i32 %97, 8
  %and116 = and i32 %shr115, 15
  %idxprom117 = zext i32 %and116 to i64
  %98 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx118 = getelementptr i8, i8* %98, i64 %idxprom117
  %99 = load i8, i8* %arrayidx118, align 1
  %100 = load i8*, i8** %p, align 8
  %incdec.ptr119 = getelementptr i8, i8* %100, i32 1
  store i8* %incdec.ptr119, i8** %p, align 8
  store i8 %99, i8* %100, align 1
  %101 = load i32, i32* %ch, align 4
  %shr120 = lshr i32 %101, 4
  %and121 = and i32 %shr120, 15
  %idxprom122 = zext i32 %and121 to i64
  %102 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx123 = getelementptr i8, i8* %102, i64 %idxprom122
  %103 = load i8, i8* %arrayidx123, align 1
  %104 = load i8*, i8** %p, align 8
  %incdec.ptr124 = getelementptr i8, i8* %104, i32 1
  store i8* %incdec.ptr124, i8** %p, align 8
  store i8 %103, i8* %104, align 1
  %105 = load i32, i32* %ch, align 4
  %and125 = and i32 %105, 15
  %idxprom126 = zext i32 %and125 to i64
  %106 = load i8*, i8** @Py_hexdigits, align 8
  %arrayidx127 = getelementptr i8, i8* %106, i64 %idxprom126
  %107 = load i8, i8* %arrayidx127, align 1
  %108 = load i8*, i8** %p, align 8
  %incdec.ptr128 = getelementptr i8, i8* %108, i32 1
  store i8* %incdec.ptr128, i8** %p, align 8
  store i8 %107, i8* %108, align 1
  br label %if.end.132

if.else.129:                                      ; preds = %lor.lhs.false.104
  %109 = load i32, i32* %ch, align 4
  %conv130 = trunc i32 %109 to i8
  %110 = load i8*, i8** %p, align 8
  %incdec.ptr131 = getelementptr i8, i8* %110, i32 1
  store i8* %incdec.ptr131, i8** %p, align 8
  store i8 %conv130, i8* %110, align 1
  br label %if.end.132

if.end.132:                                       ; preds = %if.else.129, %if.then.107
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.then.61
  br label %for.inc

for.inc:                                          ; preds = %if.end.133
  %111 = load i64, i64* %i, align 8
  %inc = add i64 %111, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %112 = load i8*, i8** %p, align 8
  %113 = load %struct._object*, %struct._object** %repr, align 8
  %114 = bitcast %struct._object* %113 to %struct.PyVarObject*
  %ob_size134 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %114, i32 0, i32 1
  %115 = load i64, i64* %ob_size134, align 8
  %tobool135 = icmp ne i64 %115, 0
  br i1 %tobool135, label %cond.true.136, label %cond.false.138

cond.true.136:                                    ; preds = %for.end
  %116 = load %struct._object*, %struct._object** %repr, align 8
  %117 = bitcast %struct._object* %116 to %struct.PyByteArrayObject*
  %ob_start137 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %117, i32 0, i32 3
  %118 = load i8*, i8** %ob_start137, align 8
  br label %cond.end.139

cond.false.138:                                   ; preds = %for.end
  br label %cond.end.139

cond.end.139:                                     ; preds = %cond.false.138, %cond.true.136
  %cond140 = phi i8* [ %118, %cond.true.136 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.138 ]
  %sub.ptr.lhs.cast = ptrtoint i8* %112 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %cond140 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %size, align 8
  br label %done

done:                                             ; preds = %cond.end.139, %if.then.37
  %119 = load %struct._object*, %struct._object** %repr, align 8
  %120 = bitcast %struct._object* %119 to %struct.PyVarObject*
  %ob_size141 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %120, i32 0, i32 1
  %121 = load i64, i64* %ob_size141, align 8
  %tobool142 = icmp ne i64 %121, 0
  br i1 %tobool142, label %cond.true.143, label %cond.false.145

cond.true.143:                                    ; preds = %done
  %122 = load %struct._object*, %struct._object** %repr, align 8
  %123 = bitcast %struct._object* %122 to %struct.PyByteArrayObject*
  %ob_start144 = getelementptr inbounds %struct.PyByteArrayObject, %struct.PyByteArrayObject* %123, i32 0, i32 3
  %124 = load i8*, i8** %ob_start144, align 8
  br label %cond.end.146

cond.false.145:                                   ; preds = %done
  br label %cond.end.146

cond.end.146:                                     ; preds = %cond.false.145, %cond.true.143
  %cond147 = phi i8* [ %124, %cond.true.143 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_PyByteArray_empty_string, i32 0, i32 0), %cond.false.145 ]
  %125 = load i64, i64* %size, align 8
  %call148 = call %struct._object* @PyBytes_FromStringAndSize(i8* %cond147, i64 %125)
  store %struct._object* %call148, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end.146
  %126 = load %struct._object*, %struct._object** %repr, align 8
  store %struct._object* %126, %struct._object** %_py_decref_tmp, align 8
  %127 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %127, i32 0, i32 0
  %128 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %128, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp149 = icmp ne i64 %dec, 0
  br i1 %cmp149, label %if.then.151, label %if.else.152

if.then.151:                                      ; preds = %do.body
  br label %if.end.153

if.else.152:                                      ; preds = %do.body
  %129 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %129, i32 0, i32 1
  %130 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %130, i32 0, i32 4
  %131 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %132 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %131(%struct._object* %132)
  br label %if.end.153

if.end.153:                                       ; preds = %if.else.152, %if.then.151
  br label %do.end

do.end:                                           ; preds = %if.end.153
  %133 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %133, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.34, %if.then.29, %if.then
  %134 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %134
}

declare i32 @_PyUnicode_Ready(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @write_utf8(%struct.PicklerObject* %self, i8* %data, i64 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %header = alloca [9 x i8], align 1
  %len = alloca i64, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %cmp = icmp sle i64 %0, 255
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %1, i32 0, i32 8
  %2 = load i32, i32* %proto, align 4
  %cmp1 = icmp sge i32 %2, 4
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %arrayidx = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 0
  store i8 -116, i8* %arrayidx, align 1
  %3 = load i64, i64* %size.addr, align 8
  %and = and i64 %3, 255
  %conv = trunc i64 %and to i8
  %arrayidx2 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 1
  store i8 %conv, i8* %arrayidx2, align 1
  store i64 2, i64* %len, align 8
  br label %if.end.29

if.else:                                          ; preds = %land.lhs.true, %entry
  %4 = load i64, i64* %size.addr, align 8
  %cmp3 = icmp ule i64 %4, 4294967295
  br i1 %cmp3, label %if.then.5, label %if.else.21

if.then.5:                                        ; preds = %if.else
  %arrayidx6 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 0
  store i8 88, i8* %arrayidx6, align 1
  %5 = load i64, i64* %size.addr, align 8
  %and7 = and i64 %5, 255
  %conv8 = trunc i64 %and7 to i8
  %arrayidx9 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 1
  store i8 %conv8, i8* %arrayidx9, align 1
  %6 = load i64, i64* %size.addr, align 8
  %shr = ashr i64 %6, 8
  %and10 = and i64 %shr, 255
  %conv11 = trunc i64 %and10 to i8
  %arrayidx12 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 2
  store i8 %conv11, i8* %arrayidx12, align 1
  %7 = load i64, i64* %size.addr, align 8
  %shr13 = ashr i64 %7, 16
  %and14 = and i64 %shr13, 255
  %conv15 = trunc i64 %and14 to i8
  %arrayidx16 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 3
  store i8 %conv15, i8* %arrayidx16, align 1
  %8 = load i64, i64* %size.addr, align 8
  %shr17 = ashr i64 %8, 24
  %and18 = and i64 %shr17, 255
  %conv19 = trunc i64 %and18 to i8
  %arrayidx20 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 4
  store i8 %conv19, i8* %arrayidx20, align 1
  store i64 5, i64* %len, align 8
  br label %if.end.28

if.else.21:                                       ; preds = %if.else
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto22 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %9, i32 0, i32 8
  %10 = load i32, i32* %proto22, align 4
  %cmp23 = icmp sge i32 %10, 4
  br i1 %cmp23, label %if.then.25, label %if.else.27

if.then.25:                                       ; preds = %if.else.21
  %arrayidx26 = getelementptr [9 x i8], [9 x i8]* %header, i32 0, i64 0
  store i8 -115, i8* %arrayidx26, align 1
  %arraydecay = getelementptr inbounds [9 x i8], [9 x i8]* %header, i32 0, i32 0
  %add.ptr = getelementptr i8, i8* %arraydecay, i64 1
  %11 = load i64, i64* %size.addr, align 8
  call void @_write_size64(i8* %add.ptr, i64 %11)
  store i64 9, i64* %len, align 8
  br label %if.end

if.else.27:                                       ; preds = %if.else.21
  %12 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.41, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.25
  br label %if.end.28

if.end.28:                                        ; preds = %if.end, %if.then.5
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.then
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %arraydecay30 = getelementptr inbounds [9 x i8], [9 x i8]* %header, i32 0, i32 0
  %14 = load i64, i64* %len, align 8
  %call = call i64 @_Pickler_Write(%struct.PicklerObject* %13, i8* %arraydecay30, i64 %14)
  %cmp31 = icmp slt i64 %call, 0
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.29
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.29
  %15 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %16 = load i8*, i8** %data.addr, align 8
  %17 = load i64, i64* %size.addr, align 8
  %call35 = call i64 @_Pickler_Write(%struct.PicklerObject* %15, i8* %16, i64 %17)
  %cmp36 = icmp slt i64 %call35, 0
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end.34
  store i32 -1, i32* %retval
  br label %return

if.end.39:                                        ; preds = %if.end.34
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.39, %if.then.38, %if.then.33, %if.else.27
  %18 = load i32, i32* %retval
  ret i32 %18
}

declare %struct._object* @PyUnicode_AsEncodedString(%struct._object*, i8*, i8*) #1

declare %struct._object* @PyByteArray_FromStringAndSize(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @fast_save_enter(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_nesting = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 14
  %1 = load i32, i32* %fast_nesting, align 4
  %inc = add i32 %1, 1
  store i32 %inc, i32* %fast_nesting, align 4
  %cmp = icmp sge i32 %inc, 50
  br i1 %cmp, label %if.then, label %if.end.55

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %key, align 8
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 16
  %3 = load %struct._object*, %struct._object** %fast_memo, align 8
  %cmp1 = icmp eq %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.8

if.then.2:                                        ; preds = %if.then
  %call = call %struct._object* @PyDict_New()
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo3 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 16
  store %struct._object* %call, %struct._object** %fast_memo3, align 8
  %5 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo4 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %5, i32 0, i32 16
  %6 = load %struct._object*, %struct._object** %fast_memo4, align 8
  %cmp5 = icmp eq %struct._object* %6, null
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then.2
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_nesting7 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %7, i32 0, i32 14
  store i32 -1, i32* %fast_nesting7, align 4
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.2
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %9 = bitcast %struct._object* %8 to i8*
  %call9 = call %struct._object* @PyLong_FromVoidPtr(i8* %9)
  store %struct._object* %call9, %struct._object** %key, align 8
  %10 = load %struct._object*, %struct._object** %key, align 8
  %cmp10 = icmp eq %struct._object* %10, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo13 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 16
  %12 = load %struct._object*, %struct._object** %fast_memo13, align 8
  %13 = load %struct._object*, %struct._object** %key, align 8
  %call14 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %12, %struct._object* %13)
  %tobool = icmp ne %struct._object* %call14, null
  br i1 %tobool, label %if.then.15, label %if.end.22

if.then.15:                                       ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.then.15
  %14 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body
  br label %if.end.18

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.18
  %21 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %22 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 1
  %24 = load i8*, i8** %tp_name, align 8
  %25 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call20 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %21, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.44, i32 0, i32 0), i8* %24, %struct._object* %25)
  %26 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_nesting21 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %26, i32 0, i32 14
  store i32 -1, i32* %fast_nesting21, align 4
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.12
  %call23 = call %struct._object* @PyErr_Occurred()
  %tobool24 = icmp ne %struct._object* %call23, null
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.22
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.22
  %27 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo27 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %27, i32 0, i32 16
  %28 = load %struct._object*, %struct._object** %fast_memo27, align 8
  %29 = load %struct._object*, %struct._object** %key, align 8
  %call28 = call i32 @PyDict_SetItem(%struct._object* %28, %struct._object* %29, %struct._object* @_Py_NoneStruct)
  %cmp29 = icmp slt i32 %call28, 0
  br i1 %cmp29, label %if.then.30, label %if.end.43

if.then.30:                                       ; preds = %if.end.26
  br label %do.body.31

do.body.31:                                       ; preds = %if.then.30
  %30 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp32, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt33, align 8
  %dec34 = add i64 %32, -1
  store i64 %dec34, i64* %ob_refcnt33, align 8
  %cmp35 = icmp ne i64 %dec34, 0
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40

if.else.37:                                       ; preds = %do.body.31
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  call void %35(%struct._object* %36)
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end.41

do.end.41:                                        ; preds = %if.end.40
  %37 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_nesting42 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %37, i32 0, i32 14
  store i32 -1, i32* %fast_nesting42, align 4
  store i32 0, i32* %retval
  br label %return

if.end.43:                                        ; preds = %if.end.26
  br label %do.body.44

do.body.44:                                       ; preds = %if.end.43
  %38 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp45, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %40, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.44
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %43(%struct._object* %44)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  br label %if.end.55

if.end.55:                                        ; preds = %do.end.54, %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.55, %do.end.41, %if.then.25, %do.end, %if.then.11, %if.then.6
  %45 = load i32, i32* %retval
  ret i32 %45
}

declare i64 @PyDict_Size(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @batch_dict_exact(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %dict_size = alloca i64, align 8
  %ppos = alloca i64, align 8
  %mark_op = alloca i8, align 1
  %setitem_op = alloca i8, align 1
  %setitems_op = alloca i8, align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* null, %struct._object** %key, align 8
  store %struct._object* null, %struct._object** %value, align 8
  store i64 0, i64* %ppos, align 8
  store i8 40, i8* %mark_op, align 1
  store i8 115, i8* %setitem_op, align 1
  store i8 117, i8* %setitems_op, align 1
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i64 @PyDict_Size(%struct._object* %0)
  store i64 %call, i64* %dict_size, align 8
  %1 = load i64, i64* %dict_size, align 8
  %cmp = icmp eq i64 %1, 1
  br i1 %cmp, label %if.then, label %if.end.13

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call1 = call i32 @PyDict_Next(%struct._object* %2, i64* %ppos, %struct._object** %key, %struct._object** %value)
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %key, align 8
  %call2 = call i32 @save(%struct.PicklerObject* %3, %struct._object* %4, i32 0)
  %cmp3 = icmp slt i32 %call2, 0
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %6 = load %struct._object*, %struct._object** %value, align 8
  %call5 = call i32 @save(%struct.PicklerObject* %5, %struct._object* %6, i32 0)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call9 = call i64 @_Pickler_Write(%struct.PicklerObject* %7, i8* %setitem_op, i64 1)
  %cmp10 = icmp slt i64 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.13
  store i32 0, i32* %i, align 4
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call14 = call i64 @_Pickler_Write(%struct.PicklerObject* %8, i8* %mark_op, i64 1)
  %cmp15 = icmp slt i64 %call14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %do.body
  br label %while.cond

while.cond:                                       ; preds = %if.end.29, %if.end.17
  %9 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call18 = call i32 @PyDict_Next(%struct._object* %9, i64* %ppos, %struct._object** %key, %struct._object** %value)
  %tobool = icmp ne i32 %call18, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %11 = load %struct._object*, %struct._object** %key, align 8
  %call19 = call i32 @save(%struct.PicklerObject* %10, %struct._object* %11, i32 0)
  %cmp20 = icmp slt i32 %call19, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %while.body
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %while.body
  %12 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %13 = load %struct._object*, %struct._object** %value, align 8
  %call23 = call i32 @save(%struct.PicklerObject* %12, %struct._object* %13, i32 0)
  %cmp24 = icmp slt i32 %call23, 0
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.22
  store i32 -1, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.22
  %14 = load i32, i32* %i, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32* %i, align 4
  %cmp27 = icmp eq i32 %inc, 1000
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.26
  br label %while.end

if.end.29:                                        ; preds = %if.end.26
  br label %while.cond

while.end:                                        ; preds = %if.then.28, %while.cond
  %15 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call30 = call i64 @_Pickler_Write(%struct.PicklerObject* %15, i8* %setitems_op, i64 1)
  %cmp31 = icmp slt i64 %call30, 0
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %while.end
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %while.end
  %16 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call34 = call i64 @PyDict_Size(%struct._object* %16)
  %17 = load i64, i64* %dict_size, align 8
  %cmp35 = icmp ne i64 %call34, %17
  br i1 %cmp35, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %if.end.33
  %18 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %call37 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %18, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.45, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.38:                                        ; preds = %if.end.33
  br label %do.cond

do.cond:                                          ; preds = %if.end.38
  %19 = load i32, i32* %i, align 4
  %cmp39 = icmp eq i32 %19, 1000
  br i1 %cmp39, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.36, %if.then.32, %if.then.25, %if.then.21, %if.then.16, %if.end.12, %if.then.11, %if.then.7, %if.then.4
  %20 = load i32, i32* %retval
  ret i32 %20
}

declare %struct._object* @_PyObject_CallMethodId(%struct._object*, %struct._Py_Identifier*, i8*, ...) #1

declare %struct._object* @PyObject_GetIter(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @batch_dict(%struct.PicklerObject* %self, %struct._object* %iter) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %iter.addr = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %firstitem = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %mark_op = alloca i8, align 1
  %setitem_op = alloca i8, align 1
  %setitems_op = alloca i8, align 1
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp75 = alloca %struct._object*, align 8
  %_py_tmp105 = alloca %struct._object*, align 8
  %_py_decref_tmp109 = alloca %struct._object*, align 8
  %_py_tmp143 = alloca %struct._object*, align 8
  %_py_decref_tmp147 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp180 = alloca %struct._object*, align 8
  %_py_xdecref_tmp195 = alloca %struct._object*, align 8
  %_py_decref_tmp199 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %iter, %struct._object** %iter.addr, align 8
  store %struct._object* null, %struct._object** %obj, align 8
  store %struct._object* null, %struct._object** %firstitem, align 8
  store i8 40, i8* %mark_op, align 1
  store i8 115, i8* %setitem_op, align 1
  store i8 117, i8* %setitems_op, align 1
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 8
  %1 = load i32, i32* %proto, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end.29

if.then:                                          ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end.28, %if.then
  %2 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call = call %struct._object* @PyIter_Next(%struct._object* %2)
  store %struct._object* %call, %struct._object** %obj, align 8
  %3 = load %struct._object*, %struct._object** %obj, align 8
  %cmp1 = icmp eq %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.5

if.then.2:                                        ; preds = %for.cond
  %call3 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call3, null
  br i1 %tobool, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.2
  br label %for.end

if.end.5:                                         ; preds = %for.cond
  %4 = load %struct._object*, %struct._object** %obj, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 67108864
  %cmp6 = icmp ne i64 %and, 0
  br i1 %cmp6, label %lor.lhs.false, label %if.then.9

lor.lhs.false:                                    ; preds = %if.end.5
  %7 = load %struct._object*, %struct._object** %obj, align 8
  %call7 = call i64 @PyTuple_Size(%struct._object* %7)
  %cmp8 = icmp ne i64 %call7, 2
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %lor.lhs.false, %if.end.5
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.46, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %lor.lhs.false
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %obj, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %11, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  %call11 = call i32 @save(%struct.PicklerObject* %9, %struct._object* %12, i32 0)
  store i32 %call11, i32* %i, align 4
  %13 = load i32, i32* %i, align 4
  %cmp12 = icmp sge i32 %13, 0
  br i1 %cmp12, label %if.then.13, label %if.end.17

if.then.13:                                       ; preds = %if.end.10
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %15 = load %struct._object*, %struct._object** %obj, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*
  %ob_item14 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1
  %arrayidx15 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item14, i32 0, i64 1
  %17 = load %struct._object*, %struct._object** %arrayidx15, align 8
  %call16 = call i32 @save(%struct.PicklerObject* %14, %struct._object* %17, i32 0)
  store i32 %call16, i32* %i, align 4
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.13, %if.end.10
  br label %do.body

do.body:                                          ; preds = %if.end.17
  %18 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp18 = icmp ne i64 %dec, 0
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %do.body
  br label %if.end.21

if.else:                                          ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.19
  br label %do.end

do.end:                                           ; preds = %if.end.21
  %25 = load i32, i32* %i, align 4
  %cmp22 = icmp slt i32 %25, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.24:                                        ; preds = %do.end
  %26 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call25 = call i64 @_Pickler_Write(%struct.PicklerObject* %26, i8* %setitem_op, i64 1)
  %cmp26 = icmp slt i64 %call25, 0
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.24
  store i32 -1, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  br label %for.cond

for.end:                                          ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %entry
  br label %do.body.30

do.body.30:                                       ; preds = %do.cond, %if.end.29
  %27 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call31 = call %struct._object* @PyIter_Next(%struct._object* %27)
  store %struct._object* %call31, %struct._object** %firstitem, align 8
  %28 = load %struct._object*, %struct._object** %firstitem, align 8
  %cmp32 = icmp eq %struct._object* %28, null
  br i1 %cmp32, label %if.then.33, label %if.end.38

if.then.33:                                       ; preds = %do.body.30
  %call34 = call %struct._object* @PyErr_Occurred()
  %tobool35 = icmp ne %struct._object* %call34, null
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.then.33
  br label %error

if.end.37:                                        ; preds = %if.then.33
  br label %do.end.175

if.end.38:                                        ; preds = %do.body.30
  %29 = load %struct._object*, %struct._object** %firstitem, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_flags40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 19
  %31 = load i64, i64* %tp_flags40, align 8
  %and41 = and i64 %31, 67108864
  %cmp42 = icmp ne i64 %and41, 0
  br i1 %cmp42, label %lor.lhs.false.43, label %if.then.46

lor.lhs.false.43:                                 ; preds = %if.end.38
  %32 = load %struct._object*, %struct._object** %firstitem, align 8
  %call44 = call i64 @PyTuple_Size(%struct._object* %32)
  %cmp45 = icmp ne i64 %call44, 2
  br i1 %cmp45, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %lor.lhs.false.43, %if.end.38
  %33 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %33, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.46, i32 0, i32 0))
  br label %error

if.end.47:                                        ; preds = %lor.lhs.false.43
  %34 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call48 = call %struct._object* @PyIter_Next(%struct._object* %34)
  store %struct._object* %call48, %struct._object** %obj, align 8
  %35 = load %struct._object*, %struct._object** %obj, align 8
  %cmp49 = icmp eq %struct._object* %35, null
  br i1 %cmp49, label %if.then.50, label %if.end.87

if.then.50:                                       ; preds = %if.end.47
  %call51 = call %struct._object* @PyErr_Occurred()
  %tobool52 = icmp ne %struct._object* %call51, null
  br i1 %tobool52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %if.then.50
  br label %error

if.end.54:                                        ; preds = %if.then.50
  %36 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %37 = load %struct._object*, %struct._object** %firstitem, align 8
  %38 = bitcast %struct._object* %37 to %struct.PyTupleObject*
  %ob_item55 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %38, i32 0, i32 1
  %arrayidx56 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item55, i32 0, i64 0
  %39 = load %struct._object*, %struct._object** %arrayidx56, align 8
  %call57 = call i32 @save(%struct.PicklerObject* %36, %struct._object* %39, i32 0)
  %cmp58 = icmp slt i32 %call57, 0
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.54
  br label %error

if.end.60:                                        ; preds = %if.end.54
  %40 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %41 = load %struct._object*, %struct._object** %firstitem, align 8
  %42 = bitcast %struct._object* %41 to %struct.PyTupleObject*
  %ob_item61 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %42, i32 0, i32 1
  %arrayidx62 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item61, i32 0, i64 1
  %43 = load %struct._object*, %struct._object** %arrayidx62, align 8
  %call63 = call i32 @save(%struct.PicklerObject* %40, %struct._object* %43, i32 0)
  %cmp64 = icmp slt i32 %call63, 0
  br i1 %cmp64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %if.end.60
  br label %error

if.end.66:                                        ; preds = %if.end.60
  %44 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call67 = call i64 @_Pickler_Write(%struct.PicklerObject* %44, i8* %setitem_op, i64 1)
  %cmp68 = icmp slt i64 %call67, 0
  br i1 %cmp68, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %if.end.66
  br label %error

if.end.70:                                        ; preds = %if.end.66
  br label %do.body.71

do.body.71:                                       ; preds = %if.end.70
  %45 = load %struct._object*, %struct._object** %firstitem, align 8
  store %struct._object* %45, %struct._object** %_py_tmp, align 8
  %46 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp72 = icmp ne %struct._object* %46, null
  br i1 %cmp72, label %if.then.73, label %if.end.85

if.then.73:                                       ; preds = %do.body.71
  store %struct._object* null, %struct._object** %firstitem, align 8
  br label %do.body.74

do.body.74:                                       ; preds = %if.then.73
  %47 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp75, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_refcnt76 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt76, align 8
  %dec77 = add i64 %49, -1
  store i64 %dec77, i64* %ob_refcnt76, align 8
  %cmp78 = icmp ne i64 %dec77, 0
  br i1 %cmp78, label %if.then.79, label %if.else.80

if.then.79:                                       ; preds = %do.body.74
  br label %if.end.83

if.else.80:                                       ; preds = %do.body.74
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_type81 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type81, align 8
  %tp_dealloc82 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc82, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  call void %52(%struct._object* %53)
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.80, %if.then.79
  br label %do.end.84

do.end.84:                                        ; preds = %if.end.83
  br label %if.end.85

if.end.85:                                        ; preds = %do.end.84, %do.body.71
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  br label %do.end.175

if.end.87:                                        ; preds = %if.end.47
  %54 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call88 = call i64 @_Pickler_Write(%struct.PicklerObject* %54, i8* %mark_op, i64 1)
  %cmp89 = icmp slt i64 %call88, 0
  br i1 %cmp89, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %if.end.87
  br label %error

if.end.91:                                        ; preds = %if.end.87
  %55 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %56 = load %struct._object*, %struct._object** %firstitem, align 8
  %57 = bitcast %struct._object* %56 to %struct.PyTupleObject*
  %ob_item92 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %57, i32 0, i32 1
  %arrayidx93 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item92, i32 0, i64 0
  %58 = load %struct._object*, %struct._object** %arrayidx93, align 8
  %call94 = call i32 @save(%struct.PicklerObject* %55, %struct._object* %58, i32 0)
  %cmp95 = icmp slt i32 %call94, 0
  br i1 %cmp95, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %if.end.91
  br label %error

if.end.97:                                        ; preds = %if.end.91
  %59 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %60 = load %struct._object*, %struct._object** %firstitem, align 8
  %61 = bitcast %struct._object* %60 to %struct.PyTupleObject*
  %ob_item98 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %61, i32 0, i32 1
  %arrayidx99 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item98, i32 0, i64 1
  %62 = load %struct._object*, %struct._object** %arrayidx99, align 8
  %call100 = call i32 @save(%struct.PicklerObject* %59, %struct._object* %62, i32 0)
  %cmp101 = icmp slt i32 %call100, 0
  br i1 %cmp101, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.end.97
  br label %error

if.end.103:                                       ; preds = %if.end.97
  br label %do.body.104

do.body.104:                                      ; preds = %if.end.103
  %63 = load %struct._object*, %struct._object** %firstitem, align 8
  store %struct._object* %63, %struct._object** %_py_tmp105, align 8
  %64 = load %struct._object*, %struct._object** %_py_tmp105, align 8
  %cmp106 = icmp ne %struct._object* %64, null
  br i1 %cmp106, label %if.then.107, label %if.end.119

if.then.107:                                      ; preds = %do.body.104
  store %struct._object* null, %struct._object** %firstitem, align 8
  br label %do.body.108

do.body.108:                                      ; preds = %if.then.107
  %65 = load %struct._object*, %struct._object** %_py_tmp105, align 8
  store %struct._object* %65, %struct._object** %_py_decref_tmp109, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  %ob_refcnt110 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 0
  %67 = load i64, i64* %ob_refcnt110, align 8
  %dec111 = add i64 %67, -1
  store i64 %dec111, i64* %ob_refcnt110, align 8
  %cmp112 = icmp ne i64 %dec111, 0
  br i1 %cmp112, label %if.then.113, label %if.else.114

if.then.113:                                      ; preds = %do.body.108
  br label %if.end.117

if.else.114:                                      ; preds = %do.body.108
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  %ob_type115 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 1
  %69 = load %struct._typeobject*, %struct._typeobject** %ob_type115, align 8
  %tp_dealloc116 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 4
  %70 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc116, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  call void %70(%struct._object* %71)
  br label %if.end.117

if.end.117:                                       ; preds = %if.else.114, %if.then.113
  br label %do.end.118

do.end.118:                                       ; preds = %if.end.117
  br label %if.end.119

if.end.119:                                       ; preds = %do.end.118, %do.body.104
  br label %do.end.120

do.end.120:                                       ; preds = %if.end.119
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.169, %do.end.120
  %72 = load %struct._object*, %struct._object** %obj, align 8
  %tobool121 = icmp ne %struct._object* %72, null
  br i1 %tobool121, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %73 = load %struct._object*, %struct._object** %obj, align 8
  %ob_type122 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type122, align 8
  %tp_flags123 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 19
  %75 = load i64, i64* %tp_flags123, align 8
  %and124 = and i64 %75, 67108864
  %cmp125 = icmp ne i64 %and124, 0
  br i1 %cmp125, label %lor.lhs.false.126, label %if.then.129

lor.lhs.false.126:                                ; preds = %while.body
  %76 = load %struct._object*, %struct._object** %obj, align 8
  %call127 = call i64 @PyTuple_Size(%struct._object* %76)
  %cmp128 = icmp ne i64 %call127, 2
  br i1 %cmp128, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %lor.lhs.false.126, %while.body
  %77 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %77, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.46, i32 0, i32 0))
  br label %error

if.end.130:                                       ; preds = %lor.lhs.false.126
  %78 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %79 = load %struct._object*, %struct._object** %obj, align 8
  %80 = bitcast %struct._object* %79 to %struct.PyTupleObject*
  %ob_item131 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %80, i32 0, i32 1
  %arrayidx132 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item131, i32 0, i64 0
  %81 = load %struct._object*, %struct._object** %arrayidx132, align 8
  %call133 = call i32 @save(%struct.PicklerObject* %78, %struct._object* %81, i32 0)
  %cmp134 = icmp slt i32 %call133, 0
  br i1 %cmp134, label %if.then.140, label %lor.lhs.false.135

lor.lhs.false.135:                                ; preds = %if.end.130
  %82 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %83 = load %struct._object*, %struct._object** %obj, align 8
  %84 = bitcast %struct._object* %83 to %struct.PyTupleObject*
  %ob_item136 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %84, i32 0, i32 1
  %arrayidx137 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item136, i32 0, i64 1
  %85 = load %struct._object*, %struct._object** %arrayidx137, align 8
  %call138 = call i32 @save(%struct.PicklerObject* %82, %struct._object* %85, i32 0)
  %cmp139 = icmp slt i32 %call138, 0
  br i1 %cmp139, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %lor.lhs.false.135, %if.end.130
  br label %error

if.end.141:                                       ; preds = %lor.lhs.false.135
  br label %do.body.142

do.body.142:                                      ; preds = %if.end.141
  %86 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %86, %struct._object** %_py_tmp143, align 8
  %87 = load %struct._object*, %struct._object** %_py_tmp143, align 8
  %cmp144 = icmp ne %struct._object* %87, null
  br i1 %cmp144, label %if.then.145, label %if.end.157

if.then.145:                                      ; preds = %do.body.142
  store %struct._object* null, %struct._object** %obj, align 8
  br label %do.body.146

do.body.146:                                      ; preds = %if.then.145
  %88 = load %struct._object*, %struct._object** %_py_tmp143, align 8
  store %struct._object* %88, %struct._object** %_py_decref_tmp147, align 8
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_refcnt148 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 0
  %90 = load i64, i64* %ob_refcnt148, align 8
  %dec149 = add i64 %90, -1
  store i64 %dec149, i64* %ob_refcnt148, align 8
  %cmp150 = icmp ne i64 %dec149, 0
  br i1 %cmp150, label %if.then.151, label %if.else.152

if.then.151:                                      ; preds = %do.body.146
  br label %if.end.155

if.else.152:                                      ; preds = %do.body.146
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_type153 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 1
  %92 = load %struct._typeobject*, %struct._typeobject** %ob_type153, align 8
  %tp_dealloc154 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %92, i32 0, i32 4
  %93 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc154, align 8
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  call void %93(%struct._object* %94)
  br label %if.end.155

if.end.155:                                       ; preds = %if.else.152, %if.then.151
  br label %do.end.156

do.end.156:                                       ; preds = %if.end.155
  br label %if.end.157

if.end.157:                                       ; preds = %do.end.156, %do.body.142
  br label %do.end.158

do.end.158:                                       ; preds = %if.end.157
  %95 = load i32, i32* %n, align 4
  %add = add i32 %95, 1
  store i32 %add, i32* %n, align 4
  %96 = load i32, i32* %n, align 4
  %cmp159 = icmp eq i32 %96, 1000
  br i1 %cmp159, label %if.then.160, label %if.end.161

if.then.160:                                      ; preds = %do.end.158
  br label %while.end

if.end.161:                                       ; preds = %do.end.158
  %97 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call162 = call %struct._object* @PyIter_Next(%struct._object* %97)
  store %struct._object* %call162, %struct._object** %obj, align 8
  %98 = load %struct._object*, %struct._object** %obj, align 8
  %cmp163 = icmp eq %struct._object* %98, null
  br i1 %cmp163, label %if.then.164, label %if.end.169

if.then.164:                                      ; preds = %if.end.161
  %call165 = call %struct._object* @PyErr_Occurred()
  %tobool166 = icmp ne %struct._object* %call165, null
  br i1 %tobool166, label %if.then.167, label %if.end.168

if.then.167:                                      ; preds = %if.then.164
  br label %error

if.end.168:                                       ; preds = %if.then.164
  br label %while.end

if.end.169:                                       ; preds = %if.end.161
  br label %while.cond

while.end:                                        ; preds = %if.end.168, %if.then.160, %while.cond
  %99 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call170 = call i64 @_Pickler_Write(%struct.PicklerObject* %99, i8* %setitems_op, i64 1)
  %cmp171 = icmp slt i64 %call170, 0
  br i1 %cmp171, label %if.then.172, label %if.end.173

if.then.172:                                      ; preds = %while.end
  br label %error

if.end.173:                                       ; preds = %while.end
  br label %do.cond

do.cond:                                          ; preds = %if.end.173
  %100 = load i32, i32* %n, align 4
  %cmp174 = icmp eq i32 %100, 1000
  br i1 %cmp174, label %do.body.30, label %do.end.175

do.end.175:                                       ; preds = %do.cond, %do.end.86, %if.end.37
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.172, %if.then.167, %if.then.140, %if.then.129, %if.then.102, %if.then.96, %if.then.90, %if.then.69, %if.then.65, %if.then.59, %if.then.53, %if.then.46, %if.then.36
  br label %do.body.176

do.body.176:                                      ; preds = %error
  %101 = load %struct._object*, %struct._object** %firstitem, align 8
  store %struct._object* %101, %struct._object** %_py_xdecref_tmp, align 8
  %102 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp177 = icmp ne %struct._object* %102, null
  br i1 %cmp177, label %if.then.178, label %if.end.191

if.then.178:                                      ; preds = %do.body.176
  br label %do.body.179

do.body.179:                                      ; preds = %if.then.178
  %103 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %103, %struct._object** %_py_decref_tmp180, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  %ob_refcnt181 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0
  %105 = load i64, i64* %ob_refcnt181, align 8
  %dec182 = add i64 %105, -1
  store i64 %dec182, i64* %ob_refcnt181, align 8
  %cmp183 = icmp ne i64 %dec182, 0
  br i1 %cmp183, label %if.then.184, label %if.else.185

if.then.184:                                      ; preds = %do.body.179
  br label %if.end.188

if.else.185:                                      ; preds = %do.body.179
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  %ob_type186 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type186, align 8
  %tp_dealloc187 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc187, align 8
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  call void %108(%struct._object* %109)
  br label %if.end.188

if.end.188:                                       ; preds = %if.else.185, %if.then.184
  br label %do.end.190

do.end.190:                                       ; preds = %if.end.188
  br label %if.end.191

if.end.191:                                       ; preds = %do.end.190, %do.body.176
  br label %do.end.193

do.end.193:                                       ; preds = %if.end.191
  br label %do.body.194

do.body.194:                                      ; preds = %do.end.193
  %110 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %110, %struct._object** %_py_xdecref_tmp195, align 8
  %111 = load %struct._object*, %struct._object** %_py_xdecref_tmp195, align 8
  %cmp196 = icmp ne %struct._object* %111, null
  br i1 %cmp196, label %if.then.197, label %if.end.210

if.then.197:                                      ; preds = %do.body.194
  br label %do.body.198

do.body.198:                                      ; preds = %if.then.197
  %112 = load %struct._object*, %struct._object** %_py_xdecref_tmp195, align 8
  store %struct._object* %112, %struct._object** %_py_decref_tmp199, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp199, align 8
  %ob_refcnt200 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 0
  %114 = load i64, i64* %ob_refcnt200, align 8
  %dec201 = add i64 %114, -1
  store i64 %dec201, i64* %ob_refcnt200, align 8
  %cmp202 = icmp ne i64 %dec201, 0
  br i1 %cmp202, label %if.then.203, label %if.else.204

if.then.203:                                      ; preds = %do.body.198
  br label %if.end.207

if.else.204:                                      ; preds = %do.body.198
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp199, align 8
  %ob_type205 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 1
  %116 = load %struct._typeobject*, %struct._typeobject** %ob_type205, align 8
  %tp_dealloc206 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %116, i32 0, i32 4
  %117 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc206, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp199, align 8
  call void %117(%struct._object* %118)
  br label %if.end.207

if.end.207:                                       ; preds = %if.else.204, %if.then.203
  br label %do.end.209

do.end.209:                                       ; preds = %if.end.207
  br label %if.end.210

if.end.210:                                       ; preds = %do.end.209, %do.body.194
  br label %do.end.212

do.end.212:                                       ; preds = %if.end.210
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.212, %do.end.175, %for.end, %if.then.27, %if.then.23, %if.then.9, %if.then.4
  %119 = load i32, i32* %retval
  ret i32 %119
}

; Function Attrs: nounwind uwtable
define internal i32 @fast_save_leave(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_nesting = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 14
  %1 = load i32, i32* %fast_nesting, align 4
  %dec = add i32 %1, -1
  store i32 %dec, i32* %fast_nesting, align 4
  %cmp = icmp sge i32 %1, 50
  br i1 %cmp, label %if.then, label %if.end.22

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %3 = bitcast %struct._object* %2 to i8*
  %call = call %struct._object* @PyLong_FromVoidPtr(i8* %3)
  store %struct._object* %call, %struct._object** %key, align 8
  %4 = load %struct._object*, %struct._object** %key, align 8
  %cmp1 = icmp eq %struct._object* %4, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %5, i32 0, i32 16
  %6 = load %struct._object*, %struct._object** %fast_memo, align 8
  %7 = load %struct._object*, %struct._object** %key, align 8
  %call3 = call i32 @PyDict_DelItem(%struct._object* %6, %struct._object* %7)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.10

if.then.5:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %8 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec6 = add i64 %10, -1
  store i64 %dec6, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec6, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  br label %do.body.11

do.body.11:                                       ; preds = %if.end.10
  %15 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp12, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt13, align 8
  %dec14 = add i64 %17, -1
  store i64 %dec14, i64* %ob_refcnt13, align 8
  %cmp15 = icmp ne i64 %dec14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20

if.else.17:                                       ; preds = %do.body.11
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  call void %20(%struct._object* %21)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  br label %if.end.22

if.end.22:                                        ; preds = %do.end.21, %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.22, %do.end, %if.then.2
  %22 = load i32, i32* %retval
  ret i32 %22
}

declare %struct._object* @PyDict_New() #1

declare %struct._object* @PyLong_FromVoidPtr(i8*) #1

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #1

declare i32 @PyDict_Next(%struct._object*, i64*, %struct._object**, %struct._object**) #1

declare %struct._object* @PyIter_Next(%struct._object*) #1

declare i64 @PyTuple_Size(%struct._object*) #1

declare i32 @PyDict_DelItem(%struct._object*, %struct._object*) #1

declare %struct._object* @PySequence_List(%struct._object*) #1

declare i32 @_PySet_NextEntry(%struct._object*, i64*, %struct._object**, i64*) #1

declare i64 @PyList_Size(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @batch_list_exact(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %this_batch = alloca i64, align 8
  %total = alloca i64, align 8
  %append_op = alloca i8, align 1
  %appends_op = alloca i8, align 1
  %mark_op = alloca i8, align 1
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* null, %struct._object** %item, align 8
  store i8 97, i8* %append_op, align 1
  store i8 101, i8* %appends_op, align 1
  store i8 40, i8* %mark_op, align 1
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %cmp = icmp eq i64 %2, 1
  br i1 %cmp, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %4, i32 0, i32 1
  %5 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %5, i64 0
  %6 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %6, %struct._object** %item, align 8
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %item, align 8
  %call = call i32 @save(%struct.PicklerObject* %7, %struct._object* %8, i32 0)
  %cmp1 = icmp slt i32 %call, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call3 = call i64 @_Pickler_Write(%struct.PicklerObject* %9, i8* %append_op, i64 1)
  %cmp4 = icmp slt i64 %call3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %entry
  store i64 0, i64* %total, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.7
  store i64 0, i64* %this_batch, align 8
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call8 = call i64 @_Pickler_Write(%struct.PicklerObject* %10, i8* %mark_op, i64 1)
  %cmp9 = icmp slt i64 %call8, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %do.body
  br label %while.cond

while.cond:                                       ; preds = %if.end.23, %if.end.11
  %11 = load i64, i64* %total, align 8
  %12 = load %struct._object*, %struct._object** %obj.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyVarObject*
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %13, i32 0, i32 1
  %14 = load i64, i64* %ob_size12, align 8
  %cmp13 = icmp slt i64 %11, %14
  br i1 %cmp13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load i64, i64* %total, align 8
  %16 = load %struct._object*, %struct._object** %obj.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyListObject*
  %ob_item14 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %17, i32 0, i32 1
  %18 = load %struct._object**, %struct._object*** %ob_item14, align 8
  %arrayidx15 = getelementptr %struct._object*, %struct._object** %18, i64 %15
  %19 = load %struct._object*, %struct._object** %arrayidx15, align 8
  store %struct._object* %19, %struct._object** %item, align 8
  %20 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %21 = load %struct._object*, %struct._object** %item, align 8
  %call16 = call i32 @save(%struct.PicklerObject* %20, %struct._object* %21, i32 0)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %while.body
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %while.body
  %22 = load i64, i64* %total, align 8
  %inc = add i64 %22, 1
  store i64 %inc, i64* %total, align 8
  %23 = load i64, i64* %this_batch, align 8
  %inc20 = add i64 %23, 1
  store i64 %inc20, i64* %this_batch, align 8
  %cmp21 = icmp eq i64 %inc20, 1000
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.19
  br label %while.end

if.end.23:                                        ; preds = %if.end.19
  br label %while.cond

while.end:                                        ; preds = %if.then.22, %while.cond
  %24 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call24 = call i64 @_Pickler_Write(%struct.PicklerObject* %24, i8* %appends_op, i64 1)
  %cmp25 = icmp slt i64 %call24, 0
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %while.end
  store i32 -1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %while.end
  br label %do.cond

do.cond:                                          ; preds = %if.end.27
  %25 = load i64, i64* %total, align 8
  %26 = load %struct._object*, %struct._object** %obj.addr, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyVarObject*
  %ob_size28 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %27, i32 0, i32 1
  %28 = load i64, i64* %ob_size28, align 8
  %cmp29 = icmp slt i64 %25, %28
  br i1 %cmp29, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.26, %if.then.18, %if.then.10, %if.end.6, %if.then.5, %if.then.2
  %29 = load i32, i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal i32 @batch_list(%struct.PicklerObject* %self, %struct._object* %iter) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %iter.addr = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %firstitem = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %mark_op = alloca i8, align 1
  %append_op = alloca i8, align 1
  %appends_op = alloca i8, align 1
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  %_py_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  %_py_tmp90 = alloca %struct._object*, align 8
  %_py_decref_tmp94 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp127 = alloca %struct._object*, align 8
  %_py_xdecref_tmp142 = alloca %struct._object*, align 8
  %_py_decref_tmp146 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %iter, %struct._object** %iter.addr, align 8
  store %struct._object* null, %struct._object** %obj, align 8
  store %struct._object* null, %struct._object** %firstitem, align 8
  store i8 40, i8* %mark_op, align 1
  store i8 97, i8* %append_op, align 1
  store i8 101, i8* %appends_op, align 1
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 8
  %1 = load i32, i32* %proto, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end.17

if.then:                                          ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %if.end.16, %if.then
  %2 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call = call %struct._object* @PyIter_Next(%struct._object* %2)
  store %struct._object* %call, %struct._object** %obj, align 8
  %3 = load %struct._object*, %struct._object** %obj, align 8
  %cmp1 = icmp eq %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.5

if.then.2:                                        ; preds = %for.cond
  %call3 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call3, null
  br i1 %tobool, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.2
  br label %for.end

if.end.5:                                         ; preds = %for.cond
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %5 = load %struct._object*, %struct._object** %obj, align 8
  %call6 = call i32 @save(%struct.PicklerObject* %4, %struct._object* %5, i32 0)
  store i32 %call6, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.5
  %6 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load i32, i32* %i, align 4
  %cmp10 = icmp slt i32 %13, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %do.end
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call13 = call i64 @_Pickler_Write(%struct.PicklerObject* %14, i8* %append_op, i64 1)
  %cmp14 = icmp slt i64 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  br label %for.cond

for.end:                                          ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %entry
  br label %do.body.18

do.body.18:                                       ; preds = %do.cond, %if.end.17
  %15 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call19 = call %struct._object* @PyIter_Next(%struct._object* %15)
  store %struct._object* %call19, %struct._object** %firstitem, align 8
  %16 = load %struct._object*, %struct._object** %firstitem, align 8
  %cmp20 = icmp eq %struct._object* %16, null
  br i1 %cmp20, label %if.then.21, label %if.end.26

if.then.21:                                       ; preds = %do.body.18
  %call22 = call %struct._object* @PyErr_Occurred()
  %tobool23 = icmp ne %struct._object* %call22, null
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.then.21
  br label %error

if.end.25:                                        ; preds = %if.then.21
  br label %do.end.122

if.end.26:                                        ; preds = %do.body.18
  %17 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call27 = call %struct._object* @PyIter_Next(%struct._object* %17)
  store %struct._object* %call27, %struct._object** %obj, align 8
  %18 = load %struct._object*, %struct._object** %obj, align 8
  %cmp28 = icmp eq %struct._object* %18, null
  br i1 %cmp28, label %if.then.29, label %if.end.58

if.then.29:                                       ; preds = %if.end.26
  %call30 = call %struct._object* @PyErr_Occurred()
  %tobool31 = icmp ne %struct._object* %call30, null
  br i1 %tobool31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.29
  br label %error

if.end.33:                                        ; preds = %if.then.29
  %19 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %20 = load %struct._object*, %struct._object** %firstitem, align 8
  %call34 = call i32 @save(%struct.PicklerObject* %19, %struct._object* %20, i32 0)
  %cmp35 = icmp slt i32 %call34, 0
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.33
  br label %error

if.end.37:                                        ; preds = %if.end.33
  %21 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call38 = call i64 @_Pickler_Write(%struct.PicklerObject* %21, i8* %append_op, i64 1)
  %cmp39 = icmp slt i64 %call38, 0
  br i1 %cmp39, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %if.end.37
  br label %error

if.end.41:                                        ; preds = %if.end.37
  br label %do.body.42

do.body.42:                                       ; preds = %if.end.41
  %22 = load %struct._object*, %struct._object** %firstitem, align 8
  store %struct._object* %22, %struct._object** %_py_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp43 = icmp ne %struct._object* %23, null
  br i1 %cmp43, label %if.then.44, label %if.end.56

if.then.44:                                       ; preds = %do.body.42
  store %struct._object* null, %struct._object** %firstitem, align 8
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %24 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp46, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt47, align 8
  %dec48 = add i64 %26, -1
  store i64 %dec48, i64* %ob_refcnt47, align 8
  %cmp49 = icmp ne i64 %dec48, 0
  br i1 %cmp49, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.45
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  call void %29(%struct._object* %30)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  br label %if.end.56

if.end.56:                                        ; preds = %do.end.55, %do.body.42
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  br label %do.end.122

if.end.58:                                        ; preds = %if.end.26
  %31 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call59 = call i64 @_Pickler_Write(%struct.PicklerObject* %31, i8* %mark_op, i64 1)
  %cmp60 = icmp slt i64 %call59, 0
  br i1 %cmp60, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.end.58
  br label %error

if.end.62:                                        ; preds = %if.end.58
  %32 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %33 = load %struct._object*, %struct._object** %firstitem, align 8
  %call63 = call i32 @save(%struct.PicklerObject* %32, %struct._object* %33, i32 0)
  %cmp64 = icmp slt i32 %call63, 0
  br i1 %cmp64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %if.end.62
  br label %error

if.end.66:                                        ; preds = %if.end.62
  br label %do.body.67

do.body.67:                                       ; preds = %if.end.66
  %34 = load %struct._object*, %struct._object** %firstitem, align 8
  store %struct._object* %34, %struct._object** %_py_tmp68, align 8
  %35 = load %struct._object*, %struct._object** %_py_tmp68, align 8
  %cmp69 = icmp ne %struct._object* %35, null
  br i1 %cmp69, label %if.then.70, label %if.end.82

if.then.70:                                       ; preds = %do.body.67
  store %struct._object* null, %struct._object** %firstitem, align 8
  br label %do.body.71

do.body.71:                                       ; preds = %if.then.70
  %36 = load %struct._object*, %struct._object** %_py_tmp68, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp72, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt73, align 8
  %dec74 = add i64 %38, -1
  store i64 %dec74, i64* %ob_refcnt73, align 8
  %cmp75 = icmp ne i64 %dec74, 0
  br i1 %cmp75, label %if.then.76, label %if.else.77

if.then.76:                                       ; preds = %do.body.71
  br label %if.end.80

if.else.77:                                       ; preds = %do.body.71
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  call void %41(%struct._object* %42)
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  br label %if.end.82

if.end.82:                                        ; preds = %do.end.81, %do.body.67
  br label %do.end.83

do.end.83:                                        ; preds = %if.end.82
  store i32 1, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end.116, %do.end.83
  %43 = load %struct._object*, %struct._object** %obj, align 8
  %tobool84 = icmp ne %struct._object* %43, null
  br i1 %tobool84, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %45 = load %struct._object*, %struct._object** %obj, align 8
  %call85 = call i32 @save(%struct.PicklerObject* %44, %struct._object* %45, i32 0)
  %cmp86 = icmp slt i32 %call85, 0
  br i1 %cmp86, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %while.body
  br label %error

if.end.88:                                        ; preds = %while.body
  br label %do.body.89

do.body.89:                                       ; preds = %if.end.88
  %46 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %46, %struct._object** %_py_tmp90, align 8
  %47 = load %struct._object*, %struct._object** %_py_tmp90, align 8
  %cmp91 = icmp ne %struct._object* %47, null
  br i1 %cmp91, label %if.then.92, label %if.end.104

if.then.92:                                       ; preds = %do.body.89
  store %struct._object* null, %struct._object** %obj, align 8
  br label %do.body.93

do.body.93:                                       ; preds = %if.then.92
  %48 = load %struct._object*, %struct._object** %_py_tmp90, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp94, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_refcnt95 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt95, align 8
  %dec96 = add i64 %50, -1
  store i64 %dec96, i64* %ob_refcnt95, align 8
  %cmp97 = icmp ne i64 %dec96, 0
  br i1 %cmp97, label %if.then.98, label %if.else.99

if.then.98:                                       ; preds = %do.body.93
  br label %if.end.102

if.else.99:                                       ; preds = %do.body.93
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_type100 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type100, align 8
  %tp_dealloc101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc101, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  call void %53(%struct._object* %54)
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.99, %if.then.98
  br label %do.end.103

do.end.103:                                       ; preds = %if.end.102
  br label %if.end.104

if.end.104:                                       ; preds = %do.end.103, %do.body.89
  br label %do.end.105

do.end.105:                                       ; preds = %if.end.104
  %55 = load i32, i32* %n, align 4
  %add = add i32 %55, 1
  store i32 %add, i32* %n, align 4
  %56 = load i32, i32* %n, align 4
  %cmp106 = icmp eq i32 %56, 1000
  br i1 %cmp106, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %do.end.105
  br label %while.end

if.end.108:                                       ; preds = %do.end.105
  %57 = load %struct._object*, %struct._object** %iter.addr, align 8
  %call109 = call %struct._object* @PyIter_Next(%struct._object* %57)
  store %struct._object* %call109, %struct._object** %obj, align 8
  %58 = load %struct._object*, %struct._object** %obj, align 8
  %cmp110 = icmp eq %struct._object* %58, null
  br i1 %cmp110, label %if.then.111, label %if.end.116

if.then.111:                                      ; preds = %if.end.108
  %call112 = call %struct._object* @PyErr_Occurred()
  %tobool113 = icmp ne %struct._object* %call112, null
  br i1 %tobool113, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %if.then.111
  br label %error

if.end.115:                                       ; preds = %if.then.111
  br label %while.end

if.end.116:                                       ; preds = %if.end.108
  br label %while.cond

while.end:                                        ; preds = %if.end.115, %if.then.107, %while.cond
  %59 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call117 = call i64 @_Pickler_Write(%struct.PicklerObject* %59, i8* %appends_op, i64 1)
  %cmp118 = icmp slt i64 %call117, 0
  br i1 %cmp118, label %if.then.119, label %if.end.120

if.then.119:                                      ; preds = %while.end
  br label %error

if.end.120:                                       ; preds = %while.end
  br label %do.cond

do.cond:                                          ; preds = %if.end.120
  %60 = load i32, i32* %n, align 4
  %cmp121 = icmp eq i32 %60, 1000
  br i1 %cmp121, label %do.body.18, label %do.end.122

do.end.122:                                       ; preds = %do.cond, %do.end.57, %if.end.25
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.119, %if.then.114, %if.then.87, %if.then.65, %if.then.61, %if.then.40, %if.then.36, %if.then.32, %if.then.24
  br label %do.body.123

do.body.123:                                      ; preds = %error
  %61 = load %struct._object*, %struct._object** %firstitem, align 8
  store %struct._object* %61, %struct._object** %_py_xdecref_tmp, align 8
  %62 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp124 = icmp ne %struct._object* %62, null
  br i1 %cmp124, label %if.then.125, label %if.end.138

if.then.125:                                      ; preds = %do.body.123
  br label %do.body.126

do.body.126:                                      ; preds = %if.then.125
  %63 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %63, %struct._object** %_py_decref_tmp127, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp127, align 8
  %ob_refcnt128 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt128, align 8
  %dec129 = add i64 %65, -1
  store i64 %dec129, i64* %ob_refcnt128, align 8
  %cmp130 = icmp ne i64 %dec129, 0
  br i1 %cmp130, label %if.then.131, label %if.else.132

if.then.131:                                      ; preds = %do.body.126
  br label %if.end.135

if.else.132:                                      ; preds = %do.body.126
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp127, align 8
  %ob_type133 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type133, align 8
  %tp_dealloc134 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc134, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp127, align 8
  call void %68(%struct._object* %69)
  br label %if.end.135

if.end.135:                                       ; preds = %if.else.132, %if.then.131
  br label %do.end.137

do.end.137:                                       ; preds = %if.end.135
  br label %if.end.138

if.end.138:                                       ; preds = %do.end.137, %do.body.123
  br label %do.end.140

do.end.140:                                       ; preds = %if.end.138
  br label %do.body.141

do.body.141:                                      ; preds = %do.end.140
  %70 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %70, %struct._object** %_py_xdecref_tmp142, align 8
  %71 = load %struct._object*, %struct._object** %_py_xdecref_tmp142, align 8
  %cmp143 = icmp ne %struct._object* %71, null
  br i1 %cmp143, label %if.then.144, label %if.end.157

if.then.144:                                      ; preds = %do.body.141
  br label %do.body.145

do.body.145:                                      ; preds = %if.then.144
  %72 = load %struct._object*, %struct._object** %_py_xdecref_tmp142, align 8
  store %struct._object* %72, %struct._object** %_py_decref_tmp146, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  %ob_refcnt147 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt147, align 8
  %dec148 = add i64 %74, -1
  store i64 %dec148, i64* %ob_refcnt147, align 8
  %cmp149 = icmp ne i64 %dec148, 0
  br i1 %cmp149, label %if.then.150, label %if.else.151

if.then.150:                                      ; preds = %do.body.145
  br label %if.end.154

if.else.151:                                      ; preds = %do.body.145
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  %ob_type152 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type152, align 8
  %tp_dealloc153 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 4
  %77 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc153, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  call void %77(%struct._object* %78)
  br label %if.end.154

if.end.154:                                       ; preds = %if.else.151, %if.then.150
  br label %do.end.156

do.end.156:                                       ; preds = %if.end.154
  br label %if.end.157

if.end.157:                                       ; preds = %do.end.156, %do.body.141
  br label %do.end.159

do.end.159:                                       ; preds = %if.end.157
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.159, %do.end.122, %for.end, %if.then.15, %if.then.11, %if.then.4
  %79 = load i32, i32* %retval
  ret i32 %79
}

; Function Attrs: nounwind uwtable
define internal i32 @store_tuple_elements(%struct.PicklerObject* %self, %struct._object* %t, i64 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %t.addr = alloca %struct._object*, align 8
  %len.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %element = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %t, %struct._object** %t.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %len.addr, align 8
  %cmp = icmp slt i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %3 = load %struct._object*, %struct._object** %t.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %2
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %element, align 8
  %6 = load %struct._object*, %struct._object** %element, align 8
  %cmp1 = icmp eq %struct._object* %6, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %element, align 8
  %call = call i32 @save(%struct.PicklerObject* %7, %struct._object* %8, i32 0)
  %cmp2 = icmp slt i32 %call, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.4
  %9 = load i64, i64* %i, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.3, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal i32 @save_singleton_type(%struct.PicklerObject* %self, %struct._object* %obj, %struct._object* %singleton) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %singleton.addr = alloca %struct._object*, align 8
  %reduce_value = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %singleton, %struct._object** %singleton.addr, align 8
  %0 = load %struct._object*, %struct._object** %singleton.addr, align 8
  %call = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), %struct._typeobject* @PyType_Type, %struct._object* %0)
  store %struct._object* %call, %struct._object** %reduce_value, align 8
  %1 = load %struct._object*, %struct._object** %reduce_value, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %3 = load %struct._object*, %struct._object** %reduce_value, align 8
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call1 = call i32 @save_reduce(%struct.PicklerObject* %2, %struct._object* %3, %struct._object* %4)
  store i32 %call1, i32* %status, align 4
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %12 = load i32, i32* %status, align 4
  store i32 %12, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @whichmodule(%struct._object* %global, %struct._object* %global_name, i32 %allow_qualname) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %global.addr = alloca %struct._object*, align 8
  %global_name.addr = alloca %struct._object*, align 8
  %allow_qualname.addr = alloca i32, align 4
  %module_name = alloca %struct._object*, align 8
  %modules_dict = alloca %struct._object*, align 8
  %module = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %is_equal = alloca i32, align 4
  %_py_decref_tmp27 = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  store %struct._object* %global, %struct._object** %global.addr, align 8
  store %struct._object* %global_name, %struct._object** %global_name.addr, align 8
  store i32 %allow_qualname, i32* %allow_qualname.addr, align 4
  %0 = load %struct._object*, %struct._object** %global.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @whichmodule.PyId___module__)
  store %struct._object* %call, %struct._object** %module_name, align 8
  %1 = load %struct._object*, %struct._object** %module_name, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call1 = call i32 @PyErr_ExceptionMatches(%struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  call void @PyErr_Clear()
  br label %if.end.15

if.else:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %module_name, align 8
  %cmp3 = icmp ne %struct._object* %3, @_Py_NoneStruct
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.else
  %4 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %4, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.end.5
  %5 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %5, %struct._object** %_py_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp6 = icmp ne %struct._object* %6, null
  br i1 %cmp6, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %do.body
  store %struct._object* null, %struct._object** %module_name, align 8
  br label %do.body.8

do.body.8:                                        ; preds = %if.then.7
  %7 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %do.body.8
  br label %if.end.12

if.else.11:                                       ; preds = %do.body.8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else.11, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.12
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %do.body
  br label %do.end.14

do.end.14:                                        ; preds = %if.end.13
  br label %if.end.15

if.end.15:                                        ; preds = %do.end.14, %if.end
  %call16 = call %struct._object* @_PySys_GetObjectId(%struct._Py_Identifier* @whichmodule.PyId_modules)
  store %struct._object* %call16, %struct._object** %modules_dict, align 8
  %14 = load %struct._object*, %struct._object** %modules_dict, align 8
  %cmp17 = icmp eq %struct._object* %14, null
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.15
  %15 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.62, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %if.end.15
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.82, %if.end.52, %if.then.43, %if.then.39, %if.end.19
  %16 = load %struct._object*, %struct._object** %modules_dict, align 8
  %call20 = call i32 @PyDict_Next(%struct._object* %16, i64* %i, %struct._object** %module_name, %struct._object** %module)
  %conv = sext i32 %call20 to i64
  store i64 %conv, i64* %j, align 8
  %tobool21 = icmp ne i64 %conv, 0
  br i1 %tobool21, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %17 = load %struct._object*, %struct._object** %module_name, align 8
  %call22 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @whichmodule.PyId___main__)
  %call23 = call %struct._object* @PyUnicode_RichCompare(%struct._object* %17, %struct._object* %call22, i32 2)
  store %struct._object* %call23, %struct._object** %result, align 8
  %18 = load %struct._object*, %struct._object** %result, align 8
  %cmp24 = icmp eq %struct._object* %18, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  %conv25 = zext i1 %cmp24 to i32
  store i32 %conv25, i32* %is_equal, align 4
  br label %do.body.26

do.body.26:                                       ; preds = %while.body
  %19 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp27, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt28, align 8
  %dec29 = add i64 %21, -1
  store i64 %dec29, i64* %ob_refcnt28, align 8
  %cmp30 = icmp ne i64 %dec29, 0
  br i1 %cmp30, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.26
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.26
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  call void %24(%struct._object* %25)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  %26 = load i32, i32* %is_equal, align 4
  %tobool38 = icmp ne i32 %26, 0
  br i1 %tobool38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %do.end.37
  br label %while.cond

if.end.40:                                        ; preds = %do.end.37
  %27 = load %struct._object*, %struct._object** %module, align 8
  %cmp41 = icmp eq %struct._object* %27, @_Py_NoneStruct
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.40
  br label %while.cond

if.end.44:                                        ; preds = %if.end.40
  %28 = load %struct._object*, %struct._object** %module, align 8
  %29 = load %struct._object*, %struct._object** %global_name.addr, align 8
  %30 = load i32, i32* %allow_qualname.addr, align 4
  %call45 = call %struct._object* @getattribute(%struct._object* %28, %struct._object* %29, i32 %30)
  store %struct._object* %call45, %struct._object** %obj, align 8
  %31 = load %struct._object*, %struct._object** %obj, align 8
  %cmp46 = icmp eq %struct._object* %31, null
  br i1 %cmp46, label %if.then.48, label %if.end.53

if.then.48:                                       ; preds = %if.end.44
  %32 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call49 = call i32 @PyErr_ExceptionMatches(%struct._object* %32)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.end.52, label %if.then.51

if.then.51:                                       ; preds = %if.then.48
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.52:                                        ; preds = %if.then.48
  call void @PyErr_Clear()
  br label %while.cond

if.end.53:                                        ; preds = %if.end.44
  %33 = load %struct._object*, %struct._object** %obj, align 8
  %34 = load %struct._object*, %struct._object** %global.addr, align 8
  %cmp54 = icmp eq %struct._object* %33, %34
  br i1 %cmp54, label %if.then.56, label %if.end.70

if.then.56:                                       ; preds = %if.end.53
  br label %do.body.57

do.body.57:                                       ; preds = %if.then.56
  %35 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp58, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt59, align 8
  %dec60 = add i64 %37, -1
  store i64 %dec60, i64* %ob_refcnt59, align 8
  %cmp61 = icmp ne i64 %dec60, 0
  br i1 %cmp61, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %do.body.57
  br label %if.end.67

if.else.64:                                       ; preds = %do.body.57
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  call void %40(%struct._object* %41)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  %42 = load %struct._object*, %struct._object** %module_name, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt69, align 8
  %inc = add i64 %43, 1
  store i64 %inc, i64* %ob_refcnt69, align 8
  %44 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.70:                                        ; preds = %if.end.53
  br label %do.body.71

do.body.71:                                       ; preds = %if.end.70
  %45 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp72, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt73, align 8
  %dec74 = add i64 %47, -1
  store i64 %dec74, i64* %ob_refcnt73, align 8
  %cmp75 = icmp ne i64 %dec74, 0
  br i1 %cmp75, label %if.then.77, label %if.else.78

if.then.77:                                       ; preds = %do.body.71
  br label %if.end.81

if.else.78:                                       ; preds = %do.body.71
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_type79 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type79, align 8
  %tp_dealloc80 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc80, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  call void %50(%struct._object* %51)
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.78, %if.then.77
  br label %do.end.82

do.end.82:                                        ; preds = %if.end.81
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call83 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @whichmodule.PyId___main__)
  store %struct._object* %call83, %struct._object** %module_name, align 8
  %52 = load %struct._object*, %struct._object** %module_name, align 8
  %ob_refcnt84 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt84, align 8
  %inc85 = add i64 %53, 1
  store i64 %inc85, i64* %ob_refcnt84, align 8
  %54 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %54, %struct._object** %retval
  br label %return

return:                                           ; preds = %while.end, %do.end.68, %if.then.51, %if.then.18, %if.then.4, %if.then.2
  %55 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %55
}

declare %struct._object* @PyImport_Import(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @getattribute(%struct._object* %obj, %struct._object* %name, i32 %allow_qualname) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %allow_qualname.addr = alloca i32, align 4
  %dotted_path = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %subpath = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %is_equal = alloca i32, align 4
  %_py_decref_tmp19 = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp48 = alloca %struct._object*, align 8
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  %_py_decref_tmp99 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store i32 %allow_qualname, i32* %allow_qualname.addr, align 4
  %0 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @getattribute.PyId_dot)
  %call1 = call %struct._object* @PyUnicode_Split(%struct._object* %0, %struct._object* %call, i64 -1)
  store %struct._object* %call1, %struct._object** %dotted_path, align 8
  %1 = load %struct._object*, %struct._object** %dotted_path, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %allow_qualname.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.end.8, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %dotted_path, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  %cmp2 = icmp sgt i64 %5, 1
  br i1 %cmp2, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %7 = load %struct._object*, %struct._object** %name.addr, align 8
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %6, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.65, i32 0, i32 0), %struct._object* %7, %struct._object* %8)
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %9 = load %struct._object*, %struct._object** %dotted_path, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %land.lhs.true, %if.end
  %16 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt9, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %ob_refcnt9, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.8
  %18 = load i64, i64* %i, align 8
  %19 = load %struct._object*, %struct._object** %dotted_path, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyVarObject*
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1
  %21 = load i64, i64* %ob_size10, align 8
  %cmp11 = icmp slt i64 %18, %21
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i64, i64* %i, align 8
  %23 = load %struct._object*, %struct._object** %dotted_path, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %24, i32 0, i32 1
  %25 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %25, i64 %22
  %26 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %26, %struct._object** %subpath, align 8
  %27 = load %struct._object*, %struct._object** %subpath, align 8
  %call13 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @getattribute.PyId_locals)
  %call14 = call %struct._object* @PyUnicode_RichCompare(%struct._object* %27, %struct._object* %call13, i32 2)
  store %struct._object* %call14, %struct._object** %result, align 8
  %28 = load %struct._object*, %struct._object** %result, align 8
  %cmp16 = icmp eq %struct._object* %28, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  %conv = zext i1 %cmp16 to i32
  store i32 %conv, i32* %is_equal, align 4
  br label %do.body.17

do.body.17:                                       ; preds = %for.body
  %29 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp19, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt20, align 8
  %dec21 = add i64 %31, -1
  store i64 %dec21, i64* %ob_refcnt20, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.17
  br label %if.end.28

if.else.25:                                       ; preds = %do.body.17
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  call void %34(%struct._object* %35)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  %36 = load i32, i32* %is_equal, align 4
  %tobool30 = icmp ne i32 %36, 0
  br i1 %tobool30, label %if.then.31, label %if.end.59

if.then.31:                                       ; preds = %do.end.29
  %37 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %38 = load %struct._object*, %struct._object** %name.addr, align 8
  %39 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call32 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %37, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.66, i32 0, i32 0), %struct._object* %38, %struct._object* %39)
  br label %do.body.33

do.body.33:                                       ; preds = %if.then.31
  %40 = load %struct._object*, %struct._object** %dotted_path, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp35, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt36, align 8
  %dec37 = add i64 %42, -1
  store i64 %dec37, i64* %ob_refcnt36, align 8
  %cmp38 = icmp ne i64 %dec37, 0
  br i1 %cmp38, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %do.body.33
  br label %if.end.44

if.else.41:                                       ; preds = %do.body.33
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  call void %45(%struct._object* %46)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %47 = load %struct._object*, %struct._object** %obj.addr, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp48, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_refcnt49 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt49, align 8
  %dec50 = add i64 %49, -1
  store i64 %dec50, i64* %ob_refcnt49, align 8
  %cmp51 = icmp ne i64 %dec50, 0
  br i1 %cmp51, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.46
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.46
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  call void %52(%struct._object* %53)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.59:                                        ; preds = %do.end.29
  %54 = load %struct._object*, %struct._object** %obj.addr, align 8
  %55 = load %struct._object*, %struct._object** %subpath, align 8
  %call60 = call %struct._object* @PyObject_GetAttr(%struct._object* %54, %struct._object* %55)
  store %struct._object* %call60, %struct._object** %tmp, align 8
  br label %do.body.61

do.body.61:                                       ; preds = %if.end.59
  %56 = load %struct._object*, %struct._object** %obj.addr, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp63, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %58, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %do.body.61
  br label %if.end.72

if.else.69:                                       ; preds = %do.body.61
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8
  %tp_dealloc71 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc71, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %61(%struct._object* %62)
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.68
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  %63 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp74 = icmp eq %struct._object* %63, null
  br i1 %cmp74, label %if.then.76, label %if.end.95

if.then.76:                                       ; preds = %do.end.73
  %64 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call77 = call i32 @PyErr_ExceptionMatches(%struct._object* %64)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.81

if.then.79:                                       ; preds = %if.then.76
  call void @PyErr_Clear()
  %65 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %66 = load %struct._object*, %struct._object** %name.addr, align 8
  %67 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call80 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %65, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.67, i32 0, i32 0), %struct._object* %66, %struct._object* %67)
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.79, %if.then.76
  br label %do.body.82

do.body.82:                                       ; preds = %if.end.81
  %68 = load %struct._object*, %struct._object** %dotted_path, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp84, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt85, align 8
  %dec86 = add i64 %70, -1
  store i64 %dec86, i64* %ob_refcnt85, align 8
  %cmp87 = icmp ne i64 %dec86, 0
  br i1 %cmp87, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.82
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.82
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  call void %73(%struct._object* %74)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.95:                                        ; preds = %do.end.73
  %75 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %75, %struct._object** %obj.addr, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.95
  %76 = load i64, i64* %i, align 8
  %inc96 = add i64 %76, 1
  store i64 %inc96, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body.97

do.body.97:                                       ; preds = %for.end
  %77 = load %struct._object*, %struct._object** %dotted_path, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp99, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  %ob_refcnt100 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt100, align 8
  %dec101 = add i64 %79, -1
  store i64 %dec101, i64* %ob_refcnt100, align 8
  %cmp102 = icmp ne i64 %dec101, 0
  br i1 %cmp102, label %if.then.104, label %if.else.105

if.then.104:                                      ; preds = %do.body.97
  br label %if.end.108

if.else.105:                                      ; preds = %do.body.97
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  %ob_type106 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type106, align 8
  %tp_dealloc107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc107, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  call void %82(%struct._object* %83)
  br label %if.end.108

if.end.108:                                       ; preds = %if.else.105, %if.then.104
  br label %do.end.109

do.end.109:                                       ; preds = %if.end.108
  %84 = load %struct._object*, %struct._object** %obj.addr, align 8
  store %struct._object* %84, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.109, %do.end.94, %do.end.58, %do.end, %if.then
  %85 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %85
}

declare %struct._object* @PyTuple_Pack(i64, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @fix_imports(%struct._object** %module_name, %struct._object** %global_name) #0 {
entry:
  %retval = alloca i32, align 4
  %module_name.addr = alloca %struct._object**, align 8
  %global_name.addr = alloca %struct._object**, align 8
  %key = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %fixed_module_name = alloca %struct._object*, align 8
  %fixed_global_name = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  %_py_tmp49 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  %_py_tmp87 = alloca %struct._object*, align 8
  %_py_decref_tmp91 = alloca %struct._object*, align 8
  store %struct._object** %module_name, %struct._object*** %module_name.addr, align 8
  store %struct._object** %global_name, %struct._object*** %global_name.addr, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %0 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  %1 = load %struct._object*, %struct._object** %0, align 8
  %2 = load %struct._object**, %struct._object*** %global_name.addr, align 8
  %3 = load %struct._object*, %struct._object** %2, align 8
  %call1 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %1, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %key, align 8
  %4 = load %struct._object*, %struct._object** %key, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %name_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %5, i32 0, i32 9
  %6 = load %struct._object*, %struct._object** %name_mapping_3to2, align 8
  %7 = load %struct._object*, %struct._object** %key, align 8
  %call2 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %6, %struct._object* %7)
  store %struct._object* %call2, %struct._object** %item, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %15 = load %struct._object*, %struct._object** %item, align 8
  %tobool = icmp ne %struct._object* %15, null
  br i1 %tobool, label %if.then.6, label %if.else.68

if.then.6:                                        ; preds = %do.end
  %16 = load %struct._object*, %struct._object** %item, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 19
  %18 = load i64, i64* %tp_flags, align 8
  %and = and i64 %18, 67108864
  %cmp8 = icmp ne i64 %and, 0
  br i1 %cmp8, label %lor.lhs.false, label %if.then.10

lor.lhs.false:                                    ; preds = %if.then.6
  %19 = load %struct._object*, %struct._object** %item, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1
  %21 = load i64, i64* %ob_size, align 8
  %cmp9 = icmp ne i64 %21, 2
  br i1 %cmp9, label %if.then.10, label %if.end.13

if.then.10:                                       ; preds = %lor.lhs.false, %if.then.6
  %22 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %23 = load %struct._object*, %struct._object** %item, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 1
  %25 = load i8*, i8** %tp_name, align 8
  %call12 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %22, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.68, i32 0, i32 0), i8* %25)
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %lor.lhs.false
  %26 = load %struct._object*, %struct._object** %item, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %27, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %28 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %28, %struct._object** %fixed_module_name, align 8
  %29 = load %struct._object*, %struct._object** %item, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyTupleObject*
  %ob_item14 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %30, i32 0, i32 1
  %arrayidx15 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item14, i32 0, i64 1
  %31 = load %struct._object*, %struct._object** %arrayidx15, align 8
  store %struct._object* %31, %struct._object** %fixed_global_name, align 8
  %32 = load %struct._object*, %struct._object** %fixed_module_name, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_flags17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 19
  %34 = load i64, i64* %tp_flags17, align 8
  %and18 = and i64 %34, 268435456
  %cmp19 = icmp ne i64 %and18, 0
  br i1 %cmp19, label %lor.lhs.false.20, label %if.then.25

lor.lhs.false.20:                                 ; preds = %if.end.13
  %35 = load %struct._object*, %struct._object** %fixed_global_name, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_flags22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 19
  %37 = load i64, i64* %tp_flags22, align 8
  %and23 = and i64 %37, 268435456
  %cmp24 = icmp ne i64 %and23, 0
  br i1 %cmp24, label %if.end.31, label %if.then.25

if.then.25:                                       ; preds = %lor.lhs.false.20, %if.end.13
  %38 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %39 = load %struct._object*, %struct._object** %fixed_module_name, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_name27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 1
  %41 = load i8*, i8** %tp_name27, align 8
  %42 = load %struct._object*, %struct._object** %fixed_global_name, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_name29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 1
  %44 = load i8*, i8** %tp_name29, align 8
  %call30 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %38, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.69, i32 0, i32 0), i8* %41, i8* %44)
  store i32 -1, i32* %retval
  br label %return

if.end.31:                                        ; preds = %lor.lhs.false.20
  br label %do.body.32

do.body.32:                                       ; preds = %if.end.31
  %45 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  %46 = load %struct._object*, %struct._object** %45, align 8
  store %struct._object* %46, %struct._object** %_py_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp33 = icmp ne %struct._object* %47, null
  br i1 %cmp33, label %if.then.34, label %if.end.46

if.then.34:                                       ; preds = %do.body.32
  %48 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  store %struct._object* null, %struct._object** %48, align 8
  br label %do.body.35

do.body.35:                                       ; preds = %if.then.34
  %49 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp36, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt37, align 8
  %dec38 = add i64 %51, -1
  store i64 %dec38, i64* %ob_refcnt37, align 8
  %cmp39 = icmp ne i64 %dec38, 0
  br i1 %cmp39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %do.body.35
  br label %if.end.44

if.else.41:                                       ; preds = %do.body.35
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  call void %54(%struct._object* %55)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %if.end.46

if.end.46:                                        ; preds = %do.end.45, %do.body.32
  br label %do.end.47

do.end.47:                                        ; preds = %if.end.46
  br label %do.body.48

do.body.48:                                       ; preds = %do.end.47
  %56 = load %struct._object**, %struct._object*** %global_name.addr, align 8
  %57 = load %struct._object*, %struct._object** %56, align 8
  store %struct._object* %57, %struct._object** %_py_tmp49, align 8
  %58 = load %struct._object*, %struct._object** %_py_tmp49, align 8
  %cmp50 = icmp ne %struct._object* %58, null
  br i1 %cmp50, label %if.then.51, label %if.end.63

if.then.51:                                       ; preds = %do.body.48
  %59 = load %struct._object**, %struct._object*** %global_name.addr, align 8
  store %struct._object* null, %struct._object** %59, align 8
  br label %do.body.52

do.body.52:                                       ; preds = %if.then.51
  %60 = load %struct._object*, %struct._object** %_py_tmp49, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp53, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %62, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %65(%struct._object* %66)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  br label %if.end.63

if.end.63:                                        ; preds = %do.end.62, %do.body.48
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  %67 = load %struct._object*, %struct._object** %fixed_module_name, align 8
  %ob_refcnt65 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt65, align 8
  %inc = add i64 %68, 1
  store i64 %inc, i64* %ob_refcnt65, align 8
  %69 = load %struct._object*, %struct._object** %fixed_global_name, align 8
  %ob_refcnt66 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt66, align 8
  %inc67 = add i64 %70, 1
  store i64 %inc67, i64* %ob_refcnt66, align 8
  %71 = load %struct._object*, %struct._object** %fixed_module_name, align 8
  %72 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  store %struct._object* %71, %struct._object** %72, align 8
  %73 = load %struct._object*, %struct._object** %fixed_global_name, align 8
  %74 = load %struct._object**, %struct._object*** %global_name.addr, align 8
  store %struct._object* %73, %struct._object** %74, align 8
  br label %if.end.73

if.else.68:                                       ; preds = %do.end
  %call69 = call %struct._object* @PyErr_Occurred()
  %tobool70 = icmp ne %struct._object* %call69, null
  br i1 %tobool70, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.else.68
  store i32 -1, i32* %retval
  br label %return

if.end.72:                                        ; preds = %if.else.68
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %do.end.64
  %75 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %import_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %75, i32 0, i32 10
  %76 = load %struct._object*, %struct._object** %import_mapping_3to2, align 8
  %77 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  %78 = load %struct._object*, %struct._object** %77, align 8
  %call74 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %76, %struct._object* %78)
  store %struct._object* %call74, %struct._object** %item, align 8
  %79 = load %struct._object*, %struct._object** %item, align 8
  %tobool75 = icmp ne %struct._object* %79, null
  br i1 %tobool75, label %if.then.76, label %if.else.105

if.then.76:                                       ; preds = %if.end.73
  %80 = load %struct._object*, %struct._object** %item, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_flags78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 19
  %82 = load i64, i64* %tp_flags78, align 8
  %and79 = and i64 %82, 268435456
  %cmp80 = icmp ne i64 %and79, 0
  br i1 %cmp80, label %if.end.85, label %if.then.81

if.then.81:                                       ; preds = %if.then.76
  %83 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %84 = load %struct._object*, %struct._object** %item, align 8
  %ob_type82 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type82, align 8
  %tp_name83 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 1
  %86 = load i8*, i8** %tp_name83, align 8
  %call84 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %83, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.70, i32 0, i32 0), i8* %86)
  store i32 -1, i32* %retval
  br label %return

if.end.85:                                        ; preds = %if.then.76
  br label %do.body.86

do.body.86:                                       ; preds = %if.end.85
  %87 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  %88 = load %struct._object*, %struct._object** %87, align 8
  store %struct._object* %88, %struct._object** %_py_tmp87, align 8
  %89 = load %struct._object*, %struct._object** %_py_tmp87, align 8
  %cmp88 = icmp ne %struct._object* %89, null
  br i1 %cmp88, label %if.then.89, label %if.end.101

if.then.89:                                       ; preds = %do.body.86
  %90 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  store %struct._object* null, %struct._object** %90, align 8
  br label %do.body.90

do.body.90:                                       ; preds = %if.then.89
  %91 = load %struct._object*, %struct._object** %_py_tmp87, align 8
  store %struct._object* %91, %struct._object** %_py_decref_tmp91, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8
  %ob_refcnt92 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0
  %93 = load i64, i64* %ob_refcnt92, align 8
  %dec93 = add i64 %93, -1
  store i64 %dec93, i64* %ob_refcnt92, align 8
  %cmp94 = icmp ne i64 %dec93, 0
  br i1 %cmp94, label %if.then.95, label %if.else.96

if.then.95:                                       ; preds = %do.body.90
  br label %if.end.99

if.else.96:                                       ; preds = %do.body.90
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8
  %ob_type97 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type97, align 8
  %tp_dealloc98 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc98, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8
  call void %96(%struct._object* %97)
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.96, %if.then.95
  br label %do.end.100

do.end.100:                                       ; preds = %if.end.99
  br label %if.end.101

if.end.101:                                       ; preds = %do.end.100, %do.body.86
  br label %do.end.102

do.end.102:                                       ; preds = %if.end.101
  %98 = load %struct._object*, %struct._object** %item, align 8
  %ob_refcnt103 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 0
  %99 = load i64, i64* %ob_refcnt103, align 8
  %inc104 = add i64 %99, 1
  store i64 %inc104, i64* %ob_refcnt103, align 8
  %100 = load %struct._object*, %struct._object** %item, align 8
  %101 = load %struct._object**, %struct._object*** %module_name.addr, align 8
  store %struct._object* %100, %struct._object** %101, align 8
  br label %if.end.110

if.else.105:                                      ; preds = %if.end.73
  %call106 = call %struct._object* @PyErr_Occurred()
  %tobool107 = icmp ne %struct._object* %call106, null
  br i1 %tobool107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %if.else.105
  store i32 -1, i32* %retval
  br label %return

if.end.109:                                       ; preds = %if.else.105
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %do.end.102
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.110, %if.then.108, %if.then.81, %if.then.71, %if.then.25, %if.then.10, %if.then
  %102 = load i32, i32* %retval
  ret i32 %102
}

declare %struct._object* @PyUnicode_AsUTF8String(%struct._object*) #1

declare %struct._object* @PyUnicode_AsASCIIString(%struct._object*) #1

declare %struct._object* @_PySys_GetObjectId(%struct._Py_Identifier*) #1

declare %struct._object* @PyUnicode_RichCompare(%struct._object*, %struct._object*, i32) #1

declare %struct._object* @PyUnicode_Split(%struct._object*, %struct._object*, i64) #1

declare %struct._object* @PyObject_GetAttr(%struct._object*, %struct._object*) #1

declare i32 @PyArg_UnpackTuple(%struct._object*, i8*, i64, i64, ...) #1

declare i32 @PyCallable_Check(%struct._object*) #1

declare %struct._object* @_PyObject_NextNotImplemented(%struct._object*) #1

declare i32 @PyUnicode_Compare(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @get_class(%struct._object* %obj) #0 {
entry:
  %obj.addr = alloca %struct._object*, align 8
  %cls = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @get_class.PyId___class__)
  store %struct._object* %call, %struct._object** %cls, align 8
  %1 = load %struct._object*, %struct._object** %cls, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call1 = call i32 @PyErr_ExceptionMatches(%struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  call void @PyErr_Clear()
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %5 = bitcast %struct._typeobject* %4 to %struct._object*
  store %struct._object* %5, %struct._object** %cls, align 8
  %6 = load %struct._object*, %struct._object** %cls, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %8 = load %struct._object*, %struct._object** %cls, align 8
  ret %struct._object* %8
}

declare %struct._object* @PyTuple_GetSlice(%struct._object*, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @_Pickler_GetString(%struct.PicklerObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PicklerObject*, align 8
  %output_buffer = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 5
  %1 = load %struct._object*, %struct._object** %output_buffer1, align 8
  store %struct._object* %1, %struct._object** %output_buffer, align 8
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call i32 @_Pickler_CommitFrame(%struct.PicklerObject* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer2 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %3, i32 0, i32 5
  store %struct._object* null, %struct._object** %output_buffer2, align 8
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 6
  %5 = load i64, i64* %output_len, align 8
  %call3 = call i32 @_PyBytes_Resize(%struct._object** %output_buffer, i64 %5)
  %cmp = icmp slt i32 %call3, 0
  br i1 %cmp, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %output_buffer, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_dumps_impl(%struct.PyModuleDef* %module, %struct._object* %obj, %struct._object* %protocol, i32 %fix_imports) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %protocol.addr = alloca %struct._object*, align 8
  %fix_imports.addr = alloca i32, align 4
  %result = alloca %struct._object*, align 8
  %pickler = alloca %struct.PicklerObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %protocol, %struct._object** %protocol.addr, align 8
  store i32 %fix_imports, i32* %fix_imports.addr, align 4
  %call = call %struct.PicklerObject* @_Pickler_New()
  store %struct.PicklerObject* %call, %struct.PicklerObject** %pickler, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %cmp = icmp eq %struct.PicklerObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %2 = load %struct._object*, %struct._object** %protocol.addr, align 8
  %3 = load i32, i32* %fix_imports.addr, align 4
  %call1 = call i32 @_Pickler_SetProtocol(%struct.PicklerObject* %1, %struct._object* %2, i32 %3)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %error

if.end.4:                                         ; preds = %if.end
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call5 = call i32 @dump(%struct.PicklerObject* %4, %struct._object* %5)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  br label %error

if.end.8:                                         ; preds = %if.end.4
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %call9 = call %struct._object* @_Pickler_GetString(%struct.PicklerObject* %6)
  store %struct._object* %call9, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.8
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %8 = bitcast %struct.PicklerObject* %7 to %struct._object*
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  %15 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.7, %if.then.3
  br label %do.body.13

do.body.13:                                       ; preds = %error
  %16 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %17 = bitcast %struct.PicklerObject* %16 to %struct._object*
  store %struct._object* %17, %struct._object** %_py_xdecref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp14 = icmp ne %struct._object* %18, null
  br i1 %cmp14, label %if.then.15, label %if.end.27

if.then.15:                                       ; preds = %do.body.13
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  %19 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp17, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %21, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %24(%struct._object* %25)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %if.end.27

if.end.27:                                        ; preds = %do.end.26, %do.body.13
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.28, %do.end, %if.then
  %26 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %26
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_load_impl(%struct.PyModuleDef* %module, %struct._object* %file, i32 %fix_imports, i8* %encoding, i8* %errors) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %file.addr = alloca %struct._object*, align 8
  %fix_imports.addr = alloca i32, align 4
  %encoding.addr = alloca i8*, align 8
  %errors.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  %unpickler = alloca %struct.UnpicklerObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %file, %struct._object** %file.addr, align 8
  store i32 %fix_imports, i32* %fix_imports.addr, align 4
  store i8* %encoding, i8** %encoding.addr, align 8
  store i8* %errors, i8** %errors.addr, align 8
  %call = call %struct.UnpicklerObject* @_Unpickler_New()
  store %struct.UnpicklerObject* %call, %struct.UnpicklerObject** %unpickler, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %cmp = icmp eq %struct.UnpicklerObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %2 = load %struct._object*, %struct._object** %file.addr, align 8
  %call1 = call i32 @_Unpickler_SetInputStream(%struct.UnpicklerObject* %1, %struct._object* %2)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %error

if.end.4:                                         ; preds = %if.end
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %4 = load i8*, i8** %encoding.addr, align 8
  %5 = load i8*, i8** %errors.addr, align 8
  %call5 = call i32 @_Unpickler_SetInputEncoding(%struct.UnpicklerObject* %3, i8* %4, i8* %5)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  br label %error

if.end.8:                                         ; preds = %if.end.4
  %6 = load i32, i32* %fix_imports.addr, align 4
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %fix_imports9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 21
  store i32 %6, i32* %fix_imports9, align 4
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %call10 = call %struct._object* @load(%struct.UnpicklerObject* %8)
  store %struct._object* %call10, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.8
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %10 = bitcast %struct.UnpicklerObject* %9 to %struct._object*
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.7, %if.then.3
  br label %do.body.14

do.body.14:                                       ; preds = %error
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %19 = bitcast %struct.UnpicklerObject* %18 to %struct._object*
  store %struct._object* %19, %struct._object** %_py_xdecref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp15 = icmp ne %struct._object* %20, null
  br i1 %cmp15, label %if.then.16, label %if.end.28

if.then.16:                                       ; preds = %do.body.14
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.16
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp18, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %23, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %26(%struct._object* %27)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %if.end.28

if.end.28:                                        ; preds = %do.end.27, %do.body.14
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.29, %do.end, %if.then
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal %struct.UnpicklerObject* @_Unpickler_New() #0 {
entry:
  %retval = alloca %struct.UnpicklerObject*, align 8
  %self = alloca %struct.UnpicklerObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %call = call %struct._object* @_PyObject_GC_New(%struct._typeobject* @Unpickler_Type)
  %0 = bitcast %struct._object* %call to %struct.UnpicklerObject*
  store %struct.UnpicklerObject* %0, %struct.UnpicklerObject** %self, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %cmp = icmp eq %struct.UnpicklerObject* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.UnpicklerObject* null, %struct.UnpicklerObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 5
  store %struct._object* null, %struct._object** %pers_func, align 8
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %input_buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 7
  store i8* null, i8** %input_buffer, align 8
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %input_line = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 8
  store i8* null, i8** %input_line, align 8
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %input_len = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 9
  store i64 0, i64* %input_len, align 8
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %next_read_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 10
  store i64 0, i64* %next_read_idx, align 8
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %prefetched_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 11
  store i64 0, i64* %prefetched_idx, align 8
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 12
  store %struct._object* null, %struct._object** %read, align 8
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %readline = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 13
  store %struct._object* null, %struct._object** %readline, align 8
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %peek = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 14
  store %struct._object* null, %struct._object** %peek, align 8
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %encoding = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 15
  store i8* null, i8** %encoding, align 8
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %errors = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %12, i32 0, i32 16
  store i8* null, i8** %errors, align 8
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %13, i32 0, i32 17
  store i64* null, i64** %marks, align 8
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %num_marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 18
  store i64 0, i64* %num_marks, align 8
  %15 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %marks_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %15, i32 0, i32 19
  store i64 0, i64* %marks_size, align 8
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %proto = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %16, i32 0, i32 20
  store i32 0, i32* %proto, align 4
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %fix_imports = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %17, i32 0, i32 21
  store i32 0, i32* %fix_imports, align 4
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %18, i32 0, i32 6
  %19 = bitcast %struct.bufferinfo* %buffer to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 80, i32 8, i1 false)
  %20 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %20, i32 0, i32 3
  store i64 32, i64* %memo_size, align 8
  %21 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %memo_len = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %21, i32 0, i32 4
  store i64 0, i64* %memo_len, align 8
  %22 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %memo_size1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %22, i32 0, i32 3
  %23 = load i64, i64* %memo_size1, align 8
  %call2 = call %struct._object** @_Unpickler_NewMemo(i64 %23)
  %24 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %memo = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %24, i32 0, i32 2
  store %struct._object** %call2, %struct._object*** %memo, align 8
  %call3 = call %struct._object* @Pdata_New()
  %25 = bitcast %struct._object* %call3 to %struct.Pdata*
  %26 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %26, i32 0, i32 1
  store %struct.Pdata* %25, %struct.Pdata** %stack, align 8
  %27 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %memo4 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %27, i32 0, i32 2
  %28 = load %struct._object**, %struct._object*** %memo4, align 8
  %cmp5 = icmp eq %struct._object** %28, null
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %29 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %stack6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %29, i32 0, i32 1
  %30 = load %struct.Pdata*, %struct.Pdata** %stack6, align 8
  %cmp7 = icmp eq %struct.Pdata* %30, null
  br i1 %cmp7, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %lor.lhs.false, %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %31 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  %32 = bitcast %struct.UnpicklerObject* %31 to %struct._object*
  store %struct._object* %32, %struct._object** %_py_decref_tmp, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %34, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %37(%struct._object* %38)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  store %struct.UnpicklerObject* null, %struct.UnpicklerObject** %retval
  br label %return

if.end.12:                                        ; preds = %lor.lhs.false
  %39 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self, align 8
  store %struct.UnpicklerObject* %39, %struct.UnpicklerObject** %retval
  br label %return

return:                                           ; preds = %if.end.12, %do.end, %if.then
  %40 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %retval
  ret %struct.UnpicklerObject* %40
}

; Function Attrs: nounwind uwtable
define internal i32 @_Unpickler_SetInputStream(%struct.UnpicklerObject* %self, %struct._object* %file) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %file.addr = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp28 = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_tmp47 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %file, %struct._object** %file.addr, align 8
  %0 = load %struct._object*, %struct._object** %file.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @_Unpickler_SetInputStream.PyId_peek)
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 14
  store %struct._object* %call, %struct._object** %peek, align 8
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 14
  %3 = load %struct._object*, %struct._object** %peek1, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call2 = call i32 @PyErr_ExceptionMatches(%struct._object* %4)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  call void @PyErr_Clear()
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.3
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %5 = load %struct._object*, %struct._object** %file.addr, align 8
  %call5 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %5, %struct._Py_Identifier* @_Unpickler_SetInputStream.PyId_read)
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 12
  store %struct._object* %call5, %struct._object** %read, align 8
  %7 = load %struct._object*, %struct._object** %file.addr, align 8
  %call6 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %7, %struct._Py_Identifier* @_Unpickler_SetInputStream.PyId_readline)
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 13
  store %struct._object* %call6, %struct._object** %readline, align 8
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 13
  %10 = load %struct._object*, %struct._object** %readline7, align 8
  %cmp8 = icmp eq %struct._object* %10, null
  br i1 %cmp8, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.4
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 12
  %12 = load %struct._object*, %struct._object** %read9, align 8
  %cmp10 = icmp eq %struct._object* %12, null
  br i1 %cmp10, label %if.then.11, label %if.end.65

if.then.11:                                       ; preds = %lor.lhs.false, %if.end.4
  %13 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call12 = call i32 @PyErr_ExceptionMatches(%struct._object* %13)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.11
  %14 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %14, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.95, i32 0, i32 0))
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.14, %if.then.11
  br label %do.body

do.body:                                          ; preds = %if.end.15
  %15 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read16 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %15, i32 0, i32 12
  %16 = load %struct._object*, %struct._object** %read16, align 8
  store %struct._object* %16, %struct._object** %_py_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp17 = icmp ne %struct._object* %17, null
  br i1 %cmp17, label %if.then.18, label %if.end.25

if.then.18:                                       ; preds = %do.body
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read19 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %18, i32 0, i32 12
  store %struct._object* null, %struct._object** %read19, align 8
  br label %do.body.20

do.body.20:                                       ; preds = %if.then.18
  %19 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp21 = icmp ne i64 %dec, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.20
  br label %if.end.24

if.else.23:                                       ; preds = %do.body.20
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end

do.end:                                           ; preds = %if.end.24
  br label %if.end.25

if.end.25:                                        ; preds = %do.end, %do.body
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %26 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline29 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %26, i32 0, i32 13
  %27 = load %struct._object*, %struct._object** %readline29, align 8
  store %struct._object* %27, %struct._object** %_py_tmp28, align 8
  %28 = load %struct._object*, %struct._object** %_py_tmp28, align 8
  %cmp30 = icmp ne %struct._object* %28, null
  br i1 %cmp30, label %if.then.31, label %if.end.44

if.then.31:                                       ; preds = %do.body.27
  %29 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline32 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %29, i32 0, i32 13
  store %struct._object* null, %struct._object** %readline32, align 8
  br label %do.body.33

do.body.33:                                       ; preds = %if.then.31
  %30 = load %struct._object*, %struct._object** %_py_tmp28, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp34, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %32, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %35(%struct._object* %36)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  br label %if.end.44

if.end.44:                                        ; preds = %do.end.43, %do.body.27
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %37 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek48 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %37, i32 0, i32 14
  %38 = load %struct._object*, %struct._object** %peek48, align 8
  store %struct._object* %38, %struct._object** %_py_tmp47, align 8
  %39 = load %struct._object*, %struct._object** %_py_tmp47, align 8
  %cmp49 = icmp ne %struct._object* %39, null
  br i1 %cmp49, label %if.then.50, label %if.end.63

if.then.50:                                       ; preds = %do.body.46
  %40 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek51 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %40, i32 0, i32 14
  store %struct._object* null, %struct._object** %peek51, align 8
  br label %do.body.52

do.body.52:                                       ; preds = %if.then.50
  %41 = load %struct._object*, %struct._object** %_py_tmp47, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp53, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %43, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %46(%struct._object* %47)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  br label %if.end.63

if.end.63:                                        ; preds = %do.end.62, %do.body.46
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  store i32 -1, i32* %retval
  br label %return

if.end.65:                                        ; preds = %lor.lhs.false
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.65, %do.end.64, %if.else
  %48 = load i32, i32* %retval
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal i32 @_Unpickler_SetInputEncoding(%struct.UnpicklerObject* %self, i8* %encoding, i8* %errors) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %encoding.addr = alloca i8*, align 8
  %errors.addr = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i8* %encoding, i8** %encoding.addr, align 8
  store i8* %errors, i8** %errors.addr, align 8
  %0 = load i8*, i8** %encoding.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0), i8** %encoding.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8*, i8** %errors.addr, align 8
  %cmp1 = icmp eq i8* %1, null
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8** %errors.addr, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %2 = load i8*, i8** %encoding.addr, align 8
  %call = call i8* @_PyMem_Strdup(i8* %2)
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding4 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 15
  store i8* %call, i8** %encoding4, align 8
  %4 = load i8*, i8** %errors.addr, align 8
  %call5 = call i8* @_PyMem_Strdup(i8* %4)
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %errors6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 16
  store i8* %call5, i8** %errors6, align 8
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 15
  %7 = load i8*, i8** %encoding7, align 8
  %cmp8 = icmp eq i8* %7, null
  br i1 %cmp8, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.3
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %errors9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 16
  %9 = load i8*, i8** %errors9, align 8
  %cmp10 = icmp eq i8* %9, null
  br i1 %cmp10, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %lor.lhs.false, %if.end.3
  %call12 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %lor.lhs.false
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.11
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @load(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %s = alloca i8*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* null, %struct._object** %value, align 8
  store i8* null, i8** %s, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 18
  store i64 0, i64* %num_marks, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 20
  store i32 0, i32* %proto, align 4
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 1
  %3 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %4 = bitcast %struct.Pdata* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 1
  %7 = load %struct.Pdata*, %struct.Pdata** %stack1, align 8
  %call = call i32 @Pdata_clear(%struct.Pdata* %7, i64 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.body

while.body:                                       ; preds = %if.end, %if.end.9, %if.end.15, %if.end.21, %if.end.27, %if.end.33, %if.end.39, %if.end.45, %if.end.51, %if.end.57, %if.end.63, %if.end.69, %if.end.75, %if.end.81, %if.end.87, %if.end.93, %if.end.99, %if.end.105, %if.end.111, %if.end.117, %if.end.123, %if.end.129, %if.end.135, %if.end.141, %if.end.147, %if.end.153, %if.end.159, %if.end.165, %if.end.171, %if.end.177, %if.end.183, %if.end.189, %if.end.195, %if.end.201, %if.end.207, %if.end.213, %if.end.219, %if.end.225, %if.end.231, %if.end.237, %if.end.243, %if.end.249, %if.end.255, %if.end.261, %if.end.267, %if.end.273, %if.end.279, %if.end.285, %if.end.291, %if.end.297, %if.end.303, %if.end.309, %if.end.315, %if.end.321, %if.end.327, %if.end.333, %if.end.339, %if.end.345, %if.end.351, %if.end.357, %if.end.363, %if.end.369, %if.end.375, %if.end.381, %if.end.387
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call2 = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %8, i8** %s, i64 1)
  %cmp = icmp slt i64 %call2, 0
  br i1 %cmp, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %while.body
  br label %while.end

if.end.4:                                         ; preds = %while.body
  %9 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  switch i32 %conv, label %sw.default [
    i32 78, label %sw.bb
    i32 74, label %sw.bb.10
    i32 75, label %sw.bb.16
    i32 77, label %sw.bb.22
    i32 73, label %sw.bb.28
    i32 76, label %sw.bb.34
    i32 -118, label %sw.bb.40
    i32 -117, label %sw.bb.46
    i32 70, label %sw.bb.52
    i32 71, label %sw.bb.58
    i32 67, label %sw.bb.64
    i32 66, label %sw.bb.70
    i32 -114, label %sw.bb.76
    i32 85, label %sw.bb.82
    i32 84, label %sw.bb.88
    i32 83, label %sw.bb.94
    i32 86, label %sw.bb.100
    i32 -116, label %sw.bb.106
    i32 88, label %sw.bb.112
    i32 -115, label %sw.bb.118
    i32 41, label %sw.bb.124
    i32 -123, label %sw.bb.130
    i32 -122, label %sw.bb.136
    i32 -121, label %sw.bb.142
    i32 116, label %sw.bb.148
    i32 93, label %sw.bb.154
    i32 108, label %sw.bb.160
    i32 125, label %sw.bb.166
    i32 100, label %sw.bb.172
    i32 -113, label %sw.bb.178
    i32 -112, label %sw.bb.184
    i32 -111, label %sw.bb.190
    i32 111, label %sw.bb.196
    i32 105, label %sw.bb.202
    i32 -127, label %sw.bb.208
    i32 -110, label %sw.bb.214
    i32 99, label %sw.bb.220
    i32 -109, label %sw.bb.226
    i32 97, label %sw.bb.232
    i32 101, label %sw.bb.238
    i32 98, label %sw.bb.244
    i32 50, label %sw.bb.250
    i32 104, label %sw.bb.256
    i32 106, label %sw.bb.262
    i32 103, label %sw.bb.268
    i32 40, label %sw.bb.274
    i32 113, label %sw.bb.280
    i32 114, label %sw.bb.286
    i32 112, label %sw.bb.292
    i32 -108, label %sw.bb.298
    i32 48, label %sw.bb.304
    i32 49, label %sw.bb.310
    i32 115, label %sw.bb.316
    i32 117, label %sw.bb.322
    i32 80, label %sw.bb.328
    i32 81, label %sw.bb.334
    i32 82, label %sw.bb.340
    i32 -128, label %sw.bb.346
    i32 -107, label %sw.bb.352
    i32 -126, label %sw.bb.358
    i32 -125, label %sw.bb.364
    i32 -124, label %sw.bb.370
    i32 -120, label %sw.bb.376
    i32 -119, label %sw.bb.382
    i32 46, label %sw.bb.388
  ]

sw.bb:                                            ; preds = %if.end.4
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call5 = call i32 @load_none(%struct.UnpicklerObject* %11)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %sw.bb
  br label %sw.epilog

if.end.9:                                         ; preds = %sw.bb
  br label %while.body

sw.bb.10:                                         ; preds = %if.end.4
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call11 = call i32 @load_binint(%struct.UnpicklerObject* %12)
  %cmp12 = icmp slt i32 %call11, 0
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %sw.bb.10
  br label %sw.epilog

if.end.15:                                        ; preds = %sw.bb.10
  br label %while.body

sw.bb.16:                                         ; preds = %if.end.4
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call17 = call i32 @load_binint1(%struct.UnpicklerObject* %13)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %sw.bb.16
  br label %sw.epilog

if.end.21:                                        ; preds = %sw.bb.16
  br label %while.body

sw.bb.22:                                         ; preds = %if.end.4
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call23 = call i32 @load_binint2(%struct.UnpicklerObject* %14)
  %cmp24 = icmp slt i32 %call23, 0
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.22
  br label %sw.epilog

if.end.27:                                        ; preds = %sw.bb.22
  br label %while.body

sw.bb.28:                                         ; preds = %if.end.4
  %15 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call29 = call i32 @load_int(%struct.UnpicklerObject* %15)
  %cmp30 = icmp slt i32 %call29, 0
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %sw.bb.28
  br label %sw.epilog

if.end.33:                                        ; preds = %sw.bb.28
  br label %while.body

sw.bb.34:                                         ; preds = %if.end.4
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call35 = call i32 @load_long(%struct.UnpicklerObject* %16)
  %cmp36 = icmp slt i32 %call35, 0
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %sw.bb.34
  br label %sw.epilog

if.end.39:                                        ; preds = %sw.bb.34
  br label %while.body

sw.bb.40:                                         ; preds = %if.end.4
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call41 = call i32 @load_counted_long(%struct.UnpicklerObject* %17, i32 1)
  %cmp42 = icmp slt i32 %call41, 0
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %sw.bb.40
  br label %sw.epilog

if.end.45:                                        ; preds = %sw.bb.40
  br label %while.body

sw.bb.46:                                         ; preds = %if.end.4
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call47 = call i32 @load_counted_long(%struct.UnpicklerObject* %18, i32 4)
  %cmp48 = icmp slt i32 %call47, 0
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %sw.bb.46
  br label %sw.epilog

if.end.51:                                        ; preds = %sw.bb.46
  br label %while.body

sw.bb.52:                                         ; preds = %if.end.4
  %19 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call53 = call i32 @load_float(%struct.UnpicklerObject* %19)
  %cmp54 = icmp slt i32 %call53, 0
  br i1 %cmp54, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %sw.bb.52
  br label %sw.epilog

if.end.57:                                        ; preds = %sw.bb.52
  br label %while.body

sw.bb.58:                                         ; preds = %if.end.4
  %20 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call59 = call i32 @load_binfloat(%struct.UnpicklerObject* %20)
  %cmp60 = icmp slt i32 %call59, 0
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %sw.bb.58
  br label %sw.epilog

if.end.63:                                        ; preds = %sw.bb.58
  br label %while.body

sw.bb.64:                                         ; preds = %if.end.4
  %21 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call65 = call i32 @load_counted_binbytes(%struct.UnpicklerObject* %21, i32 1)
  %cmp66 = icmp slt i32 %call65, 0
  br i1 %cmp66, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %sw.bb.64
  br label %sw.epilog

if.end.69:                                        ; preds = %sw.bb.64
  br label %while.body

sw.bb.70:                                         ; preds = %if.end.4
  %22 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call71 = call i32 @load_counted_binbytes(%struct.UnpicklerObject* %22, i32 4)
  %cmp72 = icmp slt i32 %call71, 0
  br i1 %cmp72, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %sw.bb.70
  br label %sw.epilog

if.end.75:                                        ; preds = %sw.bb.70
  br label %while.body

sw.bb.76:                                         ; preds = %if.end.4
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call77 = call i32 @load_counted_binbytes(%struct.UnpicklerObject* %23, i32 8)
  %cmp78 = icmp slt i32 %call77, 0
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %sw.bb.76
  br label %sw.epilog

if.end.81:                                        ; preds = %sw.bb.76
  br label %while.body

sw.bb.82:                                         ; preds = %if.end.4
  %24 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call83 = call i32 @load_counted_binstring(%struct.UnpicklerObject* %24, i32 1)
  %cmp84 = icmp slt i32 %call83, 0
  br i1 %cmp84, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %sw.bb.82
  br label %sw.epilog

if.end.87:                                        ; preds = %sw.bb.82
  br label %while.body

sw.bb.88:                                         ; preds = %if.end.4
  %25 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call89 = call i32 @load_counted_binstring(%struct.UnpicklerObject* %25, i32 4)
  %cmp90 = icmp slt i32 %call89, 0
  br i1 %cmp90, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %sw.bb.88
  br label %sw.epilog

if.end.93:                                        ; preds = %sw.bb.88
  br label %while.body

sw.bb.94:                                         ; preds = %if.end.4
  %26 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call95 = call i32 @load_string(%struct.UnpicklerObject* %26)
  %cmp96 = icmp slt i32 %call95, 0
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %sw.bb.94
  br label %sw.epilog

if.end.99:                                        ; preds = %sw.bb.94
  br label %while.body

sw.bb.100:                                        ; preds = %if.end.4
  %27 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call101 = call i32 @load_unicode(%struct.UnpicklerObject* %27)
  %cmp102 = icmp slt i32 %call101, 0
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %sw.bb.100
  br label %sw.epilog

if.end.105:                                       ; preds = %sw.bb.100
  br label %while.body

sw.bb.106:                                        ; preds = %if.end.4
  %28 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call107 = call i32 @load_counted_binunicode(%struct.UnpicklerObject* %28, i32 1)
  %cmp108 = icmp slt i32 %call107, 0
  br i1 %cmp108, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %sw.bb.106
  br label %sw.epilog

if.end.111:                                       ; preds = %sw.bb.106
  br label %while.body

sw.bb.112:                                        ; preds = %if.end.4
  %29 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call113 = call i32 @load_counted_binunicode(%struct.UnpicklerObject* %29, i32 4)
  %cmp114 = icmp slt i32 %call113, 0
  br i1 %cmp114, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %sw.bb.112
  br label %sw.epilog

if.end.117:                                       ; preds = %sw.bb.112
  br label %while.body

sw.bb.118:                                        ; preds = %if.end.4
  %30 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call119 = call i32 @load_counted_binunicode(%struct.UnpicklerObject* %30, i32 8)
  %cmp120 = icmp slt i32 %call119, 0
  br i1 %cmp120, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %sw.bb.118
  br label %sw.epilog

if.end.123:                                       ; preds = %sw.bb.118
  br label %while.body

sw.bb.124:                                        ; preds = %if.end.4
  %31 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call125 = call i32 @load_counted_tuple(%struct.UnpicklerObject* %31, i32 0)
  %cmp126 = icmp slt i32 %call125, 0
  br i1 %cmp126, label %if.then.128, label %if.end.129

if.then.128:                                      ; preds = %sw.bb.124
  br label %sw.epilog

if.end.129:                                       ; preds = %sw.bb.124
  br label %while.body

sw.bb.130:                                        ; preds = %if.end.4
  %32 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call131 = call i32 @load_counted_tuple(%struct.UnpicklerObject* %32, i32 1)
  %cmp132 = icmp slt i32 %call131, 0
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %sw.bb.130
  br label %sw.epilog

if.end.135:                                       ; preds = %sw.bb.130
  br label %while.body

sw.bb.136:                                        ; preds = %if.end.4
  %33 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call137 = call i32 @load_counted_tuple(%struct.UnpicklerObject* %33, i32 2)
  %cmp138 = icmp slt i32 %call137, 0
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %sw.bb.136
  br label %sw.epilog

if.end.141:                                       ; preds = %sw.bb.136
  br label %while.body

sw.bb.142:                                        ; preds = %if.end.4
  %34 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call143 = call i32 @load_counted_tuple(%struct.UnpicklerObject* %34, i32 3)
  %cmp144 = icmp slt i32 %call143, 0
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %sw.bb.142
  br label %sw.epilog

if.end.147:                                       ; preds = %sw.bb.142
  br label %while.body

sw.bb.148:                                        ; preds = %if.end.4
  %35 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call149 = call i32 @load_tuple(%struct.UnpicklerObject* %35)
  %cmp150 = icmp slt i32 %call149, 0
  br i1 %cmp150, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %sw.bb.148
  br label %sw.epilog

if.end.153:                                       ; preds = %sw.bb.148
  br label %while.body

sw.bb.154:                                        ; preds = %if.end.4
  %36 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call155 = call i32 @load_empty_list(%struct.UnpicklerObject* %36)
  %cmp156 = icmp slt i32 %call155, 0
  br i1 %cmp156, label %if.then.158, label %if.end.159

if.then.158:                                      ; preds = %sw.bb.154
  br label %sw.epilog

if.end.159:                                       ; preds = %sw.bb.154
  br label %while.body

sw.bb.160:                                        ; preds = %if.end.4
  %37 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call161 = call i32 @load_list(%struct.UnpicklerObject* %37)
  %cmp162 = icmp slt i32 %call161, 0
  br i1 %cmp162, label %if.then.164, label %if.end.165

if.then.164:                                      ; preds = %sw.bb.160
  br label %sw.epilog

if.end.165:                                       ; preds = %sw.bb.160
  br label %while.body

sw.bb.166:                                        ; preds = %if.end.4
  %38 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call167 = call i32 @load_empty_dict(%struct.UnpicklerObject* %38)
  %cmp168 = icmp slt i32 %call167, 0
  br i1 %cmp168, label %if.then.170, label %if.end.171

if.then.170:                                      ; preds = %sw.bb.166
  br label %sw.epilog

if.end.171:                                       ; preds = %sw.bb.166
  br label %while.body

sw.bb.172:                                        ; preds = %if.end.4
  %39 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call173 = call i32 @load_dict(%struct.UnpicklerObject* %39)
  %cmp174 = icmp slt i32 %call173, 0
  br i1 %cmp174, label %if.then.176, label %if.end.177

if.then.176:                                      ; preds = %sw.bb.172
  br label %sw.epilog

if.end.177:                                       ; preds = %sw.bb.172
  br label %while.body

sw.bb.178:                                        ; preds = %if.end.4
  %40 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call179 = call i32 @load_empty_set(%struct.UnpicklerObject* %40)
  %cmp180 = icmp slt i32 %call179, 0
  br i1 %cmp180, label %if.then.182, label %if.end.183

if.then.182:                                      ; preds = %sw.bb.178
  br label %sw.epilog

if.end.183:                                       ; preds = %sw.bb.178
  br label %while.body

sw.bb.184:                                        ; preds = %if.end.4
  %41 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call185 = call i32 @load_additems(%struct.UnpicklerObject* %41)
  %cmp186 = icmp slt i32 %call185, 0
  br i1 %cmp186, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %sw.bb.184
  br label %sw.epilog

if.end.189:                                       ; preds = %sw.bb.184
  br label %while.body

sw.bb.190:                                        ; preds = %if.end.4
  %42 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call191 = call i32 @load_frozenset(%struct.UnpicklerObject* %42)
  %cmp192 = icmp slt i32 %call191, 0
  br i1 %cmp192, label %if.then.194, label %if.end.195

if.then.194:                                      ; preds = %sw.bb.190
  br label %sw.epilog

if.end.195:                                       ; preds = %sw.bb.190
  br label %while.body

sw.bb.196:                                        ; preds = %if.end.4
  %43 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call197 = call i32 @load_obj(%struct.UnpicklerObject* %43)
  %cmp198 = icmp slt i32 %call197, 0
  br i1 %cmp198, label %if.then.200, label %if.end.201

if.then.200:                                      ; preds = %sw.bb.196
  br label %sw.epilog

if.end.201:                                       ; preds = %sw.bb.196
  br label %while.body

sw.bb.202:                                        ; preds = %if.end.4
  %44 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call203 = call i32 @load_inst(%struct.UnpicklerObject* %44)
  %cmp204 = icmp slt i32 %call203, 0
  br i1 %cmp204, label %if.then.206, label %if.end.207

if.then.206:                                      ; preds = %sw.bb.202
  br label %sw.epilog

if.end.207:                                       ; preds = %sw.bb.202
  br label %while.body

sw.bb.208:                                        ; preds = %if.end.4
  %45 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call209 = call i32 @load_newobj(%struct.UnpicklerObject* %45)
  %cmp210 = icmp slt i32 %call209, 0
  br i1 %cmp210, label %if.then.212, label %if.end.213

if.then.212:                                      ; preds = %sw.bb.208
  br label %sw.epilog

if.end.213:                                       ; preds = %sw.bb.208
  br label %while.body

sw.bb.214:                                        ; preds = %if.end.4
  %46 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call215 = call i32 @load_newobj_ex(%struct.UnpicklerObject* %46)
  %cmp216 = icmp slt i32 %call215, 0
  br i1 %cmp216, label %if.then.218, label %if.end.219

if.then.218:                                      ; preds = %sw.bb.214
  br label %sw.epilog

if.end.219:                                       ; preds = %sw.bb.214
  br label %while.body

sw.bb.220:                                        ; preds = %if.end.4
  %47 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call221 = call i32 @load_global(%struct.UnpicklerObject* %47)
  %cmp222 = icmp slt i32 %call221, 0
  br i1 %cmp222, label %if.then.224, label %if.end.225

if.then.224:                                      ; preds = %sw.bb.220
  br label %sw.epilog

if.end.225:                                       ; preds = %sw.bb.220
  br label %while.body

sw.bb.226:                                        ; preds = %if.end.4
  %48 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call227 = call i32 @load_stack_global(%struct.UnpicklerObject* %48)
  %cmp228 = icmp slt i32 %call227, 0
  br i1 %cmp228, label %if.then.230, label %if.end.231

if.then.230:                                      ; preds = %sw.bb.226
  br label %sw.epilog

if.end.231:                                       ; preds = %sw.bb.226
  br label %while.body

sw.bb.232:                                        ; preds = %if.end.4
  %49 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call233 = call i32 @load_append(%struct.UnpicklerObject* %49)
  %cmp234 = icmp slt i32 %call233, 0
  br i1 %cmp234, label %if.then.236, label %if.end.237

if.then.236:                                      ; preds = %sw.bb.232
  br label %sw.epilog

if.end.237:                                       ; preds = %sw.bb.232
  br label %while.body

sw.bb.238:                                        ; preds = %if.end.4
  %50 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call239 = call i32 @load_appends(%struct.UnpicklerObject* %50)
  %cmp240 = icmp slt i32 %call239, 0
  br i1 %cmp240, label %if.then.242, label %if.end.243

if.then.242:                                      ; preds = %sw.bb.238
  br label %sw.epilog

if.end.243:                                       ; preds = %sw.bb.238
  br label %while.body

sw.bb.244:                                        ; preds = %if.end.4
  %51 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call245 = call i32 @load_build(%struct.UnpicklerObject* %51)
  %cmp246 = icmp slt i32 %call245, 0
  br i1 %cmp246, label %if.then.248, label %if.end.249

if.then.248:                                      ; preds = %sw.bb.244
  br label %sw.epilog

if.end.249:                                       ; preds = %sw.bb.244
  br label %while.body

sw.bb.250:                                        ; preds = %if.end.4
  %52 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call251 = call i32 @load_dup(%struct.UnpicklerObject* %52)
  %cmp252 = icmp slt i32 %call251, 0
  br i1 %cmp252, label %if.then.254, label %if.end.255

if.then.254:                                      ; preds = %sw.bb.250
  br label %sw.epilog

if.end.255:                                       ; preds = %sw.bb.250
  br label %while.body

sw.bb.256:                                        ; preds = %if.end.4
  %53 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call257 = call i32 @load_binget(%struct.UnpicklerObject* %53)
  %cmp258 = icmp slt i32 %call257, 0
  br i1 %cmp258, label %if.then.260, label %if.end.261

if.then.260:                                      ; preds = %sw.bb.256
  br label %sw.epilog

if.end.261:                                       ; preds = %sw.bb.256
  br label %while.body

sw.bb.262:                                        ; preds = %if.end.4
  %54 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call263 = call i32 @load_long_binget(%struct.UnpicklerObject* %54)
  %cmp264 = icmp slt i32 %call263, 0
  br i1 %cmp264, label %if.then.266, label %if.end.267

if.then.266:                                      ; preds = %sw.bb.262
  br label %sw.epilog

if.end.267:                                       ; preds = %sw.bb.262
  br label %while.body

sw.bb.268:                                        ; preds = %if.end.4
  %55 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call269 = call i32 @load_get(%struct.UnpicklerObject* %55)
  %cmp270 = icmp slt i32 %call269, 0
  br i1 %cmp270, label %if.then.272, label %if.end.273

if.then.272:                                      ; preds = %sw.bb.268
  br label %sw.epilog

if.end.273:                                       ; preds = %sw.bb.268
  br label %while.body

sw.bb.274:                                        ; preds = %if.end.4
  %56 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call275 = call i32 @load_mark(%struct.UnpicklerObject* %56)
  %cmp276 = icmp slt i32 %call275, 0
  br i1 %cmp276, label %if.then.278, label %if.end.279

if.then.278:                                      ; preds = %sw.bb.274
  br label %sw.epilog

if.end.279:                                       ; preds = %sw.bb.274
  br label %while.body

sw.bb.280:                                        ; preds = %if.end.4
  %57 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call281 = call i32 @load_binput(%struct.UnpicklerObject* %57)
  %cmp282 = icmp slt i32 %call281, 0
  br i1 %cmp282, label %if.then.284, label %if.end.285

if.then.284:                                      ; preds = %sw.bb.280
  br label %sw.epilog

if.end.285:                                       ; preds = %sw.bb.280
  br label %while.body

sw.bb.286:                                        ; preds = %if.end.4
  %58 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call287 = call i32 @load_long_binput(%struct.UnpicklerObject* %58)
  %cmp288 = icmp slt i32 %call287, 0
  br i1 %cmp288, label %if.then.290, label %if.end.291

if.then.290:                                      ; preds = %sw.bb.286
  br label %sw.epilog

if.end.291:                                       ; preds = %sw.bb.286
  br label %while.body

sw.bb.292:                                        ; preds = %if.end.4
  %59 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call293 = call i32 @load_put(%struct.UnpicklerObject* %59)
  %cmp294 = icmp slt i32 %call293, 0
  br i1 %cmp294, label %if.then.296, label %if.end.297

if.then.296:                                      ; preds = %sw.bb.292
  br label %sw.epilog

if.end.297:                                       ; preds = %sw.bb.292
  br label %while.body

sw.bb.298:                                        ; preds = %if.end.4
  %60 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call299 = call i32 @load_memoize(%struct.UnpicklerObject* %60)
  %cmp300 = icmp slt i32 %call299, 0
  br i1 %cmp300, label %if.then.302, label %if.end.303

if.then.302:                                      ; preds = %sw.bb.298
  br label %sw.epilog

if.end.303:                                       ; preds = %sw.bb.298
  br label %while.body

sw.bb.304:                                        ; preds = %if.end.4
  %61 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call305 = call i32 @load_pop(%struct.UnpicklerObject* %61)
  %cmp306 = icmp slt i32 %call305, 0
  br i1 %cmp306, label %if.then.308, label %if.end.309

if.then.308:                                      ; preds = %sw.bb.304
  br label %sw.epilog

if.end.309:                                       ; preds = %sw.bb.304
  br label %while.body

sw.bb.310:                                        ; preds = %if.end.4
  %62 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call311 = call i32 @load_pop_mark(%struct.UnpicklerObject* %62)
  %cmp312 = icmp slt i32 %call311, 0
  br i1 %cmp312, label %if.then.314, label %if.end.315

if.then.314:                                      ; preds = %sw.bb.310
  br label %sw.epilog

if.end.315:                                       ; preds = %sw.bb.310
  br label %while.body

sw.bb.316:                                        ; preds = %if.end.4
  %63 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call317 = call i32 @load_setitem(%struct.UnpicklerObject* %63)
  %cmp318 = icmp slt i32 %call317, 0
  br i1 %cmp318, label %if.then.320, label %if.end.321

if.then.320:                                      ; preds = %sw.bb.316
  br label %sw.epilog

if.end.321:                                       ; preds = %sw.bb.316
  br label %while.body

sw.bb.322:                                        ; preds = %if.end.4
  %64 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call323 = call i32 @load_setitems(%struct.UnpicklerObject* %64)
  %cmp324 = icmp slt i32 %call323, 0
  br i1 %cmp324, label %if.then.326, label %if.end.327

if.then.326:                                      ; preds = %sw.bb.322
  br label %sw.epilog

if.end.327:                                       ; preds = %sw.bb.322
  br label %while.body

sw.bb.328:                                        ; preds = %if.end.4
  %65 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call329 = call i32 @load_persid(%struct.UnpicklerObject* %65)
  %cmp330 = icmp slt i32 %call329, 0
  br i1 %cmp330, label %if.then.332, label %if.end.333

if.then.332:                                      ; preds = %sw.bb.328
  br label %sw.epilog

if.end.333:                                       ; preds = %sw.bb.328
  br label %while.body

sw.bb.334:                                        ; preds = %if.end.4
  %66 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call335 = call i32 @load_binpersid(%struct.UnpicklerObject* %66)
  %cmp336 = icmp slt i32 %call335, 0
  br i1 %cmp336, label %if.then.338, label %if.end.339

if.then.338:                                      ; preds = %sw.bb.334
  br label %sw.epilog

if.end.339:                                       ; preds = %sw.bb.334
  br label %while.body

sw.bb.340:                                        ; preds = %if.end.4
  %67 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call341 = call i32 @load_reduce(%struct.UnpicklerObject* %67)
  %cmp342 = icmp slt i32 %call341, 0
  br i1 %cmp342, label %if.then.344, label %if.end.345

if.then.344:                                      ; preds = %sw.bb.340
  br label %sw.epilog

if.end.345:                                       ; preds = %sw.bb.340
  br label %while.body

sw.bb.346:                                        ; preds = %if.end.4
  %68 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call347 = call i32 @load_proto(%struct.UnpicklerObject* %68)
  %cmp348 = icmp slt i32 %call347, 0
  br i1 %cmp348, label %if.then.350, label %if.end.351

if.then.350:                                      ; preds = %sw.bb.346
  br label %sw.epilog

if.end.351:                                       ; preds = %sw.bb.346
  br label %while.body

sw.bb.352:                                        ; preds = %if.end.4
  %69 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call353 = call i32 @load_frame(%struct.UnpicklerObject* %69)
  %cmp354 = icmp slt i32 %call353, 0
  br i1 %cmp354, label %if.then.356, label %if.end.357

if.then.356:                                      ; preds = %sw.bb.352
  br label %sw.epilog

if.end.357:                                       ; preds = %sw.bb.352
  br label %while.body

sw.bb.358:                                        ; preds = %if.end.4
  %70 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call359 = call i32 @load_extension(%struct.UnpicklerObject* %70, i32 1)
  %cmp360 = icmp slt i32 %call359, 0
  br i1 %cmp360, label %if.then.362, label %if.end.363

if.then.362:                                      ; preds = %sw.bb.358
  br label %sw.epilog

if.end.363:                                       ; preds = %sw.bb.358
  br label %while.body

sw.bb.364:                                        ; preds = %if.end.4
  %71 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call365 = call i32 @load_extension(%struct.UnpicklerObject* %71, i32 2)
  %cmp366 = icmp slt i32 %call365, 0
  br i1 %cmp366, label %if.then.368, label %if.end.369

if.then.368:                                      ; preds = %sw.bb.364
  br label %sw.epilog

if.end.369:                                       ; preds = %sw.bb.364
  br label %while.body

sw.bb.370:                                        ; preds = %if.end.4
  %72 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call371 = call i32 @load_extension(%struct.UnpicklerObject* %72, i32 4)
  %cmp372 = icmp slt i32 %call371, 0
  br i1 %cmp372, label %if.then.374, label %if.end.375

if.then.374:                                      ; preds = %sw.bb.370
  br label %sw.epilog

if.end.375:                                       ; preds = %sw.bb.370
  br label %while.body

sw.bb.376:                                        ; preds = %if.end.4
  %73 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call377 = call i32 @load_bool(%struct.UnpicklerObject* %73, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0))
  %cmp378 = icmp slt i32 %call377, 0
  br i1 %cmp378, label %if.then.380, label %if.end.381

if.then.380:                                      ; preds = %sw.bb.376
  br label %sw.epilog

if.end.381:                                       ; preds = %sw.bb.376
  br label %while.body

sw.bb.382:                                        ; preds = %if.end.4
  %74 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call383 = call i32 @load_bool(%struct.UnpicklerObject* %74, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0))
  %cmp384 = icmp slt i32 %call383, 0
  br i1 %cmp384, label %if.then.386, label %if.end.387

if.then.386:                                      ; preds = %sw.bb.382
  br label %sw.epilog

if.end.387:                                       ; preds = %sw.bb.382
  br label %while.body

sw.bb.388:                                        ; preds = %if.end.4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.4
  %75 = load i8*, i8** %s, align 8
  %arrayidx389 = getelementptr i8, i8* %75, i64 0
  %76 = load i8, i8* %arrayidx389, align 1
  %conv390 = sext i8 %76 to i32
  %cmp391 = icmp eq i32 %conv390, 0
  br i1 %cmp391, label %if.then.393, label %if.else

if.then.393:                                      ; preds = %sw.default
  %77 = load %struct._object*, %struct._object** @PyExc_EOFError, align 8
  call void @PyErr_SetNone(%struct._object* %77)
  br label %if.end.398

if.else:                                          ; preds = %sw.default
  %call394 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call394, %struct.PickleState** %st, align 8
  %78 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %78, i32 0, i32 2
  %79 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  %80 = load i8*, i8** %s, align 8
  %arrayidx395 = getelementptr i8, i8* %80, i64 0
  %81 = load i8, i8* %arrayidx395, align 1
  %conv396 = sext i8 %81 to i32
  %call397 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %79, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.96, i32 0, i32 0), i32 %conv396)
  br label %if.end.398

if.end.398:                                       ; preds = %if.else, %if.then.393
  store %struct._object* null, %struct._object** %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.388, %if.then.386, %if.then.380, %if.then.374, %if.then.368, %if.then.362, %if.then.356, %if.then.350, %if.then.344, %if.then.338, %if.then.332, %if.then.326, %if.then.320, %if.then.314, %if.then.308, %if.then.302, %if.then.296, %if.then.290, %if.then.284, %if.then.278, %if.then.272, %if.then.266, %if.then.260, %if.then.254, %if.then.248, %if.then.242, %if.then.236, %if.then.230, %if.then.224, %if.then.218, %if.then.212, %if.then.206, %if.then.200, %if.then.194, %if.then.188, %if.then.182, %if.then.176, %if.then.170, %if.then.164, %if.then.158, %if.then.152, %if.then.146, %if.then.140, %if.then.134, %if.then.128, %if.then.122, %if.then.116, %if.then.110, %if.then.104, %if.then.98, %if.then.92, %if.then.86, %if.then.80, %if.then.74, %if.then.68, %if.then.62, %if.then.56, %if.then.50, %if.then.44, %if.then.38, %if.then.32, %if.then.26, %if.then.20, %if.then.14, %if.then.8
  br label %while.end

while.end:                                        ; preds = %sw.epilog, %if.then.3
  %call399 = call %struct._object* @PyErr_Occurred()
  %tobool400 = icmp ne %struct._object* %call399, null
  br i1 %tobool400, label %if.then.401, label %if.end.402

if.then.401:                                      ; preds = %while.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.402:                                       ; preds = %while.end
  %82 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call403 = call i32 @_Unpickler_SkipConsumed(%struct.UnpicklerObject* %82)
  %cmp404 = icmp slt i32 %call403, 0
  br i1 %cmp404, label %if.then.406, label %if.end.407

if.then.406:                                      ; preds = %if.end.402
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.407:                                       ; preds = %if.end.402
  br label %do.body

do.body:                                          ; preds = %if.end.407
  %83 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack408 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %83, i32 0, i32 1
  %84 = load %struct.Pdata*, %struct.Pdata** %stack408, align 8
  %call409 = call %struct._object* @Pdata_pop(%struct.Pdata* %84)
  store %struct._object* %call409, %struct._object** %value, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %85 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %85, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.406, %if.then.401, %if.end.398
  %86 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %86
}

; Function Attrs: nounwind uwtable
define internal %struct._object** @_Unpickler_NewMemo(i64 %new_size) #0 {
entry:
  %retval = alloca %struct._object**, align 8
  %new_size.addr = alloca i64, align 8
  %memo = alloca %struct._object**, align 8
  store i64 %new_size, i64* %new_size.addr, align 8
  %0 = load i64, i64* %new_size.addr, align 8
  %mul = mul i64 %0, 8
  %call = call i8* @PyMem_Malloc(i64 %mul)
  %1 = bitcast i8* %call to %struct._object**
  store %struct._object** %1, %struct._object*** %memo, align 8
  %2 = load %struct._object**, %struct._object*** %memo, align 8
  %cmp = icmp eq %struct._object** %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_NoMemory()
  store %struct._object** null, %struct._object*** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object**, %struct._object*** %memo, align 8
  %4 = bitcast %struct._object** %3 to i8*
  %5 = load i64, i64* %new_size.addr, align 8
  %mul2 = mul i64 %5, 8
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 %mul2, i32 8, i1 false)
  %6 = load %struct._object**, %struct._object*** %memo, align 8
  store %struct._object** %6, %struct._object*** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct._object**, %struct._object*** %retval
  ret %struct._object** %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @Pdata_New() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self = alloca %struct.Pdata*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %call = call %struct._object* @_PyObject_New(%struct._typeobject* @Pdata_Type)
  %0 = bitcast %struct._object* %call to %struct.Pdata*
  store %struct.Pdata* %0, %struct.Pdata** %self, align 8
  %tobool = icmp ne %struct.Pdata* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.Pdata*, %struct.Pdata** %self, align 8
  %2 = bitcast %struct.Pdata* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  store i64 0, i64* %ob_size, align 8
  %3 = load %struct.Pdata*, %struct.Pdata** %self, align 8
  %allocated = getelementptr inbounds %struct.Pdata, %struct.Pdata* %3, i32 0, i32 2
  store i64 8, i64* %allocated, align 8
  %4 = load %struct.Pdata*, %struct.Pdata** %self, align 8
  %allocated1 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %4, i32 0, i32 2
  %5 = load i64, i64* %allocated1, align 8
  %mul = mul i64 %5, 8
  %call2 = call i8* @PyMem_Malloc(i64 %mul)
  %6 = bitcast i8* %call2 to %struct._object**
  %7 = load %struct.Pdata*, %struct.Pdata** %self, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %7, i32 0, i32 1
  store %struct._object** %6, %struct._object*** %data, align 8
  %8 = load %struct.Pdata*, %struct.Pdata** %self, align 8
  %data3 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %8, i32 0, i32 1
  %9 = load %struct._object**, %struct._object*** %data3, align 8
  %tobool4 = icmp ne %struct._object** %9, null
  br i1 %tobool4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %10 = load %struct.Pdata*, %struct.Pdata** %self, align 8
  %11 = bitcast %struct.Pdata* %10 to %struct._object*
  store %struct._object* %11, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.6
  %12 = load %struct.Pdata*, %struct.Pdata** %self, align 8
  %13 = bitcast %struct.Pdata* %12 to %struct._object*
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  %call9 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call9, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.5, %if.then
  %20 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %20
}

declare %struct._object* @_PyObject_New(%struct._typeobject*) #1

declare i8* @_PyMem_Strdup(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @Pdata_clear(%struct.Pdata* %self, i64 %clearto) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.Pdata*, align 8
  %clearto.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.Pdata* %self, %struct.Pdata** %self.addr, align 8
  store i64 %clearto, i64* %clearto.addr, align 8
  %0 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %1 = bitcast %struct.Pdata* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %i, align 8
  %3 = load i64, i64* %clearto.addr, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @stack_underflow()
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %clearto.addr, align 8
  %5 = load i64, i64* %i, align 8
  %cmp1 = icmp sge i64 %4, %5
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %do.end.15, %if.end.3
  %6 = load i64, i64* %i, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %i, align 8
  %7 = load i64, i64* %clearto.addr, align 8
  %cmp4 = icmp sge i64 %dec, %7
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %8 = load i64, i64* %i, align 8
  %9 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %9, i32 0, i32 1
  %10 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %10, i64 %8
  %11 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %11, %struct._object** %_py_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp5 = icmp ne %struct._object* %12, null
  br i1 %cmp5, label %if.then.6, label %if.end.14

if.then.6:                                        ; preds = %do.body
  %13 = load i64, i64* %i, align 8
  %14 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %14, i32 0, i32 1
  %15 = load %struct._object**, %struct._object*** %data7, align 8
  %arrayidx8 = getelementptr %struct._object*, %struct._object** %15, i64 %13
  store %struct._object* null, %struct._object** %arrayidx8, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.then.6
  %16 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %dec10 = add i64 %18, -1
  store i64 %dec10, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec10, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body.9
  br label %if.end.13

if.else:                                          ; preds = %do.body.9
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %if.end.14

if.end.14:                                        ; preds = %do.end, %do.body
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load i64, i64* %clearto.addr, align 8
  %24 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %25 = bitcast %struct.Pdata* %24 to %struct.PyVarObject*
  %ob_size16 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1
  store i64 %23, i64* %ob_size16, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.2, %if.then
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i64 @_Unpickler_Read(%struct.UnpicklerObject* %self, i8** %s, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %s.addr = alloca i8**, align 8
  %n.addr = alloca i64, align 8
  %num_read = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i8** %s, i8*** %s.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 10
  %1 = load i64, i64* %next_read_idx, align 8
  %2 = load i64, i64* %n.addr, align 8
  %add = add i64 %1, %2
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_len = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 9
  %4 = load i64, i64* %input_len, align 8
  %cmp = icmp sle i64 %add, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 7
  %6 = load i8*, i8** %input_buffer, align 8
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 10
  %8 = load i64, i64* %next_read_idx1, align 8
  %add.ptr = getelementptr i8, i8* %6, i64 %8
  %9 = load i8**, i8*** %s.addr, align 8
  store i8* %add.ptr, i8** %9, align 8
  %10 = load i64, i64* %n.addr, align 8
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 10
  %12 = load i64, i64* %next_read_idx2, align 8
  %add3 = add i64 %12, %10
  store i64 %add3, i64* %next_read_idx2, align 8
  %13 = load i64, i64* %n.addr, align 8
  store i64 %13, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 12
  %15 = load %struct._object*, %struct._object** %read, align 8
  %tobool = icmp ne %struct._object* %15, null
  br i1 %tobool, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %16 = load %struct._object*, %struct._object** @PyExc_EOFError, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.98, i32 0, i32 0))
  store i64 -1, i64* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %18 = load i64, i64* %n.addr, align 8
  %call6 = call i64 @_Unpickler_ReadFromFile(%struct.UnpicklerObject* %17, i64 %18)
  store i64 %call6, i64* %num_read, align 8
  %19 = load i64, i64* %num_read, align 8
  %cmp7 = icmp slt i64 %19, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  store i64 -1, i64* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.5
  %20 = load i64, i64* %num_read, align 8
  %21 = load i64, i64* %n.addr, align 8
  %cmp10 = icmp slt i64 %20, %21
  br i1 %cmp10, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %if.end.9
  %22 = load %struct._object*, %struct._object** @PyExc_EOFError, align 8
  %call12 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %22, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.98, i32 0, i32 0))
  store i64 -1, i64* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.9
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_buffer14 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %23, i32 0, i32 7
  %24 = load i8*, i8** %input_buffer14, align 8
  %25 = load i8**, i8*** %s.addr, align 8
  store i8* %24, i8** %25, align 8
  %26 = load i64, i64* %n.addr, align 8
  %27 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx15 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %27, i32 0, i32 10
  store i64 %26, i64* %next_read_idx15, align 8
  %28 = load i64, i64* %n.addr, align 8
  store i64 %28, i64* %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.11, %if.then.8, %if.then.4, %if.then
  %29 = load i64, i64* %retval
  ret i64 %29
}

; Function Attrs: nounwind uwtable
define internal i32 @load_none(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %0, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %call = call i32 @Pdata_push(%struct.Pdata* %2, %struct._object* @_Py_NoneStruct)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @load_binint(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 4)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %2 = load i8*, i8** %s, align 8
  %call1 = call i32 @load_binintx(%struct.UnpicklerObject* %1, i8* %2, i32 4)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @load_binint1(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 1)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %2 = load i8*, i8** %s, align 8
  %call1 = call i32 @load_binintx(%struct.UnpicklerObject* %1, i8* %2, i32 1)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @load_binint2(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 2)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %2 = load i8*, i8** %s, align 8
  %call1 = call i32 @load_binintx(%struct.UnpicklerObject* %1, i8* %2, i32 2)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @load_int(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %endptr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %x = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %1, 2
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @bad_readline()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %call5 = call i32* @__errno_location() #8
  store i32 0, i32* %call5, align 4
  %2 = load i8*, i8** %s, align 8
  %call6 = call i64 @strtol(i8* %2, i8** %endptr, i32 0) #2
  store i64 %call6, i64* %x, align 8
  %call7 = call i32* @__errno_location() #8
  %3 = load i32, i32* %call7, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.4
  %4 = load i8*, i8** %endptr, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %cmp8 = icmp ne i32 %conv, 10
  br i1 %cmp8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i8*, i8** %endptr, align 8
  %7 = load i8, i8* %6, align 1
  %conv10 = sext i8 %7 to i32
  %cmp11 = icmp ne i32 %conv10, 0
  br i1 %cmp11, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %land.lhs.true, %if.end.4
  %call14 = call i32* @__errno_location() #8
  store i32 0, i32* %call14, align 4
  %8 = load i8*, i8** %s, align 8
  %call15 = call %struct._object* @PyLong_FromString(i8* %8, i8** null, i32 0)
  store %struct._object* %call15, %struct._object** %value, align 8
  %9 = load %struct._object*, %struct._object** %value, align 8
  %cmp16 = icmp eq %struct._object* %9, null
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.then.13
  %10 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.99, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.then.13
  br label %if.end.41

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %11 = load i64, i64* %len, align 8
  %cmp20 = icmp eq i64 %11, 3
  br i1 %cmp20, label %land.lhs.true.22, label %if.else.34

land.lhs.true.22:                                 ; preds = %if.else
  %12 = load i64, i64* %x, align 8
  %cmp23 = icmp eq i64 %12, 0
  br i1 %cmp23, label %if.then.28, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %land.lhs.true.22
  %13 = load i64, i64* %x, align 8
  %cmp26 = icmp eq i64 %13, 1
  br i1 %cmp26, label %if.then.28, label %if.else.34

if.then.28:                                       ; preds = %lor.lhs.false.25, %land.lhs.true.22
  %14 = load i64, i64* %x, align 8
  %call29 = call %struct._object* @PyBool_FromLong(i64 %14)
  store %struct._object* %call29, %struct._object** %value, align 8
  %cmp30 = icmp eq %struct._object* %call29, null
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.28
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.then.28
  br label %if.end.40

if.else.34:                                       ; preds = %lor.lhs.false.25, %if.else
  %15 = load i64, i64* %x, align 8
  %call35 = call %struct._object* @PyLong_FromLong(i64 %15)
  store %struct._object* %call35, %struct._object** %value, align 8
  %cmp36 = icmp eq %struct._object* %call35, null
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.else.34
  store i32 -1, i32* %retval
  br label %return

if.end.39:                                        ; preds = %if.else.34
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.end.33
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.end.19
  br label %do.body

do.body:                                          ; preds = %if.end.41
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %16, i32 0, i32 1
  %17 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %18 = load %struct._object*, %struct._object** %value, align 8
  %call42 = call i32 @Pdata_push(%struct.Pdata* %17, %struct._object* %18)
  %cmp43 = icmp slt i32 %call42, 0
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.46:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.46
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.45, %if.then.38, %if.then.32, %if.then.18, %if.then.2, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @load_long(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %1, 2
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @bad_readline()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load i64, i64* %len, align 8
  %sub = sub i64 %2, 2
  %3 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 %sub
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp5 = icmp eq i32 %conv, 76
  br i1 %cmp5, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end.4
  %5 = load i64, i64* %len, align 8
  %sub8 = sub i64 %5, 2
  %6 = load i8*, i8** %s, align 8
  %arrayidx9 = getelementptr i8, i8* %6, i64 %sub8
  store i8 0, i8* %arrayidx9, align 1
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.7, %if.end.4
  %7 = load i8*, i8** %s, align 8
  %call11 = call %struct._object* @PyLong_FromString(i8* %7, i8** null, i32 0)
  store %struct._object* %call11, %struct._object** %value, align 8
  %8 = load %struct._object*, %struct._object** %value, align 8
  %cmp12 = icmp eq %struct._object* %8, null
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.10
  store i32 -1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.10
  br label %do.body

do.body:                                          ; preds = %if.end.15
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 1
  %10 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %11 = load %struct._object*, %struct._object** %value, align 8
  %call16 = call i32 @Pdata_push(%struct.Pdata* %10, %struct._object* %11)
  %cmp17 = icmp slt i32 %call16, 0
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.20
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.19, %if.then.14, %if.then.2, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @load_counted_long(%struct.UnpicklerObject* %self, i32 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %size.addr = alloca i32, align 4
  %value = alloca %struct._object*, align 8
  %nbytes = alloca i8*, align 8
  %pdata = alloca i8*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load i32, i32* %size.addr, align 4
  %conv = sext i32 %1 to i64
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %nbytes, i64 %conv)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %nbytes, align 8
  %3 = load i32, i32* %size.addr, align 4
  %call2 = call i64 @calc_binint(i8* %2, i32 %3)
  %conv3 = trunc i64 %call2 to i32
  store i32 %conv3, i32* %size.addr, align 4
  %4 = load i32, i32* %size.addr, align 4
  %cmp4 = icmp slt i32 %4, 0
  br i1 %cmp4, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %call7 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call7, %struct.PickleState** %st, align 8
  %5 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.101, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %7 = load i32, i32* %size.addr, align 4
  %cmp9 = icmp eq i32 %7, 0
  br i1 %cmp9, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.end.8
  %call12 = call %struct._object* @PyLong_FromLong(i64 0)
  store %struct._object* %call12, %struct._object** %value, align 8
  br label %if.end.21

if.else:                                          ; preds = %if.end.8
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %9 = load i32, i32* %size.addr, align 4
  %conv13 = sext i32 %9 to i64
  %call14 = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %8, i8** %pdata, i64 %conv13)
  %cmp15 = icmp slt i64 %call14, 0
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %if.else
  %10 = load i8*, i8** %pdata, align 8
  %11 = load i32, i32* %size.addr, align 4
  %conv19 = sext i32 %11 to i64
  %call20 = call %struct._object* @_PyLong_FromByteArray(i8* %10, i64 %conv19, i32 1, i32 1)
  store %struct._object* %call20, %struct._object** %value, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.18, %if.then.11
  %12 = load %struct._object*, %struct._object** %value, align 8
  %cmp22 = icmp eq %struct._object* %12, null
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.21
  store i32 -1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  br label %do.body

do.body:                                          ; preds = %if.end.25
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %13, i32 0, i32 1
  %14 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %15 = load %struct._object*, %struct._object** %value, align 8
  %call26 = call i32 @Pdata_push(%struct.Pdata* %14, %struct._object* %15)
  %cmp27 = icmp slt i32 %call26, 0
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.30
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.29, %if.then.24, %if.then.17, %if.then.6, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal i32 @load_float(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %endptr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %d = alloca double, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %1, 2
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @bad_readline()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %call5 = call i32* @__errno_location() #8
  store i32 0, i32* %call5, align 4
  %2 = load i8*, i8** %s, align 8
  %3 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %call6 = call double @PyOS_string_to_double(i8* %2, i8** %endptr, %struct._object* %3)
  store double %call6, double* %d, align 8
  %4 = load double, double* %d, align 8
  %cmp7 = fcmp oeq double %4, -1.000000e+00
  br i1 %cmp7, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.end.4
  %call8 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call8, null
  br i1 %tobool, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %land.lhs.true, %if.end.4
  %5 = load i8*, i8** %endptr, align 8
  %arrayidx = getelementptr i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp11 = icmp ne i32 %conv, 10
  br i1 %cmp11, label %land.lhs.true.13, label %if.end.19

land.lhs.true.13:                                 ; preds = %if.end.10
  %7 = load i8*, i8** %endptr, align 8
  %arrayidx14 = getelementptr i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %8 to i32
  %cmp16 = icmp ne i32 %conv15, 0
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true.13
  %9 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.102, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %land.lhs.true.13, %if.end.10
  %10 = load double, double* %d, align 8
  %call20 = call %struct._object* @PyFloat_FromDouble(double %10)
  store %struct._object* %call20, %struct._object** %value, align 8
  %11 = load %struct._object*, %struct._object** %value, align 8
  %cmp21 = icmp eq %struct._object* %11, null
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.19
  store i32 -1, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.end.19
  br label %do.body

do.body:                                          ; preds = %if.end.24
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %12, i32 0, i32 1
  %13 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %14 = load %struct._object*, %struct._object** %value, align 8
  %call25 = call i32 @Pdata_push(%struct.Pdata* %13, %struct._object* %14)
  %cmp26 = icmp slt i32 %call25, 0
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.29:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.28, %if.then.23, %if.then.18, %if.then.9, %if.then.2, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @load_binfloat(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %x = alloca double, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 8)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s, align 8
  %call1 = call double @_PyFloat_Unpack8(i8* %1, i32 0)
  store double %call1, double* %x, align 8
  %2 = load double, double* %x, align 8
  %cmp2 = fcmp oeq double %2, -1.000000e+00
  br i1 %cmp2, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call3 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call3, null
  br i1 %tobool, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %3 = load double, double* %x, align 8
  %call6 = call %struct._object* @PyFloat_FromDouble(double %3)
  store %struct._object* %call6, %struct._object** %value, align 8
  %cmp7 = icmp eq %struct._object* %call6, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.5
  br label %do.body

do.body:                                          ; preds = %if.end.9
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 1
  %5 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %6 = load %struct._object*, %struct._object** %value, align 8
  %call10 = call i32 @Pdata_push(%struct.Pdata* %5, %struct._object* %6)
  %cmp11 = icmp slt i32 %call10, 0
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.12, %if.then.8, %if.then.4, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @load_counted_binbytes(%struct.UnpicklerObject* %self, i32 %nbytes) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %nbytes.addr = alloca i32, align 4
  %bytes = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load i32, i32* %nbytes.addr, align 4
  %conv = sext i32 %1 to i64
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 %conv)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %s, align 8
  %3 = load i32, i32* %nbytes.addr, align 4
  %call2 = call i64 @calc_binsize(i8* %2, i32 %3)
  store i64 %call2, i64* %size, align 8
  %4 = load i64, i64* %size, align 8
  %cmp3 = icmp slt i64 %4, 0
  br i1 %cmp3, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %call6 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.103, i32 0, i32 0), i64 9223372036854775807)
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %7 = load i64, i64* %size, align 8
  %call8 = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %6, i8** %s, i64 %7)
  %cmp9 = icmp slt i64 %call8, 0
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.7
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.7
  %8 = load i8*, i8** %s, align 8
  %9 = load i64, i64* %size, align 8
  %call13 = call %struct._object* @PyBytes_FromStringAndSize(i8* %8, i64 %9)
  store %struct._object* %call13, %struct._object** %bytes, align 8
  %10 = load %struct._object*, %struct._object** %bytes, align 8
  %cmp14 = icmp eq %struct._object* %10, null
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.12
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.end.17
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 1
  %12 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %13 = load %struct._object*, %struct._object** %bytes, align 8
  %call18 = call i32 @Pdata_push(%struct.Pdata* %12, %struct._object* %13)
  %cmp19 = icmp slt i32 %call18, 0
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.22
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.21, %if.then.16, %if.then.11, %if.then.5, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @load_counted_binstring(%struct.UnpicklerObject* %self, i32 %nbytes) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %nbytes.addr = alloca i32, align 4
  %obj = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %s = alloca i8*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load i32, i32* %nbytes.addr, align 4
  %conv = sext i32 %1 to i64
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 %conv)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %s, align 8
  %3 = load i32, i32* %nbytes.addr, align 4
  %call2 = call i64 @calc_binsize(i8* %2, i32 %3)
  store i64 %call2, i64* %size, align 8
  %4 = load i64, i64* %size, align 8
  %cmp3 = icmp slt i64 %4, 0
  br i1 %cmp3, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %call6 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call6, %struct.PickleState** %st, align 8
  %5 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  %call7 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %6, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.104, i32 0, i32 0), i64 9223372036854775807)
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %8 = load i64, i64* %size, align 8
  %call9 = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %7, i8** %s, i64 %8)
  %cmp10 = icmp slt i64 %call9, 0
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.8
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 15
  %10 = load i8*, i8** %encoding, align 8
  %call14 = call i32 @strcmp(i8* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.105, i32 0, i32 0)) #7
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.end.13
  %11 = load i8*, i8** %s, align 8
  %12 = load i64, i64* %size, align 8
  %call18 = call %struct._object* @PyBytes_FromStringAndSize(i8* %11, i64 %12)
  store %struct._object* %call18, %struct._object** %obj, align 8
  br label %if.end.21

if.else:                                          ; preds = %if.end.13
  %13 = load i8*, i8** %s, align 8
  %14 = load i64, i64* %size, align 8
  %15 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding19 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %15, i32 0, i32 15
  %16 = load i8*, i8** %encoding19, align 8
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %errors = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %17, i32 0, i32 16
  %18 = load i8*, i8** %errors, align 8
  %call20 = call %struct._object* @PyUnicode_Decode(i8* %13, i64 %14, i8* %16, i8* %18)
  store %struct._object* %call20, %struct._object** %obj, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.17
  %19 = load %struct._object*, %struct._object** %obj, align 8
  %cmp22 = icmp eq %struct._object* %19, null
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.21
  store i32 -1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  br label %do.body

do.body:                                          ; preds = %if.end.25
  %20 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %20, i32 0, i32 1
  %21 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %22 = load %struct._object*, %struct._object** %obj, align 8
  %call26 = call i32 @Pdata_push(%struct.Pdata* %21, %struct._object* %22)
  %cmp27 = icmp slt i32 %call26, 0
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.30
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.29, %if.then.24, %if.then.12, %if.then.5, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal i32 @load_string(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %bytes = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %p = alloca i8*, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %dec = add i64 %1, -1
  store i64 %dec, i64* %len, align 8
  %2 = load i64, i64* %len, align 8
  %cmp1 = icmp sge i64 %2, 2
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %3 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %5 = load i64, i64* %len, align 8
  %sub = sub i64 %5, 1
  %6 = load i8*, i8** %s, align 8
  %arrayidx2 = getelementptr i8, i8* %6, i64 %sub
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %7 to i32
  %cmp4 = icmp eq i32 %conv, %conv3
  br i1 %cmp4, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %8 = load i8*, i8** %s, align 8
  %arrayidx7 = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %9 to i32
  %cmp9 = icmp eq i32 %conv8, 39
  br i1 %cmp9, label %if.then.15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.6
  %10 = load i8*, i8** %s, align 8
  %arrayidx11 = getelementptr i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  %cmp13 = icmp eq i32 %conv12, 34
  br i1 %cmp13, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %lor.lhs.false, %land.lhs.true.6
  %12 = load i8*, i8** %s, align 8
  %add.ptr = getelementptr i8, i8* %12, i64 1
  store i8* %add.ptr, i8** %p, align 8
  %13 = load i64, i64* %len, align 8
  %sub16 = sub i64 %13, 2
  store i64 %sub16, i64* %len, align 8
  br label %if.end.18

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true, %if.end
  %call17 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call17, %struct.PickleState** %st, align 8
  %14 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %14, i32 0, i32 2
  %15 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.106, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %if.then.15
  %16 = load i8*, i8** %p, align 8
  %17 = load i64, i64* %len, align 8
  %call19 = call %struct._object* @PyBytes_DecodeEscape(i8* %16, i64 %17, i8* null, i64 0, i8* null)
  store %struct._object* %call19, %struct._object** %bytes, align 8
  %18 = load %struct._object*, %struct._object** %bytes, align 8
  %cmp20 = icmp eq %struct._object* %18, null
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.18
  store i32 -1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.end.18
  %19 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %19, i32 0, i32 15
  %20 = load i8*, i8** %encoding, align 8
  %call24 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.105, i32 0, i32 0)) #7
  %cmp25 = icmp eq i32 %call24, 0
  br i1 %cmp25, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %if.end.23
  %21 = load %struct._object*, %struct._object** %bytes, align 8
  store %struct._object* %21, %struct._object** %obj, align 8
  br label %if.end.41

if.else.28:                                       ; preds = %if.end.23
  %22 = load %struct._object*, %struct._object** %bytes, align 8
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding29 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %23, i32 0, i32 15
  %24 = load i8*, i8** %encoding29, align 8
  %25 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %errors = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %25, i32 0, i32 16
  %26 = load i8*, i8** %errors, align 8
  %call30 = call %struct._object* @PyUnicode_FromEncodedObject(%struct._object* %22, i8* %24, i8* %26)
  store %struct._object* %call30, %struct._object** %obj, align 8
  br label %do.body

do.body:                                          ; preds = %if.else.28
  %27 = load %struct._object*, %struct._object** %bytes, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt, align 8
  %dec31 = add i64 %29, -1
  store i64 %dec31, i64* %ob_refcnt, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body
  br label %if.end.36

if.else.35:                                       ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %32(%struct._object* %33)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end

do.end:                                           ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %obj, align 8
  %cmp37 = icmp eq %struct._object* %34, null
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.40:                                        ; preds = %do.end
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %if.then.27
  br label %do.body.42

do.body.42:                                       ; preds = %if.end.41
  %35 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %35, i32 0, i32 1
  %36 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %37 = load %struct._object*, %struct._object** %obj, align 8
  %call43 = call i32 @Pdata_push(%struct.Pdata* %36, %struct._object* %37)
  %cmp44 = icmp slt i32 %call43, 0
  br i1 %cmp44, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %do.body.42
  store i32 -1, i32* %retval
  br label %return

if.end.47:                                        ; preds = %do.body.42
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.48, %if.then.46, %if.then.39, %if.then.22, %if.else, %if.then
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: nounwind uwtable
define internal i32 @load_unicode(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %str = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %1, 1
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @bad_readline()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load i8*, i8** %s, align 8
  %3 = load i64, i64* %len, align 8
  %sub = sub i64 %3, 1
  %call5 = call %struct._object* @PyUnicode_DecodeRawUnicodeEscape(i8* %2, i64 %sub, i8* null)
  store %struct._object* %call5, %struct._object** %str, align 8
  %4 = load %struct._object*, %struct._object** %str, align 8
  %cmp6 = icmp eq %struct._object* %4, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.end.8
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 1
  %6 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %7 = load %struct._object*, %struct._object** %str, align 8
  %call9 = call i32 @Pdata_push(%struct.Pdata* %6, %struct._object* %7)
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.12
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.11, %if.then.7, %if.then.2, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @load_counted_binunicode(%struct.UnpicklerObject* %self, i32 %nbytes) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %nbytes.addr = alloca i32, align 4
  %str = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load i32, i32* %nbytes.addr, align 4
  %conv = sext i32 %1 to i64
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 %conv)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %s, align 8
  %3 = load i32, i32* %nbytes.addr, align 4
  %call2 = call i64 @calc_binsize(i8* %2, i32 %3)
  store i64 %call2, i64* %size, align 8
  %4 = load i64, i64* %size, align 8
  %cmp3 = icmp slt i64 %4, 0
  br i1 %cmp3, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %call6 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.107, i32 0, i32 0), i64 9223372036854775807)
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %7 = load i64, i64* %size, align 8
  %call8 = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %6, i8** %s, i64 %7)
  %cmp9 = icmp slt i64 %call8, 0
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.7
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.7
  %8 = load i8*, i8** %s, align 8
  %9 = load i64, i64* %size, align 8
  %call13 = call %struct._object* @PyUnicode_DecodeUTF8(i8* %8, i64 %9, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.40, i32 0, i32 0))
  store %struct._object* %call13, %struct._object** %str, align 8
  %10 = load %struct._object*, %struct._object** %str, align 8
  %cmp14 = icmp eq %struct._object* %10, null
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.12
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.end.17
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 1
  %12 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %13 = load %struct._object*, %struct._object** %str, align 8
  %call18 = call i32 @Pdata_push(%struct.Pdata* %12, %struct._object* %13)
  %cmp19 = icmp slt i32 %call18, 0
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.22
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.21, %if.then.16, %if.then.11, %if.then.5, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @load_counted_tuple(%struct.UnpicklerObject* %self, i32 %len) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %len.addr = alloca i32, align 4
  %tuple = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call %struct._object* @PyTuple_New(i64 %conv)
  store %struct._object* %call, %struct._object** %tuple, align 8
  %1 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end.8, %if.end
  %2 = load i32, i32* %len.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %len.addr, align 4
  %cmp2 = icmp sge i32 %dec, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 1
  %4 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %call4 = call %struct._object* @Pdata_pop(%struct.Pdata* %4)
  store %struct._object* %call4, %struct._object** %item, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %item, align 8
  %cmp5 = icmp eq %struct._object* %5, null
  br i1 %cmp5, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %do.end
  %6 = load %struct._object*, %struct._object** %item, align 8
  %7 = load i32, i32* %len.addr, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct._object*, %struct._object** %tuple, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %9, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom
  store %struct._object* %6, %struct._object** %arrayidx, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body.9

do.body.9:                                        ; preds = %while.end
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack10 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 1
  %11 = load %struct.Pdata*, %struct.Pdata** %stack10, align 8
  %12 = load %struct._object*, %struct._object** %tuple, align 8
  %call11 = call i32 @Pdata_push(%struct.Pdata* %11, %struct._object* %12)
  %cmp12 = icmp slt i32 %call11, 0
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %do.body.9
  store i32 -1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %do.body.9
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.16, %if.then.14, %if.then.7, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @load_tuple(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %tuple = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %i, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = load i64, i64* %i, align 8
  %call1 = call %struct._object* @Pdata_poptuple(%struct.Pdata* %2, i64 %3)
  store %struct._object* %call1, %struct._object** %tuple, align 8
  %4 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 1
  %6 = load %struct.Pdata*, %struct.Pdata** %stack5, align 8
  %7 = load %struct._object*, %struct._object** %tuple, align 8
  %call6 = call i32 @Pdata_push(%struct.Pdata* %6, %struct._object* %7)
  %cmp7 = icmp slt i32 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.8, %if.then.3, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @load_empty_list(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %list = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %call = call %struct._object* @PyList_New(i64 0)
  store %struct._object* %call, %struct._object** %list, align 8
  %cmp = icmp eq %struct._object* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = load %struct._object*, %struct._object** %list, align 8
  %call1 = call i32 @Pdata_push(%struct.Pdata* %1, %struct._object* %2)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @load_list(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %list = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %i, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = load i64, i64* %i, align 8
  %call1 = call %struct._object* @Pdata_poplist(%struct.Pdata* %2, i64 %3)
  store %struct._object* %call1, %struct._object** %list, align 8
  %4 = load %struct._object*, %struct._object** %list, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 1
  %6 = load %struct.Pdata*, %struct.Pdata** %stack5, align 8
  %7 = load %struct._object*, %struct._object** %list, align 8
  %call6 = call i32 @Pdata_push(%struct.Pdata* %6, %struct._object* %7)
  %cmp7 = icmp slt i32 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.8, %if.then.3, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @load_empty_dict(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %dict = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %dict, align 8
  %cmp = icmp eq %struct._object* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = load %struct._object*, %struct._object** %dict, align 8
  %call1 = call i32 @Pdata_push(%struct.Pdata* %1, %struct._object* %2)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @load_dict(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %dict = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %i, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = bitcast %struct.Pdata* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  store i64 %4, i64* %j, align 8
  %call1 = call %struct._object* @PyDict_New()
  store %struct._object* %call1, %struct._object** %dict, align 8
  %cmp2 = icmp eq %struct._object* %call1, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load i64, i64* %i, align 8
  %add = add i64 %5, 1
  store i64 %add, i64* %k, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.4
  %6 = load i64, i64* %k, align 8
  %7 = load i64, i64* %j, align 8
  %cmp5 = icmp slt i64 %6, %7
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i64, i64* %k, align 8
  %sub = sub i64 %8, 1
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 1
  %10 = load %struct.Pdata*, %struct.Pdata** %stack6, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %10, i32 0, i32 1
  %11 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %11, i64 %sub
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %12, %struct._object** %key, align 8
  %13 = load i64, i64* %k, align 8
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 1
  %15 = load %struct.Pdata*, %struct.Pdata** %stack7, align 8
  %data8 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %15, i32 0, i32 1
  %16 = load %struct._object**, %struct._object*** %data8, align 8
  %arrayidx9 = getelementptr %struct._object*, %struct._object** %16, i64 %13
  %17 = load %struct._object*, %struct._object** %arrayidx9, align 8
  store %struct._object* %17, %struct._object** %value, align 8
  %18 = load %struct._object*, %struct._object** %dict, align 8
  %19 = load %struct._object*, %struct._object** %key, align 8
  %20 = load %struct._object*, %struct._object** %value, align 8
  %call10 = call i32 @PyDict_SetItem(%struct._object* %18, %struct._object* %19, %struct._object* %20)
  %cmp11 = icmp slt i32 %call10, 0
  br i1 %cmp11, label %if.then.12, label %if.end.16

if.then.12:                                       ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %if.then.12
  %21 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %23, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %26(%struct._object* %27)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.16
  %28 = load i64, i64* %k, align 8
  %add17 = add i64 %28, 2
  store i64 %add17, i64* %k, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %29 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack18 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %29, i32 0, i32 1
  %30 = load %struct.Pdata*, %struct.Pdata** %stack18, align 8
  %31 = load i64, i64* %i, align 8
  %call19 = call i32 @Pdata_clear(%struct.Pdata* %30, i64 %31)
  br label %do.body.20

do.body.20:                                       ; preds = %for.end
  %32 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack21 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %32, i32 0, i32 1
  %33 = load %struct.Pdata*, %struct.Pdata** %stack21, align 8
  %34 = load %struct._object*, %struct._object** %dict, align 8
  %call22 = call i32 @Pdata_push(%struct.Pdata* %33, %struct._object* %34)
  %cmp23 = icmp slt i32 %call22, 0
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %do.body.20
  store i32 -1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %do.body.20
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.26, %if.then.24, %do.end, %if.then.3, %if.then
  %35 = load i32, i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal i32 @load_empty_set(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %set = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %call = call %struct._object* @PySet_New(%struct._object* null)
  store %struct._object* %call, %struct._object** %set, align 8
  %cmp = icmp eq %struct._object* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = load %struct._object*, %struct._object** %set, align 8
  %call1 = call i32 @Pdata_push(%struct.Pdata* %1, %struct._object* %2)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3, %if.then
  %3 = load i32, i32* %retval
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define internal i32 @load_additems(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %set = alloca %struct._object*, align 8
  %mark = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %items = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %add_func = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %_py_decref_tmp40 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %mark, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = bitcast %struct.Pdata* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  store i64 %4, i64* %len, align 8
  %5 = load i64, i64* %mark, align 8
  %6 = load i64, i64* %len, align 8
  %cmp = icmp sgt i64 %5, %6
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %7 = load i64, i64* %mark, align 8
  %cmp1 = icmp sle i64 %7, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call2 = call i32 @stack_underflow()
  store i32 %call2, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load i64, i64* %len, align 8
  %9 = load i64, i64* %mark, align 8
  %cmp3 = icmp eq i64 %8, %9
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %10 = load i64, i64* %mark, align 8
  %sub = sub i64 %10, 1
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 1
  %12 = load %struct.Pdata*, %struct.Pdata** %stack6, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %12, i32 0, i32 1
  %13 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %13, i64 %sub
  %14 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %14, %struct._object** %set, align 8
  %15 = load %struct._object*, %struct._object** %set, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp7 = icmp eq %struct._typeobject* %16, @PySet_Type
  br i1 %cmp7, label %if.then.11, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end.5
  %17 = load %struct._object*, %struct._object** %set, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %call10 = call i32 @PyType_IsSubtype(%struct._typeobject* %18, %struct._typeobject* @PySet_Type)
  %tobool = icmp ne i32 %call10, 0
  br i1 %tobool, label %if.then.11, label %if.else.22

if.then.11:                                       ; preds = %lor.lhs.false.8, %if.end.5
  %19 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack12 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %19, i32 0, i32 1
  %20 = load %struct.Pdata*, %struct.Pdata** %stack12, align 8
  %21 = load i64, i64* %mark, align 8
  %call13 = call %struct._object* @Pdata_poptuple(%struct.Pdata* %20, i64 %21)
  store %struct._object* %call13, %struct._object** %items, align 8
  %22 = load %struct._object*, %struct._object** %items, align 8
  %cmp14 = icmp eq %struct._object* %22, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.then.11
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.then.11
  %23 = load %struct._object*, %struct._object** %set, align 8
  %24 = load %struct._object*, %struct._object** %items, align 8
  %call17 = call i32 @_PySet_Update(%struct._object* %23, %struct._object* %24)
  store i32 %call17, i32* %status, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.16
  %25 = load %struct._object*, %struct._object** %items, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %27, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp18 = icmp ne i64 %dec, 0
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %do.body
  br label %if.end.21

if.else:                                          ; preds = %do.body
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %30(%struct._object* %31)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.19
  br label %do.end

do.end:                                           ; preds = %if.end.21
  %32 = load i32, i32* %status, align 4
  store i32 %32, i32* %retval
  br label %return

if.else.22:                                       ; preds = %lor.lhs.false.8
  %33 = load %struct._object*, %struct._object** %set, align 8
  %call23 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %33, %struct._Py_Identifier* @load_additems.PyId_add)
  store %struct._object* %call23, %struct._object** %add_func, align 8
  %34 = load %struct._object*, %struct._object** %add_func, align 8
  %cmp24 = icmp eq %struct._object* %34, null
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.else.22
  store i32 -1, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.else.22
  %35 = load i64, i64* %mark, align 8
  store i64 %35, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.26
  %36 = load i64, i64* %i, align 8
  %37 = load i64, i64* %len, align 8
  %cmp27 = icmp slt i64 %36, %37
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %38 = load i64, i64* %i, align 8
  %39 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack28 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %39, i32 0, i32 1
  %40 = load %struct.Pdata*, %struct.Pdata** %stack28, align 8
  %data29 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %40, i32 0, i32 1
  %41 = load %struct._object**, %struct._object*** %data29, align 8
  %arrayidx30 = getelementptr %struct._object*, %struct._object** %41, i64 %38
  %42 = load %struct._object*, %struct._object** %arrayidx30, align 8
  store %struct._object* %42, %struct._object** %item, align 8
  %43 = load %struct._object*, %struct._object** %add_func, align 8
  %44 = load %struct._object*, %struct._object** %item, align 8
  %call31 = call %struct._object* @_Pickle_FastCall(%struct._object* %43, %struct._object* %44)
  store %struct._object* %call31, %struct._object** %result, align 8
  %45 = load %struct._object*, %struct._object** %result, align 8
  %cmp32 = icmp eq %struct._object* %45, null
  br i1 %cmp32, label %if.then.33, label %if.end.38

if.then.33:                                       ; preds = %for.body
  %46 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack34 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %46, i32 0, i32 1
  %47 = load %struct.Pdata*, %struct.Pdata** %stack34, align 8
  %48 = load i64, i64* %i, align 8
  %add = add i64 %48, 1
  %call35 = call i32 @Pdata_clear(%struct.Pdata* %47, i64 %add)
  %49 = load i64, i64* %mark, align 8
  %50 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack36 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %50, i32 0, i32 1
  %51 = load %struct.Pdata*, %struct.Pdata** %stack36, align 8
  %52 = bitcast %struct.Pdata* %51 to %struct.PyVarObject*
  %ob_size37 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %52, i32 0, i32 1
  store i64 %49, i64* %ob_size37, align 8
  store i32 -1, i32* %retval
  br label %return

if.end.38:                                        ; preds = %for.body
  br label %do.body.39

do.body.39:                                       ; preds = %if.end.38
  %53 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %53, %struct._object** %_py_decref_tmp40, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0
  %55 = load i64, i64* %ob_refcnt41, align 8
  %dec42 = add i64 %55, -1
  store i64 %dec42, i64* %ob_refcnt41, align 8
  %cmp43 = icmp ne i64 %dec42, 0
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %do.body.39
  br label %if.end.48

if.else.45:                                       ; preds = %do.body.39
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_dealloc47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc47, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  call void %58(%struct._object* %59)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.44
  br label %do.end.49

do.end.49:                                        ; preds = %if.end.48
  br label %for.inc

for.inc:                                          ; preds = %do.end.49
  %60 = load i64, i64* %i, align 8
  %inc = add i64 %60, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %61 = load i64, i64* %mark, align 8
  %62 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack50 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %62, i32 0, i32 1
  %63 = load %struct.Pdata*, %struct.Pdata** %stack50, align 8
  %64 = bitcast %struct.Pdata* %63 to %struct.PyVarObject*
  %ob_size51 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %64, i32 0, i32 1
  store i64 %61, i64* %ob_size51, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %for.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.52, %if.then.33, %if.then.25, %do.end, %if.then.15, %if.then.4, %if.then
  %65 = load i32, i32* %retval
  ret i32 %65
}

; Function Attrs: nounwind uwtable
define internal i32 @load_frozenset(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %items = alloca %struct._object*, align 8
  %frozenset = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %i, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = load i64, i64* %i, align 8
  %call1 = call %struct._object* @Pdata_poptuple(%struct.Pdata* %2, i64 %3)
  store %struct._object* %call1, %struct._object** %items, align 8
  %4 = load %struct._object*, %struct._object** %items, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %items, align 8
  %call5 = call %struct._object* @PyFrozenSet_New(%struct._object* %5)
  store %struct._object* %call5, %struct._object** %frozenset, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %6 = load %struct._object*, %struct._object** %items, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  %13 = load %struct._object*, %struct._object** %frozenset, align 8
  %cmp9 = icmp eq %struct._object* %13, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %do.end
  br label %do.body.12

do.body.12:                                       ; preds = %if.end.11
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack13 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 1
  %15 = load %struct.Pdata*, %struct.Pdata** %stack13, align 8
  %16 = load %struct._object*, %struct._object** %frozenset, align 8
  %call14 = call i32 @Pdata_push(%struct.Pdata* %15, %struct._object* %16)
  %cmp15 = icmp slt i32 %call14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %do.body.12
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %do.body.12
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.18, %if.then.16, %if.then.10, %if.then.3, %if.then
  %17 = load i32, i32* %retval
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define internal i32 @load_obj(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %cls = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* null, %struct._object** %obj, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %i, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = load i64, i64* %i, align 8
  %add = add i64 %3, 1
  %call1 = call %struct._object* @Pdata_poptuple(%struct.Pdata* %2, i64 %add)
  store %struct._object* %call1, %struct._object** %args, align 8
  %4 = load %struct._object*, %struct._object** %args, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 1
  %6 = load %struct.Pdata*, %struct.Pdata** %stack5, align 8
  %call6 = call %struct._object* @Pdata_pop(%struct.Pdata* %6)
  store %struct._object* %call6, %struct._object** %cls, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %cls, align 8
  %tobool = icmp ne %struct._object* %7, null
  br i1 %tobool, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %do.end
  %8 = load %struct._object*, %struct._object** %cls, align 8
  %9 = load %struct._object*, %struct._object** %args, align 8
  %call8 = call %struct._object* @instantiate(%struct._object* %8, %struct._object* %9)
  store %struct._object* %call8, %struct._object** %obj, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.then.7
  %10 = load %struct._object*, %struct._object** %cls, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body.9
  br label %if.end.12

if.else:                                          ; preds = %do.body.9
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end.13

do.end.13:                                        ; preds = %if.end.12
  br label %if.end.14

if.end.14:                                        ; preds = %do.end.13, %do.end
  br label %do.body.15

do.body.15:                                       ; preds = %if.end.14
  %17 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp16, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %19, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %22(%struct._object* %23)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  %24 = load %struct._object*, %struct._object** %obj, align 8
  %cmp26 = icmp eq %struct._object* %24, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %do.end.25
  store i32 -1, i32* %retval
  br label %return

if.end.28:                                        ; preds = %do.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.end.28
  %25 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack30 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %25, i32 0, i32 1
  %26 = load %struct.Pdata*, %struct.Pdata** %stack30, align 8
  %27 = load %struct._object*, %struct._object** %obj, align 8
  %call31 = call i32 @Pdata_push(%struct.Pdata* %26, %struct._object* %27)
  %cmp32 = icmp slt i32 %call31, 0
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %do.body.29
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %do.body.29
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.35, %if.then.33, %if.then.27, %if.then.3, %if.then
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @load_inst(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %cls = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %module_name = alloca %struct._object*, align 8
  %class_name = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  %_py_decref_tmp61 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* null, %struct._object** %cls, align 8
  store %struct._object* null, %struct._object** %args, align 8
  store %struct._object* null, %struct._object** %obj, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %i, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call1 = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %1, i8** %s)
  store i64 %call1, i64* %len, align 8
  %cmp2 = icmp slt i64 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load i64, i64* %len, align 8
  %cmp5 = icmp slt i64 %2, 2
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end.4
  %call7 = call i32 @bad_readline()
  store i32 %call7, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %3 = load i8*, i8** %s, align 8
  %4 = load i64, i64* %len, align 8
  %sub = sub i64 %4, 1
  %call9 = call %struct._object* @PyUnicode_DecodeASCII(i8* %3, i64 %sub, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0))
  store %struct._object* %call9, %struct._object** %module_name, align 8
  %5 = load %struct._object*, %struct._object** %module_name, align 8
  %cmp10 = icmp eq %struct._object* %5, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call13 = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %6, i8** %s)
  store i64 %call13, i64* %len, align 8
  %cmp14 = icmp sge i64 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.29

if.then.15:                                       ; preds = %if.end.12
  %7 = load i64, i64* %len, align 8
  %cmp16 = icmp slt i64 %7, 2
  br i1 %cmp16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %if.then.15
  %call18 = call i32 @bad_readline()
  store i32 %call18, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.then.15
  %8 = load i8*, i8** %s, align 8
  %9 = load i64, i64* %len, align 8
  %sub20 = sub i64 %9, 1
  %call21 = call %struct._object* @PyUnicode_DecodeASCII(i8* %8, i64 %sub20, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0))
  store %struct._object* %call21, %struct._object** %class_name, align 8
  %10 = load %struct._object*, %struct._object** %class_name, align 8
  %cmp22 = icmp ne %struct._object* %10, null
  br i1 %cmp22, label %if.then.23, label %if.end.28

if.then.23:                                       ; preds = %if.end.19
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %12 = load %struct._object*, %struct._object** %module_name, align 8
  %13 = load %struct._object*, %struct._object** %class_name, align 8
  %call24 = call %struct._object* @find_class(%struct.UnpicklerObject* %11, %struct._object* %12, %struct._object* %13)
  store %struct._object* %call24, %struct._object** %cls, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.23
  %14 = load %struct._object*, %struct._object** %class_name, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp25 = icmp ne i64 %dec, 0
  br i1 %cmp25, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %do.body
  br label %if.end.27

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.26
  br label %do.end

do.end:                                           ; preds = %if.end.27
  br label %if.end.28

if.end.28:                                        ; preds = %do.end, %if.end.19
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.end.12
  br label %do.body.30

do.body.30:                                       ; preds = %if.end.29
  %21 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp31, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %23, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %26(%struct._object* %27)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  %28 = load %struct._object*, %struct._object** %cls, align 8
  %cmp41 = icmp eq %struct._object* %28, null
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %do.end.40
  store i32 -1, i32* %retval
  br label %return

if.end.43:                                        ; preds = %do.end.40
  %29 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %29, i32 0, i32 1
  %30 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %31 = load i64, i64* %i, align 8
  %call44 = call %struct._object* @Pdata_poptuple(%struct.Pdata* %30, i64 %31)
  store %struct._object* %call44, %struct._object** %args, align 8
  %cmp45 = icmp ne %struct._object* %call44, null
  br i1 %cmp45, label %if.then.46, label %if.end.59

if.then.46:                                       ; preds = %if.end.43
  %32 = load %struct._object*, %struct._object** %cls, align 8
  %33 = load %struct._object*, %struct._object** %args, align 8
  %call47 = call %struct._object* @instantiate(%struct._object* %32, %struct._object* %33)
  store %struct._object* %call47, %struct._object** %obj, align 8
  br label %do.body.48

do.body.48:                                       ; preds = %if.then.46
  %34 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp49, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %36, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.48
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %39(%struct._object* %40)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %if.end.59

if.end.59:                                        ; preds = %do.end.58, %if.end.43
  br label %do.body.60

do.body.60:                                       ; preds = %if.end.59
  %41 = load %struct._object*, %struct._object** %cls, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp61, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8
  %ob_refcnt62 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt62, align 8
  %dec63 = add i64 %43, -1
  store i64 %dec63, i64* %ob_refcnt62, align 8
  %cmp64 = icmp ne i64 %dec63, 0
  br i1 %cmp64, label %if.then.65, label %if.else.66

if.then.65:                                       ; preds = %do.body.60
  br label %if.end.69

if.else.66:                                       ; preds = %do.body.60
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8
  %ob_type67 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type67, align 8
  %tp_dealloc68 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc68, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8
  call void %46(%struct._object* %47)
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.66, %if.then.65
  br label %do.end.70

do.end.70:                                        ; preds = %if.end.69
  %48 = load %struct._object*, %struct._object** %obj, align 8
  %cmp71 = icmp eq %struct._object* %48, null
  br i1 %cmp71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %do.end.70
  store i32 -1, i32* %retval
  br label %return

if.end.73:                                        ; preds = %do.end.70
  br label %do.body.74

do.body.74:                                       ; preds = %if.end.73
  %49 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack75 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %49, i32 0, i32 1
  %50 = load %struct.Pdata*, %struct.Pdata** %stack75, align 8
  %51 = load %struct._object*, %struct._object** %obj, align 8
  %call76 = call i32 @Pdata_push(%struct.Pdata* %50, %struct._object* %51)
  %cmp77 = icmp slt i32 %call76, 0
  br i1 %cmp77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %do.body.74
  store i32 -1, i32* %retval
  br label %return

if.end.79:                                        ; preds = %do.body.74
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.80, %if.then.78, %if.then.72, %if.then.42, %if.then.17, %if.then.11, %if.then.6, %if.then.3, %if.then
  %52 = load i32, i32* %retval
  ret i32 %52
}

; Function Attrs: nounwind uwtable
define internal i32 @load_newobj(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %args = alloca %struct._object*, align 8
  %clsraw = alloca %struct._object*, align 8
  %cls = alloca %struct._typeobject*, align 8
  %obj = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_xdecref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp73 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* null, %struct._object** %args, align 8
  store %struct._object* null, %struct._object** %clsraw, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %call1 = call %struct._object* @Pdata_pop(%struct.Pdata* %1)
  store %struct._object* %call1, %struct._object** %args, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct._object*, %struct._object** %args, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  br label %error

if.end:                                           ; preds = %do.end
  %3 = load %struct._object*, %struct._object** %args, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19
  %5 = load i64, i64* %tp_flags, align 8
  %and = and i64 %5, 67108864
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %6 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %6, i32 0, i32 2
  %7 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.115, i32 0, i32 0))
  br label %error

if.end.4:                                         ; preds = %if.end
  br label %do.body.5

do.body.5:                                        ; preds = %if.end.4
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 1
  %9 = load %struct.Pdata*, %struct.Pdata** %stack6, align 8
  %call7 = call %struct._object* @Pdata_pop(%struct.Pdata* %9)
  store %struct._object* %call7, %struct._object** %clsraw, align 8
  br label %do.end.8

do.end.8:                                         ; preds = %do.body.5
  %10 = load %struct._object*, %struct._object** %clsraw, align 8
  %11 = bitcast %struct._object* %10 to %struct._typeobject*
  store %struct._typeobject* %11, %struct._typeobject** %cls, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %cmp9 = icmp eq %struct._typeobject* %12, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.end.8
  br label %error

if.end.11:                                        ; preds = %do.end.8
  %13 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %14 = bitcast %struct._typeobject* %13 to %struct._object*
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_flags13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 19
  %16 = load i64, i64* %tp_flags13, align 8
  %and14 = and i64 %16, 2147483648
  %cmp15 = icmp ne i64 %and14, 0
  br i1 %cmp15, label %if.end.18, label %if.then.16

if.then.16:                                       ; preds = %if.end.11
  %17 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError17 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %17, i32 0, i32 2
  %18 = load %struct._object*, %struct._object** %UnpicklingError17, align 8
  call void @PyErr_SetString(%struct._object* %18, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.116, i32 0, i32 0))
  br label %error

if.end.18:                                        ; preds = %if.end.11
  %19 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 37
  %20 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp19 = icmp eq %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %20, null
  br i1 %cmp19, label %if.then.20, label %if.end.22

if.then.20:                                       ; preds = %if.end.18
  %21 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError21 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %21, i32 0, i32 2
  %22 = load %struct._object*, %struct._object** %UnpicklingError21, align 8
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.117, i32 0, i32 0))
  br label %error

if.end.22:                                        ; preds = %if.end.18
  %23 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %tp_new23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 37
  %24 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new23, align 8
  %25 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %26 = load %struct._object*, %struct._object** %args, align 8
  %call24 = call %struct._object* %24(%struct._typeobject* %25, %struct._object* %26, %struct._object* null)
  store %struct._object* %call24, %struct._object** %obj, align 8
  %27 = load %struct._object*, %struct._object** %obj, align 8
  %cmp25 = icmp eq %struct._object* %27, null
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.22
  br label %error

if.end.27:                                        ; preds = %if.end.22
  br label %do.body.28

do.body.28:                                       ; preds = %if.end.27
  %28 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %30, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp29 = icmp ne i64 %dec, 0
  br i1 %cmp29, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %do.body.28
  br label %if.end.32

if.else:                                          ; preds = %do.body.28
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %33(%struct._object* %34)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else, %if.then.30
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %do.body.34

do.body.34:                                       ; preds = %do.end.33
  %35 = load %struct._object*, %struct._object** %clsraw, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp35, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt36, align 8
  %dec37 = add i64 %37, -1
  store i64 %dec37, i64* %ob_refcnt36, align 8
  %cmp38 = icmp ne i64 %dec37, 0
  br i1 %cmp38, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43

if.else.40:                                       ; preds = %do.body.34
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  call void %40(%struct._object* %41)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  br label %do.body.45

do.body.45:                                       ; preds = %do.end.44
  %42 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack46 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %42, i32 0, i32 1
  %43 = load %struct.Pdata*, %struct.Pdata** %stack46, align 8
  %44 = load %struct._object*, %struct._object** %obj, align 8
  %call47 = call i32 @Pdata_push(%struct.Pdata* %43, %struct._object* %44)
  %cmp48 = icmp slt i32 %call47, 0
  br i1 %cmp48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %do.body.45
  store i32 -1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %do.body.45
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.26, %if.then.20, %if.then.16, %if.then.10, %if.then.3, %if.then
  br label %do.body.52

do.body.52:                                       ; preds = %error
  %45 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %45, %struct._object** %_py_xdecref_tmp, align 8
  %46 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp53 = icmp ne %struct._object* %46, null
  br i1 %cmp53, label %if.then.54, label %if.end.66

if.then.54:                                       ; preds = %do.body.52
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.54
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp56, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %49, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %52(%struct._object* %53)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %if.end.66

if.end.66:                                        ; preds = %do.end.65, %do.body.52
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  br label %do.body.68

do.body.68:                                       ; preds = %do.end.67
  %54 = load %struct._object*, %struct._object** %clsraw, align 8
  store %struct._object* %54, %struct._object** %_py_xdecref_tmp69, align 8
  %55 = load %struct._object*, %struct._object** %_py_xdecref_tmp69, align 8
  %cmp70 = icmp ne %struct._object* %55, null
  br i1 %cmp70, label %if.then.71, label %if.end.83

if.then.71:                                       ; preds = %do.body.68
  br label %do.body.72

do.body.72:                                       ; preds = %if.then.71
  %56 = load %struct._object*, %struct._object** %_py_xdecref_tmp69, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp73, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8
  %ob_refcnt74 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt74, align 8
  %dec75 = add i64 %58, -1
  store i64 %dec75, i64* %ob_refcnt74, align 8
  %cmp76 = icmp ne i64 %dec75, 0
  br i1 %cmp76, label %if.then.77, label %if.else.78

if.then.77:                                       ; preds = %do.body.72
  br label %if.end.81

if.else.78:                                       ; preds = %do.body.72
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8
  %ob_type79 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type79, align 8
  %tp_dealloc80 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc80, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8
  call void %61(%struct._object* %62)
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.78, %if.then.77
  br label %do.end.82

do.end.82:                                        ; preds = %if.end.81
  br label %if.end.83

if.end.83:                                        ; preds = %do.end.82, %do.body.68
  br label %do.end.84

do.end.84:                                        ; preds = %if.end.83
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.84, %do.end.51, %if.then.49
  %63 = load i32, i32* %retval
  ret i32 %63
}

; Function Attrs: nounwind uwtable
define internal i32 @load_newobj_ex(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %cls = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %kwargs = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp21 = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp85 = alloca %struct._object*, align 8
  %_py_decref_tmp96 = alloca %struct._object*, align 8
  %_py_decref_tmp107 = alloca %struct._object*, align 8
  %_py_decref_tmp122 = alloca %struct._object*, align 8
  %_py_decref_tmp133 = alloca %struct._object*, align 8
  %_py_decref_tmp144 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %call1 = call %struct._object* @Pdata_pop(%struct.Pdata* %1)
  store %struct._object* %call1, %struct._object** %kwargs, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct._object*, %struct._object** %kwargs, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %do.end
  br label %do.body.2

do.body.2:                                        ; preds = %if.end
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 1
  %4 = load %struct.Pdata*, %struct.Pdata** %stack3, align 8
  %call4 = call %struct._object* @Pdata_pop(%struct.Pdata* %4)
  store %struct._object* %call4, %struct._object** %args, align 8
  br label %do.end.5

do.end.5:                                         ; preds = %do.body.2
  %5 = load %struct._object*, %struct._object** %args, align 8
  %cmp6 = icmp eq %struct._object* %5, null
  br i1 %cmp6, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %do.end.5
  br label %do.body.8

do.body.8:                                        ; preds = %if.then.7
  %6 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body.8
  br label %if.end.11

if.else:                                          ; preds = %do.body.8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end.12

do.end.12:                                        ; preds = %if.end.11
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %do.end.5
  br label %do.body.14

do.body.14:                                       ; preds = %if.end.13
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack15 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %13, i32 0, i32 1
  %14 = load %struct.Pdata*, %struct.Pdata** %stack15, align 8
  %call16 = call %struct._object* @Pdata_pop(%struct.Pdata* %14)
  store %struct._object* %call16, %struct._object** %cls, align 8
  br label %do.end.17

do.end.17:                                        ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %cls, align 8
  %cmp18 = icmp eq %struct._object* %15, null
  br i1 %cmp18, label %if.then.19, label %if.end.42

if.then.19:                                       ; preds = %do.end.17
  br label %do.body.20

do.body.20:                                       ; preds = %if.then.19
  %16 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp21, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt22, align 8
  %dec23 = add i64 %18, -1
  store i64 %dec23, i64* %ob_refcnt22, align 8
  %cmp24 = icmp ne i64 %dec23, 0
  br i1 %cmp24, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %do.body.20
  br label %if.end.29

if.else.26:                                       ; preds = %do.body.20
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_dealloc28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc28, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  call void %21(%struct._object* %22)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.26, %if.then.25
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  br label %do.body.31

do.body.31:                                       ; preds = %do.end.30
  %23 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp32, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt33, align 8
  %dec34 = add i64 %25, -1
  store i64 %dec34, i64* %ob_refcnt33, align 8
  %cmp35 = icmp ne i64 %dec34, 0
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40

if.else.37:                                       ; preds = %do.body.31
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  call void %28(%struct._object* %29)
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end.41

do.end.41:                                        ; preds = %if.end.40
  store i32 -1, i32* %retval
  br label %return

if.end.42:                                        ; preds = %do.end.17
  %30 = load %struct._object*, %struct._object** %cls, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 19
  %32 = load i64, i64* %tp_flags, align 8
  %and = and i64 %32, 2147483648
  %cmp44 = icmp ne i64 %and, 0
  br i1 %cmp44, label %if.end.81, label %if.then.45

if.then.45:                                       ; preds = %if.end.42
  br label %do.body.46

do.body.46:                                       ; preds = %if.then.45
  %33 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %33, %struct._object** %_py_decref_tmp47, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt48, align 8
  %dec49 = add i64 %35, -1
  store i64 %dec49, i64* %ob_refcnt48, align 8
  %cmp50 = icmp ne i64 %dec49, 0
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %do.body.46
  br label %if.end.55

if.else.52:                                       ; preds = %do.body.46
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  call void %38(%struct._object* %39)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  %40 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp58, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt59, align 8
  %dec60 = add i64 %42, -1
  store i64 %dec60, i64* %ob_refcnt59, align 8
  %cmp61 = icmp ne i64 %dec60, 0
  br i1 %cmp61, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %do.body.57
  br label %if.end.66

if.else.63:                                       ; preds = %do.body.57
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  call void %45(%struct._object* %46)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  br label %do.body.68

do.body.68:                                       ; preds = %do.end.67
  %47 = load %struct._object*, %struct._object** %cls, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp69, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %49, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.68
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.68
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %52(%struct._object* %53)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  %54 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %54, i32 0, i32 2
  %55 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  %56 = load %struct._object*, %struct._object** %cls, align 8
  %ob_type79 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type79, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 1
  %58 = load i8*, i8** %tp_name, align 8
  %call80 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %55, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.118, i32 0, i32 0), i8* %58)
  store i32 -1, i32* %retval
  br label %return

if.end.81:                                        ; preds = %if.end.42
  %59 = load %struct._object*, %struct._object** %cls, align 8
  %60 = bitcast %struct._object* %59 to %struct._typeobject*
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 37
  %61 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp82 = icmp eq %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %61, null
  br i1 %cmp82, label %if.then.83, label %if.end.118

if.then.83:                                       ; preds = %if.end.81
  br label %do.body.84

do.body.84:                                       ; preds = %if.then.83
  %62 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %62, %struct._object** %_py_decref_tmp85, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_refcnt86 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0
  %64 = load i64, i64* %ob_refcnt86, align 8
  %dec87 = add i64 %64, -1
  store i64 %dec87, i64* %ob_refcnt86, align 8
  %cmp88 = icmp ne i64 %dec87, 0
  br i1 %cmp88, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.84
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.84
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  call void %67(%struct._object* %68)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %do.body.95

do.body.95:                                       ; preds = %do.end.94
  %69 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %69, %struct._object** %_py_decref_tmp96, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_refcnt97 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt97, align 8
  %dec98 = add i64 %71, -1
  store i64 %dec98, i64* %ob_refcnt97, align 8
  %cmp99 = icmp ne i64 %dec98, 0
  br i1 %cmp99, label %if.then.100, label %if.else.101

if.then.100:                                      ; preds = %do.body.95
  br label %if.end.104

if.else.101:                                      ; preds = %do.body.95
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_type102 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type102, align 8
  %tp_dealloc103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 4
  %74 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc103, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  call void %74(%struct._object* %75)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.101, %if.then.100
  br label %do.end.105

do.end.105:                                       ; preds = %if.end.104
  br label %do.body.106

do.body.106:                                      ; preds = %do.end.105
  %76 = load %struct._object*, %struct._object** %cls, align 8
  store %struct._object* %76, %struct._object** %_py_decref_tmp107, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  %ob_refcnt108 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0
  %78 = load i64, i64* %ob_refcnt108, align 8
  %dec109 = add i64 %78, -1
  store i64 %dec109, i64* %ob_refcnt108, align 8
  %cmp110 = icmp ne i64 %dec109, 0
  br i1 %cmp110, label %if.then.111, label %if.else.112

if.then.111:                                      ; preds = %do.body.106
  br label %if.end.115

if.else.112:                                      ; preds = %do.body.106
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  %ob_type113 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type113, align 8
  %tp_dealloc114 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc114, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  call void %81(%struct._object* %82)
  br label %if.end.115

if.end.115:                                       ; preds = %if.else.112, %if.then.111
  br label %do.end.116

do.end.116:                                       ; preds = %if.end.115
  %83 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError117 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %83, i32 0, i32 2
  %84 = load %struct._object*, %struct._object** %UnpicklingError117, align 8
  call void @PyErr_SetString(%struct._object* %84, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.119, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.118:                                       ; preds = %if.end.81
  %85 = load %struct._object*, %struct._object** %cls, align 8
  %86 = bitcast %struct._object* %85 to %struct._typeobject*
  %tp_new119 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 37
  %87 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new119, align 8
  %88 = load %struct._object*, %struct._object** %cls, align 8
  %89 = bitcast %struct._object* %88 to %struct._typeobject*
  %90 = load %struct._object*, %struct._object** %args, align 8
  %91 = load %struct._object*, %struct._object** %kwargs, align 8
  %call120 = call %struct._object* %87(%struct._typeobject* %89, %struct._object* %90, %struct._object* %91)
  store %struct._object* %call120, %struct._object** %obj, align 8
  br label %do.body.121

do.body.121:                                      ; preds = %if.end.118
  %92 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %92, %struct._object** %_py_decref_tmp122, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8
  %ob_refcnt123 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 0
  %94 = load i64, i64* %ob_refcnt123, align 8
  %dec124 = add i64 %94, -1
  store i64 %dec124, i64* %ob_refcnt123, align 8
  %cmp125 = icmp ne i64 %dec124, 0
  br i1 %cmp125, label %if.then.126, label %if.else.127

if.then.126:                                      ; preds = %do.body.121
  br label %if.end.130

if.else.127:                                      ; preds = %do.body.121
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8
  %ob_type128 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type128, align 8
  %tp_dealloc129 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 4
  %97 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc129, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8
  call void %97(%struct._object* %98)
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.127, %if.then.126
  br label %do.end.131

do.end.131:                                       ; preds = %if.end.130
  br label %do.body.132

do.body.132:                                      ; preds = %do.end.131
  %99 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %99, %struct._object** %_py_decref_tmp133, align 8
  %100 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  %ob_refcnt134 = getelementptr inbounds %struct._object, %struct._object* %100, i32 0, i32 0
  %101 = load i64, i64* %ob_refcnt134, align 8
  %dec135 = add i64 %101, -1
  store i64 %dec135, i64* %ob_refcnt134, align 8
  %cmp136 = icmp ne i64 %dec135, 0
  br i1 %cmp136, label %if.then.137, label %if.else.138

if.then.137:                                      ; preds = %do.body.132
  br label %if.end.141

if.else.138:                                      ; preds = %do.body.132
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  %ob_type139 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 1
  %103 = load %struct._typeobject*, %struct._typeobject** %ob_type139, align 8
  %tp_dealloc140 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %103, i32 0, i32 4
  %104 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc140, align 8
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  call void %104(%struct._object* %105)
  br label %if.end.141

if.end.141:                                       ; preds = %if.else.138, %if.then.137
  br label %do.end.142

do.end.142:                                       ; preds = %if.end.141
  br label %do.body.143

do.body.143:                                      ; preds = %do.end.142
  %106 = load %struct._object*, %struct._object** %cls, align 8
  store %struct._object* %106, %struct._object** %_py_decref_tmp144, align 8
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8
  %ob_refcnt145 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 0
  %108 = load i64, i64* %ob_refcnt145, align 8
  %dec146 = add i64 %108, -1
  store i64 %dec146, i64* %ob_refcnt145, align 8
  %cmp147 = icmp ne i64 %dec146, 0
  br i1 %cmp147, label %if.then.148, label %if.else.149

if.then.148:                                      ; preds = %do.body.143
  br label %if.end.152

if.else.149:                                      ; preds = %do.body.143
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8
  %ob_type150 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 1
  %110 = load %struct._typeobject*, %struct._typeobject** %ob_type150, align 8
  %tp_dealloc151 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 4
  %111 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc151, align 8
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8
  call void %111(%struct._object* %112)
  br label %if.end.152

if.end.152:                                       ; preds = %if.else.149, %if.then.148
  br label %do.end.153

do.end.153:                                       ; preds = %if.end.152
  %113 = load %struct._object*, %struct._object** %obj, align 8
  %cmp154 = icmp eq %struct._object* %113, null
  br i1 %cmp154, label %if.then.155, label %if.end.156

if.then.155:                                      ; preds = %do.end.153
  store i32 -1, i32* %retval
  br label %return

if.end.156:                                       ; preds = %do.end.153
  br label %do.body.157

do.body.157:                                      ; preds = %if.end.156
  %114 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack158 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %114, i32 0, i32 1
  %115 = load %struct.Pdata*, %struct.Pdata** %stack158, align 8
  %116 = load %struct._object*, %struct._object** %obj, align 8
  %call159 = call i32 @Pdata_push(%struct.Pdata* %115, %struct._object* %116)
  %cmp160 = icmp slt i32 %call159, 0
  br i1 %cmp160, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %do.body.157
  store i32 -1, i32* %retval
  br label %return

if.end.162:                                       ; preds = %do.body.157
  br label %do.end.163

do.end.163:                                       ; preds = %if.end.162
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.163, %if.then.161, %if.then.155, %do.end.116, %do.end.78, %do.end.41, %do.end.12, %if.then
  %117 = load i32, i32* %retval
  ret i32 %117
}

; Function Attrs: nounwind uwtable
define internal i32 @load_global(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %global = alloca %struct._object*, align 8
  %module_name = alloca %struct._object*, align 8
  %global_name = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* null, %struct._object** %global, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %1, 2
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @bad_readline()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load i8*, i8** %s, align 8
  %3 = load i64, i64* %len, align 8
  %sub = sub i64 %3, 1
  %call5 = call %struct._object* @PyUnicode_DecodeUTF8(i8* %2, i64 %sub, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0))
  store %struct._object* %call5, %struct._object** %module_name, align 8
  %4 = load %struct._object*, %struct._object** %module_name, align 8
  %tobool = icmp ne %struct._object* %4, null
  br i1 %tobool, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call8 = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %5, i8** %s)
  store i64 %call8, i64* %len, align 8
  %cmp9 = icmp sge i64 %call8, 0
  br i1 %cmp9, label %if.then.10, label %if.end.35

if.then.10:                                       ; preds = %if.end.7
  %6 = load i64, i64* %len, align 8
  %cmp11 = icmp slt i64 %6, 2
  br i1 %cmp11, label %if.then.12, label %if.end.17

if.then.12:                                       ; preds = %if.then.10
  br label %do.body

do.body:                                          ; preds = %if.then.12
  %7 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %call16 = call i32 @bad_readline()
  store i32 %call16, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.then.10
  %14 = load i8*, i8** %s, align 8
  %15 = load i64, i64* %len, align 8
  %sub18 = sub i64 %15, 1
  %call19 = call %struct._object* @PyUnicode_DecodeUTF8(i8* %14, i64 %sub18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0))
  store %struct._object* %call19, %struct._object** %global_name, align 8
  %16 = load %struct._object*, %struct._object** %global_name, align 8
  %tobool20 = icmp ne %struct._object* %16, null
  br i1 %tobool20, label %if.then.21, label %if.end.34

if.then.21:                                       ; preds = %if.end.17
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %18 = load %struct._object*, %struct._object** %module_name, align 8
  %19 = load %struct._object*, %struct._object** %global_name, align 8
  %call22 = call %struct._object* @find_class(%struct.UnpicklerObject* %17, %struct._object* %18, %struct._object* %19)
  store %struct._object* %call22, %struct._object** %global, align 8
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.21
  %20 = load %struct._object*, %struct._object** %global_name, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp24, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %22, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %25(%struct._object* %26)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %if.end.34

if.end.34:                                        ; preds = %do.end.33, %if.end.17
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.7
  br label %do.body.36

do.body.36:                                       ; preds = %if.end.35
  %27 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp37, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %29, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.36
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.36
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %32(%struct._object* %33)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  %34 = load %struct._object*, %struct._object** %global, align 8
  %cmp47 = icmp eq %struct._object* %34, null
  br i1 %cmp47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %do.end.46
  store i32 -1, i32* %retval
  br label %return

if.end.49:                                        ; preds = %do.end.46
  br label %do.body.50

do.body.50:                                       ; preds = %if.end.49
  %35 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %35, i32 0, i32 1
  %36 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %37 = load %struct._object*, %struct._object** %global, align 8
  %call51 = call i32 @Pdata_push(%struct.Pdata* %36, %struct._object* %37)
  %cmp52 = icmp slt i32 %call51, 0
  br i1 %cmp52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %do.body.50
  store i32 -1, i32* %retval
  br label %return

if.end.54:                                        ; preds = %do.body.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.55, %if.then.53, %if.then.48, %do.end, %if.then.6, %if.then.2, %if.then
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: nounwind uwtable
define internal i32 @load_stack_global(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %global = alloca %struct._object*, align 8
  %module_name = alloca %struct._object*, align 8
  %global_name = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp23 = alloca %struct._object*, align 8
  %_py_decref_tmp27 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %call = call %struct._object* @Pdata_pop(%struct.Pdata* %1)
  store %struct._object* %call, %struct._object** %global_name, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 1
  %3 = load %struct.Pdata*, %struct.Pdata** %stack2, align 8
  %call3 = call %struct._object* @Pdata_pop(%struct.Pdata* %3)
  store %struct._object* %call3, %struct._object** %module_name, align 8
  br label %do.end.4

do.end.4:                                         ; preds = %do.body.1
  %4 = load %struct._object*, %struct._object** %module_name, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end.4
  %5 = load %struct._object*, %struct._object** %module_name, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp5 = icmp eq %struct._typeobject* %6, @PyUnicode_Type
  br i1 %cmp5, label %lor.lhs.false.6, label %if.then

lor.lhs.false.6:                                  ; preds = %lor.lhs.false
  %7 = load %struct._object*, %struct._object** %global_name, align 8
  %cmp7 = icmp eq %struct._object* %7, null
  br i1 %cmp7, label %if.then, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %lor.lhs.false.6
  %8 = load %struct._object*, %struct._object** %global_name, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %cmp10 = icmp eq %struct._typeobject* %9, @PyUnicode_Type
  br i1 %cmp10, label %if.end.39, label %if.then

if.then:                                          ; preds = %lor.lhs.false.8, %lor.lhs.false.6, %lor.lhs.false, %do.end.4
  %call11 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call11, %struct.PickleState** %st, align 8
  %10 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %11, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.120, i32 0, i32 0))
  br label %do.body.12

do.body.12:                                       ; preds = %if.then
  %12 = load %struct._object*, %struct._object** %global_name, align 8
  store %struct._object* %12, %struct._object** %_py_xdecref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp13 = icmp ne %struct._object* %13, null
  br i1 %cmp13, label %if.then.14, label %if.end.20

if.then.14:                                       ; preds = %do.body.12
  br label %do.body.15

do.body.15:                                       ; preds = %if.then.14
  %14 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body.15
  br label %if.end

if.else:                                          ; preds = %do.body.15
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.17
  br label %do.end.19

do.end.19:                                        ; preds = %if.end
  br label %if.end.20

if.end.20:                                        ; preds = %do.end.19, %do.body.12
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  %21 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %21, %struct._object** %_py_xdecref_tmp23, align 8
  %22 = load %struct._object*, %struct._object** %_py_xdecref_tmp23, align 8
  %cmp24 = icmp ne %struct._object* %22, null
  br i1 %cmp24, label %if.then.25, label %if.end.37

if.then.25:                                       ; preds = %do.body.22
  br label %do.body.26

do.body.26:                                       ; preds = %if.then.25
  %23 = load %struct._object*, %struct._object** %_py_xdecref_tmp23, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp27, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt28, align 8
  %dec29 = add i64 %25, -1
  store i64 %dec29, i64* %ob_refcnt28, align 8
  %cmp30 = icmp ne i64 %dec29, 0
  br i1 %cmp30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %do.body.26
  br label %if.end.35

if.else.32:                                       ; preds = %do.body.26
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_dealloc34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc34, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  call void %28(%struct._object* %29)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %if.then.31
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  br label %if.end.37

if.end.37:                                        ; preds = %do.end.36, %do.body.22
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  store i32 -1, i32* %retval
  br label %return

if.end.39:                                        ; preds = %lor.lhs.false.8
  %30 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %31 = load %struct._object*, %struct._object** %module_name, align 8
  %32 = load %struct._object*, %struct._object** %global_name, align 8
  %call40 = call %struct._object* @find_class(%struct.UnpicklerObject* %30, %struct._object* %31, %struct._object* %32)
  store %struct._object* %call40, %struct._object** %global, align 8
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.39
  %33 = load %struct._object*, %struct._object** %global_name, align 8
  store %struct._object* %33, %struct._object** %_py_decref_tmp42, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %35, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %38(%struct._object* %39)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %do.body.52

do.body.52:                                       ; preds = %do.end.51
  %40 = load %struct._object*, %struct._object** %module_name, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp53, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %42, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %45(%struct._object* %46)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  %47 = load %struct._object*, %struct._object** %global, align 8
  %cmp63 = icmp eq %struct._object* %47, null
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %do.end.62
  store i32 -1, i32* %retval
  br label %return

if.end.65:                                        ; preds = %do.end.62
  br label %do.body.66

do.body.66:                                       ; preds = %if.end.65
  %48 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack67 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %48, i32 0, i32 1
  %49 = load %struct.Pdata*, %struct.Pdata** %stack67, align 8
  %50 = load %struct._object*, %struct._object** %global, align 8
  %call68 = call i32 @Pdata_push(%struct.Pdata* %49, %struct._object* %50)
  %cmp69 = icmp slt i32 %call68, 0
  br i1 %cmp69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %do.body.66
  store i32 -1, i32* %retval
  br label %return

if.end.71:                                        ; preds = %do.body.66
  br label %do.end.72

do.end.72:                                        ; preds = %if.end.71
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.72, %if.then.70, %if.then.64, %do.end.38
  %51 = load i32, i32* %retval
  ret i32 %51
}

; Function Attrs: nounwind uwtable
define internal i32 @load_append(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = bitcast %struct.Pdata* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %sub = sub i64 %4, 1
  %call = call i32 @do_append(%struct.UnpicklerObject* %0, i64 %sub)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @load_appends(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %1)
  %call1 = call i32 @do_append(%struct.UnpicklerObject* %0, i64 %call)
  ret i32 %call1
}

; Function Attrs: nounwind uwtable
define internal i32 @load_build(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %state = alloca %struct._object*, align 8
  %inst = alloca %struct._object*, align 8
  %slotstate = alloca %struct._object*, align 8
  %setstate = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  %_py_decref_tmp38 = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %d_key = alloca %struct._object*, align 8
  %d_value = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_decref_tmp105 = alloca %struct._object*, align 8
  %_py_decref_tmp118 = alloca %struct._object*, align 8
  %_py_decref_tmp130 = alloca %struct._object*, align 8
  %d_key144 = alloca %struct._object*, align 8
  %d_value146 = alloca %struct._object*, align 8
  %i148 = alloca i64, align 8
  %st155 = alloca %struct.PickleState*, align 8
  %_py_decref_tmp173 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp189 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = bitcast %struct.Pdata* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  %cmp = icmp slt i64 %3, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @stack_underflow()
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 1
  %5 = load %struct.Pdata*, %struct.Pdata** %stack1, align 8
  %call2 = call %struct._object* @Pdata_pop(%struct.Pdata* %5)
  store %struct._object* %call2, %struct._object** %state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %state, align 8
  %cmp3 = icmp eq %struct._object* %6, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %do.end
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 1
  %8 = load %struct.Pdata*, %struct.Pdata** %stack6, align 8
  %9 = bitcast %struct.Pdata* %8 to %struct.PyVarObject*
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1
  %10 = load i64, i64* %ob_size7, align 8
  %sub = sub i64 %10, 1
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack8 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 1
  %12 = load %struct.Pdata*, %struct.Pdata** %stack8, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %12, i32 0, i32 1
  %13 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %13, i64 %sub
  %14 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %14, %struct._object** %inst, align 8
  %15 = load %struct._object*, %struct._object** %inst, align 8
  %call9 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %15, %struct._Py_Identifier* @load_build.PyId___setstate__)
  store %struct._object* %call9, %struct._object** %setstate, align 8
  %16 = load %struct._object*, %struct._object** %setstate, align 8
  %cmp10 = icmp eq %struct._object* %16, null
  br i1 %cmp10, label %if.then.11, label %if.else.21

if.then.11:                                       ; preds = %if.end.5
  %17 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call12 = call i32 @PyErr_ExceptionMatches(%struct._object* %17)
  %tobool = icmp ne i32 %call12, 0
  br i1 %tobool, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %if.then.11
  call void @PyErr_Clear()
  br label %if.end.20

if.else:                                          ; preds = %if.then.11
  br label %do.body.14

do.body.14:                                       ; preds = %if.else
  %18 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp15 = icmp ne i64 %dec, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.14
  br label %if.end.18

if.else.17:                                       ; preds = %do.body.14
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  store i32 -1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.then.13
  br label %if.end.48

if.else.21:                                       ; preds = %if.end.5
  %25 = load %struct._object*, %struct._object** %setstate, align 8
  %26 = load %struct._object*, %struct._object** %state, align 8
  %call22 = call %struct._object* @_Pickle_FastCall(%struct._object* %25, %struct._object* %26)
  store %struct._object* %call22, %struct._object** %result, align 8
  br label %do.body.23

do.body.23:                                       ; preds = %if.else.21
  %27 = load %struct._object*, %struct._object** %setstate, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp24, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %29, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %32(%struct._object* %33)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  %34 = load %struct._object*, %struct._object** %result, align 8
  %cmp34 = icmp eq %struct._object* %34, null
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %do.end.33
  store i32 -1, i32* %retval
  br label %return

if.end.36:                                        ; preds = %do.end.33
  br label %do.body.37

do.body.37:                                       ; preds = %if.end.36
  %35 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp38, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  %ob_refcnt39 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt39, align 8
  %dec40 = add i64 %37, -1
  store i64 %dec40, i64* %ob_refcnt39, align 8
  %cmp41 = icmp ne i64 %dec40, 0
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.37
  br label %if.end.46

if.else.43:                                       ; preds = %do.body.37
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8
  %tp_dealloc45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc45, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  call void %40(%struct._object* %41)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.then.42
  br label %do.end.47

do.end.47:                                        ; preds = %if.end.46
  store i32 0, i32* %retval
  br label %return

if.end.48:                                        ; preds = %if.end.20
  %42 = load %struct._object*, %struct._object** %state, align 8
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 19
  %44 = load i64, i64* %tp_flags, align 8
  %and = and i64 %44, 67108864
  %cmp50 = icmp ne i64 %and, 0
  br i1 %cmp50, label %land.lhs.true, label %if.else.72

land.lhs.true:                                    ; preds = %if.end.48
  %45 = load %struct._object*, %struct._object** %state, align 8
  %46 = bitcast %struct._object* %45 to %struct.PyVarObject*
  %ob_size51 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %46, i32 0, i32 1
  %47 = load i64, i64* %ob_size51, align 8
  %cmp52 = icmp eq i64 %47, 2
  br i1 %cmp52, label %if.then.53, label %if.else.72

if.then.53:                                       ; preds = %land.lhs.true
  %48 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %48, %struct._object** %tmp, align 8
  %49 = load %struct._object*, %struct._object** %tmp, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %50, i32 0, i32 1
  %arrayidx54 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %51 = load %struct._object*, %struct._object** %arrayidx54, align 8
  store %struct._object* %51, %struct._object** %state, align 8
  %52 = load %struct._object*, %struct._object** %tmp, align 8
  %53 = bitcast %struct._object* %52 to %struct.PyTupleObject*
  %ob_item55 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %53, i32 0, i32 1
  %arrayidx56 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item55, i32 0, i64 1
  %54 = load %struct._object*, %struct._object** %arrayidx56, align 8
  store %struct._object* %54, %struct._object** %slotstate, align 8
  %55 = load %struct._object*, %struct._object** %state, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt57, align 8
  %inc = add i64 %56, 1
  store i64 %inc, i64* %ob_refcnt57, align 8
  %57 = load %struct._object*, %struct._object** %slotstate, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt58, align 8
  %inc59 = add i64 %58, 1
  store i64 %inc59, i64* %ob_refcnt58, align 8
  br label %do.body.60

do.body.60:                                       ; preds = %if.then.53
  %59 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp62, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt63, align 8
  %dec64 = add i64 %61, -1
  store i64 %dec64, i64* %ob_refcnt63, align 8
  %cmp65 = icmp ne i64 %dec64, 0
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %do.body.60
  br label %if.end.70

if.else.67:                                       ; preds = %do.body.60
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  call void %64(%struct._object* %65)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %if.end.73

if.else.72:                                       ; preds = %land.lhs.true, %if.end.48
  store %struct._object* null, %struct._object** %slotstate, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.72, %do.end.71
  %66 = load %struct._object*, %struct._object** %state, align 8
  %cmp74 = icmp ne %struct._object* %66, @_Py_NoneStruct
  br i1 %cmp74, label %if.then.75, label %if.end.140

if.then.75:                                       ; preds = %if.end.73
  %67 = load %struct._object*, %struct._object** %state, align 8
  %ob_type80 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type80, align 8
  %tp_flags81 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 19
  %69 = load i64, i64* %tp_flags81, align 8
  %and82 = and i64 %69, 536870912
  %cmp83 = icmp ne i64 %and82, 0
  br i1 %cmp83, label %if.end.87, label %if.then.84

if.then.84:                                       ; preds = %if.then.75
  %call86 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call86, %struct.PickleState** %st, align 8
  %70 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %70, i32 0, i32 2
  %71 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %71, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.124, i32 0, i32 0))
  br label %error

if.end.87:                                        ; preds = %if.then.75
  %72 = load %struct._object*, %struct._object** %inst, align 8
  %call88 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %72, %struct._Py_Identifier* @load_build.PyId___dict__)
  store %struct._object* %call88, %struct._object** %dict, align 8
  %73 = load %struct._object*, %struct._object** %dict, align 8
  %cmp89 = icmp eq %struct._object* %73, null
  br i1 %cmp89, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %if.end.87
  br label %error

if.end.91:                                        ; preds = %if.end.87
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.127, %if.end.91
  %74 = load %struct._object*, %struct._object** %state, align 8
  %call92 = call i32 @PyDict_Next(%struct._object* %74, i64* %i, %struct._object** %d_key, %struct._object** %d_value)
  %tobool93 = icmp ne i32 %call92, 0
  br i1 %tobool93, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %75 = load %struct._object*, %struct._object** %d_key, align 8
  %ob_refcnt94 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt94, align 8
  %inc95 = add i64 %76, 1
  store i64 %inc95, i64* %ob_refcnt94, align 8
  %77 = load %struct._object*, %struct._object** %d_key, align 8
  %ob_type96 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type96, align 8
  %cmp97 = icmp eq %struct._typeobject* %78, @PyUnicode_Type
  br i1 %cmp97, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %while.body
  call void @PyUnicode_InternInPlace(%struct._object** %d_key)
  br label %if.end.99

if.end.99:                                        ; preds = %if.then.98, %while.body
  %79 = load %struct._object*, %struct._object** %dict, align 8
  %80 = load %struct._object*, %struct._object** %d_key, align 8
  %81 = load %struct._object*, %struct._object** %d_value, align 8
  %call100 = call i32 @PyObject_SetItem(%struct._object* %79, %struct._object* %80, %struct._object* %81)
  %cmp101 = icmp slt i32 %call100, 0
  br i1 %cmp101, label %if.then.102, label %if.end.115

if.then.102:                                      ; preds = %if.end.99
  br label %do.body.103

do.body.103:                                      ; preds = %if.then.102
  %82 = load %struct._object*, %struct._object** %d_key, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp105, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt106, align 8
  %dec107 = add i64 %84, -1
  store i64 %dec107, i64* %ob_refcnt106, align 8
  %cmp108 = icmp ne i64 %dec107, 0
  br i1 %cmp108, label %if.then.109, label %if.else.110

if.then.109:                                      ; preds = %do.body.103
  br label %if.end.113

if.else.110:                                      ; preds = %do.body.103
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_type111 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type111, align 8
  %tp_dealloc112 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc112, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  call void %87(%struct._object* %88)
  br label %if.end.113

if.end.113:                                       ; preds = %if.else.110, %if.then.109
  br label %do.end.114

do.end.114:                                       ; preds = %if.end.113
  br label %error

if.end.115:                                       ; preds = %if.end.99
  br label %do.body.116

do.body.116:                                      ; preds = %if.end.115
  %89 = load %struct._object*, %struct._object** %d_key, align 8
  store %struct._object* %89, %struct._object** %_py_decref_tmp118, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp118, align 8
  %ob_refcnt119 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt119, align 8
  %dec120 = add i64 %91, -1
  store i64 %dec120, i64* %ob_refcnt119, align 8
  %cmp121 = icmp ne i64 %dec120, 0
  br i1 %cmp121, label %if.then.122, label %if.else.123

if.then.122:                                      ; preds = %do.body.116
  br label %if.end.126

if.else.123:                                      ; preds = %do.body.116
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp118, align 8
  %ob_type124 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type124, align 8
  %tp_dealloc125 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc125, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp118, align 8
  call void %94(%struct._object* %95)
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.123, %if.then.122
  br label %do.end.127

do.end.127:                                       ; preds = %if.end.126
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body.128

do.body.128:                                      ; preds = %while.end
  %96 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %96, %struct._object** %_py_decref_tmp130, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_refcnt131 = getelementptr inbounds %struct._object, %struct._object* %97, i32 0, i32 0
  %98 = load i64, i64* %ob_refcnt131, align 8
  %dec132 = add i64 %98, -1
  store i64 %dec132, i64* %ob_refcnt131, align 8
  %cmp133 = icmp ne i64 %dec132, 0
  br i1 %cmp133, label %if.then.134, label %if.else.135

if.then.134:                                      ; preds = %do.body.128
  br label %if.end.138

if.else.135:                                      ; preds = %do.body.128
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_type136 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 1
  %100 = load %struct._typeobject*, %struct._typeobject** %ob_type136, align 8
  %tp_dealloc137 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 4
  %101 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc137, align 8
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  call void %101(%struct._object* %102)
  br label %if.end.138

if.end.138:                                       ; preds = %if.else.135, %if.then.134
  br label %do.end.139

do.end.139:                                       ; preds = %if.end.138
  br label %if.end.140

if.end.140:                                       ; preds = %do.end.139, %if.end.73
  %103 = load %struct._object*, %struct._object** %slotstate, align 8
  %cmp141 = icmp ne %struct._object* %103, null
  br i1 %cmp141, label %if.then.142, label %if.end.168

if.then.142:                                      ; preds = %if.end.140
  %104 = load %struct._object*, %struct._object** %slotstate, align 8
  %ob_type149 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type149, align 8
  %tp_flags150 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 19
  %106 = load i64, i64* %tp_flags150, align 8
  %and151 = and i64 %106, 536870912
  %cmp152 = icmp ne i64 %and151, 0
  br i1 %cmp152, label %if.end.158, label %if.then.153

if.then.153:                                      ; preds = %if.then.142
  %call156 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call156, %struct.PickleState** %st155, align 8
  %107 = load %struct.PickleState*, %struct.PickleState** %st155, align 8
  %UnpicklingError157 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %107, i32 0, i32 2
  %108 = load %struct._object*, %struct._object** %UnpicklingError157, align 8
  call void @PyErr_SetString(%struct._object* %108, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.125, i32 0, i32 0))
  br label %error

if.end.158:                                       ; preds = %if.then.142
  store i64 0, i64* %i148, align 8
  br label %while.cond.159

while.cond.159:                                   ; preds = %if.end.166, %if.end.158
  %109 = load %struct._object*, %struct._object** %slotstate, align 8
  %call160 = call i32 @PyDict_Next(%struct._object* %109, i64* %i148, %struct._object** %d_key144, %struct._object** %d_value146)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %while.body.162, label %while.end.167

while.body.162:                                   ; preds = %while.cond.159
  %110 = load %struct._object*, %struct._object** %inst, align 8
  %111 = load %struct._object*, %struct._object** %d_key144, align 8
  %112 = load %struct._object*, %struct._object** %d_value146, align 8
  %call163 = call i32 @PyObject_SetAttr(%struct._object* %110, %struct._object* %111, %struct._object* %112)
  %cmp164 = icmp slt i32 %call163, 0
  br i1 %cmp164, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %while.body.162
  br label %error

if.end.166:                                       ; preds = %while.body.162
  br label %while.cond.159

while.end.167:                                    ; preds = %while.cond.159
  br label %if.end.168

if.end.168:                                       ; preds = %while.end.167, %if.end.140
  br i1 false, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %if.end.168
  br label %error

error:                                            ; preds = %if.then.169, %if.then.165, %if.then.153, %do.end.114, %if.then.90, %if.then.84
  store i32 -1, i32* %status, align 4
  br label %if.end.170

if.end.170:                                       ; preds = %error, %if.end.168
  br label %do.body.171

do.body.171:                                      ; preds = %if.end.170
  %113 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %113, %struct._object** %_py_decref_tmp173, align 8
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  %ob_refcnt174 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 0
  %115 = load i64, i64* %ob_refcnt174, align 8
  %dec175 = add i64 %115, -1
  store i64 %dec175, i64* %ob_refcnt174, align 8
  %cmp176 = icmp ne i64 %dec175, 0
  br i1 %cmp176, label %if.then.177, label %if.else.178

if.then.177:                                      ; preds = %do.body.171
  br label %if.end.181

if.else.178:                                      ; preds = %do.body.171
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  %ob_type179 = getelementptr inbounds %struct._object, %struct._object* %116, i32 0, i32 1
  %117 = load %struct._typeobject*, %struct._typeobject** %ob_type179, align 8
  %tp_dealloc180 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %117, i32 0, i32 4
  %118 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc180, align 8
  %119 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  call void %118(%struct._object* %119)
  br label %if.end.181

if.end.181:                                       ; preds = %if.else.178, %if.then.177
  br label %do.end.182

do.end.182:                                       ; preds = %if.end.181
  br label %do.body.183

do.body.183:                                      ; preds = %do.end.182
  %120 = load %struct._object*, %struct._object** %slotstate, align 8
  store %struct._object* %120, %struct._object** %_py_xdecref_tmp, align 8
  %121 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp185 = icmp ne %struct._object* %121, null
  br i1 %cmp185, label %if.then.186, label %if.end.199

if.then.186:                                      ; preds = %do.body.183
  br label %do.body.187

do.body.187:                                      ; preds = %if.then.186
  %122 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %122, %struct._object** %_py_decref_tmp189, align 8
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  %ob_refcnt190 = getelementptr inbounds %struct._object, %struct._object* %123, i32 0, i32 0
  %124 = load i64, i64* %ob_refcnt190, align 8
  %dec191 = add i64 %124, -1
  store i64 %dec191, i64* %ob_refcnt190, align 8
  %cmp192 = icmp ne i64 %dec191, 0
  br i1 %cmp192, label %if.then.193, label %if.else.194

if.then.193:                                      ; preds = %do.body.187
  br label %if.end.197

if.else.194:                                      ; preds = %do.body.187
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  %ob_type195 = getelementptr inbounds %struct._object, %struct._object* %125, i32 0, i32 1
  %126 = load %struct._typeobject*, %struct._typeobject** %ob_type195, align 8
  %tp_dealloc196 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %126, i32 0, i32 4
  %127 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc196, align 8
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp189, align 8
  call void %127(%struct._object* %128)
  br label %if.end.197

if.end.197:                                       ; preds = %if.else.194, %if.then.193
  br label %do.end.198

do.end.198:                                       ; preds = %if.end.197
  br label %if.end.199

if.end.199:                                       ; preds = %do.end.198, %do.body.183
  br label %do.end.200

do.end.200:                                       ; preds = %if.end.199
  %129 = load i32, i32* %status, align 4
  store i32 %129, i32* %retval
  br label %return

return:                                           ; preds = %do.end.200, %do.end.47, %if.then.35, %do.end.19, %if.then.4, %if.then
  %130 = load i32, i32* %retval
  ret i32 %130
}

; Function Attrs: nounwind uwtable
define internal i32 @load_dup(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %last = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = bitcast %struct.Pdata* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  store i64 %3, i64* %len, align 8
  %cmp = icmp sle i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @stack_underflow()
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %len, align 8
  %sub = sub i64 %4, 1
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 1
  %6 = load %struct.Pdata*, %struct.Pdata** %stack1, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %6, i32 0, i32 1
  %7 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %7, i64 %sub
  %8 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %8, %struct._object** %last, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %last, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 1
  %12 = load %struct.Pdata*, %struct.Pdata** %stack2, align 8
  %13 = load %struct._object*, %struct._object** %last, align 8
  %call3 = call i32 @Pdata_push(%struct.Pdata* %12, %struct._object* %13)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.6
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.5, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @load_binget(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %s = alloca i8*, align 8
  %key = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 1)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %and = and i32 %conv, 255
  %conv1 = trunc i32 %and to i8
  %conv2 = zext i8 %conv1 to i64
  store i64 %conv2, i64* %idx, align 8
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %4 = load i64, i64* %idx, align 8
  %call3 = call %struct._object* @_Unpickler_MemoGet(%struct.UnpicklerObject* %3, i64 %4)
  store %struct._object* %call3, %struct._object** %value, align 8
  %5 = load %struct._object*, %struct._object** %value, align 8
  %cmp4 = icmp eq %struct._object* %5, null
  br i1 %cmp4, label %if.then.6, label %if.end.16

if.then.6:                                        ; preds = %if.end
  %6 = load i64, i64* %idx, align 8
  %call7 = call %struct._object* @PyLong_FromSsize_t(i64 %6)
  store %struct._object* %call7, %struct._object** %key, align 8
  %7 = load %struct._object*, %struct._object** %key, align 8
  %cmp8 = icmp ne %struct._object* %7, null
  br i1 %cmp8, label %if.then.10, label %if.end.15

if.then.10:                                       ; preds = %if.then.6
  %8 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %9 = load %struct._object*, %struct._object** %key, align 8
  call void @PyErr_SetObject(%struct._object* %8, %struct._object* %9)
  br label %do.body

do.body:                                          ; preds = %if.then.10
  %10 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.14

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.14
  br label %if.end.15

if.end.15:                                        ; preds = %do.end, %if.then.6
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end
  br label %do.body.17

do.body.17:                                       ; preds = %if.end.16
  %17 = load %struct._object*, %struct._object** %value, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt18, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %ob_refcnt18, align 8
  %19 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %19, i32 0, i32 1
  %20 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %21 = load %struct._object*, %struct._object** %value, align 8
  %call19 = call i32 @Pdata_push(%struct.Pdata* %20, %struct._object* %21)
  %cmp20 = icmp slt i32 %call19, 0
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %do.body.17
  store i32 -1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %do.body.17
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.24, %if.then.22, %if.end.15, %if.then
  %22 = load i32, i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @load_long_binget(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %s = alloca i8*, align 8
  %key = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 4)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s, align 8
  %call1 = call i64 @calc_binsize(i8* %1, i32 4)
  store i64 %call1, i64* %idx, align 8
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %3 = load i64, i64* %idx, align 8
  %call2 = call %struct._object* @_Unpickler_MemoGet(%struct.UnpicklerObject* %2, i64 %3)
  store %struct._object* %call2, %struct._object** %value, align 8
  %4 = load %struct._object*, %struct._object** %value, align 8
  %cmp3 = icmp eq %struct._object* %4, null
  br i1 %cmp3, label %if.then.4, label %if.end.12

if.then.4:                                        ; preds = %if.end
  %5 = load i64, i64* %idx, align 8
  %call5 = call %struct._object* @PyLong_FromSsize_t(i64 %5)
  store %struct._object* %call5, %struct._object** %key, align 8
  %6 = load %struct._object*, %struct._object** %key, align 8
  %cmp6 = icmp ne %struct._object* %6, null
  br i1 %cmp6, label %if.then.7, label %if.end.11

if.then.7:                                        ; preds = %if.then.4
  %7 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %8 = load %struct._object*, %struct._object** %key, align 8
  call void @PyErr_SetObject(%struct._object* %7, %struct._object* %8)
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %9 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %if.end.11

if.end.11:                                        ; preds = %do.end, %if.then.4
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end
  br label %do.body.13

do.body.13:                                       ; preds = %if.end.12
  %16 = load %struct._object*, %struct._object** %value, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %ob_refcnt14, align 8
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %18, i32 0, i32 1
  %19 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %20 = load %struct._object*, %struct._object** %value, align 8
  %call15 = call i32 @Pdata_push(%struct.Pdata* %19, %struct._object* %20)
  %cmp16 = icmp slt i32 %call15, 0
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %do.body.13
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %do.body.13
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.19, %if.then.17, %if.end.11, %if.then
  %21 = load i32, i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal i32 @load_get(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %1, 2
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @bad_readline()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load i8*, i8** %s, align 8
  %call5 = call %struct._object* @PyLong_FromString(i8* %2, i8** null, i32 10)
  store %struct._object* %call5, %struct._object** %key, align 8
  %3 = load %struct._object*, %struct._object** %key, align 8
  %cmp6 = icmp eq %struct._object* %3, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %4 = load %struct._object*, %struct._object** %key, align 8
  %call9 = call i64 @PyLong_AsSsize_t(%struct._object* %4)
  store i64 %call9, i64* %idx, align 8
  %5 = load i64, i64* %idx, align 8
  %cmp10 = icmp eq i64 %5, -1
  br i1 %cmp10, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end.8
  %call11 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call11, null
  br i1 %tobool, label %if.then.12, label %if.end.16

if.then.12:                                       ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then.12
  %6 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %land.lhs.true, %if.end.8
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %14 = load i64, i64* %idx, align 8
  %call17 = call %struct._object* @_Unpickler_MemoGet(%struct.UnpicklerObject* %13, i64 %14)
  store %struct._object* %call17, %struct._object** %value, align 8
  %15 = load %struct._object*, %struct._object** %value, align 8
  %cmp18 = icmp eq %struct._object* %15, null
  br i1 %cmp18, label %if.then.19, label %if.end.35

if.then.19:                                       ; preds = %if.end.16
  %call20 = call %struct._object* @PyErr_Occurred()
  %tobool21 = icmp ne %struct._object* %call20, null
  br i1 %tobool21, label %if.end.23, label %if.then.22

if.then.22:                                       ; preds = %if.then.19
  %16 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %17 = load %struct._object*, %struct._object** %key, align 8
  call void @PyErr_SetObject(%struct._object* %16, %struct._object* %17)
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %if.then.19
  br label %do.body.24

do.body.24:                                       ; preds = %if.end.23
  %18 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp25, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %20, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body.24
  br label %if.end.33

if.else.30:                                       ; preds = %do.body.24
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc32, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %23(%struct._object* %24)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end.34

do.end.34:                                        ; preds = %if.end.33
  store i32 -1, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.end.16
  br label %do.body.36

do.body.36:                                       ; preds = %if.end.35
  %25 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %27, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.36
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.36
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %30(%struct._object* %31)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  br label %do.body.47

do.body.47:                                       ; preds = %do.end.46
  %32 = load %struct._object*, %struct._object** %value, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt48, align 8
  %inc = add i64 %33, 1
  store i64 %inc, i64* %ob_refcnt48, align 8
  %34 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %34, i32 0, i32 1
  %35 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %36 = load %struct._object*, %struct._object** %value, align 8
  %call49 = call i32 @Pdata_push(%struct.Pdata* %35, %struct._object* %36)
  %cmp50 = icmp slt i32 %call49, 0
  br i1 %cmp50, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %do.body.47
  store i32 -1, i32* %retval
  br label %return

if.end.52:                                        ; preds = %do.body.47
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.53, %if.then.51, %do.end.34, %do.end, %if.then.7, %if.then.2, %if.then
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal i32 @load_mark(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %alloc = alloca i64, align 8
  %marks = alloca i64*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 18
  %1 = load i64, i64* %num_marks, align 8
  %add = add i64 %1, 1
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 19
  %3 = load i64, i64* %marks_size, align 8
  %cmp = icmp sge i64 %add, %3
  br i1 %cmp, label %if.then, label %if.end.22

if.then:                                          ; preds = %entry
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 18
  %5 = load i64, i64* %num_marks1, align 8
  %shl = shl i64 %5, 1
  %add2 = add i64 %shl, 20
  store i64 %add2, i64* %alloc, align 8
  %6 = load i64, i64* %alloc, align 8
  %cmp3 = icmp ugt i64 %6, 1152921504606846975
  br i1 %cmp3, label %if.then.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i64, i64* %alloc, align 8
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks4 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 18
  %9 = load i64, i64* %num_marks4, align 8
  %add5 = add i64 %9, 1
  %cmp6 = icmp ule i64 %7, %add5
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %lor.lhs.false, %if.then
  %call = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks8 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 17
  %11 = load i64*, i64** %marks8, align 8
  %cmp9 = icmp eq i64* %11, null
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %12 = load i64, i64* %alloc, align 8
  %mul = mul i64 %12, 8
  %call11 = call i8* @PyMem_Malloc(i64 %mul)
  %13 = bitcast i8* %call11 to i64*
  store i64* %13, i64** %marks, align 8
  br label %if.end.15

if.else:                                          ; preds = %if.end
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks12 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 17
  %15 = load i64*, i64** %marks12, align 8
  %16 = bitcast i64* %15 to i8*
  %17 = load i64, i64* %alloc, align 8
  %mul13 = mul i64 %17, 8
  %call14 = call i8* @PyMem_Realloc(i8* %16, i64 %mul13)
  %18 = bitcast i8* %call14 to i64*
  store i64* %18, i64** %marks, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.10
  %19 = load i64*, i64** %marks, align 8
  %cmp16 = icmp eq i64* %19, null
  br i1 %cmp16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %if.end.15
  %call18 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.end.15
  %20 = load i64*, i64** %marks, align 8
  %21 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks20 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %21, i32 0, i32 17
  store i64* %20, i64** %marks20, align 8
  %22 = load i64, i64* %alloc, align 8
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks_size21 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %23, i32 0, i32 19
  store i64 %22, i64* %marks_size21, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.19, %entry
  %24 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %24, i32 0, i32 1
  %25 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %26 = bitcast %struct.Pdata* %25 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %26, i32 0, i32 1
  %27 = load i64, i64* %ob_size, align 8
  %28 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks23 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %28, i32 0, i32 18
  %29 = load i64, i64* %num_marks23, align 8
  %inc = add i64 %29, 1
  store i64 %inc, i64* %num_marks23, align 8
  %30 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks24 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %30, i32 0, i32 17
  %31 = load i64*, i64** %marks24, align 8
  %arrayidx = getelementptr i64, i64* %31, i64 %29
  store i64 %27, i64* %arrayidx, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.22, %if.then.17, %if.then.7
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal i32 @load_binput(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 1)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = bitcast %struct.Pdata* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %cmp1 = icmp sle i64 %4, 0
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @stack_underflow()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 1
  %6 = load %struct.Pdata*, %struct.Pdata** %stack5, align 8
  %7 = bitcast %struct.Pdata* %6 to %struct.PyVarObject*
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1
  %8 = load i64, i64* %ob_size6, align 8
  %sub = sub i64 %8, 1
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 1
  %10 = load %struct.Pdata*, %struct.Pdata** %stack7, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %10, i32 0, i32 1
  %11 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %11, i64 %sub
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %12, %struct._object** %value, align 8
  %13 = load i8*, i8** %s, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx8, align 1
  %conv = sext i8 %14 to i32
  %and = and i32 %conv, 255
  %conv9 = trunc i32 %and to i8
  %conv10 = zext i8 %conv9 to i64
  store i64 %conv10, i64* %idx, align 8
  %15 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %16 = load i64, i64* %idx, align 8
  %17 = load %struct._object*, %struct._object** %value, align 8
  %call11 = call i32 @_Unpickler_MemoPut(%struct.UnpicklerObject* %15, i64 %16, %struct._object* %17)
  store i32 %call11, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.2, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal i32 @load_long_binput(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 4)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = bitcast %struct.Pdata* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %cmp1 = icmp sle i64 %4, 0
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @stack_underflow()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 1
  %6 = load %struct.Pdata*, %struct.Pdata** %stack5, align 8
  %7 = bitcast %struct.Pdata* %6 to %struct.PyVarObject*
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1
  %8 = load i64, i64* %ob_size6, align 8
  %sub = sub i64 %8, 1
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 1
  %10 = load %struct.Pdata*, %struct.Pdata** %stack7, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %10, i32 0, i32 1
  %11 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %11, i64 %sub
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %12, %struct._object** %value, align 8
  %13 = load i8*, i8** %s, align 8
  %call8 = call i64 @calc_binsize(i8* %13, i32 4)
  store i64 %call8, i64* %idx, align 8
  %14 = load i64, i64* %idx, align 8
  %cmp9 = icmp slt i64 %14, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.4
  %15 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.126, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.4
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %17 = load i64, i64* %idx, align 8
  %18 = load %struct._object*, %struct._object** %value, align 8
  %call12 = call i32 @_Unpickler_MemoPut(%struct.UnpicklerObject* %16, i64 %17, %struct._object* %18)
  store i32 %call12, i32* %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.10, %if.then.2, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @load_put(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %0, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %1, 2
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %call3 = call i32 @bad_readline()
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 1
  %3 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %4 = bitcast %struct.Pdata* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  %cmp5 = icmp sle i64 %5, 0
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end.4
  %call7 = call i32 @stack_underflow()
  store i32 %call7, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 1
  %7 = load %struct.Pdata*, %struct.Pdata** %stack9, align 8
  %8 = bitcast %struct.Pdata* %7 to %struct.PyVarObject*
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1
  %9 = load i64, i64* %ob_size10, align 8
  %sub = sub i64 %9, 1
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack11 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 1
  %11 = load %struct.Pdata*, %struct.Pdata** %stack11, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %11, i32 0, i32 1
  %12 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %12, i64 %sub
  %13 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %13, %struct._object** %value, align 8
  %14 = load i8*, i8** %s, align 8
  %call12 = call %struct._object* @PyLong_FromString(i8* %14, i8** null, i32 10)
  store %struct._object* %call12, %struct._object** %key, align 8
  %15 = load %struct._object*, %struct._object** %key, align 8
  %cmp13 = icmp eq %struct._object* %15, null
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.8
  %16 = load %struct._object*, %struct._object** %key, align 8
  %call16 = call i64 @PyLong_AsSsize_t(%struct._object* %16)
  store i64 %call16, i64* %idx, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.15
  %17 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %19, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp17 = icmp ne i64 %dec, 0
  br i1 %cmp17, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %do.body
  br label %if.end.19

if.else:                                          ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %24 = load i64, i64* %idx, align 8
  %cmp20 = icmp slt i64 %24, 0
  br i1 %cmp20, label %if.then.21, label %if.end.25

if.then.21:                                       ; preds = %do.end
  %call22 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call22, null
  br i1 %tobool, label %if.end.24, label %if.then.23

if.then.23:                                       ; preds = %if.then.21
  %25 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.127, i32 0, i32 0))
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.23, %if.then.21
  store i32 -1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %do.end
  %26 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %27 = load i64, i64* %idx, align 8
  %28 = load %struct._object*, %struct._object** %value, align 8
  %call26 = call i32 @_Unpickler_MemoPut(%struct.UnpicklerObject* %26, i64 %27, %struct._object* %28)
  store i32 %call26, i32* %retval
  br label %return

return:                                           ; preds = %if.end.25, %if.end.24, %if.then.14, %if.then.6, %if.then.2, %if.then
  %29 = load i32, i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal i32 @load_memoize(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = bitcast %struct.Pdata* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  %cmp = icmp sle i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @stack_underflow()
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 1
  %5 = load %struct.Pdata*, %struct.Pdata** %stack1, align 8
  %6 = bitcast %struct.Pdata* %5 to %struct.PyVarObject*
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1
  %7 = load i64, i64* %ob_size2, align 8
  %sub = sub i64 %7, 1
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 1
  %9 = load %struct.Pdata*, %struct.Pdata** %stack3, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %9, i32 0, i32 1
  %10 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %10, i64 %sub
  %11 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %11, %struct._object** %value, align 8
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_len = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %13, i32 0, i32 4
  %14 = load i64, i64* %memo_len, align 8
  %15 = load %struct._object*, %struct._object** %value, align 8
  %call4 = call i32 @_Unpickler_MemoPut(%struct.UnpicklerObject* %12, i64 %14, %struct._object* %15)
  store i32 %call4, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal i32 @load_pop(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %len = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = bitcast %struct.Pdata* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  store i64 %3, i64* %len, align 8
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 18
  %5 = load i64, i64* %num_marks, align 8
  %cmp = icmp sgt i64 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 18
  %7 = load i64, i64* %num_marks1, align 8
  %sub = sub i64 %7, 1
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 17
  %9 = load i64*, i64** %marks, align 8
  %arrayidx = getelementptr i64, i64* %9, i64 %sub
  %10 = load i64, i64* %arrayidx, align 8
  %11 = load i64, i64* %len, align 8
  %cmp2 = icmp eq i64 %10, %11
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %12, i32 0, i32 18
  %13 = load i64, i64* %num_marks3, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %num_marks3, align 8
  br label %if.end.17

if.else:                                          ; preds = %land.lhs.true, %entry
  %14 = load i64, i64* %len, align 8
  %cmp4 = icmp sgt i64 %14, 0
  br i1 %cmp4, label %if.then.5, label %if.else.15

if.then.5:                                        ; preds = %if.else
  %15 = load i64, i64* %len, align 8
  %dec6 = add i64 %15, -1
  store i64 %dec6, i64* %len, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %16 = load i64, i64* %len, align 8
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %17, i32 0, i32 1
  %18 = load %struct.Pdata*, %struct.Pdata** %stack7, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %18, i32 0, i32 1
  %19 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx8 = getelementptr %struct._object*, %struct._object** %19, i64 %16
  %20 = load %struct._object*, %struct._object** %arrayidx8, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %dec9 = add i64 %22, -1
  store i64 %dec9, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec9, 0
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %do.body
  br label %if.end

if.else.12:                                       ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end

if.end:                                           ; preds = %if.else.12, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end
  %27 = load i64, i64* %len, align 8
  %28 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack13 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %28, i32 0, i32 1
  %29 = load %struct.Pdata*, %struct.Pdata** %stack13, align 8
  %30 = bitcast %struct.Pdata* %29 to %struct.PyVarObject*
  %ob_size14 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %30, i32 0, i32 1
  store i64 %27, i64* %ob_size14, align 8
  br label %if.end.16

if.else.15:                                       ; preds = %if.else
  %call = call i32 @stack_underflow()
  store i32 %call, i32* %retval
  br label %return

if.end.16:                                        ; preds = %do.end
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.then
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.else.15
  %31 = load i32, i32* %retval
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal i32 @load_pop_mark(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %i = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %0)
  store i64 %call, i64* %i, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = load i64, i64* %i, align 8
  %call1 = call i32 @Pdata_clear(%struct.Pdata* %2, i64 %3)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal i32 @load_setitem(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 1
  %2 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %3 = bitcast %struct.Pdata* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %sub = sub i64 %4, 2
  %call = call i32 @do_setitems(%struct.UnpicklerObject* %0, i64 %sub)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @load_setitems(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @marker(%struct.UnpicklerObject* %1)
  %call1 = call i32 @do_setitems(%struct.UnpicklerObject* %0, i64 %call)
  ret i32 %call1
}

; Function Attrs: nounwind uwtable
define internal i32 @load_persid(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %pid = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 5
  %1 = load %struct._object*, %struct._object** %pers_func, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Readline(%struct.UnpicklerObject* %2, i8** %s)
  store i64 %call, i64* %len, align 8
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %3 = load i64, i64* %len, align 8
  %cmp2 = icmp slt i64 %3, 1
  br i1 %cmp2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %call4 = call i32 @bad_readline()
  store i32 %call4, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %4 = load i8*, i8** %s, align 8
  %5 = load i64, i64* %len, align 8
  %sub = sub i64 %5, 1
  %call6 = call %struct._object* @PyBytes_FromStringAndSize(i8* %4, i64 %sub)
  store %struct._object* %call6, %struct._object** %pid, align 8
  %6 = load %struct._object*, %struct._object** %pid, align 8
  %cmp7 = icmp eq %struct._object* %6, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.5
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func10 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 5
  %8 = load %struct._object*, %struct._object** %pers_func10, align 8
  %9 = load %struct._object*, %struct._object** %pid, align 8
  %call11 = call %struct._object* @_Pickle_FastCall(%struct._object* %8, %struct._object* %9)
  store %struct._object* %call11, %struct._object** %pid, align 8
  %10 = load %struct._object*, %struct._object** %pid, align 8
  %cmp12 = icmp eq %struct._object* %10, null
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.9
  store i32 -1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.9
  br label %do.body

do.body:                                          ; preds = %if.end.14
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 1
  %12 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %13 = load %struct._object*, %struct._object** %pid, align 8
  %call15 = call i32 @Pdata_push(%struct.Pdata* %12, %struct._object* %13)
  %cmp16 = icmp slt i32 %call15, 0
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.18
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %call19 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call19, %struct.PickleState** %st, align 8
  %14 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %14, i32 0, i32 2
  %15 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.129, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %do.end, %if.then.17, %if.then.13, %if.then.8, %if.then.3, %if.then.1
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal i32 @load_binpersid(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %pid = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 5
  %1 = load %struct._object*, %struct._object** %pers_func, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 1
  %3 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %call = call %struct._object* @Pdata_pop(%struct.Pdata* %3)
  store %struct._object* %call, %struct._object** %pid, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load %struct._object*, %struct._object** %pid, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 5
  %6 = load %struct._object*, %struct._object** %pers_func2, align 8
  %7 = load %struct._object*, %struct._object** %pid, align 8
  %call3 = call %struct._object* @_Pickle_FastCall(%struct._object* %6, %struct._object* %7)
  store %struct._object* %call3, %struct._object** %pid, align 8
  %8 = load %struct._object*, %struct._object** %pid, align 8
  %cmp4 = icmp eq %struct._object* %8, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  br label %do.body.7

do.body.7:                                        ; preds = %if.end.6
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack8 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 1
  %10 = load %struct.Pdata*, %struct.Pdata** %stack8, align 8
  %11 = load %struct._object*, %struct._object** %pid, align 8
  %call9 = call i32 @Pdata_push(%struct.Pdata* %10, %struct._object* %11)
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %do.body.7
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %do.body.7
  br label %do.end.13

do.end.13:                                        ; preds = %if.end.12
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %call14 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call14, %struct.PickleState** %st, align 8
  %12 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @.str.129, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %do.end.13, %if.then.11, %if.then.5, %if.then.1
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @load_reduce(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %callable = alloca %struct._object*, align 8
  %argtup = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp14 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* null, %struct._object** %callable, align 8
  store %struct._object* null, %struct._object** %argtup, align 8
  store %struct._object* null, %struct._object** %obj, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %call = call %struct._object* @Pdata_pop(%struct.Pdata* %1)
  store %struct._object* %call, %struct._object** %argtup, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load %struct._object*, %struct._object** %argtup, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %do.end
  br label %do.body.1

do.body.1:                                        ; preds = %if.end
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 1
  %4 = load %struct.Pdata*, %struct.Pdata** %stack2, align 8
  %call3 = call %struct._object* @Pdata_pop(%struct.Pdata* %4)
  store %struct._object* %call3, %struct._object** %callable, align 8
  br label %do.end.4

do.end.4:                                         ; preds = %do.body.1
  %5 = load %struct._object*, %struct._object** %callable, align 8
  %tobool = icmp ne %struct._object* %5, null
  br i1 %tobool, label %if.then.5, label %if.end.12

if.then.5:                                        ; preds = %do.end.4
  %6 = load %struct._object*, %struct._object** %callable, align 8
  %7 = load %struct._object*, %struct._object** %argtup, align 8
  %call6 = call %struct._object* @PyObject_CallObject(%struct._object* %6, %struct._object* %7)
  store %struct._object* %call6, %struct._object** %obj, align 8
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.5
  %8 = load %struct._object*, %struct._object** %callable, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body.7
  br label %if.end.10

if.else:                                          ; preds = %do.body.7
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end.11

do.end.11:                                        ; preds = %if.end.10
  br label %if.end.12

if.end.12:                                        ; preds = %do.end.11, %do.end.4
  br label %do.body.13

do.body.13:                                       ; preds = %if.end.12
  %15 = load %struct._object*, %struct._object** %argtup, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp14, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt15, align 8
  %dec16 = add i64 %17, -1
  store i64 %dec16, i64* %ob_refcnt15, align 8
  %cmp17 = icmp ne i64 %dec16, 0
  br i1 %cmp17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %do.body.13
  br label %if.end.22

if.else.19:                                       ; preds = %do.body.13
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc21, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  call void %20(%struct._object* %21)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.18
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  %22 = load %struct._object*, %struct._object** %obj, align 8
  %cmp24 = icmp eq %struct._object* %22, null
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %do.end.23
  store i32 -1, i32* %retval
  br label %return

if.end.26:                                        ; preds = %do.end.23
  br label %do.body.27

do.body.27:                                       ; preds = %if.end.26
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack28 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %23, i32 0, i32 1
  %24 = load %struct.Pdata*, %struct.Pdata** %stack28, align 8
  %25 = load %struct._object*, %struct._object** %obj, align 8
  %call29 = call i32 @Pdata_push(%struct.Pdata* %24, %struct._object* %25)
  %cmp30 = icmp slt i32 %call29, 0
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %do.body.27
  store i32 -1, i32* %retval
  br label %return

if.end.32:                                        ; preds = %do.body.27
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.33, %if.then.31, %if.then.25, %if.then
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal i32 @load_proto(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %s = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 1)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  store i32 %conv, i32* %i, align 4
  %3 = load i32, i32* %i, align 4
  %cmp1 = icmp sle i32 %3, 4
  br i1 %cmp1, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 20
  store i32 %4, i32* %proto, align 4
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %6 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %7 = load i32, i32* %i, align 4
  %call5 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %6, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.130, i32 0, i32 0), i32 %7)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %8 = load i32, i32* %retval
  ret i32 %8
}

; Function Attrs: nounwind uwtable
define internal i32 @load_frame(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %s = alloca i8*, align 8
  %frame_len = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %s, i64 8)
  %cmp = icmp slt i64 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %s, align 8
  %call1 = call i64 @calc_binsize(i8* %1, i32 8)
  store i64 %call1, i64* %frame_len, align 8
  %2 = load i64, i64* %frame_len, align 8
  %cmp2 = icmp slt i64 %2, 0
  br i1 %cmp2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %3, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.131, i32 0, i32 0), i64 9223372036854775807)
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %5 = load i64, i64* %frame_len, align 8
  %call6 = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %4, i8** %s, i64 %5)
  %cmp7 = icmp slt i64 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.5
  %6 = load i64, i64* %frame_len, align 8
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 10
  %8 = load i64, i64* %next_read_idx, align 8
  %sub = sub i64 %8, %6
  store i64 %sub, i64* %next_read_idx, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.8, %if.then.3, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @load_extension(%struct.UnpicklerObject* %self, i32 %nbytes) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %nbytes.addr = alloca i32, align 4
  %codebytes = alloca i8*, align 8
  %code = alloca i64, align 8
  %py_code = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %pair = alloca %struct._object*, align 8
  %module_name = alloca %struct._object*, align 8
  %class_name = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp50 = alloca %struct._object*, align 8
  %_py_decref_tmp89 = alloca %struct._object*, align 8
  %_py_decref_tmp107 = alloca %struct._object*, align 8
  %_py_decref_tmp123 = alloca %struct._object*, align 8
  %_py_decref_tmp138 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = load i32, i32* %nbytes.addr, align 4
  %conv = sext i32 %1 to i64
  %call1 = call i64 @_Unpickler_Read(%struct.UnpicklerObject* %0, i8** %codebytes, i64 %conv)
  %cmp = icmp slt i64 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %codebytes, align 8
  %3 = load i32, i32* %nbytes.addr, align 4
  %call3 = call i64 @calc_binint(i8* %2, i32 %3)
  store i64 %call3, i64* %code, align 8
  %4 = load i64, i64* %code, align 8
  %cmp4 = icmp sle i64 %4, 0
  br i1 %cmp4, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %5 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.132, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %7 = load i64, i64* %code, align 8
  %call8 = call %struct._object* @PyLong_FromLong(i64 %7)
  store %struct._object* %call8, %struct._object** %py_code, align 8
  %8 = load %struct._object*, %struct._object** %py_code, align 8
  %cmp9 = icmp eq %struct._object* %8, null
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.7
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.7
  %9 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %extension_cache = getelementptr inbounds %struct.PickleState, %struct.PickleState* %9, i32 0, i32 5
  %10 = load %struct._object*, %struct._object** %extension_cache, align 8
  %11 = load %struct._object*, %struct._object** %py_code, align 8
  %call13 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %10, %struct._object* %11)
  store %struct._object* %call13, %struct._object** %obj, align 8
  %12 = load %struct._object*, %struct._object** %obj, align 8
  %cmp14 = icmp ne %struct._object* %12, null
  br i1 %cmp14, label %if.then.16, label %if.end.29

if.then.16:                                       ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.then.16
  %13 = load %struct._object*, %struct._object** %py_code, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp17 = icmp ne i64 %dec, 0
  br i1 %cmp17, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %do.body
  br label %if.end.20

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.19
  br label %do.end

do.end:                                           ; preds = %if.end.20
  br label %do.body.21

do.body.21:                                       ; preds = %do.end
  %20 = load %struct._object*, %struct._object** %obj, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt22, align 8
  %inc = add i64 %21, 1
  store i64 %inc, i64* %ob_refcnt22, align 8
  %22 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %22, i32 0, i32 1
  %23 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %24 = load %struct._object*, %struct._object** %obj, align 8
  %call23 = call i32 @Pdata_push(%struct.Pdata* %23, %struct._object* %24)
  %cmp24 = icmp slt i32 %call23, 0
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %do.body.21
  store i32 -1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %do.body.21
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end.12
  %call30 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call30, null
  br i1 %tobool, label %if.then.31, label %if.end.44

if.then.31:                                       ; preds = %if.end.29
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.31
  %25 = load %struct._object*, %struct._object** %py_code, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp33, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %27, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.32
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.32
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %30(%struct._object* %31)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  store i32 -1, i32* %retval
  br label %return

if.end.44:                                        ; preds = %if.end.29
  %32 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %inverted_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %32, i32 0, i32 6
  %33 = load %struct._object*, %struct._object** %inverted_registry, align 8
  %34 = load %struct._object*, %struct._object** %py_code, align 8
  %call45 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %33, %struct._object* %34)
  store %struct._object* %call45, %struct._object** %pair, align 8
  %35 = load %struct._object*, %struct._object** %pair, align 8
  %cmp46 = icmp eq %struct._object* %35, null
  br i1 %cmp46, label %if.then.48, label %if.end.66

if.then.48:                                       ; preds = %if.end.44
  br label %do.body.49

do.body.49:                                       ; preds = %if.then.48
  %36 = load %struct._object*, %struct._object** %py_code, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp50, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt51, align 8
  %dec52 = add i64 %38, -1
  store i64 %dec52, i64* %ob_refcnt51, align 8
  %cmp53 = icmp ne i64 %dec52, 0
  br i1 %cmp53, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %do.body.49
  br label %if.end.59

if.else.56:                                       ; preds = %do.body.49
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  call void %41(%struct._object* %42)
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  %call61 = call %struct._object* @PyErr_Occurred()
  %tobool62 = icmp ne %struct._object* %call61, null
  br i1 %tobool62, label %if.end.65, label %if.then.63

if.then.63:                                       ; preds = %do.end.60
  %43 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %44 = load i64, i64* %code, align 8
  %call64 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %43, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.133, i32 0, i32 0), i64 %44)
  br label %if.end.65

if.end.65:                                        ; preds = %if.then.63, %do.end.60
  store i32 -1, i32* %retval
  br label %return

if.end.66:                                        ; preds = %if.end.44
  %45 = load %struct._object*, %struct._object** %pair, align 8
  %ob_type67 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type67, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 19
  %47 = load i64, i64* %tp_flags, align 8
  %and = and i64 %47, 67108864
  %cmp68 = icmp ne i64 %and, 0
  br i1 %cmp68, label %lor.lhs.false, label %if.then.87

lor.lhs.false:                                    ; preds = %if.end.66
  %48 = load %struct._object*, %struct._object** %pair, align 8
  %call70 = call i64 @PyTuple_Size(%struct._object* %48)
  %cmp71 = icmp ne i64 %call70, 2
  br i1 %cmp71, label %if.then.87, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %lor.lhs.false
  %49 = load %struct._object*, %struct._object** %pair, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %50, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %51 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %51, %struct._object** %module_name, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_flags75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 19
  %53 = load i64, i64* %tp_flags75, align 8
  %and76 = and i64 %53, 268435456
  %cmp77 = icmp ne i64 %and76, 0
  br i1 %cmp77, label %lor.lhs.false.79, label %if.then.87

lor.lhs.false.79:                                 ; preds = %lor.lhs.false.73
  %54 = load %struct._object*, %struct._object** %pair, align 8
  %55 = bitcast %struct._object* %54 to %struct.PyTupleObject*
  %ob_item80 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %55, i32 0, i32 1
  %arrayidx81 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item80, i32 0, i64 1
  %56 = load %struct._object*, %struct._object** %arrayidx81, align 8
  store %struct._object* %56, %struct._object** %class_name, align 8
  %ob_type82 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type82, align 8
  %tp_flags83 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 19
  %58 = load i64, i64* %tp_flags83, align 8
  %and84 = and i64 %58, 268435456
  %cmp85 = icmp ne i64 %and84, 0
  br i1 %cmp85, label %if.end.101, label %if.then.87

if.then.87:                                       ; preds = %lor.lhs.false.79, %lor.lhs.false.73, %lor.lhs.false, %if.end.66
  br label %do.body.88

do.body.88:                                       ; preds = %if.then.87
  %59 = load %struct._object*, %struct._object** %py_code, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp89, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_refcnt90 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt90, align 8
  %dec91 = add i64 %61, -1
  store i64 %dec91, i64* %ob_refcnt90, align 8
  %cmp92 = icmp ne i64 %dec91, 0
  br i1 %cmp92, label %if.then.94, label %if.else.95

if.then.94:                                       ; preds = %do.body.88
  br label %if.end.98

if.else.95:                                       ; preds = %do.body.88
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_type96 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type96, align 8
  %tp_dealloc97 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc97, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  call void %64(%struct._object* %65)
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.95, %if.then.94
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  %66 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %67 = load i64, i64* %code, align 8
  %call100 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %66, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.134, i32 0, i32 0), i64 %67)
  store i32 -1, i32* %retval
  br label %return

if.end.101:                                       ; preds = %lor.lhs.false.79
  %68 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %69 = load %struct._object*, %struct._object** %module_name, align 8
  %70 = load %struct._object*, %struct._object** %class_name, align 8
  %call102 = call %struct._object* @find_class(%struct.UnpicklerObject* %68, %struct._object* %69, %struct._object* %70)
  store %struct._object* %call102, %struct._object** %obj, align 8
  %71 = load %struct._object*, %struct._object** %obj, align 8
  %cmp103 = icmp eq %struct._object* %71, null
  br i1 %cmp103, label %if.then.105, label %if.end.118

if.then.105:                                      ; preds = %if.end.101
  br label %do.body.106

do.body.106:                                      ; preds = %if.then.105
  %72 = load %struct._object*, %struct._object** %py_code, align 8
  store %struct._object* %72, %struct._object** %_py_decref_tmp107, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  %ob_refcnt108 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt108, align 8
  %dec109 = add i64 %74, -1
  store i64 %dec109, i64* %ob_refcnt108, align 8
  %cmp110 = icmp ne i64 %dec109, 0
  br i1 %cmp110, label %if.then.112, label %if.else.113

if.then.112:                                      ; preds = %do.body.106
  br label %if.end.116

if.else.113:                                      ; preds = %do.body.106
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  %ob_type114 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type114, align 8
  %tp_dealloc115 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 4
  %77 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc115, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp107, align 8
  call void %77(%struct._object* %78)
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.113, %if.then.112
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  store i32 -1, i32* %retval
  br label %return

if.end.118:                                       ; preds = %if.end.101
  %79 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %extension_cache119 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %79, i32 0, i32 5
  %80 = load %struct._object*, %struct._object** %extension_cache119, align 8
  %81 = load %struct._object*, %struct._object** %py_code, align 8
  %82 = load %struct._object*, %struct._object** %obj, align 8
  %call120 = call i32 @PyDict_SetItem(%struct._object* %80, %struct._object* %81, %struct._object* %82)
  %conv121 = sext i32 %call120 to i64
  store i64 %conv121, i64* %code, align 8
  br label %do.body.122

do.body.122:                                      ; preds = %if.end.118
  %83 = load %struct._object*, %struct._object** %py_code, align 8
  store %struct._object* %83, %struct._object** %_py_decref_tmp123, align 8
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_refcnt124 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 0
  %85 = load i64, i64* %ob_refcnt124, align 8
  %dec125 = add i64 %85, -1
  store i64 %dec125, i64* %ob_refcnt124, align 8
  %cmp126 = icmp ne i64 %dec125, 0
  br i1 %cmp126, label %if.then.128, label %if.else.129

if.then.128:                                      ; preds = %do.body.122
  br label %if.end.132

if.else.129:                                      ; preds = %do.body.122
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_type130 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 1
  %87 = load %struct._typeobject*, %struct._typeobject** %ob_type130, align 8
  %tp_dealloc131 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %87, i32 0, i32 4
  %88 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc131, align 8
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  call void %88(%struct._object* %89)
  br label %if.end.132

if.end.132:                                       ; preds = %if.else.129, %if.then.128
  br label %do.end.133

do.end.133:                                       ; preds = %if.end.132
  %90 = load i64, i64* %code, align 8
  %cmp134 = icmp slt i64 %90, 0
  br i1 %cmp134, label %if.then.136, label %if.end.149

if.then.136:                                      ; preds = %do.end.133
  br label %do.body.137

do.body.137:                                      ; preds = %if.then.136
  %91 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %91, %struct._object** %_py_decref_tmp138, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8
  %ob_refcnt139 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0
  %93 = load i64, i64* %ob_refcnt139, align 8
  %dec140 = add i64 %93, -1
  store i64 %dec140, i64* %ob_refcnt139, align 8
  %cmp141 = icmp ne i64 %dec140, 0
  br i1 %cmp141, label %if.then.143, label %if.else.144

if.then.143:                                      ; preds = %do.body.137
  br label %if.end.147

if.else.144:                                      ; preds = %do.body.137
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8
  %ob_type145 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type145, align 8
  %tp_dealloc146 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc146, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8
  call void %96(%struct._object* %97)
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.143
  br label %do.end.148

do.end.148:                                       ; preds = %if.end.147
  store i32 -1, i32* %retval
  br label %return

if.end.149:                                       ; preds = %do.end.133
  br label %do.body.150

do.body.150:                                      ; preds = %if.end.149
  %98 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack151 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %98, i32 0, i32 1
  %99 = load %struct.Pdata*, %struct.Pdata** %stack151, align 8
  %100 = load %struct._object*, %struct._object** %obj, align 8
  %call152 = call i32 @Pdata_push(%struct.Pdata* %99, %struct._object* %100)
  %cmp153 = icmp slt i32 %call152, 0
  br i1 %cmp153, label %if.then.155, label %if.end.156

if.then.155:                                      ; preds = %do.body.150
  store i32 -1, i32* %retval
  br label %return

if.end.156:                                       ; preds = %do.body.150
  br label %do.end.157

do.end.157:                                       ; preds = %if.end.156
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.157, %if.then.155, %do.end.148, %do.end.117, %do.end.99, %if.end.65, %do.end.43, %do.end.28, %if.then.26, %if.then.11, %if.then.6, %if.then
  %101 = load i32, i32* %retval
  ret i32 %101
}

; Function Attrs: nounwind uwtable
define internal i32 @load_bool(%struct.UnpicklerObject* %self, %struct._object* %boolean) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %boolean.addr = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %boolean, %struct._object** %boolean.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._object*, %struct._object** %boolean.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 1
  %3 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %4 = load %struct._object*, %struct._object** %boolean.addr, align 8
  %call = call i32 @Pdata_push(%struct.Pdata* %3, %struct._object* %4)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %5 = load i32, i32* %retval
  ret i32 %5
}

declare void @PyErr_SetNone(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @_Unpickler_SkipConsumed(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %consumed = alloca i64, align 8
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 10
  %1 = load i64, i64* %next_read_idx, align 8
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %prefetched_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 11
  %3 = load i64, i64* %prefetched_idx, align 8
  %sub = sub i64 %1, %3
  store i64 %sub, i64* %consumed, align 8
  %4 = load i64, i64* %consumed, align 8
  %cmp = icmp sle i64 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 12
  %6 = load %struct._object*, %struct._object** %read, align 8
  %7 = load i64, i64* %consumed, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.135, i32 0, i32 0), i64 %7)
  store %struct._object* %call, %struct._object** %r, align 8
  %8 = load %struct._object*, %struct._object** %r, align 8
  %cmp1 = icmp eq %struct._object* %8, null
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.3
  %9 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %16, i32 0, i32 10
  %17 = load i64, i64* %next_read_idx7, align 8
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %prefetched_idx8 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %18, i32 0, i32 11
  store i64 %17, i64* %prefetched_idx8, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.2, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @Pdata_pop(%struct.Pdata* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.Pdata*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.Pdata* %self, %struct.Pdata** %self.addr, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %0 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %1 = bitcast %struct.Pdata* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.136, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %6 = bitcast %struct.Pdata* %5 to %struct.PyVarObject*
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1
  %7 = load i64, i64* %ob_size1, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_size1, align 8
  %8 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %8, i32 0, i32 1
  %9 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %9, i64 %dec
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %10, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal i32 @stack_underflow() #0 {
entry:
  %st = alloca %struct.PickleState*, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %0 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %0, i32 0, i32 2
  %1 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.97, i32 0, i32 0))
  ret i32 -1
}

; Function Attrs: nounwind uwtable
define internal i64 @_Unpickler_ReadFromFile(%struct.UnpicklerObject* %self, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %n.addr = alloca i64, align 8
  %data = alloca %struct._object*, align 8
  %read_size = alloca i64, align 8
  %empty_tuple = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %len = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp70 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i32 @_Unpickler_SkipConsumed(%struct.UnpicklerObject* %0)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %cmp1 = icmp eq i64 %1, -1
  br i1 %cmp1, label %if.then.2, label %if.else.8

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call3, %struct._object** %empty_tuple, align 8
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 13
  %3 = load %struct._object*, %struct._object** %readline, align 8
  %4 = load %struct._object*, %struct._object** %empty_tuple, align 8
  %call4 = call %struct._object* @PyObject_Call(%struct._object* %3, %struct._object* %4, %struct._object* null)
  store %struct._object* %call4, %struct._object** %data, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %5 = load %struct._object*, %struct._object** %empty_tuple, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  br label %if.end.64

if.else.8:                                        ; preds = %if.end
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %12, i32 0, i32 14
  %13 = load %struct._object*, %struct._object** %peek, align 8
  %tobool = icmp ne %struct._object* %13, null
  br i1 %tobool, label %land.lhs.true, label %if.end.58

land.lhs.true:                                    ; preds = %if.else.8
  %14 = load i64, i64* %n.addr, align 8
  %cmp9 = icmp slt i64 %14, 131072
  br i1 %cmp9, label %if.then.10, label %if.end.58

if.then.10:                                       ; preds = %land.lhs.true
  %call11 = call %struct._object* @PyLong_FromSsize_t(i64 131072)
  store %struct._object* %call11, %struct._object** %len, align 8
  %15 = load %struct._object*, %struct._object** %len, align 8
  %cmp12 = icmp eq %struct._object* %15, null
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.then.10
  store i64 -1, i64* %retval
  br label %return

if.end.14:                                        ; preds = %if.then.10
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek15 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %16, i32 0, i32 14
  %17 = load %struct._object*, %struct._object** %peek15, align 8
  %18 = load %struct._object*, %struct._object** %len, align 8
  %call16 = call %struct._object* @_Pickle_FastCall(%struct._object* %17, %struct._object* %18)
  store %struct._object* %call16, %struct._object** %data, align 8
  %19 = load %struct._object*, %struct._object** %data, align 8
  %cmp17 = icmp eq %struct._object* %19, null
  br i1 %cmp17, label %if.then.18, label %if.else.41

if.then.18:                                       ; preds = %if.end.14
  %20 = load %struct._object*, %struct._object** @PyExc_NotImplementedError, align 8
  %call19 = call i32 @PyErr_ExceptionMatches(%struct._object* %20)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.22, label %if.then.21

if.then.21:                                       ; preds = %if.then.18
  store i64 -1, i64* %retval
  br label %return

if.end.22:                                        ; preds = %if.then.18
  call void @PyErr_Clear()
  br label %do.body.23

do.body.23:                                       ; preds = %if.end.22
  %21 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek24 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %21, i32 0, i32 14
  %22 = load %struct._object*, %struct._object** %peek24, align 8
  store %struct._object* %22, %struct._object** %_py_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp25 = icmp ne %struct._object* %23, null
  br i1 %cmp25, label %if.then.26, label %if.end.39

if.then.26:                                       ; preds = %do.body.23
  %24 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek27 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %24, i32 0, i32 14
  store %struct._object* null, %struct._object** %peek27, align 8
  br label %do.body.28

do.body.28:                                       ; preds = %if.then.26
  %25 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp29, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt30, align 8
  %dec31 = add i64 %27, -1
  store i64 %dec31, i64* %ob_refcnt30, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.28
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.28
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  call void %30(%struct._object* %31)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  br label %if.end.39

if.end.39:                                        ; preds = %do.end.38, %do.body.23
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %if.end.57

if.else.41:                                       ; preds = %if.end.14
  %32 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %33 = load %struct._object*, %struct._object** %data, align 8
  %call42 = call i64 @_Unpickler_SetStringInput(%struct.UnpicklerObject* %32, %struct._object* %33)
  store i64 %call42, i64* %read_size, align 8
  br label %do.body.43

do.body.43:                                       ; preds = %if.else.41
  %34 = load %struct._object*, %struct._object** %data, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp44, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt45, align 8
  %dec46 = add i64 %36, -1
  store i64 %dec46, i64* %ob_refcnt45, align 8
  %cmp47 = icmp ne i64 %dec46, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.43
  br label %if.end.52

if.else.49:                                       ; preds = %do.body.43
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %tp_dealloc51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc51, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  call void %39(%struct._object* %40)
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.49, %if.then.48
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  %41 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %prefetched_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %41, i32 0, i32 11
  store i64 0, i64* %prefetched_idx, align 8
  %42 = load i64, i64* %n.addr, align 8
  %43 = load i64, i64* %read_size, align 8
  %cmp54 = icmp sle i64 %42, %43
  br i1 %cmp54, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %do.end.53
  %44 = load i64, i64* %n.addr, align 8
  store i64 %44, i64* %retval
  br label %return

if.end.56:                                        ; preds = %do.end.53
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %do.end.40
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %land.lhs.true, %if.else.8
  %45 = load i64, i64* %n.addr, align 8
  %call59 = call %struct._object* @PyLong_FromSsize_t(i64 %45)
  store %struct._object* %call59, %struct._object** %len, align 8
  %46 = load %struct._object*, %struct._object** %len, align 8
  %cmp60 = icmp eq %struct._object* %46, null
  br i1 %cmp60, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.end.58
  store i64 -1, i64* %retval
  br label %return

if.end.62:                                        ; preds = %if.end.58
  %47 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %47, i32 0, i32 12
  %48 = load %struct._object*, %struct._object** %read, align 8
  %49 = load %struct._object*, %struct._object** %len, align 8
  %call63 = call %struct._object* @_Pickle_FastCall(%struct._object* %48, %struct._object* %49)
  store %struct._object* %call63, %struct._object** %data, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.62, %do.end
  %50 = load %struct._object*, %struct._object** %data, align 8
  %cmp65 = icmp eq %struct._object* %50, null
  br i1 %cmp65, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.end.64
  store i64 -1, i64* %retval
  br label %return

if.end.67:                                        ; preds = %if.end.64
  %51 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %52 = load %struct._object*, %struct._object** %data, align 8
  %call68 = call i64 @_Unpickler_SetStringInput(%struct.UnpicklerObject* %51, %struct._object* %52)
  store i64 %call68, i64* %read_size, align 8
  br label %do.body.69

do.body.69:                                       ; preds = %if.end.67
  %53 = load %struct._object*, %struct._object** %data, align 8
  store %struct._object* %53, %struct._object** %_py_decref_tmp70, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_refcnt71 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0
  %55 = load i64, i64* %ob_refcnt71, align 8
  %dec72 = add i64 %55, -1
  store i64 %dec72, i64* %ob_refcnt71, align 8
  %cmp73 = icmp ne i64 %dec72, 0
  br i1 %cmp73, label %if.then.74, label %if.else.75

if.then.74:                                       ; preds = %do.body.69
  br label %if.end.78

if.else.75:                                       ; preds = %do.body.69
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_type76 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type76, align 8
  %tp_dealloc77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc77, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  call void %58(%struct._object* %59)
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.75, %if.then.74
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  %60 = load i64, i64* %read_size, align 8
  store i64 %60, i64* %retval
  br label %return

return:                                           ; preds = %do.end.79, %if.then.66, %if.then.61, %if.then.55, %if.then.21, %if.then.13, %if.then
  %61 = load i64, i64* %retval
  ret i64 %61
}

declare %struct._object* @PyLong_FromSsize_t(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @_Unpickler_SetStringInput(%struct.UnpicklerObject* %self, %struct._object* %input) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %input.addr = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %input, %struct._object** %input.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 6
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buffer, i32 0, i32 0
  %1 = load i8*, i8** %buf, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 6
  call void @PyBuffer_Release(%struct.bufferinfo* %buffer1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct._object*, %struct._object** %input.addr, align 8
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 6
  %call = call i32 @PyObject_GetBuffer(%struct._object* %3, %struct.bufferinfo* %buffer2, i32 8)
  %cmp3 = icmp slt i32 %call, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i64 -1, i64* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 6
  %buf7 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buffer6, i32 0, i32 0
  %6 = load i8*, i8** %buf7, align 8
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 7
  store i8* %6, i8** %input_buffer, align 8
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer8 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 6
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buffer8, i32 0, i32 2
  %9 = load i64, i64* %len, align 8
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_len = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 9
  store i64 %9, i64* %input_len, align 8
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 10
  store i64 0, i64* %next_read_idx, align 8
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_len9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %12, i32 0, i32 9
  %13 = load i64, i64* %input_len9, align 8
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %prefetched_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 11
  store i64 %13, i64* %prefetched_idx, align 8
  %15 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_len10 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %15, i32 0, i32 9
  %16 = load i64, i64* %input_len10, align 8
  store i64 %16, i64* %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4
  %17 = load i64, i64* %retval
  ret i64 %17
}

declare void @PyBuffer_Release(%struct.bufferinfo*) #1

declare i32 @PyObject_GetBuffer(%struct._object*, %struct.bufferinfo*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @Pdata_push(%struct.Pdata* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.Pdata*, align 8
  %obj.addr = alloca %struct._object*, align 8
  store %struct.Pdata* %self, %struct.Pdata** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %1 = bitcast %struct.Pdata* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %3 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %allocated = getelementptr inbounds %struct.Pdata, %struct.Pdata* %3, i32 0, i32 2
  %4 = load i64, i64* %allocated, align 8
  %cmp = icmp eq i64 %2, %4
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %call = call i32 @Pdata_grow(%struct.Pdata* %5)
  %cmp1 = icmp slt i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %7 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %8 = bitcast %struct.Pdata* %7 to %struct.PyVarObject*
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1
  %9 = load i64, i64* %ob_size2, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %ob_size2, align 8
  %10 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %10, i32 0, i32 1
  %11 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %11, i64 %9
  store %struct._object* %6, %struct._object** %arrayidx, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @Pdata_grow(%struct.Pdata* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.Pdata*, align 8
  %data = alloca %struct._object**, align 8
  %allocated = alloca i64, align 8
  %new_allocated = alloca i64, align 8
  store %struct.Pdata* %self, %struct.Pdata** %self.addr, align 8
  %0 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %0, i32 0, i32 1
  %1 = load %struct._object**, %struct._object*** %data1, align 8
  store %struct._object** %1, %struct._object*** %data, align 8
  %2 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %allocated2 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %2, i32 0, i32 2
  %3 = load i64, i64* %allocated2, align 8
  store i64 %3, i64* %allocated, align 8
  %4 = load i64, i64* %allocated, align 8
  %shr = ashr i64 %4, 3
  %add = add i64 %shr, 6
  store i64 %add, i64* %new_allocated, align 8
  %5 = load i64, i64* %new_allocated, align 8
  %6 = load i64, i64* %allocated, align 8
  %sub = sub i64 9223372036854775807, %6
  %cmp = icmp sgt i64 %5, %sub
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %nomemory

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %allocated, align 8
  %8 = load i64, i64* %new_allocated, align 8
  %add3 = add i64 %8, %7
  store i64 %add3, i64* %new_allocated, align 8
  %9 = load i64, i64* %new_allocated, align 8
  %cmp4 = icmp ugt i64 %9, 1152921504606846975
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  br label %nomemory

if.end.6:                                         ; preds = %if.end
  %10 = load %struct._object**, %struct._object*** %data, align 8
  %11 = bitcast %struct._object** %10 to i8*
  %12 = load i64, i64* %new_allocated, align 8
  %mul = mul i64 %12, 8
  %call = call i8* @PyMem_Realloc(i8* %11, i64 %mul)
  %13 = bitcast i8* %call to %struct._object**
  store %struct._object** %13, %struct._object*** %data, align 8
  %14 = load %struct._object**, %struct._object*** %data, align 8
  %cmp7 = icmp eq %struct._object** %14, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.6
  br label %nomemory

if.end.9:                                         ; preds = %if.end.6
  %15 = load %struct._object**, %struct._object*** %data, align 8
  %16 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data10 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %16, i32 0, i32 1
  store %struct._object** %15, %struct._object*** %data10, align 8
  %17 = load i64, i64* %new_allocated, align 8
  %18 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %allocated11 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %18, i32 0, i32 2
  store i64 %17, i64* %allocated11, align 8
  store i32 0, i32* %retval
  br label %return

nomemory:                                         ; preds = %if.then.8, %if.then.5, %if.then
  %call12 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %nomemory, %if.end.9
  %19 = load i32, i32* %retval
  ret i32 %19
}

declare i8* @PyMem_Realloc(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @load_binintx(%struct.UnpicklerObject* %self, i8* %s, i32 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %value = alloca %struct._object*, align 8
  %x = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i32, i32* %size.addr, align 4
  %call = call i64 @calc_binint(i8* %0, i32 %1)
  store i64 %call, i64* %x, align 8
  %2 = load i64, i64* %x, align 8
  %call1 = call %struct._object* @PyLong_FromLong(i64 %2)
  store %struct._object* %call1, %struct._object** %value, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 1
  %4 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %5 = load %struct._object*, %struct._object** %value, align 8
  %call2 = call i32 @Pdata_push(%struct.Pdata* %4, %struct._object* %5)
  %cmp3 = icmp slt i32 %call2, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %do.body
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.4, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i64 @calc_binint(i8* %bytes, i32 %nbytes) #0 {
entry:
  %bytes.addr = alloca i8*, align 8
  %nbytes.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %i = alloca i32, align 4
  %x = alloca i64, align 8
  store i8* %bytes, i8** %bytes.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  %0 = load i8*, i8** %bytes.addr, align 8
  store i8* %0, i8** %s, align 8
  store i64 0, i64* %x, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nbytes.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %4 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i64
  %6 = load i32, i32* %i, align 4
  %mul = mul i32 8, %6
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %conv, %sh_prom
  %7 = load i64, i64* %x, align 8
  %or = or i64 %7, %shl
  store i64 %or, i64* %x, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %nbytes.addr, align 4
  %cmp1 = icmp eq i32 %9, 4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %10 = load i64, i64* %x, align 8
  %and = and i64 %10, 2147483648
  %sub = sub i64 0, %and
  %11 = load i64, i64* %x, align 8
  %or3 = or i64 %11, %sub
  store i64 %or3, i64* %x, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %12 = load i64, i64* %x, align 8
  ret i64 %12
}

; Function Attrs: nounwind uwtable
define internal i64 @_Unpickler_Readline(%struct.UnpicklerObject* %self, i8** %result) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %result.addr = alloca i8**, align 8
  %i = alloca i64, align 8
  %num_read = alloca i64, align 8
  %line_start = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i8** %result, i8*** %result.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 10
  %1 = load i64, i64* %next_read_idx, align 8
  store i64 %1, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_len = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 9
  %4 = load i64, i64* %input_len, align 8
  %cmp = icmp slt i64 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %i, align 8
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 7
  %7 = load i8*, i8** %input_buffer, align 8
  %arrayidx = getelementptr i8, i8* %7, i64 %5
  %8 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %8 to i32
  %cmp1 = icmp eq i32 %conv, 10
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_buffer3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 7
  %10 = load i8*, i8** %input_buffer3, align 8
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx4 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 10
  %12 = load i64, i64* %next_read_idx4, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 %12
  store i8* %add.ptr, i8** %line_start, align 8
  %13 = load i64, i64* %i, align 8
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 10
  %15 = load i64, i64* %next_read_idx5, align 8
  %sub = sub i64 %13, %15
  %add = add i64 %sub, 1
  store i64 %add, i64* %num_read, align 8
  %16 = load i64, i64* %i, align 8
  %add6 = add i64 %16, 1
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx7 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %17, i32 0, i32 10
  store i64 %add6, i64* %next_read_idx7, align 8
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %19 = load i8*, i8** %line_start, align 8
  %20 = load i64, i64* %num_read, align 8
  %21 = load i8**, i8*** %result.addr, align 8
  %call = call i64 @_Unpickler_CopyLine(%struct.UnpicklerObject* %18, i8* %19, i64 %20, i8** %21)
  store i64 %call, i64* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %22 = load i64, i64* %i, align 8
  %inc = add i64 %22, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %23, i32 0, i32 12
  %24 = load %struct._object*, %struct._object** %read, align 8
  %tobool = icmp ne %struct._object* %24, null
  br i1 %tobool, label %if.then.8, label %if.end.17

if.then.8:                                        ; preds = %for.end
  %25 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call9 = call i64 @_Unpickler_ReadFromFile(%struct.UnpicklerObject* %25, i64 -1)
  store i64 %call9, i64* %num_read, align 8
  %26 = load i64, i64* %num_read, align 8
  %cmp10 = icmp slt i64 %26, 0
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.8
  store i64 -1, i64* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.8
  %27 = load i64, i64* %num_read, align 8
  %28 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx14 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %28, i32 0, i32 10
  store i64 %27, i64* %next_read_idx14, align 8
  %29 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %30 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_buffer15 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %30, i32 0, i32 7
  %31 = load i8*, i8** %input_buffer15, align 8
  %32 = load i64, i64* %num_read, align 8
  %33 = load i8**, i8*** %result.addr, align 8
  %call16 = call i64 @_Unpickler_CopyLine(%struct.UnpicklerObject* %29, i8* %31, i64 %32, i8** %33)
  store i64 %call16, i64* %retval
  br label %return

if.end.17:                                        ; preds = %for.end
  %34 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_buffer18 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %34, i32 0, i32 7
  %35 = load i8*, i8** %input_buffer18, align 8
  %36 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx19 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %36, i32 0, i32 10
  %37 = load i64, i64* %next_read_idx19, align 8
  %add.ptr20 = getelementptr i8, i8* %35, i64 %37
  %38 = load i8**, i8*** %result.addr, align 8
  store i8* %add.ptr20, i8** %38, align 8
  %39 = load i64, i64* %i, align 8
  %40 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx21 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %40, i32 0, i32 10
  %41 = load i64, i64* %next_read_idx21, align 8
  %sub22 = sub i64 %39, %41
  store i64 %sub22, i64* %num_read, align 8
  %42 = load i64, i64* %i, align 8
  %43 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %next_read_idx23 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %43, i32 0, i32 10
  store i64 %42, i64* %next_read_idx23, align 8
  %44 = load i64, i64* %num_read, align 8
  store i64 %44, i64* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.end.13, %if.then.12, %if.then
  %45 = load i64, i64* %retval
  ret i64 %45
}

; Function Attrs: nounwind uwtable
define internal i32 @bad_readline() #0 {
entry:
  %st = alloca %struct.PickleState*, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %0 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %0, i32 0, i32 2
  %1 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.100, i32 0, i32 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #5

; Function Attrs: nounwind
declare i64 @strtol(i8*, i8**, i32) #6

declare %struct._object* @PyLong_FromString(i8*, i8**, i32) #1

declare %struct._object* @PyBool_FromLong(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @_Unpickler_CopyLine(%struct.UnpicklerObject* %self, i8* %line, i64 %len, i8** %result) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %line.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %result.addr = alloca i8**, align 8
  %input_line = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i8* %line, i8** %line.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i8** %result, i8*** %result.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_line1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 8
  %1 = load i8*, i8** %input_line1, align 8
  %2 = load i64, i64* %len.addr, align 8
  %add = add i64 %2, 1
  %call = call i8* @PyMem_Realloc(i8* %1, i64 %add)
  store i8* %call, i8** %input_line, align 8
  %3 = load i8*, i8** %input_line, align 8
  %cmp = icmp eq i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @PyErr_NoMemory()
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %input_line, align 8
  %5 = load i8*, i8** %line.addr, align 8
  %6 = load i64, i64* %len.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 %6, i32 1, i1 false)
  %7 = load i64, i64* %len.addr, align 8
  %8 = load i8*, i8** %input_line, align 8
  %arrayidx = getelementptr i8, i8* %8, i64 %7
  store i8 0, i8* %arrayidx, align 1
  %9 = load i8*, i8** %input_line, align 8
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_line3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 8
  store i8* %9, i8** %input_line3, align 8
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_line4 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 8
  %12 = load i8*, i8** %input_line4, align 8
  %13 = load i8**, i8*** %result.addr, align 8
  store i8* %12, i8** %13, align 8
  %14 = load i64, i64* %len.addr, align 8
  store i64 %14, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load i64, i64* %retval
  ret i64 %15
}

declare %struct._object* @_PyLong_FromByteArray(i8*, i64, i32, i32) #1

declare double @PyOS_string_to_double(i8*, i8**, %struct._object*) #1

declare %struct._object* @PyFloat_FromDouble(double) #1

declare double @_PyFloat_Unpack8(i8*, i32) #1

; Function Attrs: nounwind uwtable
define internal i64 @calc_binsize(i8* %bytes, i32 %nbytes) #0 {
entry:
  %retval = alloca i64, align 8
  %bytes.addr = alloca i8*, align 8
  %nbytes.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %i = alloca i32, align 4
  %x = alloca i64, align 8
  store i8* %bytes, i8** %bytes.addr, align 8
  store i32 %nbytes, i32* %nbytes.addr, align 4
  %0 = load i8*, i8** %bytes.addr, align 8
  store i8* %0, i8** %s, align 8
  store i64 0, i64* %x, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %nbytes.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %conv = sext i32 %3 to i64
  %cmp1 = icmp ult i64 %conv, 8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr i8, i8* %6, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv3 = zext i8 %7 to i64
  %8 = load i32, i32* %i, align 4
  %mul = mul i32 8, %8
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 %conv3, %sh_prom
  %9 = load i64, i64* %x, align 8
  %or = or i64 %9, %shl
  store i64 %or, i64* %x, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %11 = load i64, i64* %x, align 8
  %cmp4 = icmp ugt i64 %11, 9223372036854775807
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %for.end
  store i64 -1, i64* %retval
  br label %return

if.else:                                          ; preds = %for.end
  %12 = load i64, i64* %x, align 8
  store i64 %12, i64* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %13 = load i64, i64* %retval
  ret i64 %13
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #4

declare %struct._object* @PyUnicode_Decode(i8*, i64, i8*, i8*) #1

declare %struct._object* @PyBytes_DecodeEscape(i8*, i64, i8*, i64, i8*) #1

declare %struct._object* @PyUnicode_FromEncodedObject(%struct._object*, i8*, i8*) #1

declare %struct._object* @PyUnicode_DecodeRawUnicodeEscape(i8*, i64, i8*) #1

declare %struct._object* @PyUnicode_DecodeUTF8(i8*, i64, i8*) #1

; Function Attrs: nounwind uwtable
define internal i64 @marker(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 18
  %1 = load i64, i64* %num_marks, align 8
  %cmp = icmp slt i64 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.108, i32 0, i32 0))
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %num_marks1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 18
  %5 = load i64, i64* %num_marks1, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %num_marks1, align 8
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 17
  %7 = load i64*, i64** %marks, align 8
  %arrayidx = getelementptr i64, i64* %7, i64 %dec
  %8 = load i64, i64* %arrayidx, align 8
  store i64 %8, i64* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i64, i64* %retval
  ret i64 %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @Pdata_poptuple(%struct.Pdata* %self, i64 %start) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.Pdata*, align 8
  %start.addr = alloca i64, align 8
  %tuple = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store %struct.Pdata* %self, %struct.Pdata** %self.addr, align 8
  store i64 %start, i64* %start.addr, align 8
  %0 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %1 = bitcast %struct.Pdata* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %3 = load i64, i64* %start.addr, align 8
  %sub = sub i64 %2, %3
  store i64 %sub, i64* %len, align 8
  %4 = load i64, i64* %len, align 8
  %call = call %struct._object* @PyTuple_New(i64 %4)
  store %struct._object* %call, %struct._object** %tuple, align 8
  %5 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %start.addr, align 8
  store i64 %6, i64* %i, align 8
  store i64 0, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i64, i64* %j, align 8
  %8 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %7, %8
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %i, align 8
  %10 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %10, i32 0, i32 1
  %11 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %11, i64 %9
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  %13 = load i64, i64* %j, align 8
  %14 = load %struct._object*, %struct._object** %tuple, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %15, i32 0, i32 1
  %arrayidx2 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %13
  store %struct._object* %12, %struct._object** %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i64, i64* %i, align 8
  %inc = add i64 %16, 1
  store i64 %inc, i64* %i, align 8
  %17 = load i64, i64* %j, align 8
  %inc3 = add i64 %17, 1
  store i64 %inc3, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load i64, i64* %start.addr, align 8
  %19 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %20 = bitcast %struct.Pdata* %19 to %struct.PyVarObject*
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1
  store i64 %18, i64* %ob_size4, align 8
  %21 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %21, %struct._object** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %22 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %22
}

declare %struct._object* @PyList_New(i64) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @Pdata_poplist(%struct.Pdata* %self, i64 %start) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.Pdata*, align 8
  %start.addr = alloca i64, align 8
  %list = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store %struct.Pdata* %self, %struct.Pdata** %self.addr, align 8
  store i64 %start, i64* %start.addr, align 8
  %0 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %1 = bitcast %struct.Pdata* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %3 = load i64, i64* %start.addr, align 8
  %sub = sub i64 %2, %3
  store i64 %sub, i64* %len, align 8
  %4 = load i64, i64* %len, align 8
  %call = call %struct._object* @PyList_New(i64 %4)
  store %struct._object* %call, %struct._object** %list, align 8
  %5 = load %struct._object*, %struct._object** %list, align 8
  %cmp = icmp eq %struct._object* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %start.addr, align 8
  store i64 %6, i64* %i, align 8
  store i64 0, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i64, i64* %j, align 8
  %8 = load i64, i64* %len, align 8
  %cmp1 = icmp slt i64 %7, %8
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %i, align 8
  %10 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %10, i32 0, i32 1
  %11 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %11, i64 %9
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  %13 = load i64, i64* %j, align 8
  %14 = load %struct._object*, %struct._object** %list, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %15, i32 0, i32 1
  %16 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx2 = getelementptr %struct._object*, %struct._object** %16, i64 %13
  store %struct._object* %12, %struct._object** %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i64, i64* %i, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %i, align 8
  %18 = load i64, i64* %j, align 8
  %inc3 = add i64 %18, 1
  store i64 %inc3, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i64, i64* %start.addr, align 8
  %20 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %21 = bitcast %struct.Pdata* %20 to %struct.PyVarObject*
  %ob_size4 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %21, i32 0, i32 1
  store i64 %19, i64* %ob_size4, align 8
  %22 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %22, %struct._object** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %23 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %23
}

declare %struct._object* @PySet_New(%struct._object*) #1

declare i32 @_PySet_Update(%struct._object*, %struct._object*) #1

declare %struct._object* @PyFrozenSet_New(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @instantiate(%struct._object* %cls, %struct._object* %args) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %cmp = icmp sgt i64 %2, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %cls.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19
  %5 = load i64, i64* %tp_flags, align 8
  %and = and i64 %5, 2147483648
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %lor.lhs.false.2, label %if.then

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %6 = load %struct._object*, %struct._object** %cls.addr, align 8
  %call = call i32 @_PyObject_HasAttrId(%struct._object* %6, %struct._Py_Identifier* @instantiate.PyId___getinitargs__)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %7 = load %struct._object*, %struct._object** %cls.addr, align 8
  %8 = load %struct._object*, %struct._object** %args.addr, align 8
  %call3 = call %struct._object* @PyObject_CallObject(%struct._object* %7, %struct._object* %8)
  store %struct._object* %call3, %struct._object** %result, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false.2
  %9 = load %struct._object*, %struct._object** %cls.addr, align 8
  %10 = load %struct._object*, %struct._object** %cls.addr, align 8
  %call4 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %9, %struct._Py_Identifier* @instantiate.PyId___new__, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.112, i32 0, i32 0), %struct._object* %10)
  store %struct._object* %call4, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %11
}

declare i32 @_PyObject_HasAttrId(%struct._object*, %struct._Py_Identifier*) #1

declare %struct._object* @PyObject_CallObject(%struct._object*, %struct._object*) #1

declare %struct._object* @PyUnicode_DecodeASCII(i8*, i64, i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @find_class(%struct.UnpicklerObject* %self, %struct._object* %module_name, %struct._object* %global_name) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %module_name.addr = alloca %struct._object*, align 8
  %global_name.addr = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %module_name, %struct._object** %module_name.addr, align 8
  store %struct._object* %global_name, %struct._object** %global_name.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = bitcast %struct.UnpicklerObject* %0 to %struct._object*
  %2 = load %struct._object*, %struct._object** %module_name.addr, align 8
  %3 = load %struct._object*, %struct._object** %global_name.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %1, %struct._Py_Identifier* @find_class.PyId_find_class, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.114, i32 0, i32 0), %struct._object* %2, %struct._object* %3)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @do_append(%struct.UnpicklerObject* %self, i64 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %x.addr = alloca i64, align 8
  %value = alloca %struct._object*, align 8
  %list = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %slice = alloca %struct._object*, align 8
  %list_len = alloca i64, align 8
  %ret = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %append_func = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  %_py_decref_tmp60 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i64 %x, i64* %x.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = bitcast %struct.Pdata* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  store i64 %3, i64* %len, align 8
  %4 = load i64, i64* %x.addr, align 8
  %5 = load i64, i64* %len, align 8
  %cmp = icmp sgt i64 %4, %5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i64, i64* %x.addr, align 8
  %cmp1 = icmp sle i64 %6, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32 @stack_underflow()
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i64, i64* %len, align 8
  %8 = load i64, i64* %x.addr, align 8
  %cmp2 = icmp eq i64 %7, %8
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %9 = load i64, i64* %x.addr, align 8
  %sub = sub i64 %9, 1
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 1
  %11 = load %struct.Pdata*, %struct.Pdata** %stack5, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %11, i32 0, i32 1
  %12 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %12, i64 %sub
  %13 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %13, %struct._object** %list, align 8
  %14 = load %struct._object*, %struct._object** %list, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 19
  %16 = load i64, i64* %tp_flags, align 8
  %and = and i64 %16, 33554432
  %cmp6 = icmp ne i64 %and, 0
  br i1 %cmp6, label %if.then.7, label %if.else.18

if.then.7:                                        ; preds = %if.end.4
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack8 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %17, i32 0, i32 1
  %18 = load %struct.Pdata*, %struct.Pdata** %stack8, align 8
  %19 = load i64, i64* %x.addr, align 8
  %call9 = call %struct._object* @Pdata_poplist(%struct.Pdata* %18, i64 %19)
  store %struct._object* %call9, %struct._object** %slice, align 8
  %20 = load %struct._object*, %struct._object** %slice, align 8
  %tobool = icmp ne %struct._object* %20, null
  br i1 %tobool, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.then.7
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.7
  %21 = load %struct._object*, %struct._object** %list, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyVarObject*
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1
  %23 = load i64, i64* %ob_size12, align 8
  store i64 %23, i64* %list_len, align 8
  %24 = load %struct._object*, %struct._object** %list, align 8
  %25 = load i64, i64* %list_len, align 8
  %26 = load i64, i64* %list_len, align 8
  %27 = load %struct._object*, %struct._object** %slice, align 8
  %call13 = call i32 @PyList_SetSlice(%struct._object* %24, i64 %25, i64 %26, %struct._object* %27)
  store i32 %call13, i32* %ret, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.11
  %28 = load %struct._object*, %struct._object** %slice, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %30, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp14 = icmp ne i64 %dec, 0
  br i1 %cmp14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %do.body
  br label %if.end.17

if.else:                                          ; preds = %do.body
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %33(%struct._object* %34)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.15
  br label %do.end

do.end:                                           ; preds = %if.end.17
  %35 = load i32, i32* %ret, align 4
  store i32 %35, i32* %retval
  br label %return

if.else.18:                                       ; preds = %if.end.4
  %36 = load %struct._object*, %struct._object** %list, align 8
  %call19 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %36, %struct._Py_Identifier* @do_append.PyId_append)
  store %struct._object* %call19, %struct._object** %append_func, align 8
  %37 = load %struct._object*, %struct._object** %append_func, align 8
  %cmp20 = icmp eq %struct._object* %37, null
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.else.18
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.else.18
  %38 = load i64, i64* %x.addr, align 8
  store i64 %38, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.22
  %39 = load i64, i64* %i, align 8
  %40 = load i64, i64* %len, align 8
  %cmp23 = icmp slt i64 %39, %40
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load i64, i64* %i, align 8
  %42 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack24 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %42, i32 0, i32 1
  %43 = load %struct.Pdata*, %struct.Pdata** %stack24, align 8
  %data25 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %43, i32 0, i32 1
  %44 = load %struct._object**, %struct._object*** %data25, align 8
  %arrayidx26 = getelementptr %struct._object*, %struct._object** %44, i64 %41
  %45 = load %struct._object*, %struct._object** %arrayidx26, align 8
  store %struct._object* %45, %struct._object** %value, align 8
  %46 = load %struct._object*, %struct._object** %append_func, align 8
  %47 = load %struct._object*, %struct._object** %value, align 8
  %call27 = call %struct._object* @_Pickle_FastCall(%struct._object* %46, %struct._object* %47)
  store %struct._object* %call27, %struct._object** %result, align 8
  %48 = load %struct._object*, %struct._object** %result, align 8
  %cmp28 = icmp eq %struct._object* %48, null
  br i1 %cmp28, label %if.then.29, label %if.end.45

if.then.29:                                       ; preds = %for.body
  %49 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack30 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %49, i32 0, i32 1
  %50 = load %struct.Pdata*, %struct.Pdata** %stack30, align 8
  %51 = load i64, i64* %i, align 8
  %add = add i64 %51, 1
  %call31 = call i32 @Pdata_clear(%struct.Pdata* %50, i64 %add)
  %52 = load i64, i64* %x.addr, align 8
  %53 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack32 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %53, i32 0, i32 1
  %54 = load %struct.Pdata*, %struct.Pdata** %stack32, align 8
  %55 = bitcast %struct.Pdata* %54 to %struct.PyVarObject*
  %ob_size33 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %55, i32 0, i32 1
  store i64 %52, i64* %ob_size33, align 8
  br label %do.body.34

do.body.34:                                       ; preds = %if.then.29
  %56 = load %struct._object*, %struct._object** %append_func, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp35, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt36, align 8
  %dec37 = add i64 %58, -1
  store i64 %dec37, i64* %ob_refcnt36, align 8
  %cmp38 = icmp ne i64 %dec37, 0
  br i1 %cmp38, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43

if.else.40:                                       ; preds = %do.body.34
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  call void %61(%struct._object* %62)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  store i32 -1, i32* %retval
  br label %return

if.end.45:                                        ; preds = %for.body
  br label %do.body.46

do.body.46:                                       ; preds = %if.end.45
  %63 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %63, %struct._object** %_py_decref_tmp47, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt48, align 8
  %dec49 = add i64 %65, -1
  store i64 %dec49, i64* %ob_refcnt48, align 8
  %cmp50 = icmp ne i64 %dec49, 0
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %do.body.46
  br label %if.end.55

if.else.52:                                       ; preds = %do.body.46
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  call void %68(%struct._object* %69)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %for.inc

for.inc:                                          ; preds = %do.end.56
  %70 = load i64, i64* %i, align 8
  %inc = add i64 %70, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %71 = load i64, i64* %x.addr, align 8
  %72 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack57 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %72, i32 0, i32 1
  %73 = load %struct.Pdata*, %struct.Pdata** %stack57, align 8
  %74 = bitcast %struct.Pdata* %73 to %struct.PyVarObject*
  %ob_size58 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %74, i32 0, i32 1
  store i64 %71, i64* %ob_size58, align 8
  br label %do.body.59

do.body.59:                                       ; preds = %for.end
  %75 = load %struct._object*, %struct._object** %append_func, align 8
  store %struct._object* %75, %struct._object** %_py_decref_tmp60, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_refcnt61 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0
  %77 = load i64, i64* %ob_refcnt61, align 8
  %dec62 = add i64 %77, -1
  store i64 %dec62, i64* %ob_refcnt61, align 8
  %cmp63 = icmp ne i64 %dec62, 0
  br i1 %cmp63, label %if.then.64, label %if.else.65

if.then.64:                                       ; preds = %do.body.59
  br label %if.end.68

if.else.65:                                       ; preds = %do.body.59
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_dealloc67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc67, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  call void %80(%struct._object* %81)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.65, %if.then.64
  br label %do.end.69

do.end.69:                                        ; preds = %if.end.68
  br label %if.end.70

if.end.70:                                        ; preds = %do.end.69
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.70, %do.end.44, %if.then.21, %do.end, %if.then.10, %if.then.3, %if.then
  %82 = load i32, i32* %retval
  ret i32 %82
}

declare i32 @PyList_SetSlice(%struct._object*, i64, i64, %struct._object*) #1

declare void @PyUnicode_InternInPlace(%struct._object**) #1

declare i32 @PyObject_SetItem(%struct._object*, %struct._object*, %struct._object*) #1

declare i32 @PyObject_SetAttr(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @_Unpickler_MemoGet(%struct.UnpicklerObject* %self, i64 %idx) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %idx.addr = alloca i64, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i64 %idx, i64* %idx.addr, align 8
  %0 = load i64, i64* %idx.addr, align 8
  %cmp = icmp slt i64 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %idx.addr, align 8
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 3
  %3 = load i64, i64* %memo_size, align 8
  %cmp1 = icmp sge i64 %1, %3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i64, i64* %idx.addr, align 8
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 2
  %6 = load %struct._object**, %struct._object*** %memo, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %6, i64 %4
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

declare i64 @PyLong_AsSsize_t(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @_Unpickler_MemoPut(%struct.UnpicklerObject* %self, i64 %idx, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %idx.addr = alloca i64, align 8
  %value.addr = alloca %struct._object*, align 8
  %old_item = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i64 %idx, i64* %idx.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load i64, i64* %idx.addr, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 3
  %2 = load i64, i64* %memo_size, align 8
  %cmp = icmp sge i64 %0, %2
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %4 = load i64, i64* %idx.addr, align 8
  %mul = mul i64 %4, 2
  %call = call i32 @_Unpickler_ResizeMemoList(%struct.UnpicklerObject* %3, i64 %mul)
  %cmp1 = icmp slt i32 %call, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %7 = load i64, i64* %idx.addr, align 8
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 2
  %9 = load %struct._object**, %struct._object*** %memo, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %9, i64 %7
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %10, %struct._object** %old_item, align 8
  %11 = load %struct._object*, %struct._object** %value.addr, align 8
  %12 = load i64, i64* %idx.addr, align 8
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo4 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %13, i32 0, i32 2
  %14 = load %struct._object**, %struct._object*** %memo4, align 8
  %arrayidx5 = getelementptr %struct._object*, %struct._object** %14, i64 %12
  store %struct._object* %11, %struct._object** %arrayidx5, align 8
  %15 = load %struct._object*, %struct._object** %old_item, align 8
  %cmp6 = icmp ne %struct._object* %15, null
  br i1 %cmp6, label %if.then.7, label %if.else.12

if.then.7:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %16 = load %struct._object*, %struct._object** %old_item, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt8 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt8, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt8, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  br label %if.end.14

if.else.12:                                       ; preds = %if.end.3
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_len = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %23, i32 0, i32 4
  %24 = load i64, i64* %memo_len, align 8
  %inc13 = add i64 %24, 1
  store i64 %inc13, i64* %memo_len, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.12, %do.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then.2
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal i32 @_Unpickler_ResizeMemoList(%struct.UnpicklerObject* %self, i64 %new_size) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %new_size.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %memo = alloca %struct._object**, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i64 %new_size, i64* %new_size.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 2
  %1 = load %struct._object**, %struct._object*** %memo1, align 8
  %2 = bitcast %struct._object** %1 to i8*
  %3 = load i64, i64* %new_size.addr, align 8
  %mul = mul i64 %3, 8
  %call = call i8* @PyMem_Realloc(i8* %2, i64 %mul)
  %4 = bitcast i8* %call to %struct._object**
  store %struct._object** %4, %struct._object*** %memo, align 8
  %5 = load %struct._object**, %struct._object*** %memo, align 8
  %cmp = icmp eq %struct._object** %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._object**, %struct._object*** %memo, align 8
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 2
  store %struct._object** %6, %struct._object*** %memo3, align 8
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 3
  %9 = load i64, i64* %memo_size, align 8
  store i64 %9, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i64, i64* %i, align 8
  %11 = load i64, i64* %new_size.addr, align 8
  %cmp4 = icmp slt i64 %10, %11
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %i, align 8
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo5 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %13, i32 0, i32 2
  %14 = load %struct._object**, %struct._object*** %memo5, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %14, i64 %12
  store %struct._object* null, %struct._object** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64, i64* %i, align 8
  %inc = add i64 %15, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i64, i64* %new_size.addr, align 8
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size6 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %17, i32 0, i32 3
  store i64 %16, i64* %memo_size6, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal i32 @do_setitems(%struct.UnpicklerObject* %self, i64 %x) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %x.addr = alloca i64, align 8
  %value = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %status = alloca i32, align 4
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i64 %x, i64* %x.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 1
  %1 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %2 = bitcast %struct.Pdata* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  store i64 %3, i64* %len, align 8
  %4 = load i64, i64* %x.addr, align 8
  %5 = load i64, i64* %len, align 8
  %cmp = icmp sgt i64 %4, %5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i64, i64* %x.addr, align 8
  %cmp1 = icmp sle i64 %6, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = call i32 @stack_underflow()
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i64, i64* %len, align 8
  %8 = load i64, i64* %x.addr, align 8
  %cmp2 = icmp eq i64 %7, %8
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %9 = load i64, i64* %len, align 8
  %10 = load i64, i64* %x.addr, align 8
  %sub = sub i64 %9, %10
  %rem = srem i64 %sub, 2
  %cmp5 = icmp ne i64 %rem, 0
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end.4
  %call7 = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call7, %struct.PickleState** %st, align 8
  %11 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %11, i32 0, i32 2
  %12 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.128, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %13 = load i64, i64* %x.addr, align 8
  %sub9 = sub i64 %13, 1
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack10 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 1
  %15 = load %struct.Pdata*, %struct.Pdata** %stack10, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %15, i32 0, i32 1
  %16 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %16, i64 %sub9
  %17 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %17, %struct._object** %dict, align 8
  %18 = load i64, i64* %x.addr, align 8
  %add = add i64 %18, 1
  store i64 %add, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.8
  %19 = load i64, i64* %i, align 8
  %20 = load i64, i64* %len, align 8
  %cmp11 = icmp slt i64 %19, %20
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i64, i64* %i, align 8
  %sub12 = sub i64 %21, 1
  %22 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack13 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %22, i32 0, i32 1
  %23 = load %struct.Pdata*, %struct.Pdata** %stack13, align 8
  %data14 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %23, i32 0, i32 1
  %24 = load %struct._object**, %struct._object*** %data14, align 8
  %arrayidx15 = getelementptr %struct._object*, %struct._object** %24, i64 %sub12
  %25 = load %struct._object*, %struct._object** %arrayidx15, align 8
  store %struct._object* %25, %struct._object** %key, align 8
  %26 = load i64, i64* %i, align 8
  %27 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack16 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %27, i32 0, i32 1
  %28 = load %struct.Pdata*, %struct.Pdata** %stack16, align 8
  %data17 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %28, i32 0, i32 1
  %29 = load %struct._object**, %struct._object*** %data17, align 8
  %arrayidx18 = getelementptr %struct._object*, %struct._object** %29, i64 %26
  %30 = load %struct._object*, %struct._object** %arrayidx18, align 8
  store %struct._object* %30, %struct._object** %value, align 8
  %31 = load %struct._object*, %struct._object** %dict, align 8
  %32 = load %struct._object*, %struct._object** %key, align 8
  %33 = load %struct._object*, %struct._object** %value, align 8
  %call19 = call i32 @PyObject_SetItem(%struct._object* %31, %struct._object* %32, %struct._object* %33)
  %cmp20 = icmp slt i32 %call19, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %for.body
  store i32 -1, i32* %status, align 4
  br label %for.end

if.end.22:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.22
  %34 = load i64, i64* %i, align 8
  %add23 = add i64 %34, 2
  store i64 %add23, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.21, %for.cond
  %35 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack24 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %35, i32 0, i32 1
  %36 = load %struct.Pdata*, %struct.Pdata** %stack24, align 8
  %37 = load i64, i64* %x.addr, align 8
  %call25 = call i32 @Pdata_clear(%struct.Pdata* %36, i64 %37)
  %38 = load i32, i32* %status, align 4
  store i32 %38, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.6, %if.then.3, %if.then
  %39 = load i32, i32* %retval
  ret i32 %39
}

declare %struct._object* @PyObject_CallFunction(%struct._object*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_loads_impl(%struct.PyModuleDef* %module, %struct._object* %data, i32 %fix_imports, i8* %encoding, i8* %errors) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %module.addr = alloca %struct.PyModuleDef*, align 8
  %data.addr = alloca %struct._object*, align 8
  %fix_imports.addr = alloca i32, align 4
  %encoding.addr = alloca i8*, align 8
  %errors.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  %unpickler = alloca %struct.UnpicklerObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  store %struct.PyModuleDef* %module, %struct.PyModuleDef** %module.addr, align 8
  store %struct._object* %data, %struct._object** %data.addr, align 8
  store i32 %fix_imports, i32* %fix_imports.addr, align 4
  store i8* %encoding, i8** %encoding.addr, align 8
  store i8* %errors, i8** %errors.addr, align 8
  %call = call %struct.UnpicklerObject* @_Unpickler_New()
  store %struct.UnpicklerObject* %call, %struct.UnpicklerObject** %unpickler, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %cmp = icmp eq %struct.UnpicklerObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %2 = load %struct._object*, %struct._object** %data.addr, align 8
  %call1 = call i64 @_Unpickler_SetStringInput(%struct.UnpicklerObject* %1, %struct._object* %2)
  %cmp2 = icmp slt i64 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %error

if.end.4:                                         ; preds = %if.end
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %4 = load i8*, i8** %encoding.addr, align 8
  %5 = load i8*, i8** %errors.addr, align 8
  %call5 = call i32 @_Unpickler_SetInputEncoding(%struct.UnpicklerObject* %3, i8* %4, i8* %5)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  br label %error

if.end.8:                                         ; preds = %if.end.4
  %6 = load i32, i32* %fix_imports.addr, align 4
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %fix_imports9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 21
  store i32 %6, i32* %fix_imports9, align 4
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %call10 = call %struct._object* @load(%struct.UnpicklerObject* %8)
  store %struct._object* %call10, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.8
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %10 = bitcast %struct.UnpicklerObject* %9 to %struct._object*
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.7, %if.then.3
  br label %do.body.14

do.body.14:                                       ; preds = %error
  %18 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %19 = bitcast %struct.UnpicklerObject* %18 to %struct._object*
  store %struct._object* %19, %struct._object** %_py_xdecref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp15 = icmp ne %struct._object* %20, null
  br i1 %cmp15, label %if.then.16, label %if.end.28

if.then.16:                                       ; preds = %do.body.14
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.16
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp18, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %23, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %26(%struct._object* %27)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %if.end.28

if.end.28:                                        ; preds = %do.end.27, %do.body.14
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.29, %do.end, %if.then
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal void @_Pickle_ClearState(%struct.PickleState* %st) #0 {
entry:
  %st.addr = alloca %struct.PickleState*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp8 = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  %_py_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  %_py_tmp62 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_tmp80 = alloca %struct._object*, align 8
  %_py_decref_tmp85 = alloca %struct._object*, align 8
  %_py_tmp98 = alloca %struct._object*, align 8
  %_py_decref_tmp103 = alloca %struct._object*, align 8
  %_py_tmp116 = alloca %struct._object*, align 8
  %_py_decref_tmp121 = alloca %struct._object*, align 8
  %_py_tmp134 = alloca %struct._object*, align 8
  %_py_decref_tmp139 = alloca %struct._object*, align 8
  %_py_tmp152 = alloca %struct._object*, align 8
  %_py_decref_tmp157 = alloca %struct._object*, align 8
  %_py_tmp170 = alloca %struct._object*, align 8
  %_py_decref_tmp175 = alloca %struct._object*, align 8
  %_py_tmp188 = alloca %struct._object*, align 8
  %_py_decref_tmp193 = alloca %struct._object*, align 8
  store %struct.PickleState* %st, %struct.PickleState** %st.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %PickleError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %0, i32 0, i32 0
  %1 = load %struct._object*, %struct._object** %PickleError, align 8
  store %struct._object* %1, %struct._object** %_py_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %PickleError1 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %3, i32 0, i32 0
  store %struct._object* null, %struct._object** %PickleError1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %do.body.7

do.body.7:                                        ; preds = %do.end.6
  %11 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %11, i32 0, i32 1
  %12 = load %struct._object*, %struct._object** %PicklingError, align 8
  store %struct._object* %12, %struct._object** %_py_tmp8, align 8
  %13 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  %cmp9 = icmp ne %struct._object* %13, null
  br i1 %cmp9, label %if.then.10, label %if.end.23

if.then.10:                                       ; preds = %do.body.7
  %14 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %PicklingError11 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %14, i32 0, i32 1
  store %struct._object* null, %struct._object** %PicklingError11, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.then.10
  %15 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp13, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %if.end.23

if.end.23:                                        ; preds = %do.end.22, %do.body.7
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %22 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %22, i32 0, i32 2
  %23 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  store %struct._object* %23, %struct._object** %_py_tmp26, align 8
  %24 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  %cmp27 = icmp ne %struct._object* %24, null
  br i1 %cmp27, label %if.then.28, label %if.end.41

if.then.28:                                       ; preds = %do.body.25
  %25 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %UnpicklingError29 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %25, i32 0, i32 2
  store %struct._object* null, %struct._object** %UnpicklingError29, align 8
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.28
  %26 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp31, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %28, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %31(%struct._object* %32)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %if.end.41

if.end.41:                                        ; preds = %do.end.40, %do.body.25
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  %33 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %dispatch_table = getelementptr inbounds %struct.PickleState, %struct.PickleState* %33, i32 0, i32 3
  %34 = load %struct._object*, %struct._object** %dispatch_table, align 8
  store %struct._object* %34, %struct._object** %_py_tmp44, align 8
  %35 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  %cmp45 = icmp ne %struct._object* %35, null
  br i1 %cmp45, label %if.then.46, label %if.end.59

if.then.46:                                       ; preds = %do.body.43
  %36 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %dispatch_table47 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %36, i32 0, i32 3
  store %struct._object* null, %struct._object** %dispatch_table47, align 8
  br label %do.body.48

do.body.48:                                       ; preds = %if.then.46
  %37 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp49, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %39, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.48
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %42(%struct._object* %43)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %if.end.59

if.end.59:                                        ; preds = %do.end.58, %do.body.43
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  br label %do.body.61

do.body.61:                                       ; preds = %do.end.60
  %44 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %44, i32 0, i32 4
  %45 = load %struct._object*, %struct._object** %extension_registry, align 8
  store %struct._object* %45, %struct._object** %_py_tmp62, align 8
  %46 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  %cmp63 = icmp ne %struct._object* %46, null
  br i1 %cmp63, label %if.then.64, label %if.end.77

if.then.64:                                       ; preds = %do.body.61
  %47 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_registry65 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %47, i32 0, i32 4
  store %struct._object* null, %struct._object** %extension_registry65, align 8
  br label %do.body.66

do.body.66:                                       ; preds = %if.then.64
  %48 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp67, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %50, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %53(%struct._object* %54)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  br label %if.end.77

if.end.77:                                        ; preds = %do.end.76, %do.body.61
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  br label %do.body.79

do.body.79:                                       ; preds = %do.end.78
  %55 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_cache = getelementptr inbounds %struct.PickleState, %struct.PickleState* %55, i32 0, i32 5
  %56 = load %struct._object*, %struct._object** %extension_cache, align 8
  store %struct._object* %56, %struct._object** %_py_tmp80, align 8
  %57 = load %struct._object*, %struct._object** %_py_tmp80, align 8
  %cmp81 = icmp ne %struct._object* %57, null
  br i1 %cmp81, label %if.then.82, label %if.end.95

if.then.82:                                       ; preds = %do.body.79
  %58 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %extension_cache83 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %58, i32 0, i32 5
  store %struct._object* null, %struct._object** %extension_cache83, align 8
  br label %do.body.84

do.body.84:                                       ; preds = %if.then.82
  %59 = load %struct._object*, %struct._object** %_py_tmp80, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp85, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_refcnt86 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt86, align 8
  %dec87 = add i64 %61, -1
  store i64 %dec87, i64* %ob_refcnt86, align 8
  %cmp88 = icmp ne i64 %dec87, 0
  br i1 %cmp88, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.84
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.84
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  call void %64(%struct._object* %65)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %do.end.94, %do.body.79
  br label %do.end.96

do.end.96:                                        ; preds = %if.end.95
  br label %do.body.97

do.body.97:                                       ; preds = %do.end.96
  %66 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %inverted_registry = getelementptr inbounds %struct.PickleState, %struct.PickleState* %66, i32 0, i32 6
  %67 = load %struct._object*, %struct._object** %inverted_registry, align 8
  store %struct._object* %67, %struct._object** %_py_tmp98, align 8
  %68 = load %struct._object*, %struct._object** %_py_tmp98, align 8
  %cmp99 = icmp ne %struct._object* %68, null
  br i1 %cmp99, label %if.then.100, label %if.end.113

if.then.100:                                      ; preds = %do.body.97
  %69 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %inverted_registry101 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %69, i32 0, i32 6
  store %struct._object* null, %struct._object** %inverted_registry101, align 8
  br label %do.body.102

do.body.102:                                      ; preds = %if.then.100
  %70 = load %struct._object*, %struct._object** %_py_tmp98, align 8
  store %struct._object* %70, %struct._object** %_py_decref_tmp103, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  %ob_refcnt104 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0
  %72 = load i64, i64* %ob_refcnt104, align 8
  %dec105 = add i64 %72, -1
  store i64 %dec105, i64* %ob_refcnt104, align 8
  %cmp106 = icmp ne i64 %dec105, 0
  br i1 %cmp106, label %if.then.107, label %if.else.108

if.then.107:                                      ; preds = %do.body.102
  br label %if.end.111

if.else.108:                                      ; preds = %do.body.102
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  %ob_type109 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type109, align 8
  %tp_dealloc110 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 4
  %75 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc110, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  call void %75(%struct._object* %76)
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.108, %if.then.107
  br label %do.end.112

do.end.112:                                       ; preds = %if.end.111
  br label %if.end.113

if.end.113:                                       ; preds = %do.end.112, %do.body.97
  br label %do.end.114

do.end.114:                                       ; preds = %if.end.113
  br label %do.body.115

do.body.115:                                      ; preds = %do.end.114
  %77 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %77, i32 0, i32 7
  %78 = load %struct._object*, %struct._object** %name_mapping_2to3, align 8
  store %struct._object* %78, %struct._object** %_py_tmp116, align 8
  %79 = load %struct._object*, %struct._object** %_py_tmp116, align 8
  %cmp117 = icmp ne %struct._object* %79, null
  br i1 %cmp117, label %if.then.118, label %if.end.131

if.then.118:                                      ; preds = %do.body.115
  %80 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_2to3119 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %80, i32 0, i32 7
  store %struct._object* null, %struct._object** %name_mapping_2to3119, align 8
  br label %do.body.120

do.body.120:                                      ; preds = %if.then.118
  %81 = load %struct._object*, %struct._object** %_py_tmp116, align 8
  store %struct._object* %81, %struct._object** %_py_decref_tmp121, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  %ob_refcnt122 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt122, align 8
  %dec123 = add i64 %83, -1
  store i64 %dec123, i64* %ob_refcnt122, align 8
  %cmp124 = icmp ne i64 %dec123, 0
  br i1 %cmp124, label %if.then.125, label %if.else.126

if.then.125:                                      ; preds = %do.body.120
  br label %if.end.129

if.else.126:                                      ; preds = %do.body.120
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  %ob_type127 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type127, align 8
  %tp_dealloc128 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 4
  %86 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc128, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  call void %86(%struct._object* %87)
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.126, %if.then.125
  br label %do.end.130

do.end.130:                                       ; preds = %if.end.129
  br label %if.end.131

if.end.131:                                       ; preds = %do.end.130, %do.body.115
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  br label %do.body.133

do.body.133:                                      ; preds = %do.end.132
  %88 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %88, i32 0, i32 8
  %89 = load %struct._object*, %struct._object** %import_mapping_2to3, align 8
  store %struct._object* %89, %struct._object** %_py_tmp134, align 8
  %90 = load %struct._object*, %struct._object** %_py_tmp134, align 8
  %cmp135 = icmp ne %struct._object* %90, null
  br i1 %cmp135, label %if.then.136, label %if.end.149

if.then.136:                                      ; preds = %do.body.133
  %91 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_2to3137 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %91, i32 0, i32 8
  store %struct._object* null, %struct._object** %import_mapping_2to3137, align 8
  br label %do.body.138

do.body.138:                                      ; preds = %if.then.136
  %92 = load %struct._object*, %struct._object** %_py_tmp134, align 8
  store %struct._object* %92, %struct._object** %_py_decref_tmp139, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_refcnt140 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 0
  %94 = load i64, i64* %ob_refcnt140, align 8
  %dec141 = add i64 %94, -1
  store i64 %dec141, i64* %ob_refcnt140, align 8
  %cmp142 = icmp ne i64 %dec141, 0
  br i1 %cmp142, label %if.then.143, label %if.else.144

if.then.143:                                      ; preds = %do.body.138
  br label %if.end.147

if.else.144:                                      ; preds = %do.body.138
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_type145 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type145, align 8
  %tp_dealloc146 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 4
  %97 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc146, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  call void %97(%struct._object* %98)
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.143
  br label %do.end.148

do.end.148:                                       ; preds = %if.end.147
  br label %if.end.149

if.end.149:                                       ; preds = %do.end.148, %do.body.133
  br label %do.end.150

do.end.150:                                       ; preds = %if.end.149
  br label %do.body.151

do.body.151:                                      ; preds = %do.end.150
  %99 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %99, i32 0, i32 9
  %100 = load %struct._object*, %struct._object** %name_mapping_3to2, align 8
  store %struct._object* %100, %struct._object** %_py_tmp152, align 8
  %101 = load %struct._object*, %struct._object** %_py_tmp152, align 8
  %cmp153 = icmp ne %struct._object* %101, null
  br i1 %cmp153, label %if.then.154, label %if.end.167

if.then.154:                                      ; preds = %do.body.151
  %102 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %name_mapping_3to2155 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %102, i32 0, i32 9
  store %struct._object* null, %struct._object** %name_mapping_3to2155, align 8
  br label %do.body.156

do.body.156:                                      ; preds = %if.then.154
  %103 = load %struct._object*, %struct._object** %_py_tmp152, align 8
  store %struct._object* %103, %struct._object** %_py_decref_tmp157, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8
  %ob_refcnt158 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0
  %105 = load i64, i64* %ob_refcnt158, align 8
  %dec159 = add i64 %105, -1
  store i64 %dec159, i64* %ob_refcnt158, align 8
  %cmp160 = icmp ne i64 %dec159, 0
  br i1 %cmp160, label %if.then.161, label %if.else.162

if.then.161:                                      ; preds = %do.body.156
  br label %if.end.165

if.else.162:                                      ; preds = %do.body.156
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8
  %ob_type163 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type163, align 8
  %tp_dealloc164 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc164, align 8
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8
  call void %108(%struct._object* %109)
  br label %if.end.165

if.end.165:                                       ; preds = %if.else.162, %if.then.161
  br label %do.end.166

do.end.166:                                       ; preds = %if.end.165
  br label %if.end.167

if.end.167:                                       ; preds = %do.end.166, %do.body.151
  br label %do.end.168

do.end.168:                                       ; preds = %if.end.167
  br label %do.body.169

do.body.169:                                      ; preds = %do.end.168
  %110 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_3to2 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %110, i32 0, i32 10
  %111 = load %struct._object*, %struct._object** %import_mapping_3to2, align 8
  store %struct._object* %111, %struct._object** %_py_tmp170, align 8
  %112 = load %struct._object*, %struct._object** %_py_tmp170, align 8
  %cmp171 = icmp ne %struct._object* %112, null
  br i1 %cmp171, label %if.then.172, label %if.end.185

if.then.172:                                      ; preds = %do.body.169
  %113 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %import_mapping_3to2173 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %113, i32 0, i32 10
  store %struct._object* null, %struct._object** %import_mapping_3to2173, align 8
  br label %do.body.174

do.body.174:                                      ; preds = %if.then.172
  %114 = load %struct._object*, %struct._object** %_py_tmp170, align 8
  store %struct._object* %114, %struct._object** %_py_decref_tmp175, align 8
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp175, align 8
  %ob_refcnt176 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 0
  %116 = load i64, i64* %ob_refcnt176, align 8
  %dec177 = add i64 %116, -1
  store i64 %dec177, i64* %ob_refcnt176, align 8
  %cmp178 = icmp ne i64 %dec177, 0
  br i1 %cmp178, label %if.then.179, label %if.else.180

if.then.179:                                      ; preds = %do.body.174
  br label %if.end.183

if.else.180:                                      ; preds = %do.body.174
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp175, align 8
  %ob_type181 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 1
  %118 = load %struct._typeobject*, %struct._typeobject** %ob_type181, align 8
  %tp_dealloc182 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %118, i32 0, i32 4
  %119 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc182, align 8
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp175, align 8
  call void %119(%struct._object* %120)
  br label %if.end.183

if.end.183:                                       ; preds = %if.else.180, %if.then.179
  br label %do.end.184

do.end.184:                                       ; preds = %if.end.183
  br label %if.end.185

if.end.185:                                       ; preds = %do.end.184, %do.body.169
  br label %do.end.186

do.end.186:                                       ; preds = %if.end.185
  br label %do.body.187

do.body.187:                                      ; preds = %do.end.186
  %121 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %codecs_encode = getelementptr inbounds %struct.PickleState, %struct.PickleState* %121, i32 0, i32 11
  %122 = load %struct._object*, %struct._object** %codecs_encode, align 8
  store %struct._object* %122, %struct._object** %_py_tmp188, align 8
  %123 = load %struct._object*, %struct._object** %_py_tmp188, align 8
  %cmp189 = icmp ne %struct._object* %123, null
  br i1 %cmp189, label %if.then.190, label %if.end.203

if.then.190:                                      ; preds = %do.body.187
  %124 = load %struct.PickleState*, %struct.PickleState** %st.addr, align 8
  %codecs_encode191 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %124, i32 0, i32 11
  store %struct._object* null, %struct._object** %codecs_encode191, align 8
  br label %do.body.192

do.body.192:                                      ; preds = %if.then.190
  %125 = load %struct._object*, %struct._object** %_py_tmp188, align 8
  store %struct._object* %125, %struct._object** %_py_decref_tmp193, align 8
  %126 = load %struct._object*, %struct._object** %_py_decref_tmp193, align 8
  %ob_refcnt194 = getelementptr inbounds %struct._object, %struct._object* %126, i32 0, i32 0
  %127 = load i64, i64* %ob_refcnt194, align 8
  %dec195 = add i64 %127, -1
  store i64 %dec195, i64* %ob_refcnt194, align 8
  %cmp196 = icmp ne i64 %dec195, 0
  br i1 %cmp196, label %if.then.197, label %if.else.198

if.then.197:                                      ; preds = %do.body.192
  br label %if.end.201

if.else.198:                                      ; preds = %do.body.192
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp193, align 8
  %ob_type199 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 1
  %129 = load %struct._typeobject*, %struct._typeobject** %ob_type199, align 8
  %tp_dealloc200 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %129, i32 0, i32 4
  %130 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc200, align 8
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp193, align 8
  call void %130(%struct._object* %131)
  br label %if.end.201

if.end.201:                                       ; preds = %if.else.198, %if.then.197
  br label %do.end.202

do.end.202:                                       ; preds = %if.end.201
  br label %if.end.203

if.end.203:                                       ; preds = %do.end.202, %do.body.187
  br label %do.end.204

do.end.204:                                       ; preds = %if.end.203
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @Unpickler_dealloc(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp7 = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  %_py_xdecref_tmp24 = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  %_py_xdecref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_xdecref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %1 = bitcast %struct.UnpicklerObject* %0 to %struct._object*
  %2 = bitcast %struct._object* %1 to i8*
  call void @PyObject_GC_UnTrack(i8* %2)
  br label %do.body

do.body:                                          ; preds = %entry
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 13
  %4 = load %struct._object*, %struct._object** %readline, align 8
  store %struct._object* %4, %struct._object** %_py_xdecref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %5, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body.1
  br label %if.end

if.else:                                          ; preds = %do.body.1
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %do.body
  br label %do.end.5

do.end.5:                                         ; preds = %if.end.4
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.5
  %13 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %13, i32 0, i32 12
  %14 = load %struct._object*, %struct._object** %read, align 8
  store %struct._object* %14, %struct._object** %_py_xdecref_tmp7, align 8
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  %cmp8 = icmp ne %struct._object* %15, null
  br i1 %cmp8, label %if.then.9, label %if.end.21

if.then.9:                                        ; preds = %do.body.6
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.9
  %16 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp11, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %18, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %21(%struct._object* %22)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %if.end.21

if.end.21:                                        ; preds = %do.end.20, %do.body.6
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %do.body.23

do.body.23:                                       ; preds = %do.end.22
  %23 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %23, i32 0, i32 14
  %24 = load %struct._object*, %struct._object** %peek, align 8
  store %struct._object* %24, %struct._object** %_py_xdecref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_xdecref_tmp24, align 8
  %cmp25 = icmp ne %struct._object* %25, null
  br i1 %cmp25, label %if.then.26, label %if.end.38

if.then.26:                                       ; preds = %do.body.23
  br label %do.body.27

do.body.27:                                       ; preds = %if.then.26
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp24, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp28, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %28, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.27
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %31(%struct._object* %32)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %if.end.38

if.end.38:                                        ; preds = %do.end.37, %do.body.23
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %33 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %33, i32 0, i32 1
  %34 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %35 = bitcast %struct.Pdata* %34 to %struct._object*
  store %struct._object* %35, %struct._object** %_py_xdecref_tmp41, align 8
  %36 = load %struct._object*, %struct._object** %_py_xdecref_tmp41, align 8
  %cmp42 = icmp ne %struct._object* %36, null
  br i1 %cmp42, label %if.then.43, label %if.end.55

if.then.43:                                       ; preds = %do.body.40
  br label %do.body.44

do.body.44:                                       ; preds = %if.then.43
  %37 = load %struct._object*, %struct._object** %_py_xdecref_tmp41, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp45, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %39, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.44
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %42(%struct._object* %43)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  br label %if.end.55

if.end.55:                                        ; preds = %do.end.54, %do.body.40
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  %44 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %44, i32 0, i32 5
  %45 = load %struct._object*, %struct._object** %pers_func, align 8
  store %struct._object* %45, %struct._object** %_py_xdecref_tmp58, align 8
  %46 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  %cmp59 = icmp ne %struct._object* %46, null
  br i1 %cmp59, label %if.then.60, label %if.end.72

if.then.60:                                       ; preds = %do.body.57
  br label %do.body.61

do.body.61:                                       ; preds = %if.then.60
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp62, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt63, align 8
  %dec64 = add i64 %49, -1
  store i64 %dec64, i64* %ob_refcnt63, align 8
  %cmp65 = icmp ne i64 %dec64, 0
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %do.body.61
  br label %if.end.70

if.else.67:                                       ; preds = %do.body.61
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  call void %52(%struct._object* %53)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %if.end.72

if.end.72:                                        ; preds = %do.end.71, %do.body.57
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  %54 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %54, i32 0, i32 6
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buffer, i32 0, i32 0
  %55 = load i8*, i8** %buf, align 8
  %cmp74 = icmp ne i8* %55, null
  br i1 %cmp74, label %if.then.75, label %if.end.79

if.then.75:                                       ; preds = %do.end.73
  %56 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer76 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %56, i32 0, i32 6
  call void @PyBuffer_Release(%struct.bufferinfo* %buffer76)
  %57 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer77 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %57, i32 0, i32 6
  %buf78 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buffer77, i32 0, i32 0
  store i8* null, i8** %buf78, align 8
  br label %if.end.79

if.end.79:                                        ; preds = %if.then.75, %do.end.73
  %58 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  call void @_Unpickler_MemoCleanup(%struct.UnpicklerObject* %58)
  %59 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %59, i32 0, i32 17
  %60 = load i64*, i64** %marks, align 8
  %61 = bitcast i64* %60 to i8*
  call void @PyMem_Free(i8* %61)
  %62 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_line = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %62, i32 0, i32 8
  %63 = load i8*, i8** %input_line, align 8
  call void @PyMem_Free(i8* %63)
  %64 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %64, i32 0, i32 15
  %65 = load i8*, i8** %encoding, align 8
  call void @PyMem_Free(i8* %65)
  %66 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %errors = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %66, i32 0, i32 16
  %67 = load i8*, i8** %errors, align 8
  call void @PyMem_Free(i8* %67)
  %68 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %69 = bitcast %struct.UnpicklerObject* %68 to %struct._object*
  %ob_type80 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type80, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 38
  %71 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %72 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %73 = bitcast %struct.UnpicklerObject* %72 to %struct._object*
  %74 = bitcast %struct._object* %73 to i8*
  call void %71(i8* %74)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @Unpickler_traverse(%struct.UnpicklerObject* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  %vret8 = alloca i32, align 4
  %vret19 = alloca i32, align 4
  %vret30 = alloca i32, align 4
  %vret41 = alloca i32, align 4
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 13
  %1 = load %struct._object*, %struct._object** %readline, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  %2 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 13
  %4 = load %struct._object*, %struct._object** %readline1, align 8
  %5 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %2(%struct._object* %4, i8* %5)
  store i32 %call, i32* %vret, align 4
  %6 = load i32, i32* %vret, align 4
  %tobool2 = icmp ne i32 %6, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %7 = load i32, i32* %vret, align 4
  store i32 %7, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  br label %do.body.5

do.body.5:                                        ; preds = %do.end
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 12
  %9 = load %struct._object*, %struct._object** %read, align 8
  %tobool6 = icmp ne %struct._object* %9, null
  br i1 %tobool6, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %do.body.5
  %10 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 12
  %12 = load %struct._object*, %struct._object** %read9, align 8
  %13 = load i8*, i8** %arg.addr, align 8
  %call10 = call i32 %10(%struct._object* %12, i8* %13)
  store i32 %call10, i32* %vret8, align 4
  %14 = load i32, i32* %vret8, align 4
  %tobool11 = icmp ne i32 %14, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.7
  %15 = load i32, i32* %vret8, align 4
  store i32 %15, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.7
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %do.body.5
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  br label %do.body.16

do.body.16:                                       ; preds = %do.end.15
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %16, i32 0, i32 14
  %17 = load %struct._object*, %struct._object** %peek, align 8
  %tobool17 = icmp ne %struct._object* %17, null
  br i1 %tobool17, label %if.then.18, label %if.end.25

if.then.18:                                       ; preds = %do.body.16
  %18 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %19 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek20 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %19, i32 0, i32 14
  %20 = load %struct._object*, %struct._object** %peek20, align 8
  %21 = load i8*, i8** %arg.addr, align 8
  %call21 = call i32 %18(%struct._object* %20, i8* %21)
  store i32 %call21, i32* %vret19, align 4
  %22 = load i32, i32* %vret19, align 4
  %tobool22 = icmp ne i32 %22, 0
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.18
  %23 = load i32, i32* %vret19, align 4
  store i32 %23, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.18
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %do.body.16
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %24 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %24, i32 0, i32 1
  %25 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %tobool28 = icmp ne %struct.Pdata* %25, null
  br i1 %tobool28, label %if.then.29, label %if.end.36

if.then.29:                                       ; preds = %do.body.27
  %26 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %27 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack31 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %27, i32 0, i32 1
  %28 = load %struct.Pdata*, %struct.Pdata** %stack31, align 8
  %29 = bitcast %struct.Pdata* %28 to %struct._object*
  %30 = load i8*, i8** %arg.addr, align 8
  %call32 = call i32 %26(%struct._object* %29, i8* %30)
  store i32 %call32, i32* %vret30, align 4
  %31 = load i32, i32* %vret30, align 4
  %tobool33 = icmp ne i32 %31, 0
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.29
  %32 = load i32, i32* %vret30, align 4
  store i32 %32, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.29
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %do.body.27
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %do.body.38

do.body.38:                                       ; preds = %do.end.37
  %33 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %33, i32 0, i32 5
  %34 = load %struct._object*, %struct._object** %pers_func, align 8
  %tobool39 = icmp ne %struct._object* %34, null
  br i1 %tobool39, label %if.then.40, label %if.end.47

if.then.40:                                       ; preds = %do.body.38
  %35 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %36 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func42 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %36, i32 0, i32 5
  %37 = load %struct._object*, %struct._object** %pers_func42, align 8
  %38 = load i8*, i8** %arg.addr, align 8
  %call43 = call i32 %35(%struct._object* %37, i8* %38)
  store i32 %call43, i32* %vret41, align 4
  %39 = load i32, i32* %vret41, align 4
  %tobool44 = icmp ne i32 %39, 0
  br i1 %tobool44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.40
  %40 = load i32, i32* %vret41, align 4
  store i32 %40, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.then.40
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %do.body.38
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.48, %if.then.45, %if.then.34, %if.then.23, %if.then.12, %if.then.3
  %41 = load i32, i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define internal i32 @Unpickler_clear(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp8 = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  %_py_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  %_py_tmp62 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 13
  %1 = load %struct._object*, %struct._object** %readline, align 8
  store %struct._object* %1, %struct._object** %_py_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %readline1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 13
  store %struct._object* null, %struct._object** %readline1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %do.body.7

do.body.7:                                        ; preds = %do.end.6
  %11 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %11, i32 0, i32 12
  %12 = load %struct._object*, %struct._object** %read, align 8
  store %struct._object* %12, %struct._object** %_py_tmp8, align 8
  %13 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  %cmp9 = icmp ne %struct._object* %13, null
  br i1 %cmp9, label %if.then.10, label %if.end.23

if.then.10:                                       ; preds = %do.body.7
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read11 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 12
  store %struct._object* null, %struct._object** %read11, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.then.10
  %15 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp13, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %if.end.23

if.end.23:                                        ; preds = %do.end.22, %do.body.7
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %22 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %22, i32 0, i32 14
  %23 = load %struct._object*, %struct._object** %peek, align 8
  store %struct._object* %23, %struct._object** %_py_tmp26, align 8
  %24 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  %cmp27 = icmp ne %struct._object* %24, null
  br i1 %cmp27, label %if.then.28, label %if.end.41

if.then.28:                                       ; preds = %do.body.25
  %25 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %peek29 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %25, i32 0, i32 14
  store %struct._object* null, %struct._object** %peek29, align 8
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.28
  %26 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp31, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %28, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %31(%struct._object* %32)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %if.end.41

if.end.41:                                        ; preds = %do.end.40, %do.body.25
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  %33 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %33, i32 0, i32 1
  %34 = load %struct.Pdata*, %struct.Pdata** %stack, align 8
  %35 = bitcast %struct.Pdata* %34 to %struct._object*
  store %struct._object* %35, %struct._object** %_py_tmp44, align 8
  %36 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  %cmp45 = icmp ne %struct._object* %36, null
  br i1 %cmp45, label %if.then.46, label %if.end.59

if.then.46:                                       ; preds = %do.body.43
  %37 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack47 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %37, i32 0, i32 1
  store %struct.Pdata* null, %struct.Pdata** %stack47, align 8
  br label %do.body.48

do.body.48:                                       ; preds = %if.then.46
  %38 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp49, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %40, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.48
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %43(%struct._object* %44)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %if.end.59

if.end.59:                                        ; preds = %do.end.58, %do.body.43
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  br label %do.body.61

do.body.61:                                       ; preds = %do.end.60
  %45 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %45, i32 0, i32 5
  %46 = load %struct._object*, %struct._object** %pers_func, align 8
  store %struct._object* %46, %struct._object** %_py_tmp62, align 8
  %47 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  %cmp63 = icmp ne %struct._object* %47, null
  br i1 %cmp63, label %if.then.64, label %if.end.77

if.then.64:                                       ; preds = %do.body.61
  %48 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func65 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %48, i32 0, i32 5
  store %struct._object* null, %struct._object** %pers_func65, align 8
  br label %do.body.66

do.body.66:                                       ; preds = %if.then.64
  %49 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  br label %if.end.77

if.end.77:                                        ; preds = %do.end.76, %do.body.61
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  %56 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %56, i32 0, i32 6
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buffer, i32 0, i32 0
  %57 = load i8*, i8** %buf, align 8
  %cmp79 = icmp ne i8* %57, null
  br i1 %cmp79, label %if.then.80, label %if.end.84

if.then.80:                                       ; preds = %do.end.78
  %58 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer81 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %58, i32 0, i32 6
  call void @PyBuffer_Release(%struct.bufferinfo* %buffer81)
  %59 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %buffer82 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %59, i32 0, i32 6
  %buf83 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %buffer82, i32 0, i32 0
  store i8* null, i8** %buf83, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.80, %do.end.78
  %60 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  call void @_Unpickler_MemoCleanup(%struct.UnpicklerObject* %60)
  %61 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %61, i32 0, i32 17
  %62 = load i64*, i64** %marks, align 8
  %63 = bitcast i64* %62 to i8*
  call void @PyMem_Free(i8* %63)
  %64 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %marks85 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %64, i32 0, i32 17
  store i64* null, i64** %marks85, align 8
  %65 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_line = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %65, i32 0, i32 8
  %66 = load i8*, i8** %input_line, align 8
  call void @PyMem_Free(i8* %66)
  %67 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %input_line86 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %67, i32 0, i32 8
  store i8* null, i8** %input_line86, align 8
  %68 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %68, i32 0, i32 15
  %69 = load i8*, i8** %encoding, align 8
  call void @PyMem_Free(i8* %69)
  %70 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %encoding87 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %70, i32 0, i32 15
  store i8* null, i8** %encoding87, align 8
  %71 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %errors = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %71, i32 0, i32 16
  %72 = load i8*, i8** %errors, align 8
  call void @PyMem_Free(i8* %72)
  %73 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %errors88 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %73, i32 0, i32 16
  store i8* null, i8** %errors88, align 8
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @_pickle_Unpickler___init__(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca i32, align 4
  %file = alloca %struct._object*, align 8
  %fix_imports = alloca i32, align 4
  %encoding = alloca i8*, align 8
  %errors = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8
  store i32 -1, i32* %return_value, align 4
  store i32 1, i32* %fix_imports, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0), i8** %encoding, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8** %errors, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.151, i32 0, i32 0), i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @_pickle_Unpickler___init__._keywords, i32 0, i32 0), %struct._object** %file, i32* %fix_imports, i8** %encoding, i8** %errors)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.UnpicklerObject*
  %4 = load %struct._object*, %struct._object** %file, align 8
  %5 = load i32, i32* %fix_imports, align 4
  %6 = load i8*, i8** %encoding, align 8
  %7 = load i8*, i8** %errors, align 8
  %call1 = call i32 @_pickle_Unpickler___init___impl(%struct.UnpicklerObject* %3, %struct._object* %4, i32 %5, i8* %6, i8* %7)
  store i32 %call1, i32* %return_value, align 4
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %8 = load i32, i32* %return_value, align 4
  ret i32 %8
}

declare %struct._object* @PyType_GenericAlloc(%struct._typeobject*, i64) #1

declare %struct._object* @PyType_GenericNew(%struct._typeobject*, %struct._object*, %struct._object*) #1

declare void @PyObject_GC_Del(i8*) #1

declare void @PyObject_GC_UnTrack(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @_Unpickler_MemoCleanup(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %i = alloca i64, align 8
  %memo = alloca %struct._object**, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 2
  %1 = load %struct._object**, %struct._object*** %memo1, align 8
  store %struct._object** %1, %struct._object*** %memo, align 8
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 2
  %3 = load %struct._object**, %struct._object*** %memo2, align 8
  %cmp = icmp eq %struct._object** %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 2
  store %struct._object** null, %struct._object*** %memo3, align 8
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %5, i32 0, i32 3
  %6 = load i64, i64* %memo_size, align 8
  store i64 %6, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.13, %if.end
  %7 = load i64, i64* %i, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %i, align 8
  %cmp4 = icmp sge i64 %dec, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %8 = load i64, i64* %i, align 8
  %9 = load %struct._object**, %struct._object*** %memo, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %9, i64 %8
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp5 = icmp ne %struct._object* %11, null
  br i1 %cmp5, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %dec8 = add i64 %14, -1
  store i64 %dec8, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec8, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body.7
  br label %if.end.11

if.else:                                          ; preds = %do.body.7
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  br label %if.end.12

if.end.12:                                        ; preds = %do.end, %do.body
  br label %do.end.13

do.end.13:                                        ; preds = %if.end.12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load %struct._object**, %struct._object*** %memo, align 8
  %20 = bitcast %struct._object** %19 to i8*
  call void @PyMem_Free(i8* %20)
  br label %return

return:                                           ; preds = %while.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_Unpickler_load(%struct.UnpicklerObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_Unpickler_load_impl(%struct.UnpicklerObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_Unpickler_find_class(%struct.UnpicklerObject* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %module_name = alloca %struct._object*, align 8
  %global_name = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %return_value, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.113, i32 0, i32 0), i64 2, i64 2, %struct._object** %module_name, %struct._object** %global_name)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %module_name, align 8
  %3 = load %struct._object*, %struct._object** %global_name, align 8
  %call1 = call %struct._object* @_pickle_Unpickler_find_class_impl(%struct.UnpicklerObject* %1, %struct._object* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %return_value, align 8
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %4 = load %struct._object*, %struct._object** %return_value, align 8
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_Unpickler_load_impl(%struct.UnpicklerObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %unpickler = alloca %struct.UnpicklerObject*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  store %struct.UnpicklerObject* %0, %struct.UnpicklerObject** %unpickler, align 8
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %1, i32 0, i32 12
  %2 = load %struct._object*, %struct._object** %read, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %3 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %UnpicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %UnpicklingError, align 8
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %6 = bitcast %struct.UnpicklerObject* %5 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 1
  %8 = load i8*, i8** %tp_name, align 8
  %call1 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %4, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.140, i32 0, i32 0), i8* %8)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %call2 = call %struct._object* @load(%struct.UnpicklerObject* %9)
  store %struct._object* %call2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %10
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_Unpickler_find_class_impl(%struct.UnpicklerObject* %self, %struct._object* %module_name, %struct._object* %global_name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %module_name.addr = alloca %struct._object*, align 8
  %global_name.addr = alloca %struct._object*, align 8
  %global = alloca %struct._object*, align 8
  %modules_dict = alloca %struct._object*, align 8
  %module = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp79 = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %module_name, %struct._object** %module_name.addr, align 8
  store %struct._object* %global_name, %struct._object** %global_name.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 20
  %1 = load i32, i32* %proto, align 4
  %cmp = icmp slt i32 %1, 3
  br i1 %cmp, label %land.lhs.true, label %if.end.59

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %fix_imports = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %2, i32 0, i32 21
  %3 = load i32, i32* %fix_imports, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end.59

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %4 = load %struct._object*, %struct._object** %module_name.addr, align 8
  %5 = load %struct._object*, %struct._object** %global_name.addr, align 8
  %call1 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %4, %struct._object* %5)
  store %struct._object* %call1, %struct._object** %key, align 8
  %6 = load %struct._object*, %struct._object** %key, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %name_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %7, i32 0, i32 7
  %8 = load %struct._object*, %struct._object** %name_mapping_2to3, align 8
  %9 = load %struct._object*, %struct._object** %key, align 8
  %call4 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %8, %struct._object* %9)
  store %struct._object* %call4, %struct._object** %item, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %17 = load %struct._object*, %struct._object** %item, align 8
  %tobool8 = icmp ne %struct._object* %17, null
  br i1 %tobool8, label %if.then.9, label %if.else.35

if.then.9:                                        ; preds = %do.end
  %18 = load %struct._object*, %struct._object** %item, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19
  %20 = load i64, i64* %tp_flags, align 8
  %and = and i64 %20, 67108864
  %cmp11 = icmp ne i64 %and, 0
  br i1 %cmp11, label %lor.lhs.false, label %if.then.13

lor.lhs.false:                                    ; preds = %if.then.9
  %21 = load %struct._object*, %struct._object** %item, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1
  %23 = load i64, i64* %ob_size, align 8
  %cmp12 = icmp ne i64 %23, 2
  br i1 %cmp12, label %if.then.13, label %if.end.16

if.then.13:                                       ; preds = %lor.lhs.false, %if.then.9
  %24 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %25 = load %struct._object*, %struct._object** %item, align 8
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 1
  %27 = load i8*, i8** %tp_name, align 8
  %call15 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %24, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.141, i32 0, i32 0), i8* %27)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %lor.lhs.false
  %28 = load %struct._object*, %struct._object** %item, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %29, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %30 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %30, %struct._object** %module_name.addr, align 8
  %31 = load %struct._object*, %struct._object** %item, align 8
  %32 = bitcast %struct._object* %31 to %struct.PyTupleObject*
  %ob_item17 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %32, i32 0, i32 1
  %arrayidx18 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item17, i32 0, i64 1
  %33 = load %struct._object*, %struct._object** %arrayidx18, align 8
  store %struct._object* %33, %struct._object** %global_name.addr, align 8
  %34 = load %struct._object*, %struct._object** %module_name.addr, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_flags20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 19
  %36 = load i64, i64* %tp_flags20, align 8
  %and21 = and i64 %36, 268435456
  %cmp22 = icmp ne i64 %and21, 0
  br i1 %cmp22, label %lor.lhs.false.23, label %if.then.28

lor.lhs.false.23:                                 ; preds = %if.end.16
  %37 = load %struct._object*, %struct._object** %global_name.addr, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_flags25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 19
  %39 = load i64, i64* %tp_flags25, align 8
  %and26 = and i64 %39, 268435456
  %cmp27 = icmp ne i64 %and26, 0
  br i1 %cmp27, label %if.end.34, label %if.then.28

if.then.28:                                       ; preds = %lor.lhs.false.23, %if.end.16
  %40 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %41 = load %struct._object*, %struct._object** %module_name.addr, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_name30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 1
  %43 = load i8*, i8** %tp_name30, align 8
  %44 = load %struct._object*, %struct._object** %global_name.addr, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_name32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 1
  %46 = load i8*, i8** %tp_name32, align 8
  %call33 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %40, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.142, i32 0, i32 0), i8* %43, i8* %46)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %lor.lhs.false.23
  br label %if.end.40

if.else.35:                                       ; preds = %do.end
  %call36 = call %struct._object* @PyErr_Occurred()
  %tobool37 = icmp ne %struct._object* %call36, null
  br i1 %tobool37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.else.35
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.39:                                        ; preds = %if.else.35
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.end.34
  %47 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %import_mapping_2to3 = getelementptr inbounds %struct.PickleState, %struct.PickleState* %47, i32 0, i32 8
  %48 = load %struct._object*, %struct._object** %import_mapping_2to3, align 8
  %49 = load %struct._object*, %struct._object** %module_name.addr, align 8
  %call41 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %48, %struct._object* %49)
  store %struct._object* %call41, %struct._object** %item, align 8
  %50 = load %struct._object*, %struct._object** %item, align 8
  %tobool42 = icmp ne %struct._object* %50, null
  br i1 %tobool42, label %if.then.43, label %if.else.53

if.then.43:                                       ; preds = %if.end.40
  %51 = load %struct._object*, %struct._object** %item, align 8
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8
  %tp_flags45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 19
  %53 = load i64, i64* %tp_flags45, align 8
  %and46 = and i64 %53, 268435456
  %cmp47 = icmp ne i64 %and46, 0
  br i1 %cmp47, label %if.end.52, label %if.then.48

if.then.48:                                       ; preds = %if.then.43
  %54 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %55 = load %struct._object*, %struct._object** %item, align 8
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8
  %tp_name50 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 1
  %57 = load i8*, i8** %tp_name50, align 8
  %call51 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %54, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.143, i32 0, i32 0), i8* %57)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.52:                                        ; preds = %if.then.43
  %58 = load %struct._object*, %struct._object** %item, align 8
  store %struct._object* %58, %struct._object** %module_name.addr, align 8
  br label %if.end.58

if.else.53:                                       ; preds = %if.end.40
  %call54 = call %struct._object* @PyErr_Occurred()
  %tobool55 = icmp ne %struct._object* %call54, null
  br i1 %tobool55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.else.53
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.57:                                        ; preds = %if.else.53
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.end.52
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %land.lhs.true, %entry
  %call60 = call %struct._object* @_PySys_GetObjectId(%struct._Py_Identifier* @_pickle_Unpickler_find_class_impl.PyId_modules)
  store %struct._object* %call60, %struct._object** %modules_dict, align 8
  %59 = load %struct._object*, %struct._object** %modules_dict, align 8
  %cmp61 = icmp eq %struct._object* %59, null
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.59
  %60 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %60, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.62, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.63:                                        ; preds = %if.end.59
  %61 = load %struct._object*, %struct._object** %modules_dict, align 8
  %62 = load %struct._object*, %struct._object** %module_name.addr, align 8
  %call64 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %61, %struct._object* %62)
  store %struct._object* %call64, %struct._object** %module, align 8
  %63 = load %struct._object*, %struct._object** %module, align 8
  %cmp65 = icmp eq %struct._object* %63, null
  br i1 %cmp65, label %if.then.66, label %if.else.90

if.then.66:                                       ; preds = %if.end.63
  %call67 = call %struct._object* @PyErr_Occurred()
  %tobool68 = icmp ne %struct._object* %call67, null
  br i1 %tobool68, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %if.then.66
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.70:                                        ; preds = %if.then.66
  %64 = load %struct._object*, %struct._object** %module_name.addr, align 8
  %call71 = call %struct._object* @PyImport_Import(%struct._object* %64)
  store %struct._object* %call71, %struct._object** %module, align 8
  %65 = load %struct._object*, %struct._object** %module, align 8
  %cmp72 = icmp eq %struct._object* %65, null
  br i1 %cmp72, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %if.end.70
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.74:                                        ; preds = %if.end.70
  %66 = load %struct._object*, %struct._object** %module, align 8
  %67 = load %struct._object*, %struct._object** %global_name.addr, align 8
  %68 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %proto75 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %68, i32 0, i32 20
  %69 = load i32, i32* %proto75, align 4
  %cmp76 = icmp sge i32 %69, 4
  %conv = zext i1 %cmp76 to i32
  %call77 = call %struct._object* @getattribute(%struct._object* %66, %struct._object* %67, i32 %conv)
  store %struct._object* %call77, %struct._object** %global, align 8
  br label %do.body.78

do.body.78:                                       ; preds = %if.end.74
  %70 = load %struct._object*, %struct._object** %module, align 8
  store %struct._object* %70, %struct._object** %_py_decref_tmp79, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_refcnt80 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0
  %72 = load i64, i64* %ob_refcnt80, align 8
  %dec81 = add i64 %72, -1
  store i64 %dec81, i64* %ob_refcnt80, align 8
  %cmp82 = icmp ne i64 %dec81, 0
  br i1 %cmp82, label %if.then.84, label %if.else.85

if.then.84:                                       ; preds = %do.body.78
  br label %if.end.88

if.else.85:                                       ; preds = %do.body.78
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_type86 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type86, align 8
  %tp_dealloc87 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 4
  %75 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc87, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  call void %75(%struct._object* %76)
  br label %if.end.88

if.end.88:                                        ; preds = %if.else.85, %if.then.84
  br label %do.end.89

do.end.89:                                        ; preds = %if.end.88
  br label %if.end.95

if.else.90:                                       ; preds = %if.end.63
  %77 = load %struct._object*, %struct._object** %module, align 8
  %78 = load %struct._object*, %struct._object** %global_name.addr, align 8
  %79 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %proto91 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %79, i32 0, i32 20
  %80 = load i32, i32* %proto91, align 4
  %cmp92 = icmp sge i32 %80, 4
  %conv93 = zext i1 %cmp92 to i32
  %call94 = call %struct._object* @getattribute(%struct._object* %77, %struct._object* %78, i32 %conv93)
  store %struct._object* %call94, %struct._object** %global, align 8
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.90, %do.end.89
  %81 = load %struct._object*, %struct._object** %global, align 8
  store %struct._object* %81, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.95, %if.then.73, %if.then.69, %if.then.62, %if.then.56, %if.then.48, %if.then.38, %if.then.28, %if.then.13, %if.then.3
  %82 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %82
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @Unpickler_get_memo(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call %struct._object* @UnpicklerMemoProxy_New(%struct.UnpicklerObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @Unpickler_set_memo(%struct.UnpicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %new_memo = alloca %struct._object**, align 8
  %new_memo_size = alloca i64, align 8
  %i = alloca i64, align 8
  %unpickler = alloca %struct.UnpicklerObject*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %i18 = alloca i64, align 8
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i64 0, i64* %new_memo_size, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.146, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %3, @UnpicklerMemoProxyType
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.UnpicklerMemoProxyObject*
  %unpickler3 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %5, i32 0, i32 1
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler3, align 8
  store %struct.UnpicklerObject* %6, %struct.UnpicklerObject** %unpickler, align 8
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 3
  %8 = load i64, i64* %memo_size, align 8
  store i64 %8, i64* %new_memo_size, align 8
  %9 = load i64, i64* %new_memo_size, align 8
  %call = call %struct._object** @_Unpickler_NewMemo(i64 %9)
  store %struct._object** %call, %struct._object*** %new_memo, align 8
  %10 = load %struct._object**, %struct._object*** %new_memo, align 8
  %cmp4 = icmp eq %struct._object** %10, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.6
  %11 = load i64, i64* %i, align 8
  %12 = load i64, i64* %new_memo_size, align 8
  %cmp7 = icmp slt i64 %11, %12
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  %13 = load i64, i64* %i, align 8
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %memo = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %14, i32 0, i32 2
  %15 = load %struct._object**, %struct._object*** %memo, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %15, i64 %13
  %16 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %16, %struct._object** %_py_xincref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp8 = icmp ne %struct._object* %17, null
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %19, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %20 = load i64, i64* %i, align 8
  %21 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %memo11 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %21, i32 0, i32 2
  %22 = load %struct._object**, %struct._object*** %memo11, align 8
  %arrayidx12 = getelementptr %struct._object*, %struct._object** %22, i64 %20
  %23 = load %struct._object*, %struct._object** %arrayidx12, align 8
  %24 = load i64, i64* %i, align 8
  %25 = load %struct._object**, %struct._object*** %new_memo, align 8
  %arrayidx13 = getelementptr %struct._object*, %struct._object** %25, i64 %24
  store %struct._object* %23, %struct._object** %arrayidx13, align 8
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %26 = load i64, i64* %i, align 8
  %inc14 = add i64 %26, 1
  store i64 %inc14, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.48

if.else:                                          ; preds = %if.end
  %27 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 19
  %29 = load i64, i64* %tp_flags, align 8
  %and = and i64 %29, 536870912
  %cmp16 = icmp ne i64 %and, 0
  br i1 %cmp16, label %if.then.17, label %if.else.44

if.then.17:                                       ; preds = %if.else
  store i64 0, i64* %i18, align 8
  %30 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call19 = call i64 @PyDict_Size(%struct._object* %30)
  store i64 %call19, i64* %new_memo_size, align 8
  %31 = load i64, i64* %new_memo_size, align 8
  %call20 = call %struct._object** @_Unpickler_NewMemo(i64 %31)
  store %struct._object** %call20, %struct._object*** %new_memo, align 8
  %32 = load %struct._object**, %struct._object*** %new_memo, align 8
  %cmp21 = icmp eq %struct._object** %32, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.17
  store i32 -1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.then.17
  br label %while.cond

while.cond:                                       ; preds = %if.end.43, %if.end.23
  %33 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call24 = call i32 @PyDict_Next(%struct._object* %33, i64* %i18, %struct._object** %key, %struct._object** %value)
  %tobool = icmp ne i32 %call24, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %34 = load %struct._object*, %struct._object** %key, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_flags26 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 19
  %36 = load i64, i64* %tp_flags26, align 8
  %and27 = and i64 %36, 16777216
  %cmp28 = icmp ne i64 %and27, 0
  br i1 %cmp28, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %while.body
  %37 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.147, i32 0, i32 0))
  br label %error

if.end.30:                                        ; preds = %while.body
  %38 = load %struct._object*, %struct._object** %key, align 8
  %call31 = call i64 @PyLong_AsSsize_t(%struct._object* %38)
  store i64 %call31, i64* %idx, align 8
  %39 = load i64, i64* %idx, align 8
  %cmp32 = icmp eq i64 %39, -1
  br i1 %cmp32, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %if.end.30
  %call33 = call %struct._object* @PyErr_Occurred()
  %tobool34 = icmp ne %struct._object* %call33, null
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %land.lhs.true
  br label %error

if.end.36:                                        ; preds = %land.lhs.true, %if.end.30
  %40 = load i64, i64* %idx, align 8
  %cmp37 = icmp slt i64 %40, 0
  br i1 %cmp37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end.36
  %41 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %41, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.148, i32 0, i32 0))
  br label %error

if.end.39:                                        ; preds = %if.end.36
  %42 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %43 = load i64, i64* %idx, align 8
  %44 = load %struct._object*, %struct._object** %value, align 8
  %call40 = call i32 @_Unpickler_MemoPut(%struct.UnpicklerObject* %42, i64 %43, %struct._object* %44)
  %cmp41 = icmp slt i32 %call40, 0
  br i1 %cmp41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.39
  br label %error

if.end.43:                                        ; preds = %if.end.39
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.47

if.else.44:                                       ; preds = %if.else
  %45 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %46 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 1
  %48 = load i8*, i8** %tp_name, align 8
  %call46 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %45, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.149, i32 0, i32 0), i8* %48)
  store i32 -1, i32* %retval
  br label %return

if.end.47:                                        ; preds = %while.end
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %for.end
  %49 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  call void @_Unpickler_MemoCleanup(%struct.UnpicklerObject* %49)
  %50 = load i64, i64* %new_memo_size, align 8
  %51 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size49 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %51, i32 0, i32 3
  store i64 %50, i64* %memo_size49, align 8
  %52 = load %struct._object**, %struct._object*** %new_memo, align 8
  %53 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo50 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %53, i32 0, i32 2
  store %struct._object** %52, %struct._object*** %memo50, align 8
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.42, %if.then.38, %if.then.35, %if.then.29
  %54 = load i64, i64* %new_memo_size, align 8
  %tobool51 = icmp ne i64 %54, 0
  br i1 %tobool51, label %if.then.52, label %if.end.72

if.then.52:                                       ; preds = %error
  %55 = load i64, i64* %new_memo_size, align 8
  store i64 %55, i64* %i, align 8
  br label %while.cond.53

while.cond.53:                                    ; preds = %do.end.70, %if.then.52
  %56 = load i64, i64* %i, align 8
  %dec = add i64 %56, -1
  store i64 %dec, i64* %i, align 8
  %cmp54 = icmp sge i64 %dec, 0
  br i1 %cmp54, label %while.body.55, label %while.end.71

while.body.55:                                    ; preds = %while.cond.53
  br label %do.body.56

do.body.56:                                       ; preds = %while.body.55
  %57 = load i64, i64* %i, align 8
  %58 = load %struct._object**, %struct._object*** %new_memo, align 8
  %arrayidx57 = getelementptr %struct._object*, %struct._object** %58, i64 %57
  %59 = load %struct._object*, %struct._object** %arrayidx57, align 8
  store %struct._object* %59, %struct._object** %_py_xdecref_tmp, align 8
  %60 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp58 = icmp ne %struct._object* %60, null
  br i1 %cmp58, label %if.then.59, label %if.end.69

if.then.59:                                       ; preds = %do.body.56
  br label %do.body.60

do.body.60:                                       ; preds = %if.then.59
  %61 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt61 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt61, align 8
  %dec62 = add i64 %63, -1
  store i64 %dec62, i64* %ob_refcnt61, align 8
  %cmp63 = icmp ne i64 %dec62, 0
  br i1 %cmp63, label %if.then.64, label %if.else.65

if.then.64:                                       ; preds = %do.body.60
  br label %if.end.67

if.else.65:                                       ; preds = %do.body.60
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %66(%struct._object* %67)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.65, %if.then.64
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  br label %if.end.69

if.end.69:                                        ; preds = %do.end.68, %do.body.56
  br label %do.end.70

do.end.70:                                        ; preds = %if.end.69
  br label %while.cond.53

while.end.71:                                     ; preds = %while.cond.53
  %68 = load %struct._object**, %struct._object*** %new_memo, align 8
  %69 = bitcast %struct._object** %68 to i8*
  call void @PyMem_Free(i8* %69)
  br label %if.end.72

if.end.72:                                        ; preds = %while.end.71, %error
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.72, %if.end.48, %if.else.44, %if.then.22, %if.then.5, %if.then
  %70 = load i32, i32* %retval
  ret i32 %70
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @Unpickler_get_persload(%struct.UnpicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 5
  %1 = load %struct._object*, %struct._object** %pers_func, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.145, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func1 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 5
  %4 = load %struct._object*, %struct._object** %pers_func1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func2 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 5
  %7 = load %struct._object*, %struct._object** %pers_func2, align 8
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal i32 @Unpickler_set_persload(%struct.UnpicklerObject* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.146, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @PyCallable_Check(%struct._object* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.2, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.150, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %4, i32 0, i32 5
  %5 = load %struct._object*, %struct._object** %pers_func, align 8
  store %struct._object* %5, %struct._object** %tmp, align 8
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func3 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 5
  store %struct._object* %8, %struct._object** %pers_func3, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.2
  %10 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp5 = icmp ne %struct._object* %11, null
  br i1 %cmp5, label %if.then.6, label %if.end.13

if.then.6:                                        ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt9, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt9, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body.7
  br label %if.end.12

if.else:                                          ; preds = %do.body.7
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %do.body
  br label %do.end.14

do.end.14:                                        ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.14, %if.then.1, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @UnpicklerMemoProxy_New(%struct.UnpicklerObject* %unpickler) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %unpickler.addr = alloca %struct.UnpicklerObject*, align 8
  %self = alloca %struct.UnpicklerMemoProxyObject*, align 8
  store %struct.UnpicklerObject* %unpickler, %struct.UnpicklerObject** %unpickler.addr, align 8
  %call = call %struct._object* @_PyObject_GC_New(%struct._typeobject* @UnpicklerMemoProxyType)
  %0 = bitcast %struct._object* %call to %struct.UnpicklerMemoProxyObject*
  store %struct.UnpicklerMemoProxyObject* %0, %struct.UnpicklerMemoProxyObject** %self, align 8
  %1 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self, align 8
  %cmp = icmp eq %struct.UnpicklerMemoProxyObject* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler.addr, align 8
  %3 = bitcast %struct.UnpicklerObject* %2 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler.addr, align 8
  %6 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self, align 8
  %unpickler1 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %6, i32 0, i32 1
  store %struct.UnpicklerObject* %5, %struct.UnpicklerObject** %unpickler1, align 8
  %7 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self, align 8
  %8 = bitcast %struct.UnpicklerMemoProxyObject* %7 to i8*
  call void @PyObject_GC_Track(i8* %8)
  %9 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self, align 8
  %10 = bitcast %struct.UnpicklerMemoProxyObject* %9 to %struct._object*
  store %struct._object* %10, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

declare void @PyObject_GC_Track(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @_pickle_Unpickler___init___impl(%struct.UnpicklerObject* %self, %struct._object* %file, i32 %fix_imports, i8* %encoding, i8* %errors) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerObject*, align 8
  %file.addr = alloca %struct._object*, align 8
  %fix_imports.addr = alloca i32, align 4
  %encoding.addr = alloca i8*, align 8
  %errors.addr = alloca i8*, align 8
  store %struct.UnpicklerObject* %self, %struct.UnpicklerObject** %self.addr, align 8
  store %struct._object* %file, %struct._object** %file.addr, align 8
  store i32 %fix_imports, i32* %fix_imports.addr, align 4
  store i8* %encoding, i8** %encoding.addr, align 8
  store i8* %errors, i8** %errors.addr, align 8
  %0 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %read = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %0, i32 0, i32 12
  %1 = load %struct._object*, %struct._object** %read, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %call = call i32 @Unpickler_clear(%struct.UnpicklerObject* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %file.addr, align 8
  %call1 = call i32 @_Unpickler_SetInputStream(%struct.UnpicklerObject* %3, %struct._object* %4)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %6 = load i8*, i8** %encoding.addr, align 8
  %7 = load i8*, i8** %errors.addr, align 8
  %call5 = call i32 @_Unpickler_SetInputEncoding(%struct.UnpicklerObject* %5, i8* %6, i8* %7)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %8 = load i32, i32* %fix_imports.addr, align 4
  %9 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %fix_imports9 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %9, i32 0, i32 21
  store i32 %8, i32* %fix_imports9, align 4
  %10 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %fix_imports10 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %10, i32 0, i32 21
  %11 = load i32, i32* %fix_imports10, align 4
  %cmp11 = icmp eq i32 %11, -1
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.8
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.8
  %12 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %13 = bitcast %struct.UnpicklerObject* %12 to %struct._object*
  %call14 = call i32 @_PyObject_HasAttrId(%struct._object* %13, %struct._Py_Identifier* @_pickle_Unpickler___init___impl.PyId_persistent_load)
  %tobool = icmp ne i32 %call14, 0
  br i1 %tobool, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.end.13
  %14 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %15 = bitcast %struct.UnpicklerObject* %14 to %struct._object*
  %call16 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %15, %struct._Py_Identifier* @_pickle_Unpickler___init___impl.PyId_persistent_load)
  %16 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %16, i32 0, i32 5
  store %struct._object* %call16, %struct._object** %pers_func, align 8
  %17 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func17 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %17, i32 0, i32 5
  %18 = load %struct._object*, %struct._object** %pers_func17, align 8
  %cmp18 = icmp eq %struct._object* %18, null
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.15
  store i32 1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.then.15
  br label %if.end.22

if.else:                                          ; preds = %if.end.13
  %19 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %pers_func21 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %19, i32 0, i32 5
  store %struct._object* null, %struct._object** %pers_func21, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.end.20
  %call23 = call %struct._object* @Pdata_New()
  %20 = bitcast %struct._object* %call23 to %struct.Pdata*
  %21 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %21, i32 0, i32 1
  store %struct.Pdata* %20, %struct.Pdata** %stack, align 8
  %22 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %stack24 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %22, i32 0, i32 1
  %23 = load %struct.Pdata*, %struct.Pdata** %stack24, align 8
  %cmp25 = icmp eq %struct.Pdata* %23, null
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.22
  store i32 1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.end.22
  %24 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %24, i32 0, i32 3
  store i64 32, i64* %memo_size, align 8
  %25 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo_size28 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %25, i32 0, i32 3
  %26 = load i64, i64* %memo_size28, align 8
  %call29 = call %struct._object** @_Unpickler_NewMemo(i64 %26)
  %27 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %27, i32 0, i32 2
  store %struct._object** %call29, %struct._object*** %memo, align 8
  %28 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %memo30 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %28, i32 0, i32 2
  %29 = load %struct._object**, %struct._object*** %memo30, align 8
  %cmp31 = icmp eq %struct._object** %29, null
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.27
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end.27
  %30 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %self.addr, align 8
  %proto = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %30, i32 0, i32 20
  store i32 0, i32* %proto, align 4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.33, %if.then.32, %if.then.26, %if.then.19, %if.then.12, %if.then.7, %if.then.3
  %31 = load i32, i32* %retval
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal void @Pickler_dealloc(%struct.PicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp7 = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  %_py_xdecref_tmp24 = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  %_py_xdecref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_xdecref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %1 = bitcast %struct.PicklerObject* %0 to i8*
  call void @PyObject_GC_UnTrack(i8* %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 5
  %3 = load %struct._object*, %struct._object** %output_buffer, align 8
  store %struct._object* %3, %struct._object** %_py_xdecref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body.1
  br label %if.end

if.else:                                          ; preds = %do.body.1
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %do.body
  br label %do.end.5

do.end.5:                                         ; preds = %if.end.4
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.5
  %12 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %12, i32 0, i32 4
  %13 = load %struct._object*, %struct._object** %write, align 8
  store %struct._object* %13, %struct._object** %_py_xdecref_tmp7, align 8
  %14 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  %cmp8 = icmp ne %struct._object* %14, null
  br i1 %cmp8, label %if.then.9, label %if.end.21

if.then.9:                                        ; preds = %do.body.6
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.9
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp11, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %17, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %20(%struct._object* %21)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %if.end.21

if.end.21:                                        ; preds = %do.end.20, %do.body.6
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %do.body.23

do.body.23:                                       ; preds = %do.end.22
  %22 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %22, i32 0, i32 2
  %23 = load %struct._object*, %struct._object** %pers_func, align 8
  store %struct._object* %23, %struct._object** %_py_xdecref_tmp24, align 8
  %24 = load %struct._object*, %struct._object** %_py_xdecref_tmp24, align 8
  %cmp25 = icmp ne %struct._object* %24, null
  br i1 %cmp25, label %if.then.26, label %if.end.38

if.then.26:                                       ; preds = %do.body.23
  br label %do.body.27

do.body.27:                                       ; preds = %if.then.26
  %25 = load %struct._object*, %struct._object** %_py_xdecref_tmp24, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp28, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %27, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.27
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %30(%struct._object* %31)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %if.end.38

if.end.38:                                        ; preds = %do.end.37, %do.body.23
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %32 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %32, i32 0, i32 3
  %33 = load %struct._object*, %struct._object** %dispatch_table, align 8
  store %struct._object* %33, %struct._object** %_py_xdecref_tmp41, align 8
  %34 = load %struct._object*, %struct._object** %_py_xdecref_tmp41, align 8
  %cmp42 = icmp ne %struct._object* %34, null
  br i1 %cmp42, label %if.then.43, label %if.end.55

if.then.43:                                       ; preds = %do.body.40
  br label %do.body.44

do.body.44:                                       ; preds = %if.then.43
  %35 = load %struct._object*, %struct._object** %_py_xdecref_tmp41, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp45, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %37, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.44
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %40(%struct._object* %41)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  br label %if.end.55

if.end.55:                                        ; preds = %do.end.54, %do.body.40
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  %42 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %42, i32 0, i32 16
  %43 = load %struct._object*, %struct._object** %fast_memo, align 8
  store %struct._object* %43, %struct._object** %_py_xdecref_tmp58, align 8
  %44 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  %cmp59 = icmp ne %struct._object* %44, null
  br i1 %cmp59, label %if.then.60, label %if.end.72

if.then.60:                                       ; preds = %do.body.57
  br label %do.body.61

do.body.61:                                       ; preds = %if.then.60
  %45 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp62, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt63, align 8
  %dec64 = add i64 %47, -1
  store i64 %dec64, i64* %ob_refcnt63, align 8
  %cmp65 = icmp ne i64 %dec64, 0
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %do.body.61
  br label %if.end.70

if.else.67:                                       ; preds = %do.body.61
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  call void %50(%struct._object* %51)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %if.end.72

if.end.72:                                        ; preds = %do.end.71, %do.body.57
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  %52 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %52, i32 0, i32 1
  %53 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  call void @PyMemoTable_Del(%struct.PyMemoTable* %53)
  %54 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %55 = bitcast %struct.PicklerObject* %54 to %struct._object*
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 38
  %57 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %58 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %59 = bitcast %struct.PicklerObject* %58 to %struct._object*
  %60 = bitcast %struct._object* %59 to i8*
  call void %57(i8* %60)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @Pickler_traverse(%struct.PicklerObject* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  %vret8 = alloca i32, align 4
  %vret19 = alloca i32, align 4
  %vret30 = alloca i32, align 4
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 4
  %1 = load %struct._object*, %struct._object** %write, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  %2 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %write1, align 8
  %5 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %2(%struct._object* %4, i8* %5)
  store i32 %call, i32* %vret, align 4
  %6 = load i32, i32* %vret, align 4
  %tobool2 = icmp ne i32 %6, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %7 = load i32, i32* %vret, align 4
  store i32 %7, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  br label %do.body.5

do.body.5:                                        ; preds = %do.end
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %8, i32 0, i32 2
  %9 = load %struct._object*, %struct._object** %pers_func, align 8
  %tobool6 = icmp ne %struct._object* %9, null
  br i1 %tobool6, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %do.body.5
  %10 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func9 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 2
  %12 = load %struct._object*, %struct._object** %pers_func9, align 8
  %13 = load i8*, i8** %arg.addr, align 8
  %call10 = call i32 %10(%struct._object* %12, i8* %13)
  store i32 %call10, i32* %vret8, align 4
  %14 = load i32, i32* %vret8, align 4
  %tobool11 = icmp ne i32 %14, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.7
  %15 = load i32, i32* %vret8, align 4
  store i32 %15, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.7
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %do.body.5
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  br label %do.body.16

do.body.16:                                       ; preds = %do.end.15
  %16 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %16, i32 0, i32 3
  %17 = load %struct._object*, %struct._object** %dispatch_table, align 8
  %tobool17 = icmp ne %struct._object* %17, null
  br i1 %tobool17, label %if.then.18, label %if.end.25

if.then.18:                                       ; preds = %do.body.16
  %18 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %19 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table20 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %19, i32 0, i32 3
  %20 = load %struct._object*, %struct._object** %dispatch_table20, align 8
  %21 = load i8*, i8** %arg.addr, align 8
  %call21 = call i32 %18(%struct._object* %20, i8* %21)
  store i32 %call21, i32* %vret19, align 4
  %22 = load i32, i32* %vret19, align 4
  %tobool22 = icmp ne i32 %22, 0
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.18
  %23 = load i32, i32* %vret19, align 4
  store i32 %23, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.18
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %do.body.16
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %24 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %24, i32 0, i32 16
  %25 = load %struct._object*, %struct._object** %fast_memo, align 8
  %tobool28 = icmp ne %struct._object* %25, null
  br i1 %tobool28, label %if.then.29, label %if.end.36

if.then.29:                                       ; preds = %do.body.27
  %26 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %27 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo31 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %27, i32 0, i32 16
  %28 = load %struct._object*, %struct._object** %fast_memo31, align 8
  %29 = load i8*, i8** %arg.addr, align 8
  %call32 = call i32 %26(%struct._object* %28, i8* %29)
  store i32 %call32, i32* %vret30, align 4
  %30 = load i32, i32* %vret30, align 4
  %tobool33 = icmp ne i32 %30, 0
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.29
  %31 = load i32, i32* %vret30, align 4
  store i32 %31, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.29
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %do.body.27
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.37, %if.then.34, %if.then.23, %if.then.12, %if.then.3
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal i32 @Pickler_clear(%struct.PicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp8 = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  %_py_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  %_py_tmp62 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %memo81 = alloca %struct.PyMemoTable*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 5
  %1 = load %struct._object*, %struct._object** %output_buffer, align 8
  store %struct._object* %1, %struct._object** %_py_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %3, i32 0, i32 5
  store %struct._object* null, %struct._object** %output_buffer1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %do.body.7

do.body.7:                                        ; preds = %do.end.6
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 4
  %12 = load %struct._object*, %struct._object** %write, align 8
  store %struct._object* %12, %struct._object** %_py_tmp8, align 8
  %13 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  %cmp9 = icmp ne %struct._object* %13, null
  br i1 %cmp9, label %if.then.10, label %if.end.23

if.then.10:                                       ; preds = %do.body.7
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write11 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 4
  store %struct._object* null, %struct._object** %write11, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.then.10
  %15 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp13, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %if.end.23

if.end.23:                                        ; preds = %do.end.22, %do.body.7
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %22 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %22, i32 0, i32 2
  %23 = load %struct._object*, %struct._object** %pers_func, align 8
  store %struct._object* %23, %struct._object** %_py_tmp26, align 8
  %24 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  %cmp27 = icmp ne %struct._object* %24, null
  br i1 %cmp27, label %if.then.28, label %if.end.41

if.then.28:                                       ; preds = %do.body.25
  %25 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func29 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %25, i32 0, i32 2
  store %struct._object* null, %struct._object** %pers_func29, align 8
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.28
  %26 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp31, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %28, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %31(%struct._object* %32)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %if.end.41

if.end.41:                                        ; preds = %do.end.40, %do.body.25
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  %33 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %33, i32 0, i32 3
  %34 = load %struct._object*, %struct._object** %dispatch_table, align 8
  store %struct._object* %34, %struct._object** %_py_tmp44, align 8
  %35 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  %cmp45 = icmp ne %struct._object* %35, null
  br i1 %cmp45, label %if.then.46, label %if.end.59

if.then.46:                                       ; preds = %do.body.43
  %36 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table47 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %36, i32 0, i32 3
  store %struct._object* null, %struct._object** %dispatch_table47, align 8
  br label %do.body.48

do.body.48:                                       ; preds = %if.then.46
  %37 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp49, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %39, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.48
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %42(%struct._object* %43)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %if.end.59

if.end.59:                                        ; preds = %do.end.58, %do.body.43
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  br label %do.body.61

do.body.61:                                       ; preds = %do.end.60
  %44 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %44, i32 0, i32 16
  %45 = load %struct._object*, %struct._object** %fast_memo, align 8
  store %struct._object* %45, %struct._object** %_py_tmp62, align 8
  %46 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  %cmp63 = icmp ne %struct._object* %46, null
  br i1 %cmp63, label %if.then.64, label %if.end.77

if.then.64:                                       ; preds = %do.body.61
  %47 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo65 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %47, i32 0, i32 16
  store %struct._object* null, %struct._object** %fast_memo65, align 8
  br label %do.body.66

do.body.66:                                       ; preds = %if.then.64
  %48 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp67, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %50, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %53(%struct._object* %54)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  br label %if.end.77

if.end.77:                                        ; preds = %do.end.76, %do.body.61
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  %55 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %55, i32 0, i32 1
  %56 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %cmp79 = icmp ne %struct.PyMemoTable* %56, null
  br i1 %cmp79, label %if.then.80, label %if.end.84

if.then.80:                                       ; preds = %do.end.78
  %57 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo82 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %57, i32 0, i32 1
  %58 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo82, align 8
  store %struct.PyMemoTable* %58, %struct.PyMemoTable** %memo81, align 8
  %59 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo83 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %59, i32 0, i32 1
  store %struct.PyMemoTable* null, %struct.PyMemoTable** %memo83, align 8
  %60 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo81, align 8
  call void @PyMemoTable_Del(%struct.PyMemoTable* %60)
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.80, %do.end.78
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @_pickle_Pickler___init__(%struct._object* %self, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca i32, align 4
  %file = alloca %struct._object*, align 8
  %protocol = alloca %struct._object*, align 8
  %fix_imports = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8
  store i32 -1, i32* %return_value, align 4
  store %struct._object* null, %struct._object** %protocol, align 8
  store i32 1, i32* %fix_imports, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.162, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_pickle_Pickler___init__._keywords, i32 0, i32 0), %struct._object** %file, %struct._object** %protocol, i32* %fix_imports)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PicklerObject*
  %4 = load %struct._object*, %struct._object** %file, align 8
  %5 = load %struct._object*, %struct._object** %protocol, align 8
  %6 = load i32, i32* %fix_imports, align 4
  %call1 = call i32 @_pickle_Pickler___init___impl(%struct.PicklerObject* %3, %struct._object* %4, %struct._object* %5, i32 %6)
  store i32 %call1, i32* %return_value, align 4
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %7 = load i32, i32* %return_value, align 4
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal void @PyMemoTable_Del(%struct.PyMemoTable* %self) #0 {
entry:
  %self.addr = alloca %struct.PyMemoTable*, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  %0 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %cmp = icmp eq %struct.PyMemoTable* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %call = call i32 @PyMemoTable_Clear(%struct.PyMemoTable* %1)
  %2 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %2, i32 0, i32 3
  %3 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table, align 8
  %4 = bitcast %struct.PyMemoEntry* %3 to i8*
  call void @PyMem_Free(i8* %4)
  %5 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %6 = bitcast %struct.PyMemoTable* %5 to i8*
  call void @PyMem_Free(i8* %6)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @PyMemoTable_Clear(%struct.PyMemoTable* %self) #0 {
entry:
  %self.addr = alloca %struct.PyMemoTable*, align 8
  %i = alloca i64, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  %0 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_allocated = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %0, i32 0, i32 2
  %1 = load i64, i64* %mt_allocated, align 8
  store i64 %1, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end.7, %entry
  %2 = load i64, i64* %i, align 8
  %dec = add i64 %2, -1
  store i64 %dec, i64* %i, align 8
  %cmp = icmp sge i64 %dec, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %3 = load i64, i64* %i, align 8
  %4 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %4, i32 0, i32 3
  %5 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table, align 8
  %arrayidx = getelementptr %struct.PyMemoEntry, %struct.PyMemoEntry* %5, i64 %3
  %me_key = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %arrayidx, i32 0, i32 0
  %6 = load %struct._object*, %struct._object** %me_key, align 8
  store %struct._object* %6, %struct._object** %_py_xdecref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp1 = icmp ne %struct._object* %7, null
  br i1 %cmp1, label %if.then, label %if.end.6

if.then:                                          ; preds = %do.body
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %8 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec3 = add i64 %10, -1
  store i64 %dec3, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec3, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.6

if.end.6:                                         ; preds = %do.end, %do.body
  br label %do.end.7

do.end.7:                                         ; preds = %if.end.6
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %15, i32 0, i32 1
  store i64 0, i64* %mt_used, align 8
  %16 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table8 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %16, i32 0, i32 3
  %17 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table8, align 8
  %18 = bitcast %struct.PyMemoEntry* %17 to i8*
  %19 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_allocated9 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %19, i32 0, i32 2
  %20 = load i64, i64* %mt_allocated9, align 8
  %mul = mul i64 %20, 16
  call void @llvm.memset.p0i8.i64(i8* %18, i8 0, i64 %mul, i32 8, i1 false)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_Pickler_dump(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %st = alloca %struct.PickleState*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 4
  %1 = load %struct._object*, %struct._object** %write, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.PickleState* @_Pickle_GetGlobalState()
  store %struct.PickleState* %call, %struct.PickleState** %st, align 8
  %2 = load %struct.PickleState*, %struct.PickleState** %st, align 8
  %PicklingError = getelementptr inbounds %struct.PickleState, %struct.PickleState* %2, i32 0, i32 1
  %3 = load %struct._object*, %struct._object** %PicklingError, align 8
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %5 = bitcast %struct.PicklerObject* %4 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 1
  %7 = load i8*, i8** %tp_name, align 8
  %call1 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %3, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.154, i32 0, i32 0), i8* %7)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call2 = call i32 @_Pickler_ClearBuffer(%struct.PicklerObject* %8)
  %cmp3 = icmp slt i32 %call2, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call6 = call i32 @dump(%struct.PicklerObject* %9, %struct._object* %10)
  %cmp7 = icmp slt i32 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end.5
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call10 = call i32 @_Pickler_FlushToFile(%struct.PicklerObject* %11)
  %cmp11 = icmp slt i32 %call10, 0
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.end.9
  %12 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.12, %if.then.8, %if.then.4, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_Pickler_clear_memo(%struct.PicklerObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_Pickler_clear_memo_impl(%struct.PicklerObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @_Pickler_ClearBuffer(%struct.PicklerObject* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 5
  %1 = load %struct._object*, %struct._object** %output_buffer, align 8
  store %struct._object* %1, %struct._object** %_py_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %3, i32 0, i32 5
  store %struct._object* null, %struct._object** %output_buffer1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %max_output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 7
  %12 = load i64, i64* %max_output_len, align 8
  %call = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %12)
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer7 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %13, i32 0, i32 5
  store %struct._object* %call, %struct._object** %output_buffer7, align 8
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer8 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 5
  %15 = load %struct._object*, %struct._object** %output_buffer8, align 8
  %cmp9 = icmp eq %struct._object* %15, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.end.6
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %do.end.6
  %16 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %16, i32 0, i32 6
  store i64 0, i64* %output_len, align 8
  %17 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %frame_start = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %17, i32 0, i32 11
  store i64 -1, i64* %frame_start, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.10
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_Pickler_clear_memo_impl(%struct.PicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 1
  %1 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %tobool = icmp ne %struct.PyMemoTable* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 1
  %3 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo1, align 8
  %call = call i32 @PyMemoTable_Clear(%struct.PyMemoTable* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  ret %struct._object* @_Py_NoneStruct
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @Pickler_get_memo(%struct.PicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call %struct._object* @PicklerMemoProxy_New(%struct.PicklerObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @Pickler_set_memo(%struct.PicklerObject* %self, %struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %new_memo = alloca %struct.PyMemoTable*, align 8
  %pickler = alloca %struct.PicklerObject*, align 8
  %i = alloca i64, align 8
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %memo_id = alloca i64, align 8
  %memo_obj = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct.PyMemoTable* null, %struct.PyMemoTable** %new_memo, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.146, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %3, @PicklerMemoProxyType
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PicklerMemoProxyObject*
  %pickler3 = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %5, i32 0, i32 1
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler3, align 8
  store %struct.PicklerObject* %6, %struct.PicklerObject** %pickler, align 8
  %7 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %7, i32 0, i32 1
  %8 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %call = call %struct.PyMemoTable* @PyMemoTable_Copy(%struct.PyMemoTable* %8)
  store %struct.PyMemoTable* %call, %struct.PyMemoTable** %new_memo, align 8
  %9 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new_memo, align 8
  %cmp4 = icmp eq %struct.PyMemoTable* %9, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  br label %if.end.38

if.else:                                          ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 19
  %12 = load i64, i64* %tp_flags, align 8
  %and = and i64 %12, 536870912
  %cmp8 = icmp ne i64 %and, 0
  br i1 %cmp8, label %if.then.9, label %if.else.34

if.then.9:                                        ; preds = %if.else
  store i64 0, i64* %i, align 8
  %call10 = call %struct.PyMemoTable* @PyMemoTable_New()
  store %struct.PyMemoTable* %call10, %struct.PyMemoTable** %new_memo, align 8
  %13 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new_memo, align 8
  %cmp11 = icmp eq %struct.PyMemoTable* %13, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.9
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.9
  br label %while.cond

while.cond:                                       ; preds = %if.end.33, %if.end.13
  %14 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call14 = call i32 @PyDict_Next(%struct._object* %14, i64* %i, %struct._object** %key, %struct._object** %value)
  %tobool = icmp ne i32 %call14, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %15 = load %struct._object*, %struct._object** %value, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_flags16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 19
  %17 = load i64, i64* %tp_flags16, align 8
  %and17 = and i64 %17, 67108864
  %cmp18 = icmp ne i64 %and17, 0
  br i1 %cmp18, label %lor.lhs.false, label %if.then.20

lor.lhs.false:                                    ; preds = %while.body
  %18 = load %struct._object*, %struct._object** %value, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1
  %20 = load i64, i64* %ob_size, align 8
  %cmp19 = icmp ne i64 %20, 2
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %lor.lhs.false, %while.body
  %21 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %21, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.159, i32 0, i32 0))
  br label %error

if.end.21:                                        ; preds = %lor.lhs.false
  %22 = load %struct._object*, %struct._object** %value, align 8
  %23 = bitcast %struct._object* %22 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %23, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %24 = load %struct._object*, %struct._object** %arrayidx, align 8
  %call22 = call i64 @PyLong_AsSsize_t(%struct._object* %24)
  store i64 %call22, i64* %memo_id, align 8
  %25 = load i64, i64* %memo_id, align 8
  %cmp23 = icmp eq i64 %25, -1
  br i1 %cmp23, label %land.lhs.true, label %if.end.27

land.lhs.true:                                    ; preds = %if.end.21
  %call24 = call %struct._object* @PyErr_Occurred()
  %tobool25 = icmp ne %struct._object* %call24, null
  br i1 %tobool25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %land.lhs.true
  br label %error

if.end.27:                                        ; preds = %land.lhs.true, %if.end.21
  %26 = load %struct._object*, %struct._object** %value, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyTupleObject*
  %ob_item28 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %27, i32 0, i32 1
  %arrayidx29 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item28, i32 0, i64 1
  %28 = load %struct._object*, %struct._object** %arrayidx29, align 8
  store %struct._object* %28, %struct._object** %memo_obj, align 8
  %29 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new_memo, align 8
  %30 = load %struct._object*, %struct._object** %memo_obj, align 8
  %31 = load i64, i64* %memo_id, align 8
  %call30 = call i32 @PyMemoTable_Set(%struct.PyMemoTable* %29, %struct._object* %30, i64 %31)
  %cmp31 = icmp slt i32 %call30, 0
  br i1 %cmp31, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.27
  br label %error

if.end.33:                                        ; preds = %if.end.27
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.37

if.else.34:                                       ; preds = %if.else
  %32 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %33 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 1
  %35 = load i8*, i8** %tp_name, align 8
  %call36 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %32, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.160, i32 0, i32 0), i8* %35)
  store i32 -1, i32* %retval
  br label %return

if.end.37:                                        ; preds = %while.end
  br label %if.end.38

if.end.38:                                        ; preds = %if.end.37, %if.end.6
  %36 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo39 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %36, i32 0, i32 1
  %37 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo39, align 8
  call void @PyMemoTable_Del(%struct.PyMemoTable* %37)
  %38 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new_memo, align 8
  %39 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo40 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %39, i32 0, i32 1
  store %struct.PyMemoTable* %38, %struct.PyMemoTable** %memo40, align 8
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.32, %if.then.26, %if.then.20
  %40 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new_memo, align 8
  %tobool41 = icmp ne %struct.PyMemoTable* %40, null
  br i1 %tobool41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %error
  %41 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new_memo, align 8
  call void @PyMemoTable_Del(%struct.PyMemoTable* %41)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %error
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.43, %if.end.38, %if.else.34, %if.then.12, %if.then.5, %if.then
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @Pickler_get_persid(%struct.PicklerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerObject*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 2
  %1 = load %struct._object*, %struct._object** %pers_func, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.158, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %pers_func1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func2 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %6, i32 0, i32 2
  %7 = load %struct._object*, %struct._object** %pers_func2, align 8
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal i32 @Pickler_set_persid(%struct.PicklerObject* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.146, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @PyCallable_Check(%struct._object* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.2, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.161, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %pers_func, align 8
  store %struct._object* %5, %struct._object** %tmp, align 8
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %9 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func3 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %9, i32 0, i32 2
  store %struct._object* %8, %struct._object** %pers_func3, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.2
  %10 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp5 = icmp ne %struct._object* %11, null
  br i1 %cmp5, label %if.then.6, label %if.end.13

if.then.6:                                        ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt9, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt9, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body.7
  br label %if.end.12

if.else:                                          ; preds = %do.body.7
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %do.body
  br label %do.end.14

do.end.14:                                        ; preds = %if.end.13
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.14, %if.then.1, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PicklerMemoProxy_New(%struct.PicklerObject* %pickler) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %pickler.addr = alloca %struct.PicklerObject*, align 8
  %self = alloca %struct.PicklerMemoProxyObject*, align 8
  store %struct.PicklerObject* %pickler, %struct.PicklerObject** %pickler.addr, align 8
  %call = call %struct._object* @_PyObject_GC_New(%struct._typeobject* @PicklerMemoProxyType)
  %0 = bitcast %struct._object* %call to %struct.PicklerMemoProxyObject*
  store %struct.PicklerMemoProxyObject* %0, %struct.PicklerMemoProxyObject** %self, align 8
  %1 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self, align 8
  %cmp = icmp eq %struct.PicklerMemoProxyObject* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler.addr, align 8
  %3 = bitcast %struct.PicklerObject* %2 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler.addr, align 8
  %6 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self, align 8
  %pickler1 = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %6, i32 0, i32 1
  store %struct.PicklerObject* %5, %struct.PicklerObject** %pickler1, align 8
  %7 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self, align 8
  %8 = bitcast %struct.PicklerMemoProxyObject* %7 to i8*
  call void @PyObject_GC_Track(i8* %8)
  %9 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self, align 8
  %10 = bitcast %struct.PicklerMemoProxyObject* %9 to %struct._object*
  store %struct._object* %10, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct.PyMemoTable* @PyMemoTable_Copy(%struct.PyMemoTable* %self) #0 {
entry:
  %retval = alloca %struct.PyMemoTable*, align 8
  %self.addr = alloca %struct.PyMemoTable*, align 8
  %i = alloca i64, align 8
  %new = alloca %struct.PyMemoTable*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  store %struct.PyMemoTable* %self, %struct.PyMemoTable** %self.addr, align 8
  %call = call %struct.PyMemoTable* @PyMemoTable_New()
  store %struct.PyMemoTable* %call, %struct.PyMemoTable** %new, align 8
  %0 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %cmp = icmp eq %struct.PyMemoTable* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.PyMemoTable* null, %struct.PyMemoTable** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_used = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %1, i32 0, i32 1
  %2 = load i64, i64* %mt_used, align 8
  %3 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %mt_used1 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %3, i32 0, i32 1
  store i64 %2, i64* %mt_used1, align 8
  %4 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_allocated = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %4, i32 0, i32 2
  %5 = load i64, i64* %mt_allocated, align 8
  %6 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %mt_allocated2 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %6, i32 0, i32 2
  store i64 %5, i64* %mt_allocated2, align 8
  %7 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_mask = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %7, i32 0, i32 0
  %8 = load i64, i64* %mt_mask, align 8
  %9 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %mt_mask3 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %9, i32 0, i32 0
  store i64 %8, i64* %mt_mask3, align 8
  %10 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %mt_table = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %10, i32 0, i32 3
  %11 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table, align 8
  %12 = bitcast %struct.PyMemoEntry* %11 to i8*
  call void @PyMem_Free(i8* %12)
  %13 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_allocated4 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %13, i32 0, i32 2
  %14 = load i64, i64* %mt_allocated4, align 8
  %mul = mul i64 %14, 16
  %call5 = call i8* @PyMem_Malloc(i64 %mul)
  %15 = bitcast i8* %call5 to %struct.PyMemoEntry*
  %16 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %mt_table6 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %16, i32 0, i32 3
  store %struct.PyMemoEntry* %15, %struct.PyMemoEntry** %mt_table6, align 8
  %17 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %mt_table7 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %17, i32 0, i32 3
  %18 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table7, align 8
  %cmp8 = icmp eq %struct.PyMemoEntry* %18, null
  br i1 %cmp8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end
  %19 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %20 = bitcast %struct.PyMemoTable* %19 to i8*
  call void @PyMem_Free(i8* %20)
  %call10 = call %struct._object* @PyErr_NoMemory()
  store %struct.PyMemoTable* null, %struct.PyMemoTable** %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.11
  %21 = load i64, i64* %i, align 8
  %22 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_allocated12 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %22, i32 0, i32 2
  %23 = load i64, i64* %mt_allocated12, align 8
  %cmp13 = icmp slt i64 %21, %23
  br i1 %cmp13, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.body
  %24 = load i64, i64* %i, align 8
  %25 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table14 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %25, i32 0, i32 3
  %26 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table14, align 8
  %arrayidx = getelementptr %struct.PyMemoEntry, %struct.PyMemoEntry* %26, i64 %24
  %me_key = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %arrayidx, i32 0, i32 0
  %27 = load %struct._object*, %struct._object** %me_key, align 8
  store %struct._object* %27, %struct._object** %_py_xincref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp15 = icmp ne %struct._object* %28, null
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %do.body
  %29 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %30, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.17
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %31 = load i64, i64* %i, align 8
  %inc18 = add i64 %31, 1
  store i64 %inc18, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  %mt_table19 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %32, i32 0, i32 3
  %33 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table19, align 8
  %34 = bitcast %struct.PyMemoEntry* %33 to i8*
  %35 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_table20 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %35, i32 0, i32 3
  %36 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table20, align 8
  %37 = bitcast %struct.PyMemoEntry* %36 to i8*
  %38 = load %struct.PyMemoTable*, %struct.PyMemoTable** %self.addr, align 8
  %mt_allocated21 = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %38, i32 0, i32 2
  %39 = load i64, i64* %mt_allocated21, align 8
  %mul22 = mul i64 16, %39
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %37, i64 %mul22, i32 8, i1 false)
  %40 = load %struct.PyMemoTable*, %struct.PyMemoTable** %new, align 8
  store %struct.PyMemoTable* %40, %struct.PyMemoTable** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.9, %if.then
  %41 = load %struct.PyMemoTable*, %struct.PyMemoTable** %retval
  ret %struct.PyMemoTable* %41
}

; Function Attrs: nounwind uwtable
define internal i32 @_pickle_Pickler___init___impl(%struct.PicklerObject* %self, %struct._object* %file, %struct._object* %protocol, i32 %fix_imports) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerObject*, align 8
  %file.addr = alloca %struct._object*, align 8
  %protocol.addr = alloca %struct._object*, align 8
  %fix_imports.addr = alloca i32, align 4
  store %struct.PicklerObject* %self, %struct.PicklerObject** %self.addr, align 8
  store %struct._object* %file, %struct._object** %file.addr, align 8
  store %struct._object* %protocol, %struct._object** %protocol.addr, align 8
  store i32 %fix_imports, i32* %fix_imports.addr, align 4
  %0 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %write = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %0, i32 0, i32 4
  %1 = load %struct._object*, %struct._object** %write, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %call = call i32 @Pickler_clear(%struct.PicklerObject* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %protocol.addr, align 8
  %5 = load i32, i32* %fix_imports.addr, align 4
  %call1 = call i32 @_Pickler_SetProtocol(%struct.PicklerObject* %3, %struct._object* %4, i32 %5)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %6 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %7 = load %struct._object*, %struct._object** %file.addr, align 8
  %call5 = call i32 @_Pickler_SetOutputStream(%struct.PicklerObject* %6, %struct._object* %7)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %8 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %8, i32 0, i32 1
  %9 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %cmp9 = icmp eq %struct.PyMemoTable* %9, null
  br i1 %cmp9, label %if.then.10, label %if.end.17

if.then.10:                                       ; preds = %if.end.8
  %call11 = call %struct.PyMemoTable* @PyMemoTable_New()
  %10 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo12 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %10, i32 0, i32 1
  store %struct.PyMemoTable* %call11, %struct.PyMemoTable** %memo12, align 8
  %11 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %memo13 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %11, i32 0, i32 1
  %12 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo13, align 8
  %cmp14 = icmp eq %struct.PyMemoTable* %12, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.then.10
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.then.10
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %if.end.8
  %13 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %13, i32 0, i32 6
  store i64 0, i64* %output_len, align 8
  %14 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %14, i32 0, i32 5
  %15 = load %struct._object*, %struct._object** %output_buffer, align 8
  %cmp18 = icmp eq %struct._object* %15, null
  br i1 %cmp18, label %if.then.19, label %if.end.27

if.then.19:                                       ; preds = %if.end.17
  %16 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %max_output_len = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %16, i32 0, i32 7
  store i64 4096, i64* %max_output_len, align 8
  %17 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %max_output_len20 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %17, i32 0, i32 7
  %18 = load i64, i64* %max_output_len20, align 8
  %call21 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %18)
  %19 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer22 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %19, i32 0, i32 5
  store %struct._object* %call21, %struct._object** %output_buffer22, align 8
  %20 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %output_buffer23 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %20, i32 0, i32 5
  %21 = load %struct._object*, %struct._object** %output_buffer23, align 8
  %cmp24 = icmp eq %struct._object* %21, null
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.19
  store i32 -1, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.then.19
  br label %if.end.27

if.end.27:                                        ; preds = %if.end.26, %if.end.17
  %22 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %22, i32 0, i32 13
  store i32 0, i32* %fast, align 4
  %23 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_nesting = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %23, i32 0, i32 14
  store i32 0, i32* %fast_nesting, align 4
  %24 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %fast_memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %24, i32 0, i32 16
  store %struct._object* null, %struct._object** %fast_memo, align 8
  %25 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %25, i32 0, i32 2
  store %struct._object* null, %struct._object** %pers_func, align 8
  %26 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %27 = bitcast %struct.PicklerObject* %26 to %struct._object*
  %call28 = call i32 @_PyObject_HasAttrId(%struct._object* %27, %struct._Py_Identifier* @_pickle_Pickler___init___impl.PyId_persistent_id)
  %tobool = icmp ne i32 %call28, 0
  br i1 %tobool, label %if.then.29, label %if.end.36

if.then.29:                                       ; preds = %if.end.27
  %28 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %29 = bitcast %struct.PicklerObject* %28 to %struct._object*
  %call30 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %29, %struct._Py_Identifier* @_pickle_Pickler___init___impl.PyId_persistent_id)
  %30 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func31 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %30, i32 0, i32 2
  store %struct._object* %call30, %struct._object** %pers_func31, align 8
  %31 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %pers_func32 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %pers_func32, align 8
  %cmp33 = icmp eq %struct._object* %32, null
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.29
  store i32 -1, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.29
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.27
  %33 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %33, i32 0, i32 3
  store %struct._object* null, %struct._object** %dispatch_table, align 8
  %34 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %35 = bitcast %struct.PicklerObject* %34 to %struct._object*
  %call37 = call i32 @_PyObject_HasAttrId(%struct._object* %35, %struct._Py_Identifier* @_pickle_Pickler___init___impl.PyId_dispatch_table)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.39, label %if.end.46

if.then.39:                                       ; preds = %if.end.36
  %36 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %37 = bitcast %struct.PicklerObject* %36 to %struct._object*
  %call40 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %37, %struct._Py_Identifier* @_pickle_Pickler___init___impl.PyId_dispatch_table)
  %38 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table41 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %38, i32 0, i32 3
  store %struct._object* %call40, %struct._object** %dispatch_table41, align 8
  %39 = load %struct.PicklerObject*, %struct.PicklerObject** %self.addr, align 8
  %dispatch_table42 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %39, i32 0, i32 3
  %40 = load %struct._object*, %struct._object** %dispatch_table42, align 8
  %cmp43 = icmp eq %struct._object* %40, null
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.then.39
  store i32 -1, i32* %retval
  br label %return

if.end.45:                                        ; preds = %if.then.39
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.end.36
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.46, %if.then.44, %if.then.34, %if.then.25, %if.then.15, %if.then.7, %if.then.3
  %41 = load i32, i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define internal void @Pdata_dealloc(%struct.Pdata* %self) #0 {
entry:
  %self.addr = alloca %struct.Pdata*, align 8
  %i = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.Pdata* %self, %struct.Pdata** %self.addr, align 8
  %0 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %1 = bitcast %struct.Pdata* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end, %entry
  %3 = load i64, i64* %i, align 8
  %dec = add i64 %3, -1
  store i64 %dec, i64* %i, align 8
  %cmp = icmp sge i64 %dec, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.body
  %4 = load i64, i64* %i, align 8
  %5 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data = getelementptr inbounds %struct.Pdata, %struct.Pdata* %5, i32 0, i32 1
  %6 = load %struct._object**, %struct._object*** %data, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %6, i64 %4
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec1 = add i64 %9, -1
  store i64 %dec1, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec1, 0
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %data3 = getelementptr inbounds %struct.Pdata, %struct.Pdata* %14, i32 0, i32 1
  %15 = load %struct._object**, %struct._object*** %data3, align 8
  %16 = bitcast %struct._object** %15 to i8*
  call void @PyMem_Free(i8* %16)
  %17 = load %struct.Pdata*, %struct.Pdata** %self.addr, align 8
  %18 = bitcast %struct.Pdata* %17 to i8*
  call void @PyObject_Free(i8* %18)
  ret void
}

declare void @PyObject_Free(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @PicklerMemoProxy_dealloc(%struct.PicklerMemoProxyObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %1 = bitcast %struct.PicklerMemoProxyObject* %0 to i8*
  call void @PyObject_GC_UnTrack(i8* %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %2, i32 0, i32 1
  %3 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %4 = bitcast %struct.PicklerObject* %3 to %struct._object*
  store %struct._object* %4, %struct._object** %_py_xdecref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %5, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body.1
  br label %if.end

if.else:                                          ; preds = %do.body.1
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %do.body
  br label %do.end.5

do.end.5:                                         ; preds = %if.end.4
  %13 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %14 = bitcast %struct.PicklerMemoProxyObject* %13 to %struct._object*
  %15 = bitcast %struct._object* %14 to i8*
  call void @PyObject_GC_Del(i8* %15)
  ret void
}

declare i64 @PyObject_HashNotImplemented(%struct._object*) #1

declare %struct._object* @PyObject_GenericGetAttr(%struct._object*, %struct._object*) #1

declare i32 @PyObject_GenericSetAttr(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @PicklerMemoProxy_traverse(%struct.PicklerMemoProxyObject* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %0, i32 0, i32 1
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %tobool = icmp ne %struct.PicklerObject* %1, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  %2 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %3 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler1 = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %3, i32 0, i32 1
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler1, align 8
  %5 = bitcast %struct.PicklerObject* %4 to %struct._object*
  %6 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %2(%struct._object* %5, i8* %6)
  store i32 %call, i32* %vret, align 4
  %7 = load i32, i32* %vret, align 4
  %tobool2 = icmp ne i32 %7, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %8 = load i32, i32* %vret, align 4
  store i32 %8, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @PicklerMemoProxy_clear(%struct.PicklerMemoProxyObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %0, i32 0, i32 1
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %2 = bitcast %struct.PicklerObject* %1 to %struct._object*
  store %struct._object* %2, %struct._object** %_py_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %4 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler1 = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %4, i32 0, i32 1
  store %struct.PicklerObject* null, %struct.PicklerObject** %pickler1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_PicklerMemoProxy_clear(%struct.PicklerMemoProxyObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_PicklerMemoProxy_clear_impl(%struct.PicklerMemoProxyObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_PicklerMemoProxy_copy(%struct.PicklerMemoProxyObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_PicklerMemoProxy_copy_impl(%struct.PicklerMemoProxyObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_PicklerMemoProxy___reduce__(%struct.PicklerMemoProxyObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_PicklerMemoProxy___reduce___impl(%struct.PicklerMemoProxyObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_PicklerMemoProxy_clear_impl(%struct.PicklerMemoProxyObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %0, i32 0, i32 1
  %1 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %memo = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %1, i32 0, i32 1
  %2 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %tobool = icmp ne %struct.PyMemoTable* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler1 = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %3, i32 0, i32 1
  %4 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler1, align 8
  %memo2 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %4, i32 0, i32 1
  %5 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo2, align 8
  %call = call i32 @PyMemoTable_Clear(%struct.PyMemoTable* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  ret %struct._object* @_Py_NoneStruct
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_PicklerMemoProxy_copy_impl(%struct.PicklerMemoProxyObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %i = alloca i64, align 8
  %memo = alloca %struct.PyMemoTable*, align 8
  %new_memo = alloca %struct._object*, align 8
  %entry3 = alloca %struct.PyMemoEntry, align 8
  %status = alloca i32, align 4
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp22 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_xdecref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %new_memo, align 8
  %0 = load %struct._object*, %struct._object** %new_memo, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %pickler = getelementptr inbounds %struct.PicklerMemoProxyObject, %struct.PicklerMemoProxyObject* %1, i32 0, i32 1
  %2 = load %struct.PicklerObject*, %struct.PicklerObject** %pickler, align 8
  %memo1 = getelementptr inbounds %struct.PicklerObject, %struct.PicklerObject* %2, i32 0, i32 1
  %3 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo1, align 8
  store %struct.PyMemoTable* %3, %struct.PyMemoTable** %memo, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i64, i64* %i, align 8
  %5 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_allocated = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %5, i32 0, i32 2
  %6 = load i64, i64* %mt_allocated, align 8
  %cmp2 = icmp slt i64 %4, %6
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %i, align 8
  %8 = load %struct.PyMemoTable*, %struct.PyMemoTable** %memo, align 8
  %mt_table = getelementptr inbounds %struct.PyMemoTable, %struct.PyMemoTable* %8, i32 0, i32 3
  %9 = load %struct.PyMemoEntry*, %struct.PyMemoEntry** %mt_table, align 8
  %arrayidx = getelementptr %struct.PyMemoEntry, %struct.PyMemoEntry* %9, i64 %7
  %10 = bitcast %struct.PyMemoEntry* %entry3 to i8*
  %11 = bitcast %struct.PyMemoEntry* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false)
  %me_key = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %entry3, i32 0, i32 0
  %12 = load %struct._object*, %struct._object** %me_key, align 8
  %cmp4 = icmp ne %struct._object* %12, null
  br i1 %cmp4, label %if.then.5, label %if.end.65

if.then.5:                                        ; preds = %for.body
  %me_key6 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %entry3, i32 0, i32 0
  %13 = load %struct._object*, %struct._object** %me_key6, align 8
  %14 = bitcast %struct._object* %13 to i8*
  %call7 = call %struct._object* @PyLong_FromVoidPtr(i8* %14)
  store %struct._object* %call7, %struct._object** %key, align 8
  %me_value = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %entry3, i32 0, i32 1
  %15 = load i64, i64* %me_value, align 8
  %me_key8 = getelementptr inbounds %struct.PyMemoEntry, %struct.PyMemoEntry* %entry3, i32 0, i32 0
  %16 = load %struct._object*, %struct._object** %me_key8, align 8
  %call9 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.167, i32 0, i32 0), i64 %15, %struct._object* %16)
  store %struct._object* %call9, %struct._object** %value, align 8
  %17 = load %struct._object*, %struct._object** %key, align 8
  %cmp10 = icmp eq %struct._object* %17, null
  br i1 %cmp10, label %if.then.12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.5
  %18 = load %struct._object*, %struct._object** %value, align 8
  %cmp11 = icmp eq %struct._object* %18, null
  br i1 %cmp11, label %if.then.12, label %if.end.38

if.then.12:                                       ; preds = %lor.lhs.false, %if.then.5
  br label %do.body

do.body:                                          ; preds = %if.then.12
  %19 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %19, %struct._object** %_py_xdecref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp13 = icmp ne %struct._object* %20, null
  br i1 %cmp13, label %if.then.14, label %if.end.19

if.then.14:                                       ; preds = %do.body
  br label %do.body.15

do.body.15:                                       ; preds = %if.then.14
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %23, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body.15
  br label %if.end.18

if.else:                                          ; preds = %do.body.15
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %26(%struct._object* %27)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.18
  br label %if.end.19

if.end.19:                                        ; preds = %do.end, %do.body
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %do.body.21

do.body.21:                                       ; preds = %do.end.20
  %28 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %28, %struct._object** %_py_xdecref_tmp22, align 8
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp22, align 8
  %cmp23 = icmp ne %struct._object* %29, null
  br i1 %cmp23, label %if.then.24, label %if.end.36

if.then.24:                                       ; preds = %do.body.21
  br label %do.body.25

do.body.25:                                       ; preds = %if.then.24
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp22, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp26, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %32, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %35(%struct._object* %36)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  br label %if.end.36

if.end.36:                                        ; preds = %do.end.35, %do.body.21
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %error

if.end.38:                                        ; preds = %lor.lhs.false
  %37 = load %struct._object*, %struct._object** %new_memo, align 8
  %38 = load %struct._object*, %struct._object** %key, align 8
  %39 = load %struct._object*, %struct._object** %value, align 8
  %call39 = call i32 @PyDict_SetItem(%struct._object* %37, %struct._object* %38, %struct._object* %39)
  store i32 %call39, i32* %status, align 4
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.38
  %40 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp41, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %42, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %45(%struct._object* %46)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %47 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp52, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %49, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %52(%struct._object* %53)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %54 = load i32, i32* %status, align 4
  %cmp62 = icmp slt i32 %54, 0
  br i1 %cmp62, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %do.end.61
  br label %error

if.end.64:                                        ; preds = %do.end.61
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.65
  %55 = load i64, i64* %i, align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %56 = load %struct._object*, %struct._object** %new_memo, align 8
  store %struct._object* %56, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.63, %do.end.37
  br label %do.body.66

do.body.66:                                       ; preds = %error
  %57 = load %struct._object*, %struct._object** %new_memo, align 8
  store %struct._object* %57, %struct._object** %_py_xdecref_tmp67, align 8
  %58 = load %struct._object*, %struct._object** %_py_xdecref_tmp67, align 8
  %cmp68 = icmp ne %struct._object* %58, null
  br i1 %cmp68, label %if.then.69, label %if.end.81

if.then.69:                                       ; preds = %do.body.66
  br label %do.body.70

do.body.70:                                       ; preds = %if.then.69
  %59 = load %struct._object*, %struct._object** %_py_xdecref_tmp67, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp71, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt72, align 8
  %dec73 = add i64 %61, -1
  store i64 %dec73, i64* %ob_refcnt72, align 8
  %cmp74 = icmp ne i64 %dec73, 0
  br i1 %cmp74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.70
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.70
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  call void %64(%struct._object* %65)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  br label %if.end.81

if.end.81:                                        ; preds = %do.end.80, %do.body.66
  br label %do.end.82

do.end.82:                                        ; preds = %if.end.81
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.82, %for.end, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_PicklerMemoProxy___reduce___impl(%struct.PicklerMemoProxyObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PicklerMemoProxyObject*, align 8
  %reduce_value = alloca %struct._object*, align 8
  %dict_args = alloca %struct._object*, align 8
  %contents = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  store %struct.PicklerMemoProxyObject* %self, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %0 = load %struct.PicklerMemoProxyObject*, %struct.PicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_PicklerMemoProxy_copy_impl(%struct.PicklerMemoProxyObject* %0)
  store %struct._object* %call, %struct._object** %contents, align 8
  %1 = load %struct._object*, %struct._object** %contents, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyTuple_New(i64 2)
  store %struct._object* %call1, %struct._object** %reduce_value, align 8
  %2 = load %struct._object*, %struct._object** %reduce_value, align 8
  %cmp2 = icmp eq %struct._object* %2, null
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %3 = load %struct._object*, %struct._object** %contents, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %call8 = call %struct._object* @PyTuple_New(i64 1)
  store %struct._object* %call8, %struct._object** %dict_args, align 8
  %10 = load %struct._object*, %struct._object** %dict_args, align 8
  %cmp9 = icmp eq %struct._object* %10, null
  br i1 %cmp9, label %if.then.10, label %if.end.33

if.then.10:                                       ; preds = %if.end.7
  br label %do.body.11

do.body.11:                                       ; preds = %if.then.10
  %11 = load %struct._object*, %struct._object** %contents, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp12, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt13, align 8
  %dec14 = add i64 %13, -1
  store i64 %dec14, i64* %ob_refcnt13, align 8
  %cmp15 = icmp ne i64 %dec14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20

if.else.17:                                       ; preds = %do.body.11
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  call void %16(%struct._object* %17)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  %18 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp23, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %20, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.22
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.22
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %23(%struct._object* %24)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.33:                                        ; preds = %if.end.7
  %25 = load %struct._object*, %struct._object** %contents, align 8
  %26 = load %struct._object*, %struct._object** %dict_args, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %27, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  store %struct._object* %25, %struct._object** %arrayidx, align 8
  %28 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %28, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %29 = load %struct._object*, %struct._object** %reduce_value, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyTupleObject*
  %ob_item34 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %30, i32 0, i32 1
  %arrayidx35 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item34, i32 0, i64 0
  store %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 0, i32 0), %struct._object** %arrayidx35, align 8
  %31 = load %struct._object*, %struct._object** %dict_args, align 8
  %32 = load %struct._object*, %struct._object** %reduce_value, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyTupleObject*
  %ob_item36 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %33, i32 0, i32 1
  %arrayidx37 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item36, i32 0, i64 1
  store %struct._object* %31, %struct._object** %arrayidx37, align 8
  %34 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %34, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.33, %do.end.32, %do.end, %if.then
  %35 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %35
}

; Function Attrs: nounwind uwtable
define internal void @UnpicklerMemoProxy_dealloc(%struct.UnpicklerMemoProxyObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %1 = bitcast %struct.UnpicklerMemoProxyObject* %0 to i8*
  call void @PyObject_GC_UnTrack(i8* %1)
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %2, i32 0, i32 1
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %4 = bitcast %struct.UnpicklerObject* %3 to %struct._object*
  store %struct._object* %4, %struct._object** %_py_xdecref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %5, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body.1
  br label %if.end

if.else:                                          ; preds = %do.body.1
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %do.body
  br label %do.end.5

do.end.5:                                         ; preds = %if.end.4
  %13 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %14 = bitcast %struct.UnpicklerMemoProxyObject* %13 to %struct._object*
  %15 = bitcast %struct._object* %14 to i8*
  call void @PyObject_GC_Del(i8* %15)
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @UnpicklerMemoProxy_traverse(%struct.UnpicklerMemoProxyObject* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %0, i32 0, i32 1
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %tobool = icmp ne %struct.UnpicklerObject* %1, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  %2 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %3 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler1 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %3, i32 0, i32 1
  %4 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler1, align 8
  %5 = bitcast %struct.UnpicklerObject* %4 to %struct._object*
  %6 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %2(%struct._object* %5, i8* %6)
  store i32 %call, i32* %vret, align 4
  %7 = load i32, i32* %vret, align 4
  %tobool2 = icmp ne i32 %7, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %8 = load i32, i32* %vret, align 4
  store i32 %8, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal i32 @UnpicklerMemoProxy_clear(%struct.UnpicklerMemoProxyObject* %self) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %0, i32 0, i32 1
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %2 = bitcast %struct.UnpicklerObject* %1 to %struct._object*
  store %struct._object* %2, %struct._object** %_py_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %4 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler1 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %4, i32 0, i32 1
  store %struct.UnpicklerObject* null, %struct.UnpicklerObject** %unpickler1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_UnpicklerMemoProxy_clear(%struct.UnpicklerMemoProxyObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_UnpicklerMemoProxy_clear_impl(%struct.UnpicklerMemoProxyObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_UnpicklerMemoProxy_copy(%struct.UnpicklerMemoProxyObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_UnpicklerMemoProxy_copy_impl(%struct.UnpicklerMemoProxyObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_UnpicklerMemoProxy___reduce__(%struct.UnpicklerMemoProxyObject* %self, %struct._object* %_unused_ignored) #0 {
entry:
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %_unused_ignored.addr = alloca %struct._object*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  store %struct._object* %_unused_ignored, %struct._object** %_unused_ignored.addr, align 8
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_UnpicklerMemoProxy___reduce___impl(%struct.UnpicklerMemoProxyObject* %0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_UnpicklerMemoProxy_clear_impl(%struct.UnpicklerMemoProxyObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %0, i32 0, i32 1
  %1 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  call void @_Unpickler_MemoCleanup(%struct.UnpicklerObject* %1)
  %2 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler1 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %2, i32 0, i32 1
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler1, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 3
  %4 = load i64, i64* %memo_size, align 8
  %call = call %struct._object** @_Unpickler_NewMemo(i64 %4)
  %5 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler2 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %5, i32 0, i32 1
  %6 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler2, align 8
  %memo = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %6, i32 0, i32 2
  store %struct._object** %call, %struct._object*** %memo, align 8
  %7 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler3 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %7, i32 0, i32 1
  %8 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler3, align 8
  %memo4 = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %8, i32 0, i32 2
  %9 = load %struct._object**, %struct._object*** %memo4, align 8
  %cmp = icmp eq %struct._object** %9, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_UnpicklerMemoProxy_copy_impl(%struct.UnpicklerMemoProxyObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %i = alloca i64, align 8
  %new_memo = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %new_memo, align 8
  %0 = load %struct._object*, %struct._object** %new_memo, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i64, i64* %i, align 8
  %2 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %2, i32 0, i32 1
  %3 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler, align 8
  %memo_size = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %3, i32 0, i32 3
  %4 = load i64, i64* %memo_size, align 8
  %cmp1 = icmp slt i64 %1, %4
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %i, align 8
  %6 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %unpickler2 = getelementptr inbounds %struct.UnpicklerMemoProxyObject, %struct.UnpicklerMemoProxyObject* %6, i32 0, i32 1
  %7 = load %struct.UnpicklerObject*, %struct.UnpicklerObject** %unpickler2, align 8
  %memo = getelementptr inbounds %struct.UnpicklerObject, %struct.UnpicklerObject* %7, i32 0, i32 2
  %8 = load %struct._object**, %struct._object*** %memo, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %8, i64 %5
  %9 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %9, %struct._object** %value, align 8
  %10 = load %struct._object*, %struct._object** %value, align 8
  %cmp3 = icmp eq %struct._object* %10, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %for.body
  br label %for.inc

if.end.5:                                         ; preds = %for.body
  %11 = load i64, i64* %i, align 8
  %call6 = call %struct._object* @PyLong_FromSsize_t(i64 %11)
  store %struct._object* %call6, %struct._object** %key, align 8
  %12 = load %struct._object*, %struct._object** %key, align 8
  %cmp7 = icmp eq %struct._object* %12, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  br label %error

if.end.9:                                         ; preds = %if.end.5
  %13 = load %struct._object*, %struct._object** %new_memo, align 8
  %14 = load %struct._object*, %struct._object** %key, align 8
  %15 = load %struct._object*, %struct._object** %value, align 8
  %call10 = call i32 @PyDict_SetItem(%struct._object* %13, %struct._object* %14, %struct._object* %15)
  store i32 %call10, i32* %status, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.9
  %16 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  %23 = load i32, i32* %status, align 4
  %cmp14 = icmp slt i32 %23, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %do.end
  br label %error

if.end.16:                                        ; preds = %do.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.16, %if.then.4
  %24 = load i64, i64* %i, align 8
  %inc = add i64 %24, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load %struct._object*, %struct._object** %new_memo, align 8
  store %struct._object* %25, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.15, %if.then.8
  br label %do.body.17

do.body.17:                                       ; preds = %error
  %26 = load %struct._object*, %struct._object** %new_memo, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp18, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %28, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %31(%struct._object* %32)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.27, %for.end, %if.then
  %33 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %33
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_pickle_UnpicklerMemoProxy___reduce___impl(%struct.UnpicklerMemoProxyObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.UnpicklerMemoProxyObject*, align 8
  %reduce_value = alloca %struct._object*, align 8
  %constructor_args = alloca %struct._object*, align 8
  %contents = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  store %struct.UnpicklerMemoProxyObject* %self, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %0 = load %struct.UnpicklerMemoProxyObject*, %struct.UnpicklerMemoProxyObject** %self.addr, align 8
  %call = call %struct._object* @_pickle_UnpicklerMemoProxy_copy_impl(%struct.UnpicklerMemoProxyObject* %0)
  store %struct._object* %call, %struct._object** %contents, align 8
  %1 = load %struct._object*, %struct._object** %contents, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyTuple_New(i64 2)
  store %struct._object* %call1, %struct._object** %reduce_value, align 8
  %2 = load %struct._object*, %struct._object** %reduce_value, align 8
  %cmp2 = icmp eq %struct._object* %2, null
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %3 = load %struct._object*, %struct._object** %contents, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %call8 = call %struct._object* @PyTuple_New(i64 1)
  store %struct._object* %call8, %struct._object** %constructor_args, align 8
  %10 = load %struct._object*, %struct._object** %constructor_args, align 8
  %cmp9 = icmp eq %struct._object* %10, null
  br i1 %cmp9, label %if.then.10, label %if.end.33

if.then.10:                                       ; preds = %if.end.7
  br label %do.body.11

do.body.11:                                       ; preds = %if.then.10
  %11 = load %struct._object*, %struct._object** %contents, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp12, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt13, align 8
  %dec14 = add i64 %13, -1
  store i64 %dec14, i64* %ob_refcnt13, align 8
  %cmp15 = icmp ne i64 %dec14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20

if.else.17:                                       ; preds = %do.body.11
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  call void %16(%struct._object* %17)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  %18 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp23, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %20, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.22
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.22
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %23(%struct._object* %24)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.33:                                        ; preds = %if.end.7
  %25 = load %struct._object*, %struct._object** %contents, align 8
  %26 = load %struct._object*, %struct._object** %constructor_args, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %27, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  store %struct._object* %25, %struct._object** %arrayidx, align 8
  %28 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %28, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %29 = load %struct._object*, %struct._object** %reduce_value, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyTupleObject*
  %ob_item34 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %30, i32 0, i32 1
  %arrayidx35 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item34, i32 0, i64 0
  store %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDict_Type, i32 0, i32 0, i32 0), %struct._object** %arrayidx35, align 8
  %31 = load %struct._object*, %struct._object** %constructor_args, align 8
  %32 = load %struct._object*, %struct._object** %reduce_value, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyTupleObject*
  %ob_item36 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %33, i32 0, i32 1
  %arrayidx37 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item36, i32 0, i64 1
  store %struct._object* %31, %struct._object** %arrayidx37, align 8
  %34 = load %struct._object*, %struct._object** %reduce_value, align 8
  store %struct._object* %34, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.33, %do.end.32, %do.end, %if.then
  %35 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %35
}

declare i8* @PyModule_GetState(%struct._object*) #1

declare %struct._object* @PyImport_ImportModule(i8*) #1

declare %struct._object* @PyObject_GetAttrString(%struct._object*, i8*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!2 = !{i32 139836}
!3 = !{i32 139676}
